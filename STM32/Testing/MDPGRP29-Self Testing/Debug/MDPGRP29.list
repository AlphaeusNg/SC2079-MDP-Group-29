
MDPGRP29.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000986c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  080099fc  080099fc  000199fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5f0  0800a5f0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5f0  0800a5f0  0001a5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5f8  0800a5f8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5f8  0800a5f8  0001a5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5fc  0800a5fc  0001a5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800a600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000050b4  20000068  20000068  00020068  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000511c  2000511c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a795  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000038bb  00000000  00000000  0003a870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001898  00000000  00000000  0003e130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000134e  00000000  00000000  0003f9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003aa2  00000000  00000000  00040d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bea9  00000000  00000000  000447b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d84f6  00000000  00000000  00060661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006f14  00000000  00000000  00138b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0013fa6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099e4 	.word	0x080099e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080099e4 	.word	0x080099e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5c:	f001 fb86 	bl	800246c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d60:	f000 f892 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d64:	f000 fb1c 	bl	80013a0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d68:	f000 f99c 	bl	80010a4 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000d6c:	f000 fa42 	bl	80011f4 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8000d70:	f000 faec 	bl	800134c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000d74:	f000 f914 	bl	8000fa0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d78:	f000 f9e8 	bl	800114c <MX_TIM3_Init>
  MX_I2C1_Init();
 8000d7c:	f000 f8e2 	bl	8000f44 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000d80:	f001 fae8 	bl	8002354 <OLED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d84:	f005 fc3a 	bl	80065fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d88:	4a2a      	ldr	r2, [pc, #168]	; (8000e34 <main+0xdc>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	482a      	ldr	r0, [pc, #168]	; (8000e38 <main+0xe0>)
 8000d8e:	f005 fc7f 	bl	8006690 <osThreadNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a29      	ldr	r2, [pc, #164]	; (8000e3c <main+0xe4>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* creation of oled */
  oledHandle = osThreadNew(OLEDDisplay, NULL, &oled_attributes);
 8000d98:	4a29      	ldr	r2, [pc, #164]	; (8000e40 <main+0xe8>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4829      	ldr	r0, [pc, #164]	; (8000e44 <main+0xec>)
 8000d9e:	f005 fc77 	bl	8006690 <osThreadNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a28      	ldr	r2, [pc, #160]	; (8000e48 <main+0xf0>)
 8000da6:	6013      	str	r3, [r2, #0]

  /* creation of Motor */
  MotorHandle = osThreadNew(MOTOR, NULL, &Motor_attributes);
 8000da8:	4a28      	ldr	r2, [pc, #160]	; (8000e4c <main+0xf4>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4828      	ldr	r0, [pc, #160]	; (8000e50 <main+0xf8>)
 8000dae:	f005 fc6f 	bl	8006690 <osThreadNew>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a27      	ldr	r2, [pc, #156]	; (8000e54 <main+0xfc>)
 8000db6:	6013      	str	r3, [r2, #0]

  /* creation of encoder1 */
  encoder1Handle = osThreadNew(LEncoder, NULL, &encoder1_attributes);
 8000db8:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <main+0x100>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4827      	ldr	r0, [pc, #156]	; (8000e5c <main+0x104>)
 8000dbe:	f005 fc67 	bl	8006690 <osThreadNew>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a26      	ldr	r2, [pc, #152]	; (8000e60 <main+0x108>)
 8000dc6:	6013      	str	r3, [r2, #0]

  /* creation of encoder2 */
  encoder2Handle = osThreadNew(REncoder, NULL, &encoder2_attributes);
 8000dc8:	4a26      	ldr	r2, [pc, #152]	; (8000e64 <main+0x10c>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4826      	ldr	r0, [pc, #152]	; (8000e68 <main+0x110>)
 8000dce:	f005 fc5f 	bl	8006690 <osThreadNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a25      	ldr	r2, [pc, #148]	; (8000e6c <main+0x114>)
 8000dd6:	6013      	str	r3, [r2, #0]

  /* creation of startGyro */
  startGyroHandle = osThreadNew(startGyroTask, NULL, &startGyro_attributes);
 8000dd8:	4a25      	ldr	r2, [pc, #148]	; (8000e70 <main+0x118>)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4825      	ldr	r0, [pc, #148]	; (8000e74 <main+0x11c>)
 8000dde:	f005 fc57 	bl	8006690 <osThreadNew>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a24      	ldr	r2, [pc, #144]	; (8000e78 <main+0x120>)
 8000de6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000de8:	f005 fc2c 	bl	8006644 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  steering = PID_Control(total_angle);
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <main+0x124>)
 8000dee:	ed93 7b00 	vldr	d7, [r3]
 8000df2:	eeb0 0a47 	vmov.f32	s0, s14
 8000df6:	eef0 0a67 	vmov.f32	s1, s15
 8000dfa:	f000 fc9d 	bl	8001738 <PID_Control>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <main+0x128>)
 8000e02:	6013      	str	r3, [r2, #0]
	  if (steering<75)
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <main+0x128>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b4a      	cmp	r3, #74	; 0x4a
 8000e0a:	dc03      	bgt.n	8000e14 <main+0xbc>
	  {
		  steering = 75;
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <main+0x128>)
 8000e0e:	224b      	movs	r2, #75	; 0x4b
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e006      	b.n	8000e22 <main+0xca>
	  }
	  else if (steering>210)
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <main+0x128>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2bd2      	cmp	r3, #210	; 0xd2
 8000e1a:	dd02      	ble.n	8000e22 <main+0xca>
	  {
		  steering = 210;
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <main+0x128>)
 8000e1e:	22d2      	movs	r2, #210	; 0xd2
 8000e20:	601a      	str	r2, [r3, #0]
	  }
	  htim1.Instance->CCR4 = steering;
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <main+0x128>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <main+0x12c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	641a      	str	r2, [r3, #64]	; 0x40
	  osDelay(10);
 8000e2c:	200a      	movs	r0, #10
 8000e2e:	f005 fcc1 	bl	80067b4 <osDelay>
	  steering = PID_Control(total_angle);
 8000e32:	e7db      	b.n	8000dec <main+0x94>
 8000e34:	08009a68 	.word	0x08009a68
 8000e38:	080014b9 	.word	0x080014b9
 8000e3c:	20000240 	.word	0x20000240
 8000e40:	08009a8c 	.word	0x08009a8c
 8000e44:	0800162d 	.word	0x0800162d
 8000e48:	20000244 	.word	0x20000244
 8000e4c:	08009ab0 	.word	0x08009ab0
 8000e50:	0800178d 	.word	0x0800178d
 8000e54:	20000248 	.word	0x20000248
 8000e58:	08009ad4 	.word	0x08009ad4
 8000e5c:	0800180d 	.word	0x0800180d
 8000e60:	2000024c 	.word	0x2000024c
 8000e64:	08009af8 	.word	0x08009af8
 8000e68:	08001895 	.word	0x08001895
 8000e6c:	20000250 	.word	0x20000250
 8000e70:	08009b1c 	.word	0x08009b1c
 8000e74:	08001921 	.word	0x08001921
 8000e78:	20000254 	.word	0x20000254
 8000e7c:	20000258 	.word	0x20000258
 8000e80:	20000004 	.word	0x20000004
 8000e84:	200000d8 	.word	0x200000d8

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b094      	sub	sp, #80	; 0x50
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0320 	add.w	r3, r7, #32
 8000e92:	2230      	movs	r2, #48	; 0x30
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f008 f920 	bl	80090dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <SystemClock_Config+0xb4>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <SystemClock_Config+0xb4>)
 8000eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <SystemClock_Config+0xb4>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <SystemClock_Config+0xb8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <SystemClock_Config+0xb8>)
 8000ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <SystemClock_Config+0xb8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eec:	2310      	movs	r3, #16
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	f107 0320 	add.w	r3, r7, #32
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 fee3 	bl	8003cc4 <HAL_RCC_OscConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f04:	f000 fdd6 	bl	8001ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f08:	230f      	movs	r3, #15
 8000f0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 f946 	bl	80041b4 <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f2e:	f000 fdc1 	bl	8001ab4 <Error_Handler>
  }
}
 8000f32:	bf00      	nop
 8000f34:	3750      	adds	r7, #80	; 0x50
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40007000 	.word	0x40007000

08000f44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f4a:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <MX_I2C1_Init+0x54>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <MX_I2C1_Init+0x58>)
 8000f52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f82:	f001 fe7d 	bl	8002c80 <HAL_I2C_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f8c:	f000 fd92 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000084 	.word	0x20000084
 8000f98:	40005400 	.word	0x40005400
 8000f9c:	000186a0 	.word	0x000186a0

08000fa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b092      	sub	sp, #72	; 0x48
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
 8000fc0:	615a      	str	r2, [r3, #20]
 8000fc2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f008 f886 	bl	80090dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <MX_TIM1_Init+0xfc>)
 8000fd2:	4a33      	ldr	r2, [pc, #204]	; (80010a0 <MX_TIM1_Init+0x100>)
 8000fd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <MX_TIM1_Init+0xfc>)
 8000fd8:	22a0      	movs	r2, #160	; 0xa0
 8000fda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <MX_TIM1_Init+0xfc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <MX_TIM1_Init+0xfc>)
 8000fe4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fe8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fea:	4b2c      	ldr	r3, [pc, #176]	; (800109c <MX_TIM1_Init+0xfc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	; (800109c <MX_TIM1_Init+0xfc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b29      	ldr	r3, [pc, #164]	; (800109c <MX_TIM1_Init+0xfc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ffc:	4827      	ldr	r0, [pc, #156]	; (800109c <MX_TIM1_Init+0xfc>)
 8000ffe:	f003 fb08 	bl	8004612 <HAL_TIM_PWM_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001008:	f000 fd54 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001014:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001018:	4619      	mov	r1, r3
 800101a:	4820      	ldr	r0, [pc, #128]	; (800109c <MX_TIM1_Init+0xfc>)
 800101c:	f004 f9ea 	bl	80053f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001026:	f000 fd45 	bl	8001ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102a:	2360      	movs	r3, #96	; 0x60
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	220c      	movs	r2, #12
 8001048:	4619      	mov	r1, r3
 800104a:	4814      	ldr	r0, [pc, #80]	; (800109c <MX_TIM1_Init+0xfc>)
 800104c:	f003 fd2c 	bl	8004aa8 <HAL_TIM_PWM_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8001056:	f000 fd2d 	bl	8001ab4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800106e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001072:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4619      	mov	r1, r3
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <MX_TIM1_Init+0xfc>)
 800107e:	f004 fa35 	bl	80054ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001088:	f000 fd14 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800108c:	4803      	ldr	r0, [pc, #12]	; (800109c <MX_TIM1_Init+0xfc>)
 800108e:	f000 fe69 	bl	8001d64 <HAL_TIM_MspPostInit>

}
 8001092:	bf00      	nop
 8001094:	3748      	adds	r7, #72	; 0x48
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200000d8 	.word	0x200000d8
 80010a0:	40010000 	.word	0x40010000

080010a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	; 0x30
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	2224      	movs	r2, #36	; 0x24
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f008 f812 	bl	80090dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010c0:	4b21      	ldr	r3, [pc, #132]	; (8001148 <MX_TIM2_Init+0xa4>)
 80010c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_TIM2_Init+0xa4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <MX_TIM2_Init+0xa4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <MX_TIM2_Init+0xa4>)
 80010d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_TIM2_Init+0xa4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <MX_TIM2_Init+0xa4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010e8:	2303      	movs	r3, #3
 80010ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010f0:	2301      	movs	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80010f8:	230a      	movs	r3, #10
 80010fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001100:	2301      	movs	r3, #1
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001108:	230a      	movs	r3, #10
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4619      	mov	r1, r3
 8001112:	480d      	ldr	r0, [pc, #52]	; (8001148 <MX_TIM2_Init+0xa4>)
 8001114:	f003 fb94 	bl	8004840 <HAL_TIM_Encoder_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800111e:	f000 fcc9 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4619      	mov	r1, r3
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <MX_TIM2_Init+0xa4>)
 8001130:	f004 f960 	bl	80053f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800113a:	f000 fcbb 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	3730      	adds	r7, #48	; 0x30
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000120 	.word	0x20000120

0800114c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08c      	sub	sp, #48	; 0x30
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2224      	movs	r2, #36	; 0x24
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f007 ffbe 	bl	80090dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001168:	4b20      	ldr	r3, [pc, #128]	; (80011ec <MX_TIM3_Init+0xa0>)
 800116a:	4a21      	ldr	r2, [pc, #132]	; (80011f0 <MX_TIM3_Init+0xa4>)
 800116c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_TIM3_Init+0xa0>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_TIM3_Init+0xa0>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_TIM3_Init+0xa0>)
 800117c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001180:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_TIM3_Init+0xa0>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_TIM3_Init+0xa0>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800118e:	2303      	movs	r3, #3
 8001190:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001196:	2301      	movs	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800119e:	230a      	movs	r3, #10
 80011a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011a6:	2301      	movs	r3, #1
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80011ae:	230a      	movs	r3, #10
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4619      	mov	r1, r3
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <MX_TIM3_Init+0xa0>)
 80011ba:	f003 fb41 	bl	8004840 <HAL_TIM_Encoder_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80011c4:	f000 fc76 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_TIM3_Init+0xa0>)
 80011d6:	f004 f90d 	bl	80053f4 <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80011e0:	f000 fc68 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3730      	adds	r7, #48	; 0x30
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000168 	.word	0x20000168
 80011f0:	40000400 	.word	0x40000400

080011f4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b096      	sub	sp, #88	; 0x58
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]
 8001222:	615a      	str	r2, [r3, #20]
 8001224:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2220      	movs	r2, #32
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f007 ff55 	bl	80090dc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001232:	4b44      	ldr	r3, [pc, #272]	; (8001344 <MX_TIM8_Init+0x150>)
 8001234:	4a44      	ldr	r2, [pc, #272]	; (8001348 <MX_TIM8_Init+0x154>)
 8001236:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001238:	4b42      	ldr	r3, [pc, #264]	; (8001344 <MX_TIM8_Init+0x150>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <MX_TIM8_Init+0x150>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001244:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <MX_TIM8_Init+0x150>)
 8001246:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800124a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <MX_TIM8_Init+0x150>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001252:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <MX_TIM8_Init+0x150>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001258:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <MX_TIM8_Init+0x150>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800125e:	4839      	ldr	r0, [pc, #228]	; (8001344 <MX_TIM8_Init+0x150>)
 8001260:	f003 f988 	bl	8004574 <HAL_TIM_Base_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800126a:	f000 fc23 	bl	8001ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001272:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001274:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001278:	4619      	mov	r1, r3
 800127a:	4832      	ldr	r0, [pc, #200]	; (8001344 <MX_TIM8_Init+0x150>)
 800127c:	f003 fcd6 	bl	8004c2c <HAL_TIM_ConfigClockSource>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001286:	f000 fc15 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800128a:	482e      	ldr	r0, [pc, #184]	; (8001344 <MX_TIM8_Init+0x150>)
 800128c:	f003 f9c1 	bl	8004612 <HAL_TIM_PWM_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001296:	f000 fc0d 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012a6:	4619      	mov	r1, r3
 80012a8:	4826      	ldr	r0, [pc, #152]	; (8001344 <MX_TIM8_Init+0x150>)
 80012aa:	f004 f8a3 	bl	80053f4 <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80012b4:	f000 fbfe 	bl	8001ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b8:	2360      	movs	r3, #96	; 0x60
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012c4:	2300      	movs	r3, #0
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d8:	2200      	movs	r2, #0
 80012da:	4619      	mov	r1, r3
 80012dc:	4819      	ldr	r0, [pc, #100]	; (8001344 <MX_TIM8_Init+0x150>)
 80012de:	f003 fbe3 	bl	8004aa8 <HAL_TIM_PWM_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80012e8:	f000 fbe4 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	2204      	movs	r2, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4813      	ldr	r0, [pc, #76]	; (8001344 <MX_TIM8_Init+0x150>)
 80012f6:	f003 fbd7 	bl	8004aa8 <HAL_TIM_PWM_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001300:	f000 fbd8 	bl	8001ab4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4619      	mov	r1, r3
 8001326:	4807      	ldr	r0, [pc, #28]	; (8001344 <MX_TIM8_Init+0x150>)
 8001328:	f004 f8e0 	bl	80054ec <HAL_TIMEx_ConfigBreakDeadTime>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001332:	f000 fbbf 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <MX_TIM8_Init+0x150>)
 8001338:	f000 fd14 	bl	8001d64 <HAL_TIM_MspPostInit>

}
 800133c:	bf00      	nop
 800133e:	3758      	adds	r7, #88	; 0x58
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200001b0 	.word	0x200001b0
 8001348:	40010400 	.word	0x40010400

0800134c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_USART3_UART_Init+0x50>)
 8001354:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001384:	f004 f904 	bl	8005590 <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800138e:	f000 fb91 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200001f8 	.word	0x200001f8
 800139c:	40004800 	.word	0x40004800

080013a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <MX_GPIO_Init+0x108>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a3a      	ldr	r2, [pc, #232]	; (80014a8 <MX_GPIO_Init+0x108>)
 80013c0:	f043 0310 	orr.w	r3, r3, #16
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b38      	ldr	r3, [pc, #224]	; (80014a8 <MX_GPIO_Init+0x108>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <MX_GPIO_Init+0x108>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a33      	ldr	r2, [pc, #204]	; (80014a8 <MX_GPIO_Init+0x108>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <MX_GPIO_Init+0x108>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <MX_GPIO_Init+0x108>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a2c      	ldr	r2, [pc, #176]	; (80014a8 <MX_GPIO_Init+0x108>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <MX_GPIO_Init+0x108>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <MX_GPIO_Init+0x108>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a25      	ldr	r2, [pc, #148]	; (80014a8 <MX_GPIO_Init+0x108>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <MX_GPIO_Init+0x108>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800142c:	481f      	ldr	r0, [pc, #124]	; (80014ac <MX_GPIO_Init+0x10c>)
 800142e:	f001 fbf3 	bl	8002c18 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	481e      	ldr	r0, [pc, #120]	; (80014b0 <MX_GPIO_Init+0x110>)
 8001438:	f001 fbee 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001442:	481c      	ldr	r0, [pc, #112]	; (80014b4 <MX_GPIO_Init+0x114>)
 8001444:	f001 fbe8 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001448:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 800144c:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4812      	ldr	r0, [pc, #72]	; (80014ac <MX_GPIO_Init+0x10c>)
 8001462:	f001 fa3d 	bl	80028e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_GPIO_Init+0x114>)
 8001480:	f001 fa2e 	bl	80028e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001484:	233c      	movs	r3, #60	; 0x3c
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001490:	2302      	movs	r3, #2
 8001492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_GPIO_Init+0x110>)
 800149c:	f001 fa20 	bl	80028e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a0:	bf00      	nop
 80014a2:	3728      	adds	r7, #40	; 0x28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400

080014b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t ch = 'A';
 80014c0:	2341      	movs	r3, #65	; 0x41
 80014c2:	73fb      	strb	r3, [r7, #15]
	  for(;;)
	  {
		HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,0xFFFF);
 80014c4:	f107 010f 	add.w	r1, r7, #15
 80014c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014cc:	2201      	movs	r2, #1
 80014ce:	480b      	ldr	r0, [pc, #44]	; (80014fc <StartDefaultTask+0x44>)
 80014d0:	f004 f8ae 	bl	8005630 <HAL_UART_Transmit>
		if (ch<'Z')
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	2b59      	cmp	r3, #89	; 0x59
 80014d8:	d804      	bhi.n	80014e4 <StartDefaultTask+0x2c>
		{
			ch++;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	3301      	adds	r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	e001      	b.n	80014e8 <StartDefaultTask+0x30>

		}
		else ch = 'A';
 80014e4:	2341      	movs	r3, #65	; 0x41
 80014e6:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80014e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <StartDefaultTask+0x48>)
 80014ee:	f001 fbac 	bl	8002c4a <HAL_GPIO_TogglePin>
		osDelay(5000);
 80014f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80014f6:	f005 f95d 	bl	80067b4 <osDelay>
		HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,0xFFFF);
 80014fa:	e7e3      	b.n	80014c4 <StartDefaultTask+0xc>
 80014fc:	200001f8 	.word	0x200001f8
 8001500:	40021000 	.word	0x40021000

08001504 <readByte>:
	  }
  /* USER CODE END 5 */
}

void readByte(uint8_t addr, uint8_t* data){
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af02      	add	r7, sp, #8
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 8001510:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <readByte+0x4c>)
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress<<1, gyroBuffer, 1, 10);
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <readByte+0x50>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	b299      	uxth	r1, r3
 8001520:	230a      	movs	r3, #10
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2301      	movs	r3, #1
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <readByte+0x4c>)
 8001528:	480b      	ldr	r0, [pc, #44]	; (8001558 <readByte+0x54>)
 800152a:	f001 fced 	bl	8002f08 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress<<1, data, 2, 20);
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <readByte+0x50>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	b299      	uxth	r1, r3
 8001538:	2314      	movs	r3, #20
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2302      	movs	r3, #2
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <readByte+0x54>)
 8001542:	f001 fddf 	bl	8003104 <HAL_I2C_Master_Receive>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000260 	.word	0x20000260
 8001554:	20000000 	.word	0x20000000
 8001558:	20000084 	.word	0x20000084

0800155c <writeByte>:

void writeByte(uint8_t addr, uint8_t data){
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af02      	add	r7, sp, #8
 8001562:	4603      	mov	r3, r0
 8001564:	460a      	mov	r2, r1
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	4613      	mov	r3, r2
 800156a:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 800156c:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <writeByte+0x3c>)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 8001572:	4a09      	ldr	r2, [pc, #36]	; (8001598 <writeByte+0x3c>)
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <writeByte+0x40>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b29b      	uxth	r3, r3
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	b299      	uxth	r1, r3
 8001582:	2314      	movs	r3, #20
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2302      	movs	r3, #2
 8001588:	4a03      	ldr	r2, [pc, #12]	; (8001598 <writeByte+0x3c>)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <writeByte+0x44>)
 800158c:	f001 fcbc 	bl	8002f08 <HAL_I2C_Master_Transmit>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000260 	.word	0x20000260
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000084 	.word	0x20000084

080015a4 <gyroInit>:

void gyroInit(){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 80015a8:	2100      	movs	r1, #0
 80015aa:	2006      	movs	r0, #6
 80015ac:	f7ff ffd6 	bl	800155c <writeByte>
	osDelay(10);
 80015b0:	200a      	movs	r0, #10
 80015b2:	f005 f8ff 	bl	80067b4 <osDelay>
	writeByte(0x03, 0x80);
 80015b6:	2180      	movs	r1, #128	; 0x80
 80015b8:	2003      	movs	r0, #3
 80015ba:	f7ff ffcf 	bl	800155c <writeByte>
	osDelay(10);
 80015be:	200a      	movs	r0, #10
 80015c0:	f005 f8f8 	bl	80067b4 <osDelay>
	writeByte(0x07, 0x07);
 80015c4:	2107      	movs	r1, #7
 80015c6:	2007      	movs	r0, #7
 80015c8:	f7ff ffc8 	bl	800155c <writeByte>
	osDelay(10);
 80015cc:	200a      	movs	r0, #10
 80015ce:	f005 f8f1 	bl	80067b4 <osDelay>
	writeByte(0x06, 0x01);
 80015d2:	2101      	movs	r1, #1
 80015d4:	2006      	movs	r0, #6
 80015d6:	f7ff ffc1 	bl	800155c <writeByte>
	osDelay(10);
 80015da:	200a      	movs	r0, #10
 80015dc:	f005 f8ea 	bl	80067b4 <osDelay>
	writeByte(0x7F, 0x20);
 80015e0:	2120      	movs	r1, #32
 80015e2:	207f      	movs	r0, #127	; 0x7f
 80015e4:	f7ff ffba 	bl	800155c <writeByte>
	osDelay(10);
 80015e8:	200a      	movs	r0, #10
 80015ea:	f005 f8e3 	bl	80067b4 <osDelay>
	writeByte(0x01, 0x2F);
 80015ee:	212f      	movs	r1, #47	; 0x2f
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff ffb3 	bl	800155c <writeByte>
	osDelay(10);
 80015f6:	200a      	movs	r0, #10
 80015f8:	f005 f8dc 	bl	80067b4 <osDelay>
	writeByte(0x0, 0x00);
 80015fc:	2100      	movs	r1, #0
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff ffac 	bl	800155c <writeByte>
	osDelay(10);
 8001604:	200a      	movs	r0, #10
 8001606:	f005 f8d5 	bl	80067b4 <osDelay>
	writeByte(0x7F, 0x00);
 800160a:	2100      	movs	r1, #0
 800160c:	207f      	movs	r0, #127	; 0x7f
 800160e:	f7ff ffa5 	bl	800155c <writeByte>
	osDelay(10);
 8001612:	200a      	movs	r0, #10
 8001614:	f005 f8ce 	bl	80067b4 <osDelay>
	writeByte(0x07, 0x00);
 8001618:	2100      	movs	r1, #0
 800161a:	2007      	movs	r0, #7
 800161c:	f7ff ff9e 	bl	800155c <writeByte>
	osDelay(10);
 8001620:	200a      	movs	r0, #10
 8001622:	f005 f8c7 	bl	80067b4 <osDelay>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <OLEDDisplay>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OLEDDisplay */
void OLEDDisplay(void *argument)
{
 800162c:	b5b0      	push	{r4, r5, r7, lr}
 800162e:	b08e      	sub	sp, #56	; 0x38
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OLEDDisplay */
	uint8_t righty[20] = {0};
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
 8001638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
	uint8_t rightyy[20] = {0};
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	f107 0310 	add.w	r3, r7, #16
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  for(;;)
  {
  //sprintf(righty,"Gyro: %d \0", (int)total_angle);
	int decimals = abs((int)((total_angle-(int)(total_angle))*1000));
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <OLEDDisplay+0xd0>)
 800165a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800165e:	4b27      	ldr	r3, [pc, #156]	; (80016fc <OLEDDisplay+0xd0>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff f9d0 	bl	8000a0c <__aeabi_d2iz>
 800166c:	4603      	mov	r3, r0
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff50 	bl	8000514 <__aeabi_i2d>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe fdfc 	bl	8000278 <__aeabi_dsub>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <OLEDDisplay+0xd4>)
 800168e:	f7fe ffab 	bl	80005e8 <__aeabi_dmul>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff f9b7 	bl	8000a0c <__aeabi_d2iz>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bfb8      	it	lt
 80016a4:	425b      	neglt	r3, r3
 80016a6:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(righty,"Gyro: %d \0", (int)total_angle);
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <OLEDDisplay+0xd0>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f7ff f9ab 	bl	8000a0c <__aeabi_d2iz>
 80016b6:	4602      	mov	r2, r0
 80016b8:	f107 0320 	add.w	r3, r7, #32
 80016bc:	4911      	ldr	r1, [pc, #68]	; (8001704 <OLEDDisplay+0xd8>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f007 fcec 	bl	800909c <siprintf>
	OLED_ShowString(10, 30, righty);
 80016c4:	f107 0320 	add.w	r3, r7, #32
 80016c8:	461a      	mov	r2, r3
 80016ca:	211e      	movs	r1, #30
 80016cc:	200a      	movs	r0, #10
 80016ce:	f000 fe0f 	bl	80022f0 <OLED_ShowString>
	sprintf(rightyy,"S: %d \0", steering);
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <OLEDDisplay+0xdc>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	490c      	ldr	r1, [pc, #48]	; (800170c <OLEDDisplay+0xe0>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f007 fcdd 	bl	800909c <siprintf>
	OLED_ShowString(10, 40, rightyy);
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	461a      	mov	r2, r3
 80016e8:	2128      	movs	r1, #40	; 0x28
 80016ea:	200a      	movs	r0, #10
 80016ec:	f000 fe00 	bl	80022f0 <OLED_ShowString>
	OLED_Refresh_Gram();
 80016f0:	f000 fc8a 	bl	8002008 <OLED_Refresh_Gram>
    osDelay(1);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f005 f85d 	bl	80067b4 <osDelay>
  {
 80016fa:	e7ad      	b.n	8001658 <OLEDDisplay+0x2c>
 80016fc:	20000258 	.word	0x20000258
 8001700:	408f4000 	.word	0x408f4000
 8001704:	08009a3c 	.word	0x08009a3c
 8001708:	20000004 	.word	0x20000004
 800170c:	08009a48 	.word	0x08009a48

08001710 <buzzerBeep>:
* @retval None
*/
/* USER CODE END Header_MOTOR */

void buzzerBeep()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer On
 8001714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001718:	4806      	ldr	r0, [pc, #24]	; (8001734 <buzzerBeep+0x24>)
 800171a:	f001 fa96 	bl	8002c4a <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800171e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001722:	f000 ff15 	bl	8002550 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer Off
 8001726:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800172a:	4802      	ldr	r0, [pc, #8]	; (8001734 <buzzerBeep+0x24>)
 800172c:	f001 fa8d 	bl	8002c4a <HAL_GPIO_TogglePin>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40020400 	.word	0x40020400

08001738 <PID_Control>:

int PID_Control(double error)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	ed87 0b00 	vstr	d0, [r7]
	float kp = 3;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <PID_Control+0x50>)
 8001744:	60fb      	str	r3, [r7, #12]
	int steering = 142+kp*error;
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f7fe fef6 	bl	8000538 <__aeabi_f2d>
 800174c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001750:	f7fe ff4a 	bl	80005e8 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	a308      	add	r3, pc, #32	; (adr r3, 8001780 <PID_Control+0x48>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7fe fd8b 	bl	800027c <__adddf3>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f94d 	bl	8000a0c <__aeabi_d2iz>
 8001772:	4603      	mov	r3, r0
 8001774:	60bb      	str	r3, [r7, #8]
	return(steering);
 8001776:	68bb      	ldr	r3, [r7, #8]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	00000000 	.word	0x00000000
 8001784:	4061c000 	.word	0x4061c000
 8001788:	40400000 	.word	0x40400000

0800178c <MOTOR>:
	return 1;
}


void MOTOR(void *argument)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	uint16_t pwmVal  = 1000;
 8001794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001798:	81fb      	strh	r3, [r7, #14]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800179a:	2100      	movs	r1, #0
 800179c:	4818      	ldr	r0, [pc, #96]	; (8001800 <MOTOR+0x74>)
 800179e:	f002 ff87 	bl	80046b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80017a2:	2104      	movs	r1, #4
 80017a4:	4816      	ldr	r0, [pc, #88]	; (8001800 <MOTOR+0x74>)
 80017a6:	f002 ff83 	bl	80046b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80017aa:	210c      	movs	r1, #12
 80017ac:	4815      	ldr	r0, [pc, #84]	; (8001804 <MOTOR+0x78>)
 80017ae:	f002 ff7f 	bl	80046b0 <HAL_TIM_PWM_Start>
		  } */

// Test on straight movement as well as turning left/right
	  for(;;)
	  {
		  while(pwmVal<1100)
 80017b2:	e013      	b.n	80017dc <MOTOR+0x50>
		  {
			  // Left Motor (Motor A)
			  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2104      	movs	r1, #4
 80017b8:	4813      	ldr	r0, [pc, #76]	; (8001808 <MOTOR+0x7c>)
 80017ba:	f001 fa2d 	bl	8002c18 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA,AIN1_Pin, GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	2108      	movs	r1, #8
 80017c2:	4811      	ldr	r0, [pc, #68]	; (8001808 <MOTOR+0x7c>)
 80017c4:	f001 fa28 	bl	8002c18 <HAL_GPIO_WritePin>

			  // Right Motor (Motor B)
			  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2120      	movs	r1, #32
 80017cc:	480e      	ldr	r0, [pc, #56]	; (8001808 <MOTOR+0x7c>)
 80017ce:	f001 fa23 	bl	8002c18 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	2110      	movs	r1, #16
 80017d6:	480c      	ldr	r0, [pc, #48]	; (8001808 <MOTOR+0x7c>)
 80017d8:	f001 fa1e 	bl	8002c18 <HAL_GPIO_WritePin>
		  while(pwmVal<1100)
 80017dc:	89fb      	ldrh	r3, [r7, #14]
 80017de:	f240 424b 	movw	r2, #1099	; 0x44b
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d9e6      	bls.n	80017b4 <MOTOR+0x28>
			//	  osDelay(2000);
		    //	  htim1.Instance->CCR4 = 85; //left
			//	  osDelay(2000);
			  }

			  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal);
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MOTOR+0x74>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	89fa      	ldrh	r2, [r7, #14]
 80017ec:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); //added 800 more pwm on right motor
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <MOTOR+0x74>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	89fa      	ldrh	r2, [r7, #14]
 80017f4:	639a      	str	r2, [r3, #56]	; 0x38
			  osDelay(10);
 80017f6:	200a      	movs	r0, #10
 80017f8:	f004 ffdc 	bl	80067b4 <osDelay>
		  while(pwmVal<1100)
 80017fc:	e7ee      	b.n	80017dc <MOTOR+0x50>
 80017fe:	bf00      	nop
 8001800:	200001b0 	.word	0x200001b0
 8001804:	200000d8 	.word	0x200000d8
 8001808:	40020000 	.word	0x40020000

0800180c <LEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEncoder */
void LEncoder(void *argument)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001814:	213c      	movs	r1, #60	; 0x3c
 8001816:	481d      	ldr	r0, [pc, #116]	; (800188c <LEncoder+0x80>)
 8001818:	f003 f8b8 	bl	800498c <HAL_TIM_Encoder_Start>
	int cnt2;
	int dirL = 1;
 800181c:	2301      	movs	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8001820:	f000 fe8a 	bl	8002538 <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 8001826:	f000 fe87 	bl	8002538 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b0a      	cmp	r3, #10
 8001832:	d9f8      	bls.n	8001826 <LEncoder+0x1a>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <LEncoder+0x80>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	60bb      	str	r3, [r7, #8]

			if (cnt2 > 32000) {
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001842:	dd06      	ble.n	8001852 <LEncoder+0x46>
				dirL = 1;
 8001844:	2301      	movs	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt2);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	e004      	b.n	800185c <LEncoder+0x50>
			} else {
				dirL = -1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	617b      	str	r3, [r7, #20]
				diff = cnt2;
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	613b      	str	r3, [r7, #16]
			}
			if (dirL == 1) {
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d106      	bne.n	8001870 <LEncoder+0x64>
				leftEncoderVal -= diff;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <LEncoder+0x84>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <LEncoder+0x84>)
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e005      	b.n	800187c <LEncoder+0x70>
			} else {
				leftEncoderVal += diff;
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <LEncoder+0x84>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4413      	add	r3, r2
 8001878:	4a05      	ldr	r2, [pc, #20]	; (8001890 <LEncoder+0x84>)
 800187a:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <LEncoder+0x80>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2200      	movs	r2, #0
 8001882:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8001884:	f000 fe58 	bl	8002538 <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - tick > 10L) {
 800188a:	e7cc      	b.n	8001826 <LEncoder+0x1a>
 800188c:	20000120 	.word	0x20000120
 8001890:	20000278 	.word	0x20000278

08001894 <REncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_REncoder */
void REncoder(void *argument)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800189c:	213c      	movs	r1, #60	; 0x3c
 800189e:	481d      	ldr	r0, [pc, #116]	; (8001914 <REncoder+0x80>)
 80018a0:	f003 f874 	bl	800498c <HAL_TIM_Encoder_Start>
	int cnt1;
	int dirR = 1;
 80018a4:	2301      	movs	r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 80018a8:	f000 fe46 	bl	8002538 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 80018ae:	f000 fe43 	bl	8002538 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b0a      	cmp	r3, #10
 80018ba:	d9f8      	bls.n	80018ae <REncoder+0x1a>
			cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <REncoder+0x80>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	60bb      	str	r3, [r7, #8]
			if (cnt1 > 32000) {
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80018ca:	dd06      	ble.n	80018da <REncoder+0x46>
				dirR = 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt1);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	e004      	b.n	80018e4 <REncoder+0x50>
			} else {
				dirR = -1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	617b      	str	r3, [r7, #20]
				diff = cnt1;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	613b      	str	r3, [r7, #16]
			}

			if (dirR == 1) {
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d106      	bne.n	80018f8 <REncoder+0x64>
				rightEncoderVal += diff;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <REncoder+0x84>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <REncoder+0x84>)
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e005      	b.n	8001904 <REncoder+0x70>
			} else {
				rightEncoderVal -= diff;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <REncoder+0x84>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	4a05      	ldr	r2, [pc, #20]	; (8001918 <REncoder+0x84>)
 8001902:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <REncoder+0x80>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 800190c:	f000 fe14 	bl	8002538 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - tick > 10L) {
 8001912:	e7cc      	b.n	80018ae <REncoder+0x1a>
 8001914:	20000168 	.word	0x20000168
 8001918:	20000274 	.word	0x20000274
 800191c:	00000000 	.word	0x00000000

08001920 <startGyroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGyroTask */
void startGyroTask(void *argument)
{
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGyroTask */
		gyroInit();
 8001928:	f7ff fe3c 	bl	80015a4 <gyroInit>
		uint8_t val[2] = {0,0};
 800192c:	2300      	movs	r3, #0
 800192e:	813b      	strh	r3, [r7, #8]
		int16_t angular_speed = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	817b      	strh	r3, [r7, #10]
		uint32_t tick = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
		double offset = 0;
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double trash= 0;
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		int i=0;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]

		//calibration phase
		while(i<100){
 8001954:	e048      	b.n	80019e8 <startGyroTask+0xc8>
			osDelay(50);
 8001956:	2032      	movs	r0, #50	; 0x32
 8001958:	f004 ff2c 	bl	80067b4 <osDelay>
			readByte(0x37, val);
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	4619      	mov	r1, r3
 8001962:	2037      	movs	r0, #55	; 0x37
 8001964:	f7ff fdce 	bl	8001504 <readByte>
			angular_speed = (val[0] << 8) | val[1];
 8001968:	7a3b      	ldrb	r3, [r7, #8]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	b21a      	sxth	r2, r3
 800196e:	7a7b      	ldrb	r3, [r7, #9]
 8001970:	b21b      	sxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	817b      	strh	r3, [r7, #10]
			trash +=(double)((double)angular_speed)*((HAL_GetTick() - tick)/16400.0);
 8001976:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fdca 	bl	8000514 <__aeabi_i2d>
 8001980:	4604      	mov	r4, r0
 8001982:	460d      	mov	r5, r1
 8001984:	f000 fdd8 	bl	8002538 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fdb0 	bl	80004f4 <__aeabi_ui2d>
 8001994:	a345      	add	r3, pc, #276	; (adr r3, 8001aac <startGyroTask+0x18c>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	f7fe ff4f 	bl	800083c <__aeabi_ddiv>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4620      	mov	r0, r4
 80019a4:	4629      	mov	r1, r5
 80019a6:	f7fe fe1f 	bl	80005e8 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019b2:	f7fe fc63 	bl	800027c <__adddf3>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
			offset += angular_speed;
 80019be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fda6 	bl	8000514 <__aeabi_i2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019d0:	f7fe fc54 	bl	800027c <__adddf3>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
			tick = HAL_GetTick();
 80019dc:	f000 fdac 	bl	8002538 <HAL_GetTick>
 80019e0:	6278      	str	r0, [r7, #36]	; 0x24
			i++;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3301      	adds	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
		while(i<100){
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b63      	cmp	r3, #99	; 0x63
 80019ec:	ddb3      	ble.n	8001956 <startGyroTask+0x36>
		}

		//calculate gyroscope bias(average offset)
		offset = offset/i;
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f7fe fd90 	bl	8000514 <__aeabi_i2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019fc:	f7fe ff1e 	bl	800083c <__aeabi_ddiv>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	e9c7 2306 	strd	r2, r3, [r7, #24]
		buzzerBeep();
 8001a08:	f7ff fe82 	bl	8001710 <buzzerBeep>
		tick = HAL_GetTick();
 8001a0c:	f000 fd94 	bl	8002538 <HAL_GetTick>
 8001a10:	6278      	str	r0, [r7, #36]	; 0x24


	  /* Infinite loop */
	  for(;;)
	  {
			osDelay(50);
 8001a12:	2032      	movs	r0, #50	; 0x32
 8001a14:	f004 fece 	bl	80067b4 <osDelay>
			readByte(0x37, val);
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	2037      	movs	r0, #55	; 0x37
 8001a20:	f7ff fd70 	bl	8001504 <readByte>
			angular_speed = (val[0] << 8) | val[1];
 8001a24:	7a3b      	ldrb	r3, [r7, #8]
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	b21a      	sxth	r2, r3
 8001a2a:	7a7b      	ldrb	r3, [r7, #9]
 8001a2c:	b21b      	sxth	r3, r3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	817b      	strh	r3, [r7, #10]
			//subtract gyroscope bias from measurement to compensate for drift
			total_angle +=(double)((double)angular_speed - offset)*((HAL_GetTick() - tick)/16400.0); //extra calibration +0.00003
 8001a32:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fd6c 	bl	8000514 <__aeabi_i2d>
 8001a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a40:	f7fe fc1a 	bl	8000278 <__aeabi_dsub>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4614      	mov	r4, r2
 8001a4a:	461d      	mov	r5, r3
 8001a4c:	f000 fd74 	bl	8002538 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd4c 	bl	80004f4 <__aeabi_ui2d>
 8001a5c:	a313      	add	r3, pc, #76	; (adr r3, 8001aac <startGyroTask+0x18c>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe feeb 	bl	800083c <__aeabi_ddiv>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f7fe fdbb 	bl	80005e8 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <startGyroTask+0x188>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fbfc 	bl	800027c <__adddf3>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4907      	ldr	r1, [pc, #28]	; (8001aa8 <startGyroTask+0x188>)
 8001a8a:	e9c1 2300 	strd	r2, r3, [r1]
			i -= angular_speed;
 8001a8e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	60fb      	str	r3, [r7, #12]
			tick = HAL_GetTick();
 8001a98:	f000 fd4e 	bl	8002538 <HAL_GetTick>
 8001a9c:	6278      	str	r0, [r7, #36]	; 0x24
			i++;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
			osDelay(50);
 8001aa4:	e7b5      	b.n	8001a12 <startGyroTask+0xf2>
 8001aa6:	bf00      	nop
 8001aa8:	20000258 	.word	0x20000258
 8001aac:	00000000 	.word	0x00000000
 8001ab0:	40d00400 	.word	0x40d00400

08001ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){
 8001abc:	e7fe      	b.n	8001abc <Error_Handler+0x8>
	...

08001ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_MspInit+0x54>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <HAL_MspInit+0x54>)
 8001ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_MspInit+0x54>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_MspInit+0x54>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_MspInit+0x54>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_MspInit+0x54>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	210f      	movs	r1, #15
 8001b02:	f06f 0001 	mvn.w	r0, #1
 8001b06:	f000 fe22 	bl	800274e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800

08001b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <HAL_I2C_MspInit+0x84>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d12c      	bne.n	8001b94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_I2C_MspInit+0x88>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <HAL_I2C_MspInit+0x88>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_I2C_MspInit+0x88>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b5c:	2312      	movs	r3, #18
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b68:	2304      	movs	r3, #4
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <HAL_I2C_MspInit+0x8c>)
 8001b74:	f000 feb4 	bl	80028e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_I2C_MspInit+0x88>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <HAL_I2C_MspInit+0x88>)
 8001b82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b86:	6413      	str	r3, [r2, #64]	; 0x40
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_I2C_MspInit+0x88>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b94:	bf00      	nop
 8001b96:	3728      	adds	r7, #40	; 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40005400 	.word	0x40005400
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020400 	.word	0x40020400

08001ba8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d10d      	bne.n	8001bd6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_TIM_PWM_MspInit+0x40>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <HAL_TIM_PWM_MspInit+0x40>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_TIM_PWM_MspInit+0x40>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40010000 	.word	0x40010000
 8001be8:	40023800 	.word	0x40023800

08001bec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	; 0x30
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0c:	d14b      	bne.n	8001ca6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a3e      	ldr	r2, [pc, #248]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b3c      	ldr	r3, [pc, #240]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	4b38      	ldr	r3, [pc, #224]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a37      	ldr	r2, [pc, #220]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a30      	ldr	r2, [pc, #192]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEncoder_Pin;
 8001c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c74:	2301      	movs	r3, #1
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LEncoder_GPIO_Port, &GPIO_InitStruct);
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4825      	ldr	r0, [pc, #148]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x128>)
 8001c80:	f000 fe2e 	bl	80028e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEncoderB3_Pin;
 8001c84:	2308      	movs	r3, #8
 8001c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c94:	2301      	movs	r3, #1
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LEncoderB3_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	481e      	ldr	r0, [pc, #120]	; (8001d18 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001ca0:	f000 fe1e 	bl	80028e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ca4:	e030      	b.n	8001d08 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_TIM_Encoder_MspInit+0x130>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d12b      	bne.n	8001d08 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cba:	f043 0302 	orr.w	r3, r3, #2
 8001cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6313      	str	r3, [r2, #48]	; 0x30
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = REncoder_Pin|REncoderA7_Pin;
 8001ce8:	23c0      	movs	r3, #192	; 0xc0
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	4619      	mov	r1, r3
 8001d02:	4804      	ldr	r0, [pc, #16]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x128>)
 8001d04:	f000 fdec 	bl	80028e0 <HAL_GPIO_Init>
}
 8001d08:	bf00      	nop
 8001d0a:	3730      	adds	r7, #48	; 0x30
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40000400 	.word	0x40000400

08001d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <HAL_TIM_Base_MspInit+0x3c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d10d      	bne.n	8001d4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_TIM_Base_MspInit+0x40>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_TIM_Base_MspInit+0x40>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6453      	str	r3, [r2, #68]	; 0x44
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <HAL_TIM_Base_MspInit+0x40>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40010400 	.word	0x40010400
 8001d60:	40023800 	.word	0x40023800

08001d64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <HAL_TIM_MspPostInit+0xb0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d11f      	bne.n	8001dc6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <HAL_TIM_MspPostInit+0xb4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <HAL_TIM_MspPostInit+0xb4>)
 8001d90:	f043 0310 	orr.w	r3, r3, #16
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_TIM_MspPostInit+0xb4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWMServoM_Pin;
 8001da2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWMServoM_GPIO_Port, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4817      	ldr	r0, [pc, #92]	; (8001e1c <HAL_TIM_MspPostInit+0xb8>)
 8001dc0:	f000 fd8e 	bl	80028e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001dc4:	e022      	b.n	8001e0c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <HAL_TIM_MspPostInit+0xbc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d11d      	bne.n	8001e0c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <HAL_TIM_MspPostInit+0xb4>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <HAL_TIM_MspPostInit+0xb4>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6313      	str	r3, [r2, #48]	; 0x30
 8001de0:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <HAL_TIM_MspPostInit+0xb4>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8001dec:	23c0      	movs	r3, #192	; 0xc0
 8001dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4619      	mov	r1, r3
 8001e06:	4807      	ldr	r0, [pc, #28]	; (8001e24 <HAL_TIM_MspPostInit+0xc0>)
 8001e08:	f000 fd6a 	bl	80028e0 <HAL_GPIO_Init>
}
 8001e0c:	bf00      	nop
 8001e0e:	3728      	adds	r7, #40	; 0x28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40010000 	.word	0x40010000
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010400 	.word	0x40010400
 8001e24:	40020800 	.word	0x40020800

08001e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <HAL_UART_MspInit+0x94>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d134      	bne.n	8001eb4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <HAL_UART_MspInit+0x98>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_UART_MspInit+0x98>)
 8001e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_UART_MspInit+0x98>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <HAL_UART_MspInit+0x98>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <HAL_UART_MspInit+0x98>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_UART_MspInit+0x98>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e94:	2307      	movs	r3, #7
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4809      	ldr	r0, [pc, #36]	; (8001ec4 <HAL_UART_MspInit+0x9c>)
 8001ea0:	f000 fd1e 	bl	80028e0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2105      	movs	r1, #5
 8001ea8:	2027      	movs	r0, #39	; 0x27
 8001eaa:	f000 fc50 	bl	800274e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001eae:	2027      	movs	r0, #39	; 0x27
 8001eb0:	f000 fc69 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001eb4:	bf00      	nop
 8001eb6:	3728      	adds	r7, #40	; 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40004800 	.word	0x40004800
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020800 	.word	0x40020800

08001ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ecc:	e7fe      	b.n	8001ecc <NMI_Handler+0x4>

08001ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <HardFault_Handler+0x4>

08001ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <MemManage_Handler+0x4>

08001eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <BusFault_Handler+0x4>

08001ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <UsageFault_Handler+0x4>

08001ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef8:	f000 fb0a 	bl	8002510 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001efc:	f006 f868 	bl	8007fd0 <xTaskGetSchedulerState>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d001      	beq.n	8001f0a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f06:	f006 fe4f 	bl	8008ba8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f14:	4802      	ldr	r0, [pc, #8]	; (8001f20 <USART3_IRQHandler+0x10>)
 8001f16:	f003 fc17 	bl	8005748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200001f8 	.word	0x200001f8

08001f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <_sbrk+0x5c>)
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <_sbrk+0x60>)
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <_sbrk+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <_sbrk+0x64>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <_sbrk+0x68>)
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d207      	bcs.n	8001f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f54:	f007 f8ca 	bl	80090ec <__errno>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f62:	e009      	b.n	8001f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <_sbrk+0x64>)
 8001f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f76:	68fb      	ldr	r3, [r7, #12]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20020000 	.word	0x20020000
 8001f84:	00000400 	.word	0x00000400
 8001f88:	2000027c 	.word	0x2000027c
 8001f8c:	20005120 	.word	0x20005120

08001f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <SystemInit+0x20>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <SystemInit+0x20>)
 8001f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fb8:	f7ff ffea 	bl	8001f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fbc:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fbe:	490d      	ldr	r1, [pc, #52]	; (8001ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fc0:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc4:	e002      	b.n	8001fcc <LoopCopyDataInit>

08001fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fca:	3304      	adds	r3, #4

08001fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd0:	d3f9      	bcc.n	8001fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fd4:	4c0a      	ldr	r4, [pc, #40]	; (8002000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd8:	e001      	b.n	8001fde <LoopFillZerobss>

08001fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fdc:	3204      	adds	r2, #4

08001fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe0:	d3fb      	bcc.n	8001fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fe2:	f007 f889 	bl	80090f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fe6:	f7fe feb7 	bl	8000d58 <main>
  bx  lr    
 8001fea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ff8:	0800a600 	.word	0x0800a600
  ldr r2, =_sbss
 8001ffc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002000:	2000511c 	.word	0x2000511c

08002004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002004:	e7fe      	b.n	8002004 <ADC_IRQHandler>
	...

08002008 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800200e:	2300      	movs	r3, #0
 8002010:	71fb      	strb	r3, [r7, #7]
 8002012:	e026      	b.n	8002062 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	3b50      	subs	r3, #80	; 0x50
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f000 f82b 	bl	8002078 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8002022:	2100      	movs	r1, #0
 8002024:	2000      	movs	r0, #0
 8002026:	f000 f827 	bl	8002078 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800202a:	2100      	movs	r1, #0
 800202c:	2010      	movs	r0, #16
 800202e:	f000 f823 	bl	8002078 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8002032:	2300      	movs	r3, #0
 8002034:	71bb      	strb	r3, [r7, #6]
 8002036:	e00d      	b.n	8002054 <OLED_Refresh_Gram+0x4c>
 8002038:	79ba      	ldrb	r2, [r7, #6]
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	490d      	ldr	r1, [pc, #52]	; (8002074 <OLED_Refresh_Gram+0x6c>)
 800203e:	00d2      	lsls	r2, r2, #3
 8002040:	440a      	add	r2, r1
 8002042:	4413      	add	r3, r2
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2101      	movs	r1, #1
 8002048:	4618      	mov	r0, r3
 800204a:	f000 f815 	bl	8002078 <OLED_WR_Byte>
 800204e:	79bb      	ldrb	r3, [r7, #6]
 8002050:	3301      	adds	r3, #1
 8002052:	71bb      	strb	r3, [r7, #6]
 8002054:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002058:	2b00      	cmp	r3, #0
 800205a:	daed      	bge.n	8002038 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	3301      	adds	r3, #1
 8002060:	71fb      	strb	r3, [r7, #7]
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	2b07      	cmp	r3, #7
 8002066:	d9d5      	bls.n	8002014 <OLED_Refresh_Gram+0xc>
	}   
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000280 	.word	0x20000280

08002078 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	460a      	mov	r2, r1
 8002082:	71fb      	strb	r3, [r7, #7]
 8002084:	4613      	mov	r3, r2
 8002086:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8002088:	79bb      	ldrb	r3, [r7, #6]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800208e:	2201      	movs	r2, #1
 8002090:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002094:	481c      	ldr	r0, [pc, #112]	; (8002108 <OLED_WR_Byte+0x90>)
 8002096:	f000 fdbf 	bl	8002c18 <HAL_GPIO_WritePin>
 800209a:	e005      	b.n	80020a8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800209c:	2200      	movs	r2, #0
 800209e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a2:	4819      	ldr	r0, [pc, #100]	; (8002108 <OLED_WR_Byte+0x90>)
 80020a4:	f000 fdb8 	bl	8002c18 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e01e      	b.n	80020ec <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80020ae:	2200      	movs	r2, #0
 80020b0:	2120      	movs	r1, #32
 80020b2:	4815      	ldr	r0, [pc, #84]	; (8002108 <OLED_WR_Byte+0x90>)
 80020b4:	f000 fdb0 	bl	8002c18 <HAL_GPIO_WritePin>
		if(dat&0x80)
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da05      	bge.n	80020cc <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80020c0:	2201      	movs	r2, #1
 80020c2:	2140      	movs	r1, #64	; 0x40
 80020c4:	4810      	ldr	r0, [pc, #64]	; (8002108 <OLED_WR_Byte+0x90>)
 80020c6:	f000 fda7 	bl	8002c18 <HAL_GPIO_WritePin>
 80020ca:	e004      	b.n	80020d6 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80020cc:	2200      	movs	r2, #0
 80020ce:	2140      	movs	r1, #64	; 0x40
 80020d0:	480d      	ldr	r0, [pc, #52]	; (8002108 <OLED_WR_Byte+0x90>)
 80020d2:	f000 fda1 	bl	8002c18 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80020d6:	2201      	movs	r2, #1
 80020d8:	2120      	movs	r1, #32
 80020da:	480b      	ldr	r0, [pc, #44]	; (8002108 <OLED_WR_Byte+0x90>)
 80020dc:	f000 fd9c 	bl	8002c18 <HAL_GPIO_WritePin>
		dat<<=1;   
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	3301      	adds	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	2b07      	cmp	r3, #7
 80020f0:	d9dd      	bls.n	80020ae <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80020f2:	2201      	movs	r2, #1
 80020f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <OLED_WR_Byte+0x90>)
 80020fa:	f000 fd8d 	bl	8002c18 <HAL_GPIO_WritePin>
} 
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000

0800210c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8002112:	2300      	movs	r3, #0
 8002114:	71fb      	strb	r3, [r7, #7]
 8002116:	e014      	b.n	8002142 <OLED_Clear+0x36>
 8002118:	2300      	movs	r3, #0
 800211a:	71bb      	strb	r3, [r7, #6]
 800211c:	e00a      	b.n	8002134 <OLED_Clear+0x28>
 800211e:	79ba      	ldrb	r2, [r7, #6]
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	490c      	ldr	r1, [pc, #48]	; (8002154 <OLED_Clear+0x48>)
 8002124:	00d2      	lsls	r2, r2, #3
 8002126:	440a      	add	r2, r1
 8002128:	4413      	add	r3, r2
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	79bb      	ldrb	r3, [r7, #6]
 8002130:	3301      	adds	r3, #1
 8002132:	71bb      	strb	r3, [r7, #6]
 8002134:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002138:	2b00      	cmp	r3, #0
 800213a:	daf0      	bge.n	800211e <OLED_Clear+0x12>
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	3301      	adds	r3, #1
 8002140:	71fb      	strb	r3, [r7, #7]
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	2b07      	cmp	r3, #7
 8002146:	d9e7      	bls.n	8002118 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8002148:	f7ff ff5e 	bl	8002008 <OLED_Refresh_Gram>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000280 	.word	0x20000280

08002158 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
 8002162:	460b      	mov	r3, r1
 8002164:	71bb      	strb	r3, [r7, #6]
 8002166:	4613      	mov	r3, r2
 8002168:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800216a:	2300      	movs	r3, #0
 800216c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	db41      	blt.n	80021fa <OLED_DrawPoint+0xa2>
 8002176:	79bb      	ldrb	r3, [r7, #6]
 8002178:	2b3f      	cmp	r3, #63	; 0x3f
 800217a:	d83e      	bhi.n	80021fa <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800217c:	79bb      	ldrb	r3, [r7, #6]
 800217e:	08db      	lsrs	r3, r3, #3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f1c3 0307 	rsb	r3, r3, #7
 8002186:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8002188:	79bb      	ldrb	r3, [r7, #6]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8002190:	7b7b      	ldrb	r3, [r7, #13]
 8002192:	f1c3 0307 	rsb	r3, r3, #7
 8002196:	2201      	movs	r2, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800219e:	797b      	ldrb	r3, [r7, #5]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d012      	beq.n	80021ca <OLED_DrawPoint+0x72>
 80021a4:	79fa      	ldrb	r2, [r7, #7]
 80021a6:	7bbb      	ldrb	r3, [r7, #14]
 80021a8:	4917      	ldr	r1, [pc, #92]	; (8002208 <OLED_DrawPoint+0xb0>)
 80021aa:	00d2      	lsls	r2, r2, #3
 80021ac:	440a      	add	r2, r1
 80021ae:	4413      	add	r3, r2
 80021b0:	7818      	ldrb	r0, [r3, #0]
 80021b2:	79fa      	ldrb	r2, [r7, #7]
 80021b4:	7bbb      	ldrb	r3, [r7, #14]
 80021b6:	7bf9      	ldrb	r1, [r7, #15]
 80021b8:	4301      	orrs	r1, r0
 80021ba:	b2c8      	uxtb	r0, r1
 80021bc:	4912      	ldr	r1, [pc, #72]	; (8002208 <OLED_DrawPoint+0xb0>)
 80021be:	00d2      	lsls	r2, r2, #3
 80021c0:	440a      	add	r2, r1
 80021c2:	4413      	add	r3, r2
 80021c4:	4602      	mov	r2, r0
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	e018      	b.n	80021fc <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80021ca:	79fa      	ldrb	r2, [r7, #7]
 80021cc:	7bbb      	ldrb	r3, [r7, #14]
 80021ce:	490e      	ldr	r1, [pc, #56]	; (8002208 <OLED_DrawPoint+0xb0>)
 80021d0:	00d2      	lsls	r2, r2, #3
 80021d2:	440a      	add	r2, r1
 80021d4:	4413      	add	r3, r2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b25a      	sxtb	r2, r3
 80021da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021de:	43db      	mvns	r3, r3
 80021e0:	b25b      	sxtb	r3, r3
 80021e2:	4013      	ands	r3, r2
 80021e4:	b259      	sxtb	r1, r3
 80021e6:	79fa      	ldrb	r2, [r7, #7]
 80021e8:	7bbb      	ldrb	r3, [r7, #14]
 80021ea:	b2c8      	uxtb	r0, r1
 80021ec:	4906      	ldr	r1, [pc, #24]	; (8002208 <OLED_DrawPoint+0xb0>)
 80021ee:	00d2      	lsls	r2, r2, #3
 80021f0:	440a      	add	r2, r1
 80021f2:	4413      	add	r3, r2
 80021f4:	4602      	mov	r2, r0
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	e000      	b.n	80021fc <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80021fa:	bf00      	nop
}
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000280 	.word	0x20000280

0800220c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	4604      	mov	r4, r0
 8002214:	4608      	mov	r0, r1
 8002216:	4611      	mov	r1, r2
 8002218:	461a      	mov	r2, r3
 800221a:	4623      	mov	r3, r4
 800221c:	71fb      	strb	r3, [r7, #7]
 800221e:	4603      	mov	r3, r0
 8002220:	71bb      	strb	r3, [r7, #6]
 8002222:	460b      	mov	r3, r1
 8002224:	717b      	strb	r3, [r7, #5]
 8002226:	4613      	mov	r3, r2
 8002228:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800222a:	79bb      	ldrb	r3, [r7, #6]
 800222c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800222e:	797b      	ldrb	r3, [r7, #5]
 8002230:	3b20      	subs	r3, #32
 8002232:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8002234:	2300      	movs	r3, #0
 8002236:	73bb      	strb	r3, [r7, #14]
 8002238:	e04d      	b.n	80022d6 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800223a:	793b      	ldrb	r3, [r7, #4]
 800223c:	2b0c      	cmp	r3, #12
 800223e:	d10b      	bne.n	8002258 <OLED_ShowChar+0x4c>
 8002240:	797a      	ldrb	r2, [r7, #5]
 8002242:	7bb9      	ldrb	r1, [r7, #14]
 8002244:	4828      	ldr	r0, [pc, #160]	; (80022e8 <OLED_ShowChar+0xdc>)
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4403      	add	r3, r0
 8002250:	440b      	add	r3, r1
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	73fb      	strb	r3, [r7, #15]
 8002256:	e007      	b.n	8002268 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8002258:	797a      	ldrb	r2, [r7, #5]
 800225a:	7bbb      	ldrb	r3, [r7, #14]
 800225c:	4923      	ldr	r1, [pc, #140]	; (80022ec <OLED_ShowChar+0xe0>)
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	440a      	add	r2, r1
 8002262:	4413      	add	r3, r2
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8002268:	2300      	movs	r3, #0
 800226a:	737b      	strb	r3, [r7, #13]
 800226c:	e02d      	b.n	80022ca <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800226e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002272:	2b00      	cmp	r3, #0
 8002274:	da07      	bge.n	8002286 <OLED_ShowChar+0x7a>
 8002276:	f897 2020 	ldrb.w	r2, [r7, #32]
 800227a:	79b9      	ldrb	r1, [r7, #6]
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff6a 	bl	8002158 <OLED_DrawPoint>
 8002284:	e00c      	b.n	80022a0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8002286:	f897 3020 	ldrb.w	r3, [r7, #32]
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf0c      	ite	eq
 800228e:	2301      	moveq	r3, #1
 8002290:	2300      	movne	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	79b9      	ldrb	r1, [r7, #6]
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ff5c 	bl	8002158 <OLED_DrawPoint>
			temp<<=1;
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
			y++;
 80022a6:	79bb      	ldrb	r3, [r7, #6]
 80022a8:	3301      	adds	r3, #1
 80022aa:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80022ac:	79ba      	ldrb	r2, [r7, #6]
 80022ae:	7b3b      	ldrb	r3, [r7, #12]
 80022b0:	1ad2      	subs	r2, r2, r3
 80022b2:	793b      	ldrb	r3, [r7, #4]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d105      	bne.n	80022c4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80022b8:	7b3b      	ldrb	r3, [r7, #12]
 80022ba:	71bb      	strb	r3, [r7, #6]
				x++;
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	3301      	adds	r3, #1
 80022c0:	71fb      	strb	r3, [r7, #7]
				break;
 80022c2:	e005      	b.n	80022d0 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80022c4:	7b7b      	ldrb	r3, [r7, #13]
 80022c6:	3301      	adds	r3, #1
 80022c8:	737b      	strb	r3, [r7, #13]
 80022ca:	7b7b      	ldrb	r3, [r7, #13]
 80022cc:	2b07      	cmp	r3, #7
 80022ce:	d9ce      	bls.n	800226e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80022d0:	7bbb      	ldrb	r3, [r7, #14]
 80022d2:	3301      	adds	r3, #1
 80022d4:	73bb      	strb	r3, [r7, #14]
 80022d6:	7bba      	ldrb	r2, [r7, #14]
 80022d8:	793b      	ldrb	r3, [r7, #4]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d3ad      	bcc.n	800223a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd90      	pop	{r4, r7, pc}
 80022e8:	08009b58 	.word	0x08009b58
 80022ec:	08009fcc 	.word	0x08009fcc

080022f0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	4603      	mov	r3, r0
 80022f8:	603a      	str	r2, [r7, #0]
 80022fa:	71fb      	strb	r3, [r7, #7]
 80022fc:	460b      	mov	r3, r1
 80022fe:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8002300:	e01f      	b.n	8002342 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	2b7a      	cmp	r3, #122	; 0x7a
 8002306:	d904      	bls.n	8002312 <OLED_ShowString+0x22>
 8002308:	2300      	movs	r3, #0
 800230a:	71fb      	strb	r3, [r7, #7]
 800230c:	79bb      	ldrb	r3, [r7, #6]
 800230e:	3310      	adds	r3, #16
 8002310:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8002312:	79bb      	ldrb	r3, [r7, #6]
 8002314:	2b3a      	cmp	r3, #58	; 0x3a
 8002316:	d905      	bls.n	8002324 <OLED_ShowString+0x34>
 8002318:	2300      	movs	r3, #0
 800231a:	71fb      	strb	r3, [r7, #7]
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	71bb      	strb	r3, [r7, #6]
 8002320:	f7ff fef4 	bl	800210c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	781a      	ldrb	r2, [r3, #0]
 8002328:	79b9      	ldrb	r1, [r7, #6]
 800232a:	79f8      	ldrb	r0, [r7, #7]
 800232c:	2301      	movs	r3, #1
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	230c      	movs	r3, #12
 8002332:	f7ff ff6b 	bl	800220c <OLED_ShowChar>
        x+=8;
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	3308      	adds	r3, #8
 800233a:	71fb      	strb	r3, [r7, #7]
        p++;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1db      	bne.n	8002302 <OLED_ShowString+0x12>
    }  
}	 
 800234a:	bf00      	nop
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <OLED_Init>:

void OLED_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8002358:	f001 fc8c 	bl	8003c74 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800235c:	4b41      	ldr	r3, [pc, #260]	; (8002464 <OLED_Init+0x110>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	4a40      	ldr	r2, [pc, #256]	; (8002464 <OLED_Init+0x110>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6713      	str	r3, [r2, #112]	; 0x70
 8002368:	4b3e      	ldr	r3, [pc, #248]	; (8002464 <OLED_Init+0x110>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	4a3d      	ldr	r2, [pc, #244]	; (8002464 <OLED_Init+0x110>)
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8002374:	f001 fc92 	bl	8003c9c <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8002378:	2200      	movs	r2, #0
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	483a      	ldr	r0, [pc, #232]	; (8002468 <OLED_Init+0x114>)
 800237e:	f000 fc4b 	bl	8002c18 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002382:	2064      	movs	r0, #100	; 0x64
 8002384:	f000 f8e4 	bl	8002550 <HAL_Delay>
	OLED_RST_Set();
 8002388:	2201      	movs	r2, #1
 800238a:	2180      	movs	r1, #128	; 0x80
 800238c:	4836      	ldr	r0, [pc, #216]	; (8002468 <OLED_Init+0x114>)
 800238e:	f000 fc43 	bl	8002c18 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8002392:	2100      	movs	r1, #0
 8002394:	20ae      	movs	r0, #174	; 0xae
 8002396:	f7ff fe6f 	bl	8002078 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800239a:	2100      	movs	r1, #0
 800239c:	20d5      	movs	r0, #213	; 0xd5
 800239e:	f7ff fe6b 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80023a2:	2100      	movs	r1, #0
 80023a4:	2050      	movs	r0, #80	; 0x50
 80023a6:	f7ff fe67 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80023aa:	2100      	movs	r1, #0
 80023ac:	20a8      	movs	r0, #168	; 0xa8
 80023ae:	f7ff fe63 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80023b2:	2100      	movs	r1, #0
 80023b4:	203f      	movs	r0, #63	; 0x3f
 80023b6:	f7ff fe5f 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80023ba:	2100      	movs	r1, #0
 80023bc:	20d3      	movs	r0, #211	; 0xd3
 80023be:	f7ff fe5b 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80023c2:	2100      	movs	r1, #0
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff fe57 	bl	8002078 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80023ca:	2100      	movs	r1, #0
 80023cc:	2040      	movs	r0, #64	; 0x40
 80023ce:	f7ff fe53 	bl	8002078 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80023d2:	2100      	movs	r1, #0
 80023d4:	208d      	movs	r0, #141	; 0x8d
 80023d6:	f7ff fe4f 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80023da:	2100      	movs	r1, #0
 80023dc:	2014      	movs	r0, #20
 80023de:	f7ff fe4b 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80023e2:	2100      	movs	r1, #0
 80023e4:	2020      	movs	r0, #32
 80023e6:	f7ff fe47 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80023ea:	2100      	movs	r1, #0
 80023ec:	2002      	movs	r0, #2
 80023ee:	f7ff fe43 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80023f2:	2100      	movs	r1, #0
 80023f4:	20a1      	movs	r0, #161	; 0xa1
 80023f6:	f7ff fe3f 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80023fa:	2100      	movs	r1, #0
 80023fc:	20c0      	movs	r0, #192	; 0xc0
 80023fe:	f7ff fe3b 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8002402:	2100      	movs	r1, #0
 8002404:	20da      	movs	r0, #218	; 0xda
 8002406:	f7ff fe37 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800240a:	2100      	movs	r1, #0
 800240c:	2012      	movs	r0, #18
 800240e:	f7ff fe33 	bl	8002078 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8002412:	2100      	movs	r1, #0
 8002414:	2081      	movs	r0, #129	; 0x81
 8002416:	f7ff fe2f 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800241a:	2100      	movs	r1, #0
 800241c:	20ef      	movs	r0, #239	; 0xef
 800241e:	f7ff fe2b 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8002422:	2100      	movs	r1, #0
 8002424:	20d9      	movs	r0, #217	; 0xd9
 8002426:	f7ff fe27 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800242a:	2100      	movs	r1, #0
 800242c:	20f1      	movs	r0, #241	; 0xf1
 800242e:	f7ff fe23 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8002432:	2100      	movs	r1, #0
 8002434:	20db      	movs	r0, #219	; 0xdb
 8002436:	f7ff fe1f 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800243a:	2100      	movs	r1, #0
 800243c:	2030      	movs	r0, #48	; 0x30
 800243e:	f7ff fe1b 	bl	8002078 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8002442:	2100      	movs	r1, #0
 8002444:	20a4      	movs	r0, #164	; 0xa4
 8002446:	f7ff fe17 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800244a:	2100      	movs	r1, #0
 800244c:	20a6      	movs	r0, #166	; 0xa6
 800244e:	f7ff fe13 	bl	8002078 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8002452:	2100      	movs	r1, #0
 8002454:	20af      	movs	r0, #175	; 0xaf
 8002456:	f7ff fe0f 	bl	8002078 <OLED_WR_Byte>
	OLED_Clear(); 
 800245a:	f7ff fe57 	bl	800210c <OLED_Clear>
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800
 8002468:	40021000 	.word	0x40021000

0800246c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <HAL_Init+0x40>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0d      	ldr	r2, [pc, #52]	; (80024ac <HAL_Init+0x40>)
 8002476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800247a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <HAL_Init+0x40>)
 8002482:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002486:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_Init+0x40>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a07      	ldr	r2, [pc, #28]	; (80024ac <HAL_Init+0x40>)
 800248e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002492:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002494:	2003      	movs	r0, #3
 8002496:	f000 f94f 	bl	8002738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249a:	200f      	movs	r0, #15
 800249c:	f000 f808 	bl	80024b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a0:	f7ff fb0e 	bl	8001ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023c00 	.word	0x40023c00

080024b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_InitTick+0x54>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_InitTick+0x58>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	4619      	mov	r1, r3
 80024c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f967 	bl	80027a2 <HAL_SYSTICK_Config>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e00e      	b.n	80024fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b0f      	cmp	r3, #15
 80024e2:	d80a      	bhi.n	80024fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e4:	2200      	movs	r2, #0
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f000 f92f 	bl	800274e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f0:	4a06      	ldr	r2, [pc, #24]	; (800250c <HAL_InitTick+0x5c>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e000      	b.n	80024fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000008 	.word	0x20000008
 8002508:	20000010 	.word	0x20000010
 800250c:	2000000c 	.word	0x2000000c

08002510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_IncTick+0x20>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_IncTick+0x24>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4413      	add	r3, r2
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <HAL_IncTick+0x24>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000010 	.word	0x20000010
 8002534:	20000680 	.word	0x20000680

08002538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return uwTick;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_GetTick+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000680 	.word	0x20000680

08002550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002558:	f7ff ffee 	bl	8002538 <HAL_GetTick>
 800255c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d005      	beq.n	8002576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_Delay+0x44>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4413      	add	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002576:	bf00      	nop
 8002578:	f7ff ffde 	bl	8002538 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	429a      	cmp	r2, r3
 8002586:	d8f7      	bhi.n	8002578 <HAL_Delay+0x28>
  {
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000010 	.word	0x20000010

08002598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <__NVIC_SetPriorityGrouping+0x44>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b4:	4013      	ands	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ca:	4a04      	ldr	r2, [pc, #16]	; (80025dc <__NVIC_SetPriorityGrouping+0x44>)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	60d3      	str	r3, [r2, #12]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <__NVIC_GetPriorityGrouping+0x18>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	f003 0307 	and.w	r3, r3, #7
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	2b00      	cmp	r3, #0
 800260c:	db0b      	blt.n	8002626 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	f003 021f 	and.w	r2, r3, #31
 8002614:	4907      	ldr	r1, [pc, #28]	; (8002634 <__NVIC_EnableIRQ+0x38>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	2001      	movs	r0, #1
 800261e:	fa00 f202 	lsl.w	r2, r0, r2
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000e100 	.word	0xe000e100

08002638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	2b00      	cmp	r3, #0
 800264a:	db0a      	blt.n	8002662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	b2da      	uxtb	r2, r3
 8002650:	490c      	ldr	r1, [pc, #48]	; (8002684 <__NVIC_SetPriority+0x4c>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	0112      	lsls	r2, r2, #4
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	440b      	add	r3, r1
 800265c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002660:	e00a      	b.n	8002678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4908      	ldr	r1, [pc, #32]	; (8002688 <__NVIC_SetPriority+0x50>)
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	3b04      	subs	r3, #4
 8002670:	0112      	lsls	r2, r2, #4
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	440b      	add	r3, r1
 8002676:	761a      	strb	r2, [r3, #24]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000e100 	.word	0xe000e100
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268c:	b480      	push	{r7}
 800268e:	b089      	sub	sp, #36	; 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f1c3 0307 	rsb	r3, r3, #7
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	bf28      	it	cs
 80026aa:	2304      	movcs	r3, #4
 80026ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3304      	adds	r3, #4
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	d902      	bls.n	80026bc <NVIC_EncodePriority+0x30>
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3b03      	subs	r3, #3
 80026ba:	e000      	b.n	80026be <NVIC_EncodePriority+0x32>
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	f04f 32ff 	mov.w	r2, #4294967295
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43da      	mvns	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	401a      	ands	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d4:	f04f 31ff 	mov.w	r1, #4294967295
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	43d9      	mvns	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	4313      	orrs	r3, r2
         );
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3724      	adds	r7, #36	; 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002704:	d301      	bcc.n	800270a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002706:	2301      	movs	r3, #1
 8002708:	e00f      	b.n	800272a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270a:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <SysTick_Config+0x40>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002712:	210f      	movs	r1, #15
 8002714:	f04f 30ff 	mov.w	r0, #4294967295
 8002718:	f7ff ff8e 	bl	8002638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <SysTick_Config+0x40>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002722:	4b04      	ldr	r3, [pc, #16]	; (8002734 <SysTick_Config+0x40>)
 8002724:	2207      	movs	r2, #7
 8002726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	e000e010 	.word	0xe000e010

08002738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ff29 	bl	8002598 <__NVIC_SetPriorityGrouping>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002760:	f7ff ff3e 	bl	80025e0 <__NVIC_GetPriorityGrouping>
 8002764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	6978      	ldr	r0, [r7, #20]
 800276c:	f7ff ff8e 	bl	800268c <NVIC_EncodePriority>
 8002770:	4602      	mov	r2, r0
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff5d 	bl	8002638 <__NVIC_SetPriority>
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff31 	bl	80025fc <__NVIC_EnableIRQ>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ffa2 	bl	80026f4 <SysTick_Config>
 80027b0:	4603      	mov	r3, r0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027c8:	f7ff feb6 	bl	8002538 <HAL_GetTick>
 80027cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d008      	beq.n	80027ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2280      	movs	r2, #128	; 0x80
 80027de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e052      	b.n	8002892 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0216 	bic.w	r2, r2, #22
 80027fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800280a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d103      	bne.n	800281c <HAL_DMA_Abort+0x62>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002818:	2b00      	cmp	r3, #0
 800281a:	d007      	beq.n	800282c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0208 	bic.w	r2, r2, #8
 800282a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800283c:	e013      	b.n	8002866 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800283e:	f7ff fe7b 	bl	8002538 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b05      	cmp	r3, #5
 800284a:	d90c      	bls.n	8002866 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2203      	movs	r2, #3
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e015      	b.n	8002892 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1e4      	bne.n	800283e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002878:	223f      	movs	r2, #63	; 0x3f
 800287a:	409a      	lsls	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d004      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e00c      	b.n	80028d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2205      	movs	r2, #5
 80028bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	e16b      	b.n	8002bd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028fc:	2201      	movs	r2, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	429a      	cmp	r2, r3
 8002916:	f040 815a 	bne.w	8002bce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d005      	beq.n	8002932 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800292e:	2b02      	cmp	r3, #2
 8002930:	d130      	bne.n	8002994 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002968:	2201      	movs	r2, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 0201 	and.w	r2, r3, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b03      	cmp	r3, #3
 800299e:	d017      	beq.n	80029d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d123      	bne.n	8002a24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	08da      	lsrs	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3208      	adds	r2, #8
 80029e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	220f      	movs	r2, #15
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	08da      	lsrs	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3208      	adds	r2, #8
 8002a1e:	69b9      	ldr	r1, [r7, #24]
 8002a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0203 	and.w	r2, r3, #3
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80b4 	beq.w	8002bce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	4b60      	ldr	r3, [pc, #384]	; (8002bec <HAL_GPIO_Init+0x30c>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	4a5f      	ldr	r2, [pc, #380]	; (8002bec <HAL_GPIO_Init+0x30c>)
 8002a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a74:	6453      	str	r3, [r2, #68]	; 0x44
 8002a76:	4b5d      	ldr	r3, [pc, #372]	; (8002bec <HAL_GPIO_Init+0x30c>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a82:	4a5b      	ldr	r2, [pc, #364]	; (8002bf0 <HAL_GPIO_Init+0x310>)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	3302      	adds	r3, #2
 8002a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	220f      	movs	r2, #15
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a52      	ldr	r2, [pc, #328]	; (8002bf4 <HAL_GPIO_Init+0x314>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d02b      	beq.n	8002b06 <HAL_GPIO_Init+0x226>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a51      	ldr	r2, [pc, #324]	; (8002bf8 <HAL_GPIO_Init+0x318>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d025      	beq.n	8002b02 <HAL_GPIO_Init+0x222>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a50      	ldr	r2, [pc, #320]	; (8002bfc <HAL_GPIO_Init+0x31c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01f      	beq.n	8002afe <HAL_GPIO_Init+0x21e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4f      	ldr	r2, [pc, #316]	; (8002c00 <HAL_GPIO_Init+0x320>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d019      	beq.n	8002afa <HAL_GPIO_Init+0x21a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4e      	ldr	r2, [pc, #312]	; (8002c04 <HAL_GPIO_Init+0x324>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_GPIO_Init+0x216>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4d      	ldr	r2, [pc, #308]	; (8002c08 <HAL_GPIO_Init+0x328>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00d      	beq.n	8002af2 <HAL_GPIO_Init+0x212>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4c      	ldr	r2, [pc, #304]	; (8002c0c <HAL_GPIO_Init+0x32c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <HAL_GPIO_Init+0x20e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4b      	ldr	r2, [pc, #300]	; (8002c10 <HAL_GPIO_Init+0x330>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d101      	bne.n	8002aea <HAL_GPIO_Init+0x20a>
 8002ae6:	2307      	movs	r3, #7
 8002ae8:	e00e      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002aea:	2308      	movs	r3, #8
 8002aec:	e00c      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002aee:	2306      	movs	r3, #6
 8002af0:	e00a      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002af2:	2305      	movs	r3, #5
 8002af4:	e008      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002af6:	2304      	movs	r3, #4
 8002af8:	e006      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002afa:	2303      	movs	r3, #3
 8002afc:	e004      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e002      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002b06:	2300      	movs	r3, #0
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	f002 0203 	and.w	r2, r2, #3
 8002b0e:	0092      	lsls	r2, r2, #2
 8002b10:	4093      	lsls	r3, r2
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b18:	4935      	ldr	r1, [pc, #212]	; (8002bf0 <HAL_GPIO_Init+0x310>)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	089b      	lsrs	r3, r3, #2
 8002b1e:	3302      	adds	r3, #2
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b26:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <HAL_GPIO_Init+0x334>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b4a:	4a32      	ldr	r2, [pc, #200]	; (8002c14 <HAL_GPIO_Init+0x334>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b50:	4b30      	ldr	r3, [pc, #192]	; (8002c14 <HAL_GPIO_Init+0x334>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b74:	4a27      	ldr	r2, [pc, #156]	; (8002c14 <HAL_GPIO_Init+0x334>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b7a:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <HAL_GPIO_Init+0x334>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b9e:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <HAL_GPIO_Init+0x334>)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_GPIO_Init+0x334>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc8:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <HAL_GPIO_Init+0x334>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b0f      	cmp	r3, #15
 8002bd8:	f67f ae90 	bls.w	80028fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3724      	adds	r7, #36	; 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40013800 	.word	0x40013800
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	40020400 	.word	0x40020400
 8002bfc:	40020800 	.word	0x40020800
 8002c00:	40020c00 	.word	0x40020c00
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40021400 	.word	0x40021400
 8002c0c:	40021800 	.word	0x40021800
 8002c10:	40021c00 	.word	0x40021c00
 8002c14:	40013c00 	.word	0x40013c00

08002c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
 8002c24:	4613      	mov	r3, r2
 8002c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c28:	787b      	ldrb	r3, [r7, #1]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c34:	e003      	b.n	8002c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	619a      	str	r2, [r3, #24]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c5c:	887a      	ldrh	r2, [r7, #2]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4013      	ands	r3, r2
 8002c62:	041a      	lsls	r2, r3, #16
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	43d9      	mvns	r1, r3
 8002c68:	887b      	ldrh	r3, [r7, #2]
 8002c6a:	400b      	ands	r3, r1
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	619a      	str	r2, [r3, #24]
}
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e12b      	b.n	8002eea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fe ff36 	bl	8001b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2224      	movs	r2, #36	; 0x24
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ce2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ce4:	f001 fc1e 	bl	8004524 <HAL_RCC_GetPCLK1Freq>
 8002ce8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4a81      	ldr	r2, [pc, #516]	; (8002ef4 <HAL_I2C_Init+0x274>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d807      	bhi.n	8002d04 <HAL_I2C_Init+0x84>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4a80      	ldr	r2, [pc, #512]	; (8002ef8 <HAL_I2C_Init+0x278>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	bf94      	ite	ls
 8002cfc:	2301      	movls	r3, #1
 8002cfe:	2300      	movhi	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	e006      	b.n	8002d12 <HAL_I2C_Init+0x92>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a7d      	ldr	r2, [pc, #500]	; (8002efc <HAL_I2C_Init+0x27c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	bf94      	ite	ls
 8002d0c:	2301      	movls	r3, #1
 8002d0e:	2300      	movhi	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e0e7      	b.n	8002eea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4a78      	ldr	r2, [pc, #480]	; (8002f00 <HAL_I2C_Init+0x280>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0c9b      	lsrs	r3, r3, #18
 8002d24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4a6a      	ldr	r2, [pc, #424]	; (8002ef4 <HAL_I2C_Init+0x274>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d802      	bhi.n	8002d54 <HAL_I2C_Init+0xd4>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	3301      	adds	r3, #1
 8002d52:	e009      	b.n	8002d68 <HAL_I2C_Init+0xe8>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
 8002d5e:	4a69      	ldr	r2, [pc, #420]	; (8002f04 <HAL_I2C_Init+0x284>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	099b      	lsrs	r3, r3, #6
 8002d66:	3301      	adds	r3, #1
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	495c      	ldr	r1, [pc, #368]	; (8002ef4 <HAL_I2C_Init+0x274>)
 8002d84:	428b      	cmp	r3, r1
 8002d86:	d819      	bhi.n	8002dbc <HAL_I2C_Init+0x13c>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e59      	subs	r1, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d96:	1c59      	adds	r1, r3, #1
 8002d98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d9c:	400b      	ands	r3, r1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_I2C_Init+0x138>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1e59      	subs	r1, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db6:	e051      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002db8:	2304      	movs	r3, #4
 8002dba:	e04f      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d111      	bne.n	8002de8 <HAL_I2C_Init+0x168>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1e58      	subs	r0, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	440b      	add	r3, r1
 8002dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e012      	b.n	8002e0e <HAL_I2C_Init+0x18e>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1e58      	subs	r0, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	0099      	lsls	r1, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Init+0x196>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e022      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10e      	bne.n	8002e3c <HAL_I2C_Init+0x1bc>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1e58      	subs	r0, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6859      	ldr	r1, [r3, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	440b      	add	r3, r1
 8002e2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e30:	3301      	adds	r3, #1
 8002e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e3a:	e00f      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1e58      	subs	r0, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	0099      	lsls	r1, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e52:	3301      	adds	r3, #1
 8002e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	6809      	ldr	r1, [r1, #0]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69da      	ldr	r2, [r3, #28]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6911      	ldr	r1, [r2, #16]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68d2      	ldr	r2, [r2, #12]
 8002e96:	4311      	orrs	r1, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	000186a0 	.word	0x000186a0
 8002ef8:	001e847f 	.word	0x001e847f
 8002efc:	003d08ff 	.word	0x003d08ff
 8002f00:	431bde83 	.word	0x431bde83
 8002f04:	10624dd3 	.word	0x10624dd3

08002f08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	461a      	mov	r2, r3
 8002f14:	460b      	mov	r3, r1
 8002f16:	817b      	strh	r3, [r7, #10]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f1c:	f7ff fb0c 	bl	8002538 <HAL_GetTick>
 8002f20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	f040 80e0 	bne.w	80030f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2319      	movs	r3, #25
 8002f36:	2201      	movs	r2, #1
 8002f38:	4970      	ldr	r1, [pc, #448]	; (80030fc <HAL_I2C_Master_Transmit+0x1f4>)
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fc64 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
 8002f48:	e0d3      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_I2C_Master_Transmit+0x50>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e0cc      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d007      	beq.n	8002f7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2221      	movs	r2, #33	; 0x21
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2210      	movs	r2, #16
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	893a      	ldrh	r2, [r7, #8]
 8002fae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4a50      	ldr	r2, [pc, #320]	; (8003100 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fc0:	8979      	ldrh	r1, [r7, #10]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	6a3a      	ldr	r2, [r7, #32]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 face 	bl	8003568 <I2C_MasterRequestWrite>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e08d      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fec:	e066      	b.n	80030bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	6a39      	ldr	r1, [r7, #32]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fd22 	bl	8003a3c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	2b04      	cmp	r3, #4
 8003004:	d107      	bne.n	8003016 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003014:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e06b      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	781a      	ldrb	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b04      	cmp	r3, #4
 8003056:	d11b      	bne.n	8003090 <HAL_I2C_Master_Transmit+0x188>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	2b00      	cmp	r3, #0
 800305e:	d017      	beq.n	8003090 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	781a      	ldrb	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	6a39      	ldr	r1, [r7, #32]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fd19 	bl	8003acc <I2C_WaitOnBTFFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00d      	beq.n	80030bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d107      	bne.n	80030b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e01a      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d194      	bne.n	8002fee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e000      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030f0:	2302      	movs	r3, #2
  }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	00100002 	.word	0x00100002
 8003100:	ffff0000 	.word	0xffff0000

08003104 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08c      	sub	sp, #48	; 0x30
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	461a      	mov	r2, r3
 8003110:	460b      	mov	r3, r1
 8003112:	817b      	strh	r3, [r7, #10]
 8003114:	4613      	mov	r3, r2
 8003116:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003118:	f7ff fa0e 	bl	8002538 <HAL_GetTick>
 800311c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b20      	cmp	r3, #32
 8003128:	f040 8217 	bne.w	800355a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	2319      	movs	r3, #25
 8003132:	2201      	movs	r2, #1
 8003134:	497c      	ldr	r1, [pc, #496]	; (8003328 <HAL_I2C_Master_Receive+0x224>)
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fb66 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003142:	2302      	movs	r3, #2
 8003144:	e20a      	b.n	800355c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_I2C_Master_Receive+0x50>
 8003150:	2302      	movs	r3, #2
 8003152:	e203      	b.n	800355c <HAL_I2C_Master_Receive+0x458>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d007      	beq.n	800317a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0201 	orr.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003188:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2222      	movs	r2, #34	; 0x22
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2210      	movs	r2, #16
 8003196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	893a      	ldrh	r2, [r7, #8]
 80031aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4a5c      	ldr	r2, [pc, #368]	; (800332c <HAL_I2C_Master_Receive+0x228>)
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031bc:	8979      	ldrh	r1, [r7, #10]
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fa52 	bl	800366c <I2C_MasterRequestRead>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e1c4      	b.n	800355c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d113      	bne.n	8003202 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031da:	2300      	movs	r3, #0
 80031dc:	623b      	str	r3, [r7, #32]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	623b      	str	r3, [r7, #32]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	623b      	str	r3, [r7, #32]
 80031ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e198      	b.n	8003534 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003206:	2b01      	cmp	r3, #1
 8003208:	d11b      	bne.n	8003242 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003218:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	61fb      	str	r3, [r7, #28]
 800322e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e178      	b.n	8003534 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003246:	2b02      	cmp	r3, #2
 8003248:	d11b      	bne.n	8003282 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003258:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003268:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	e158      	b.n	8003534 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003290:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032a8:	e144      	b.n	8003534 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	f200 80f1 	bhi.w	8003496 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d123      	bne.n	8003304 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fc4b 	bl	8003b5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e145      	b.n	800355c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003302:	e117      	b.n	8003534 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	2b02      	cmp	r3, #2
 800330a:	d14e      	bne.n	80033aa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	2200      	movs	r2, #0
 8003314:	4906      	ldr	r1, [pc, #24]	; (8003330 <HAL_I2C_Master_Receive+0x22c>)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fa76 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e11a      	b.n	800355c <HAL_I2C_Master_Receive+0x458>
 8003326:	bf00      	nop
 8003328:	00100002 	.word	0x00100002
 800332c:	ffff0000 	.word	0xffff0000
 8003330:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003342:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033a8:	e0c4      	b.n	8003534 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	2200      	movs	r2, #0
 80033b2:	496c      	ldr	r1, [pc, #432]	; (8003564 <HAL_I2C_Master_Receive+0x460>)
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fa27 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0cb      	b.n	800355c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	2200      	movs	r2, #0
 800340e:	4955      	ldr	r1, [pc, #340]	; (8003564 <HAL_I2C_Master_Receive+0x460>)
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f9f9 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e09d      	b.n	800355c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003494:	e04e      	b.n	8003534 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fb5e 	bl	8003b5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e058      	b.n	800355c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d124      	bne.n	8003534 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d107      	bne.n	8003502 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003500:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	2b00      	cmp	r3, #0
 800353a:	f47f aeb6 	bne.w	80032aa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	e000      	b.n	800355c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
  }
}
 800355c:	4618      	mov	r0, r3
 800355e:	3728      	adds	r7, #40	; 0x28
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	00010004 	.word	0x00010004

08003568 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	460b      	mov	r3, r1
 8003576:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d006      	beq.n	8003592 <I2C_MasterRequestWrite+0x2a>
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d003      	beq.n	8003592 <I2C_MasterRequestWrite+0x2a>
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003590:	d108      	bne.n	80035a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e00b      	b.n	80035bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	2b12      	cmp	r3, #18
 80035aa:	d107      	bne.n	80035bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f91d 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00d      	beq.n	80035f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e2:	d103      	bne.n	80035ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e035      	b.n	800365c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035f8:	d108      	bne.n	800360c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035fa:	897b      	ldrh	r3, [r7, #10]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003608:	611a      	str	r2, [r3, #16]
 800360a:	e01b      	b.n	8003644 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800360c:	897b      	ldrh	r3, [r7, #10]
 800360e:	11db      	asrs	r3, r3, #7
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f003 0306 	and.w	r3, r3, #6
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f063 030f 	orn	r3, r3, #15
 800361c:	b2da      	uxtb	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	490e      	ldr	r1, [pc, #56]	; (8003664 <I2C_MasterRequestWrite+0xfc>)
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f966 	bl	80038fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e010      	b.n	800365c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800363a:	897b      	ldrh	r3, [r7, #10]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	4907      	ldr	r1, [pc, #28]	; (8003668 <I2C_MasterRequestWrite+0x100>)
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f956 	bl	80038fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	00010008 	.word	0x00010008
 8003668:	00010002 	.word	0x00010002

0800366c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	460b      	mov	r3, r1
 800367a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003690:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d006      	beq.n	80036a6 <I2C_MasterRequestRead+0x3a>
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d003      	beq.n	80036a6 <I2C_MasterRequestRead+0x3a>
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036a4:	d108      	bne.n	80036b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	e00b      	b.n	80036d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	2b11      	cmp	r3, #17
 80036be:	d107      	bne.n	80036d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f893 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00d      	beq.n	8003704 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f6:	d103      	bne.n	8003700 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e079      	b.n	80037f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800370c:	d108      	bne.n	8003720 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800370e:	897b      	ldrh	r3, [r7, #10]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	611a      	str	r2, [r3, #16]
 800371e:	e05f      	b.n	80037e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003720:	897b      	ldrh	r3, [r7, #10]
 8003722:	11db      	asrs	r3, r3, #7
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f003 0306 	and.w	r3, r3, #6
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f063 030f 	orn	r3, r3, #15
 8003730:	b2da      	uxtb	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4930      	ldr	r1, [pc, #192]	; (8003800 <I2C_MasterRequestRead+0x194>)
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f8dc 	bl	80038fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e054      	b.n	80037f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800374e:	897b      	ldrh	r3, [r7, #10]
 8003750:	b2da      	uxtb	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4929      	ldr	r1, [pc, #164]	; (8003804 <I2C_MasterRequestRead+0x198>)
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f8cc 	bl	80038fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e044      	b.n	80037f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003792:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f831 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00d      	beq.n	80037c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ba:	d103      	bne.n	80037c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e017      	b.n	80037f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80037c8:	897b      	ldrh	r3, [r7, #10]
 80037ca:	11db      	asrs	r3, r3, #7
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f003 0306 	and.w	r3, r3, #6
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f063 030e 	orn	r3, r3, #14
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4907      	ldr	r1, [pc, #28]	; (8003804 <I2C_MasterRequestRead+0x198>)
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f888 	bl	80038fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	00010008 	.word	0x00010008
 8003804:	00010002 	.word	0x00010002

08003808 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003818:	e048      	b.n	80038ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d044      	beq.n	80038ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003822:	f7fe fe89 	bl	8002538 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d302      	bcc.n	8003838 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d139      	bne.n	80038ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	0c1b      	lsrs	r3, r3, #16
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b01      	cmp	r3, #1
 8003840:	d10d      	bne.n	800385e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	43da      	mvns	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4013      	ands	r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	e00c      	b.n	8003878 <I2C_WaitOnFlagUntilTimeout+0x70>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	43da      	mvns	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4013      	ands	r3, r2
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	429a      	cmp	r2, r3
 800387c:	d116      	bne.n	80038ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f043 0220 	orr.w	r2, r3, #32
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e023      	b.n	80038f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	0c1b      	lsrs	r3, r3, #16
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d10d      	bne.n	80038d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	43da      	mvns	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4013      	ands	r3, r2
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	e00c      	b.n	80038ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	43da      	mvns	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	4013      	ands	r3, r2
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf0c      	ite	eq
 80038e4:	2301      	moveq	r3, #1
 80038e6:	2300      	movne	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d093      	beq.n	800381a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800390a:	e071      	b.n	80039f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391a:	d123      	bne.n	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003934:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	f043 0204 	orr.w	r2, r3, #4
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e067      	b.n	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396a:	d041      	beq.n	80039f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396c:	f7fe fde4 	bl	8002538 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	429a      	cmp	r2, r3
 800397a:	d302      	bcc.n	8003982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d136      	bne.n	80039f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	d10c      	bne.n	80039a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	43da      	mvns	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4013      	ands	r3, r2
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	bf14      	ite	ne
 800399e:	2301      	movne	r3, #1
 80039a0:	2300      	moveq	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	e00b      	b.n	80039be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	43da      	mvns	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4013      	ands	r3, r2
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bf14      	ite	ne
 80039b8:	2301      	movne	r3, #1
 80039ba:	2300      	moveq	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d016      	beq.n	80039f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f043 0220 	orr.w	r2, r3, #32
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e021      	b.n	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	0c1b      	lsrs	r3, r3, #16
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d10c      	bne.n	8003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	43da      	mvns	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4013      	ands	r3, r2
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf14      	ite	ne
 8003a0c:	2301      	movne	r3, #1
 8003a0e:	2300      	moveq	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e00b      	b.n	8003a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	43da      	mvns	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bf14      	ite	ne
 8003a26:	2301      	movne	r3, #1
 8003a28:	2300      	moveq	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f47f af6d 	bne.w	800390c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a48:	e034      	b.n	8003ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f8e3 	bl	8003c16 <I2C_IsAcknowledgeFailed>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e034      	b.n	8003ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d028      	beq.n	8003ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a62:	f7fe fd69 	bl	8002538 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d302      	bcc.n	8003a78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11d      	bne.n	8003ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a82:	2b80      	cmp	r3, #128	; 0x80
 8003a84:	d016      	beq.n	8003ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e007      	b.n	8003ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	2b80      	cmp	r3, #128	; 0x80
 8003ac0:	d1c3      	bne.n	8003a4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ad8:	e034      	b.n	8003b44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f89b 	bl	8003c16 <I2C_IsAcknowledgeFailed>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e034      	b.n	8003b54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d028      	beq.n	8003b44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7fe fd21 	bl	8002538 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d302      	bcc.n	8003b08 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d11d      	bne.n	8003b44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d016      	beq.n	8003b44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	f043 0220 	orr.w	r2, r3, #32
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e007      	b.n	8003b54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d1c3      	bne.n	8003ada <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b68:	e049      	b.n	8003bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d119      	bne.n	8003bac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0210 	mvn.w	r2, #16
 8003b80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e030      	b.n	8003c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bac:	f7fe fcc4 	bl	8002538 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d302      	bcc.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d11d      	bne.n	8003bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d016      	beq.n	8003bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e007      	b.n	8003c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b40      	cmp	r3, #64	; 0x40
 8003c0a:	d1ae      	bne.n	8003b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2c:	d11b      	bne.n	8003c66 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c36:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f043 0204 	orr.w	r2, r3, #4
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_PWR_EnableBkUpAccess+0x20>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_PWR_EnableBkUpAccess+0x24>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003c86:	687b      	ldr	r3, [r7, #4]
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	420e0020 	.word	0x420e0020
 8003c98:	40007000 	.word	0x40007000

08003c9c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_PWR_DisableBkUpAccess+0x20>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <HAL_PWR_DisableBkUpAccess+0x24>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003cae:	687b      	ldr	r3, [r7, #4]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	420e0020 	.word	0x420e0020
 8003cc0:	40007000 	.word	0x40007000

08003cc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e267      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d075      	beq.n	8003dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ce2:	4b88      	ldr	r3, [pc, #544]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d00c      	beq.n	8003d08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cee:	4b85      	ldr	r3, [pc, #532]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d112      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cfa:	4b82      	ldr	r3, [pc, #520]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d06:	d10b      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d08:	4b7e      	ldr	r3, [pc, #504]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d05b      	beq.n	8003dcc <HAL_RCC_OscConfig+0x108>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d157      	bne.n	8003dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e242      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d28:	d106      	bne.n	8003d38 <HAL_RCC_OscConfig+0x74>
 8003d2a:	4b76      	ldr	r3, [pc, #472]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a75      	ldr	r2, [pc, #468]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e01d      	b.n	8003d74 <HAL_RCC_OscConfig+0xb0>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x98>
 8003d42:	4b70      	ldr	r3, [pc, #448]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a6f      	ldr	r2, [pc, #444]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b6d      	ldr	r3, [pc, #436]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a6c      	ldr	r2, [pc, #432]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCC_OscConfig+0xb0>
 8003d5c:	4b69      	ldr	r3, [pc, #420]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a68      	ldr	r2, [pc, #416]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	4b66      	ldr	r3, [pc, #408]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a65      	ldr	r2, [pc, #404]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d013      	beq.n	8003da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7fe fbdc 	bl	8002538 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d84:	f7fe fbd8 	bl	8002538 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	; 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e207      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d96:	4b5b      	ldr	r3, [pc, #364]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0xc0>
 8003da2:	e014      	b.n	8003dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fe fbc8 	bl	8002538 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dac:	f7fe fbc4 	bl	8002538 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	; 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e1f3      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dbe:	4b51      	ldr	r3, [pc, #324]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0xe8>
 8003dca:	e000      	b.n	8003dce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d063      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dda:	4b4a      	ldr	r3, [pc, #296]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de6:	4b47      	ldr	r3, [pc, #284]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d11c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003df2:	4b44      	ldr	r3, [pc, #272]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d116      	bne.n	8003e2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfe:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_RCC_OscConfig+0x152>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e1c7      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e16:	4b3b      	ldr	r3, [pc, #236]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4937      	ldr	r1, [pc, #220]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2a:	e03a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d020      	beq.n	8003e76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e34:	4b34      	ldr	r3, [pc, #208]	; (8003f08 <HAL_RCC_OscConfig+0x244>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7fe fb7d 	bl	8002538 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e42:	f7fe fb79 	bl	8002538 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e1a8      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e54:	4b2b      	ldr	r3, [pc, #172]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e60:	4b28      	ldr	r3, [pc, #160]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4925      	ldr	r1, [pc, #148]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	600b      	str	r3, [r1, #0]
 8003e74:	e015      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e76:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <HAL_RCC_OscConfig+0x244>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fe fb5c 	bl	8002538 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e84:	f7fe fb58 	bl	8002538 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e187      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e96:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d036      	beq.n	8003f1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d016      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb6:	4b15      	ldr	r3, [pc, #84]	; (8003f0c <HAL_RCC_OscConfig+0x248>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebc:	f7fe fb3c 	bl	8002538 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec4:	f7fe fb38 	bl	8002538 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e167      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x200>
 8003ee2:	e01b      	b.n	8003f1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <HAL_RCC_OscConfig+0x248>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eea:	f7fe fb25 	bl	8002538 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef0:	e00e      	b.n	8003f10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef2:	f7fe fb21 	bl	8002538 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d907      	bls.n	8003f10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e150      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
 8003f04:	40023800 	.word	0x40023800
 8003f08:	42470000 	.word	0x42470000
 8003f0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f10:	4b88      	ldr	r3, [pc, #544]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ea      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8097 	beq.w	8004058 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f2e:	4b81      	ldr	r3, [pc, #516]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10f      	bne.n	8003f5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	4b7d      	ldr	r3, [pc, #500]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	4a7c      	ldr	r2, [pc, #496]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f48:	6413      	str	r3, [r2, #64]	; 0x40
 8003f4a:	4b7a      	ldr	r3, [pc, #488]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f56:	2301      	movs	r3, #1
 8003f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5a:	4b77      	ldr	r3, [pc, #476]	; (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d118      	bne.n	8003f98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f66:	4b74      	ldr	r3, [pc, #464]	; (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a73      	ldr	r2, [pc, #460]	; (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f72:	f7fe fae1 	bl	8002538 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7a:	f7fe fadd 	bl	8002538 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e10c      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8c:	4b6a      	ldr	r3, [pc, #424]	; (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d106      	bne.n	8003fae <HAL_RCC_OscConfig+0x2ea>
 8003fa0:	4b64      	ldr	r3, [pc, #400]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	4a63      	ldr	r2, [pc, #396]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6713      	str	r3, [r2, #112]	; 0x70
 8003fac:	e01c      	b.n	8003fe8 <HAL_RCC_OscConfig+0x324>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b05      	cmp	r3, #5
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x30c>
 8003fb6:	4b5f      	ldr	r3, [pc, #380]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	4a5e      	ldr	r2, [pc, #376]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fbc:	f043 0304 	orr.w	r3, r3, #4
 8003fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc2:	4b5c      	ldr	r3, [pc, #368]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	4a5b      	ldr	r2, [pc, #364]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fce:	e00b      	b.n	8003fe8 <HAL_RCC_OscConfig+0x324>
 8003fd0:	4b58      	ldr	r3, [pc, #352]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd4:	4a57      	ldr	r2, [pc, #348]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	6713      	str	r3, [r2, #112]	; 0x70
 8003fdc:	4b55      	ldr	r3, [pc, #340]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe0:	4a54      	ldr	r2, [pc, #336]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	f023 0304 	bic.w	r3, r3, #4
 8003fe6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d015      	beq.n	800401c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7fe faa2 	bl	8002538 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f7fe fa9e 	bl	8002538 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e0cb      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400e:	4b49      	ldr	r3, [pc, #292]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0ee      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x334>
 800401a:	e014      	b.n	8004046 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401c:	f7fe fa8c 	bl	8002538 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004022:	e00a      	b.n	800403a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004024:	f7fe fa88 	bl	8002538 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e0b5      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403a:	4b3e      	ldr	r3, [pc, #248]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1ee      	bne.n	8004024 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004046:	7dfb      	ldrb	r3, [r7, #23]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d105      	bne.n	8004058 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800404c:	4b39      	ldr	r3, [pc, #228]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	4a38      	ldr	r2, [pc, #224]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8004052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004056:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 80a1 	beq.w	80041a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004062:	4b34      	ldr	r3, [pc, #208]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b08      	cmp	r3, #8
 800406c:	d05c      	beq.n	8004128 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d141      	bne.n	80040fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004076:	4b31      	ldr	r3, [pc, #196]	; (800413c <HAL_RCC_OscConfig+0x478>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fe fa5c 	bl	8002538 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004084:	f7fe fa58 	bl	8002538 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e087      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004096:	4b27      	ldr	r3, [pc, #156]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	019b      	lsls	r3, r3, #6
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	3b01      	subs	r3, #1
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	061b      	lsls	r3, r3, #24
 80040c6:	491b      	ldr	r1, [pc, #108]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040cc:	4b1b      	ldr	r3, [pc, #108]	; (800413c <HAL_RCC_OscConfig+0x478>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d2:	f7fe fa31 	bl	8002538 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040da:	f7fe fa2d 	bl	8002538 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e05c      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ec:	4b11      	ldr	r3, [pc, #68]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x416>
 80040f8:	e054      	b.n	80041a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fa:	4b10      	ldr	r3, [pc, #64]	; (800413c <HAL_RCC_OscConfig+0x478>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004100:	f7fe fa1a 	bl	8002538 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004108:	f7fe fa16 	bl	8002538 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e045      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x444>
 8004126:	e03d      	b.n	80041a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d107      	bne.n	8004140 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e038      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
 8004134:	40023800 	.word	0x40023800
 8004138:	40007000 	.word	0x40007000
 800413c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004140:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <HAL_RCC_OscConfig+0x4ec>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d028      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d121      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d11a      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004170:	4013      	ands	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004176:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004178:	4293      	cmp	r3, r2
 800417a:	d111      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	3b01      	subs	r3, #1
 800418a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800

080041b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0cc      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041c8:	4b68      	ldr	r3, [pc, #416]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d90c      	bls.n	80041f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b65      	ldr	r3, [pc, #404]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041de:	4b63      	ldr	r3, [pc, #396]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0b8      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d020      	beq.n	800423e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004208:	4b59      	ldr	r3, [pc, #356]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4a58      	ldr	r2, [pc, #352]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004212:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004220:	4b53      	ldr	r3, [pc, #332]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a52      	ldr	r2, [pc, #328]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800422a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422c:	4b50      	ldr	r3, [pc, #320]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	494d      	ldr	r1, [pc, #308]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d044      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	4b47      	ldr	r3, [pc, #284]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d119      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e07f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d003      	beq.n	8004272 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800426e:	2b03      	cmp	r3, #3
 8004270:	d107      	bne.n	8004282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004272:	4b3f      	ldr	r3, [pc, #252]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e06f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004282:	4b3b      	ldr	r3, [pc, #236]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e067      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004292:	4b37      	ldr	r3, [pc, #220]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f023 0203 	bic.w	r2, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4934      	ldr	r1, [pc, #208]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a4:	f7fe f948 	bl	8002538 <HAL_GetTick>
 80042a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ac:	f7fe f944 	bl	8002538 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e04f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	4b2b      	ldr	r3, [pc, #172]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 020c 	and.w	r2, r3, #12
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d1eb      	bne.n	80042ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d4:	4b25      	ldr	r3, [pc, #148]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d20c      	bcs.n	80042fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b22      	ldr	r3, [pc, #136]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b20      	ldr	r3, [pc, #128]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e032      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004308:	4b19      	ldr	r3, [pc, #100]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4916      	ldr	r1, [pc, #88]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004326:	4b12      	ldr	r3, [pc, #72]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	490e      	ldr	r1, [pc, #56]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800433a:	f000 f821 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 800433e:	4602      	mov	r2, r0
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	490a      	ldr	r1, [pc, #40]	; (8004374 <HAL_RCC_ClockConfig+0x1c0>)
 800434c:	5ccb      	ldrb	r3, [r1, r3]
 800434e:	fa22 f303 	lsr.w	r3, r2, r3
 8004352:	4a09      	ldr	r2, [pc, #36]	; (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 8004354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004356:	4b09      	ldr	r3, [pc, #36]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7fe f8a8 	bl	80024b0 <HAL_InitTick>

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40023c00 	.word	0x40023c00
 8004370:	40023800 	.word	0x40023800
 8004374:	08009b40 	.word	0x08009b40
 8004378:	20000008 	.word	0x20000008
 800437c:	2000000c 	.word	0x2000000c

08004380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004384:	b090      	sub	sp, #64	; 0x40
 8004386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
 800438c:	2300      	movs	r3, #0
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004390:	2300      	movs	r3, #0
 8004392:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004398:	4b59      	ldr	r3, [pc, #356]	; (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d00d      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x40>
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	f200 80a1 	bhi.w	80044ec <HAL_RCC_GetSysClockFreq+0x16c>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x34>
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d003      	beq.n	80043ba <HAL_RCC_GetSysClockFreq+0x3a>
 80043b2:	e09b      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043b4:	4b53      	ldr	r3, [pc, #332]	; (8004504 <HAL_RCC_GetSysClockFreq+0x184>)
 80043b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80043b8:	e09b      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ba:	4b53      	ldr	r3, [pc, #332]	; (8004508 <HAL_RCC_GetSysClockFreq+0x188>)
 80043bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043be:	e098      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043c0:	4b4f      	ldr	r3, [pc, #316]	; (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ca:	4b4d      	ldr	r3, [pc, #308]	; (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d028      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d6:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	099b      	lsrs	r3, r3, #6
 80043dc:	2200      	movs	r2, #0
 80043de:	623b      	str	r3, [r7, #32]
 80043e0:	627a      	str	r2, [r7, #36]	; 0x24
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043e8:	2100      	movs	r1, #0
 80043ea:	4b47      	ldr	r3, [pc, #284]	; (8004508 <HAL_RCC_GetSysClockFreq+0x188>)
 80043ec:	fb03 f201 	mul.w	r2, r3, r1
 80043f0:	2300      	movs	r3, #0
 80043f2:	fb00 f303 	mul.w	r3, r0, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	4a43      	ldr	r2, [pc, #268]	; (8004508 <HAL_RCC_GetSysClockFreq+0x188>)
 80043fa:	fba0 1202 	umull	r1, r2, r0, r2
 80043fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004400:	460a      	mov	r2, r1
 8004402:	62ba      	str	r2, [r7, #40]	; 0x28
 8004404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004406:	4413      	add	r3, r2
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800440a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440c:	2200      	movs	r2, #0
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	61fa      	str	r2, [r7, #28]
 8004412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004416:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800441a:	f7fc fb1f 	bl	8000a5c <__aeabi_uldivmod>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4613      	mov	r3, r2
 8004424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004426:	e053      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004428:	4b35      	ldr	r3, [pc, #212]	; (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	099b      	lsrs	r3, r3, #6
 800442e:	2200      	movs	r2, #0
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	617a      	str	r2, [r7, #20]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800443a:	f04f 0b00 	mov.w	fp, #0
 800443e:	4652      	mov	r2, sl
 8004440:	465b      	mov	r3, fp
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f04f 0100 	mov.w	r1, #0
 800444a:	0159      	lsls	r1, r3, #5
 800444c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004450:	0150      	lsls	r0, r2, #5
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	ebb2 080a 	subs.w	r8, r2, sl
 800445a:	eb63 090b 	sbc.w	r9, r3, fp
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800446a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800446e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004472:	ebb2 0408 	subs.w	r4, r2, r8
 8004476:	eb63 0509 	sbc.w	r5, r3, r9
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	00eb      	lsls	r3, r5, #3
 8004484:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004488:	00e2      	lsls	r2, r4, #3
 800448a:	4614      	mov	r4, r2
 800448c:	461d      	mov	r5, r3
 800448e:	eb14 030a 	adds.w	r3, r4, sl
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	eb45 030b 	adc.w	r3, r5, fp
 8004498:	607b      	str	r3, [r7, #4]
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044a6:	4629      	mov	r1, r5
 80044a8:	028b      	lsls	r3, r1, #10
 80044aa:	4621      	mov	r1, r4
 80044ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044b0:	4621      	mov	r1, r4
 80044b2:	028a      	lsls	r2, r1, #10
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ba:	2200      	movs	r2, #0
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	60fa      	str	r2, [r7, #12]
 80044c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044c4:	f7fc faca 	bl	8000a5c <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4613      	mov	r3, r2
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	3301      	adds	r3, #1
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80044e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044ea:	e002      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_RCC_GetSysClockFreq+0x184>)
 80044ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3740      	adds	r7, #64	; 0x40
 80044f8:	46bd      	mov	sp, r7
 80044fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800
 8004504:	00f42400 	.word	0x00f42400
 8004508:	017d7840 	.word	0x017d7840

0800450c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004510:	4b03      	ldr	r3, [pc, #12]	; (8004520 <HAL_RCC_GetHCLKFreq+0x14>)
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20000008 	.word	0x20000008

08004524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004528:	f7ff fff0 	bl	800450c <HAL_RCC_GetHCLKFreq>
 800452c:	4602      	mov	r2, r0
 800452e:	4b05      	ldr	r3, [pc, #20]	; (8004544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	0a9b      	lsrs	r3, r3, #10
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	4903      	ldr	r1, [pc, #12]	; (8004548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800453a:	5ccb      	ldrb	r3, [r1, r3]
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40023800 	.word	0x40023800
 8004548:	08009b50 	.word	0x08009b50

0800454c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004550:	f7ff ffdc 	bl	800450c <HAL_RCC_GetHCLKFreq>
 8004554:	4602      	mov	r2, r0
 8004556:	4b05      	ldr	r3, [pc, #20]	; (800456c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	0b5b      	lsrs	r3, r3, #13
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	4903      	ldr	r1, [pc, #12]	; (8004570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004562:	5ccb      	ldrb	r3, [r1, r3]
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004568:	4618      	mov	r0, r3
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40023800 	.word	0x40023800
 8004570:	08009b50 	.word	0x08009b50

08004574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e041      	b.n	800460a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fd fbc0 	bl	8001d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3304      	adds	r3, #4
 80045b0:	4619      	mov	r1, r3
 80045b2:	4610      	mov	r0, r2
 80045b4:	f000 fc02 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e041      	b.n	80046a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d106      	bne.n	800463e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7fd fab5 	bl	8001ba8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2202      	movs	r2, #2
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3304      	adds	r3, #4
 800464e:	4619      	mov	r1, r3
 8004650:	4610      	mov	r0, r2
 8004652:	f000 fbb3 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d109      	bne.n	80046d4 <HAL_TIM_PWM_Start+0x24>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	bf14      	ite	ne
 80046cc:	2301      	movne	r3, #1
 80046ce:	2300      	moveq	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	e022      	b.n	800471a <HAL_TIM_PWM_Start+0x6a>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d109      	bne.n	80046ee <HAL_TIM_PWM_Start+0x3e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	bf14      	ite	ne
 80046e6:	2301      	movne	r3, #1
 80046e8:	2300      	moveq	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	e015      	b.n	800471a <HAL_TIM_PWM_Start+0x6a>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d109      	bne.n	8004708 <HAL_TIM_PWM_Start+0x58>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	e008      	b.n	800471a <HAL_TIM_PWM_Start+0x6a>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b01      	cmp	r3, #1
 8004712:	bf14      	ite	ne
 8004714:	2301      	movne	r3, #1
 8004716:	2300      	moveq	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e07c      	b.n	800481c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d104      	bne.n	8004732 <HAL_TIM_PWM_Start+0x82>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004730:	e013      	b.n	800475a <HAL_TIM_PWM_Start+0xaa>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b04      	cmp	r3, #4
 8004736:	d104      	bne.n	8004742 <HAL_TIM_PWM_Start+0x92>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004740:	e00b      	b.n	800475a <HAL_TIM_PWM_Start+0xaa>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b08      	cmp	r3, #8
 8004746:	d104      	bne.n	8004752 <HAL_TIM_PWM_Start+0xa2>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004750:	e003      	b.n	800475a <HAL_TIM_PWM_Start+0xaa>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2202      	movs	r2, #2
 8004756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2201      	movs	r2, #1
 8004760:	6839      	ldr	r1, [r7, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fe20 	bl	80053a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a2d      	ldr	r2, [pc, #180]	; (8004824 <HAL_TIM_PWM_Start+0x174>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_TIM_PWM_Start+0xcc>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2c      	ldr	r2, [pc, #176]	; (8004828 <HAL_TIM_PWM_Start+0x178>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d101      	bne.n	8004780 <HAL_TIM_PWM_Start+0xd0>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_TIM_PWM_Start+0xd2>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d007      	beq.n	8004796 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004794:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a22      	ldr	r2, [pc, #136]	; (8004824 <HAL_TIM_PWM_Start+0x174>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d022      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x136>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a8:	d01d      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x136>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1f      	ldr	r2, [pc, #124]	; (800482c <HAL_TIM_PWM_Start+0x17c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d018      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x136>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <HAL_TIM_PWM_Start+0x180>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x136>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <HAL_TIM_PWM_Start+0x184>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x136>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a16      	ldr	r2, [pc, #88]	; (8004828 <HAL_TIM_PWM_Start+0x178>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x136>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a18      	ldr	r2, [pc, #96]	; (8004838 <HAL_TIM_PWM_Start+0x188>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x136>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a16      	ldr	r2, [pc, #88]	; (800483c <HAL_TIM_PWM_Start+0x18c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d111      	bne.n	800480a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b06      	cmp	r3, #6
 80047f6:	d010      	beq.n	800481a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004808:	e007      	b.n	800481a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40010000 	.word	0x40010000
 8004828:	40010400 	.word	0x40010400
 800482c:	40000400 	.word	0x40000400
 8004830:	40000800 	.word	0x40000800
 8004834:	40000c00 	.word	0x40000c00
 8004838:	40014000 	.word	0x40014000
 800483c:	40001800 	.word	0x40001800

08004840 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e097      	b.n	8004984 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d106      	bne.n	800486e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fd f9bf 	bl	8001bec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6812      	ldr	r2, [r2, #0]
 8004880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004884:	f023 0307 	bic.w	r3, r3, #7
 8004888:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3304      	adds	r3, #4
 8004892:	4619      	mov	r1, r3
 8004894:	4610      	mov	r0, r2
 8004896:	f000 fa91 	bl	8004dbc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c2:	f023 0303 	bic.w	r3, r3, #3
 80048c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	4313      	orrs	r3, r2
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048e0:	f023 030c 	bic.w	r3, r3, #12
 80048e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	4313      	orrs	r3, r2
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	011a      	lsls	r2, r3, #4
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	031b      	lsls	r3, r3, #12
 8004910:	4313      	orrs	r3, r2
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800491e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004926:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	4313      	orrs	r3, r2
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d110      	bne.n	80049de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d102      	bne.n	80049c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80049c2:	7b7b      	ldrb	r3, [r7, #13]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d001      	beq.n	80049cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e069      	b.n	8004aa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049dc:	e031      	b.n	8004a42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d110      	bne.n	8004a06 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049e4:	7bbb      	ldrb	r3, [r7, #14]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d102      	bne.n	80049f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049ea:	7b3b      	ldrb	r3, [r7, #12]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d001      	beq.n	80049f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e055      	b.n	8004aa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a04:	e01d      	b.n	8004a42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d108      	bne.n	8004a1e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a0c:	7bbb      	ldrb	r3, [r7, #14]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d105      	bne.n	8004a1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a12:	7b7b      	ldrb	r3, [r7, #13]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d102      	bne.n	8004a1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a18:	7b3b      	ldrb	r3, [r7, #12]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d001      	beq.n	8004a22 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e03e      	b.n	8004aa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2202      	movs	r2, #2
 8004a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2202      	movs	r2, #2
 8004a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_TIM_Encoder_Start+0xc4>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d008      	beq.n	8004a60 <HAL_TIM_Encoder_Start+0xd4>
 8004a4e:	e00f      	b.n	8004a70 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2201      	movs	r2, #1
 8004a56:	2100      	movs	r1, #0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fca5 	bl	80053a8 <TIM_CCxChannelCmd>
      break;
 8004a5e:	e016      	b.n	8004a8e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2201      	movs	r2, #1
 8004a66:	2104      	movs	r1, #4
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fc9d 	bl	80053a8 <TIM_CCxChannelCmd>
      break;
 8004a6e:	e00e      	b.n	8004a8e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2201      	movs	r2, #1
 8004a76:	2100      	movs	r1, #0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fc95 	bl	80053a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2201      	movs	r2, #1
 8004a84:	2104      	movs	r1, #4
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fc8e 	bl	80053a8 <TIM_CCxChannelCmd>
      break;
 8004a8c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0201 	orr.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e0ae      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b0c      	cmp	r3, #12
 8004ad2:	f200 809f 	bhi.w	8004c14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ad6:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004b11 	.word	0x08004b11
 8004ae0:	08004c15 	.word	0x08004c15
 8004ae4:	08004c15 	.word	0x08004c15
 8004ae8:	08004c15 	.word	0x08004c15
 8004aec:	08004b51 	.word	0x08004b51
 8004af0:	08004c15 	.word	0x08004c15
 8004af4:	08004c15 	.word	0x08004c15
 8004af8:	08004c15 	.word	0x08004c15
 8004afc:	08004b93 	.word	0x08004b93
 8004b00:	08004c15 	.word	0x08004c15
 8004b04:	08004c15 	.word	0x08004c15
 8004b08:	08004c15 	.word	0x08004c15
 8004b0c:	08004bd3 	.word	0x08004bd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68b9      	ldr	r1, [r7, #8]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 f9fc 	bl	8004f14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0208 	orr.w	r2, r2, #8
 8004b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0204 	bic.w	r2, r2, #4
 8004b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6999      	ldr	r1, [r3, #24]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	619a      	str	r2, [r3, #24]
      break;
 8004b4e:	e064      	b.n	8004c1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fa4c 	bl	8004ff4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6999      	ldr	r1, [r3, #24]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	021a      	lsls	r2, r3, #8
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	619a      	str	r2, [r3, #24]
      break;
 8004b90:	e043      	b.n	8004c1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68b9      	ldr	r1, [r7, #8]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 faa1 	bl	80050e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0208 	orr.w	r2, r2, #8
 8004bac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0204 	bic.w	r2, r2, #4
 8004bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69d9      	ldr	r1, [r3, #28]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	61da      	str	r2, [r3, #28]
      break;
 8004bd0:	e023      	b.n	8004c1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68b9      	ldr	r1, [r7, #8]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 faf5 	bl	80051c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69d9      	ldr	r1, [r3, #28]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	021a      	lsls	r2, r3, #8
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	61da      	str	r2, [r3, #28]
      break;
 8004c12:	e002      	b.n	8004c1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	75fb      	strb	r3, [r7, #23]
      break;
 8004c18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_TIM_ConfigClockSource+0x1c>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e0b4      	b.n	8004db2 <HAL_TIM_ConfigClockSource+0x186>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c80:	d03e      	beq.n	8004d00 <HAL_TIM_ConfigClockSource+0xd4>
 8004c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c86:	f200 8087 	bhi.w	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8e:	f000 8086 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x172>
 8004c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c96:	d87f      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004c98:	2b70      	cmp	r3, #112	; 0x70
 8004c9a:	d01a      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0xa6>
 8004c9c:	2b70      	cmp	r3, #112	; 0x70
 8004c9e:	d87b      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca0:	2b60      	cmp	r3, #96	; 0x60
 8004ca2:	d050      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x11a>
 8004ca4:	2b60      	cmp	r3, #96	; 0x60
 8004ca6:	d877      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca8:	2b50      	cmp	r3, #80	; 0x50
 8004caa:	d03c      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0xfa>
 8004cac:	2b50      	cmp	r3, #80	; 0x50
 8004cae:	d873      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d058      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x13a>
 8004cb4:	2b40      	cmp	r3, #64	; 0x40
 8004cb6:	d86f      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb8:	2b30      	cmp	r3, #48	; 0x30
 8004cba:	d064      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x15a>
 8004cbc:	2b30      	cmp	r3, #48	; 0x30
 8004cbe:	d86b      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d060      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x15a>
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d867      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d05c      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x15a>
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d05a      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd0:	e062      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ce2:	f000 fb41 	bl	8005368 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	609a      	str	r2, [r3, #8]
      break;
 8004cfe:	e04f      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d10:	f000 fb2a 	bl	8005368 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d22:	609a      	str	r2, [r3, #8]
      break;
 8004d24:	e03c      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d32:	461a      	mov	r2, r3
 8004d34:	f000 fa9e 	bl	8005274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2150      	movs	r1, #80	; 0x50
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 faf7 	bl	8005332 <TIM_ITRx_SetConfig>
      break;
 8004d44:	e02c      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d52:	461a      	mov	r2, r3
 8004d54:	f000 fabd 	bl	80052d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2160      	movs	r1, #96	; 0x60
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fae7 	bl	8005332 <TIM_ITRx_SetConfig>
      break;
 8004d64:	e01c      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d72:	461a      	mov	r2, r3
 8004d74:	f000 fa7e 	bl	8005274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2140      	movs	r1, #64	; 0x40
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fad7 	bl	8005332 <TIM_ITRx_SetConfig>
      break;
 8004d84:	e00c      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f000 face 	bl	8005332 <TIM_ITRx_SetConfig>
      break;
 8004d96:	e003      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d9c:	e000      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a46      	ldr	r2, [pc, #280]	; (8004ee8 <TIM_Base_SetConfig+0x12c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dda:	d00f      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a43      	ldr	r2, [pc, #268]	; (8004eec <TIM_Base_SetConfig+0x130>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a42      	ldr	r2, [pc, #264]	; (8004ef0 <TIM_Base_SetConfig+0x134>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a41      	ldr	r2, [pc, #260]	; (8004ef4 <TIM_Base_SetConfig+0x138>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a40      	ldr	r2, [pc, #256]	; (8004ef8 <TIM_Base_SetConfig+0x13c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d108      	bne.n	8004e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a35      	ldr	r2, [pc, #212]	; (8004ee8 <TIM_Base_SetConfig+0x12c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d02b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d027      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a32      	ldr	r2, [pc, #200]	; (8004eec <TIM_Base_SetConfig+0x130>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d023      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a31      	ldr	r2, [pc, #196]	; (8004ef0 <TIM_Base_SetConfig+0x134>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01f      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a30      	ldr	r2, [pc, #192]	; (8004ef4 <TIM_Base_SetConfig+0x138>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2f      	ldr	r2, [pc, #188]	; (8004ef8 <TIM_Base_SetConfig+0x13c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d017      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2e      	ldr	r2, [pc, #184]	; (8004efc <TIM_Base_SetConfig+0x140>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a2d      	ldr	r2, [pc, #180]	; (8004f00 <TIM_Base_SetConfig+0x144>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00f      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2c      	ldr	r2, [pc, #176]	; (8004f04 <TIM_Base_SetConfig+0x148>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2b      	ldr	r2, [pc, #172]	; (8004f08 <TIM_Base_SetConfig+0x14c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d007      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2a      	ldr	r2, [pc, #168]	; (8004f0c <TIM_Base_SetConfig+0x150>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a29      	ldr	r2, [pc, #164]	; (8004f10 <TIM_Base_SetConfig+0x154>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d108      	bne.n	8004e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a10      	ldr	r2, [pc, #64]	; (8004ee8 <TIM_Base_SetConfig+0x12c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_Base_SetConfig+0xf8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a12      	ldr	r2, [pc, #72]	; (8004ef8 <TIM_Base_SetConfig+0x13c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d103      	bne.n	8004ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d105      	bne.n	8004eda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f023 0201 	bic.w	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	611a      	str	r2, [r3, #16]
  }
}
 8004eda:	bf00      	nop
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	40010000 	.word	0x40010000
 8004eec:	40000400 	.word	0x40000400
 8004ef0:	40000800 	.word	0x40000800
 8004ef4:	40000c00 	.word	0x40000c00
 8004ef8:	40010400 	.word	0x40010400
 8004efc:	40014000 	.word	0x40014000
 8004f00:	40014400 	.word	0x40014400
 8004f04:	40014800 	.word	0x40014800
 8004f08:	40001800 	.word	0x40001800
 8004f0c:	40001c00 	.word	0x40001c00
 8004f10:	40002000 	.word	0x40002000

08004f14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f023 0201 	bic.w	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0303 	bic.w	r3, r3, #3
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f023 0302 	bic.w	r3, r3, #2
 8004f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a20      	ldr	r2, [pc, #128]	; (8004fec <TIM_OC1_SetConfig+0xd8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d003      	beq.n	8004f78 <TIM_OC1_SetConfig+0x64>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a1f      	ldr	r2, [pc, #124]	; (8004ff0 <TIM_OC1_SetConfig+0xdc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d10c      	bne.n	8004f92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f023 0308 	bic.w	r3, r3, #8
 8004f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 0304 	bic.w	r3, r3, #4
 8004f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a15      	ldr	r2, [pc, #84]	; (8004fec <TIM_OC1_SetConfig+0xd8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_OC1_SetConfig+0x8e>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a14      	ldr	r2, [pc, #80]	; (8004ff0 <TIM_OC1_SetConfig+0xdc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d111      	bne.n	8004fc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	621a      	str	r2, [r3, #32]
}
 8004fe0:	bf00      	nop
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	40010400 	.word	0x40010400

08004ff4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	f023 0210 	bic.w	r2, r3, #16
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 0320 	bic.w	r3, r3, #32
 800503e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a22      	ldr	r2, [pc, #136]	; (80050d8 <TIM_OC2_SetConfig+0xe4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_OC2_SetConfig+0x68>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a21      	ldr	r2, [pc, #132]	; (80050dc <TIM_OC2_SetConfig+0xe8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d10d      	bne.n	8005078 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005076:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a17      	ldr	r2, [pc, #92]	; (80050d8 <TIM_OC2_SetConfig+0xe4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <TIM_OC2_SetConfig+0x94>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a16      	ldr	r2, [pc, #88]	; (80050dc <TIM_OC2_SetConfig+0xe8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d113      	bne.n	80050b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800508e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005096:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40010000 	.word	0x40010000
 80050dc:	40010400 	.word	0x40010400

080050e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0303 	bic.w	r3, r3, #3
 8005116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <TIM_OC3_SetConfig+0xe0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <TIM_OC3_SetConfig+0x66>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <TIM_OC3_SetConfig+0xe4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d10d      	bne.n	8005162 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800514c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <TIM_OC3_SetConfig+0xe0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <TIM_OC3_SetConfig+0x92>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <TIM_OC3_SetConfig+0xe4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d113      	bne.n	800519a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	621a      	str	r2, [r3, #32]
}
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40010400 	.word	0x40010400

080051c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	031b      	lsls	r3, r3, #12
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a12      	ldr	r2, [pc, #72]	; (800526c <TIM_OC4_SetConfig+0xa4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_OC4_SetConfig+0x68>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a11      	ldr	r2, [pc, #68]	; (8005270 <TIM_OC4_SetConfig+0xa8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d109      	bne.n	8005244 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	019b      	lsls	r3, r3, #6
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40010000 	.word	0x40010000
 8005270:	40010400 	.word	0x40010400

08005274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f023 0201 	bic.w	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800529e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f023 030a 	bic.w	r3, r3, #10
 80052b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b087      	sub	sp, #28
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	f023 0210 	bic.w	r2, r3, #16
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	031b      	lsls	r3, r3, #12
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800530e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	621a      	str	r2, [r3, #32]
}
 8005326:	bf00      	nop
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	f043 0307 	orr.w	r3, r3, #7
 8005354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	609a      	str	r2, [r3, #8]
}
 800535c:	bf00      	nop
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	021a      	lsls	r2, r3, #8
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	431a      	orrs	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4313      	orrs	r3, r2
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	609a      	str	r2, [r3, #8]
}
 800539c:	bf00      	nop
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	2201      	movs	r2, #1
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a1a      	ldr	r2, [r3, #32]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	43db      	mvns	r3, r3
 80053ca:	401a      	ands	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a1a      	ldr	r2, [r3, #32]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f003 031f 	and.w	r3, r3, #31
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	fa01 f303 	lsl.w	r3, r1, r3
 80053e0:	431a      	orrs	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	621a      	str	r2, [r3, #32]
}
 80053e6:	bf00      	nop
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
	...

080053f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005408:	2302      	movs	r3, #2
 800540a:	e05a      	b.n	80054c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a21      	ldr	r2, [pc, #132]	; (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d022      	beq.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005458:	d01d      	beq.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d018      	beq.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1b      	ldr	r2, [pc, #108]	; (80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d013      	beq.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1a      	ldr	r2, [pc, #104]	; (80054dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00e      	beq.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a18      	ldr	r2, [pc, #96]	; (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d009      	beq.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a17      	ldr	r2, [pc, #92]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d004      	beq.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d10c      	bne.n	80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800549c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40000800 	.word	0x40000800
 80054dc:	40000c00 	.word	0x40000c00
 80054e0:	40010400 	.word	0x40010400
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40001800 	.word	0x40001800

080054ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005504:	2302      	movs	r3, #2
 8005506:	e03d      	b.n	8005584 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e042      	b.n	8005628 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fc fc36 	bl	8001e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2224      	movs	r2, #36	; 0x24
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fd69 	bl	80060ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2220      	movs	r2, #32
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	; 0x28
 8005634:	af02      	add	r7, sp, #8
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b20      	cmp	r3, #32
 800564e:	d175      	bne.n	800573c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_UART_Transmit+0x2c>
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e06e      	b.n	800573e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2221      	movs	r2, #33	; 0x21
 800566a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800566e:	f7fc ff63 	bl	8002538 <HAL_GetTick>
 8005672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	88fa      	ldrh	r2, [r7, #6]
 8005678:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	88fa      	ldrh	r2, [r7, #6]
 800567e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005688:	d108      	bne.n	800569c <HAL_UART_Transmit+0x6c>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d104      	bne.n	800569c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005692:	2300      	movs	r3, #0
 8005694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	e003      	b.n	80056a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056a4:	e02e      	b.n	8005704 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2200      	movs	r2, #0
 80056ae:	2180      	movs	r1, #128	; 0x80
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fb05 	bl	8005cc0 <UART_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d005      	beq.n	80056c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e03a      	b.n	800573e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	3302      	adds	r3, #2
 80056e2:	61bb      	str	r3, [r7, #24]
 80056e4:	e007      	b.n	80056f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	3301      	adds	r3, #1
 80056f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1cb      	bne.n	80056a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2200      	movs	r2, #0
 8005716:	2140      	movs	r1, #64	; 0x40
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fad1 	bl	8005cc0 <UART_WaitOnFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e006      	b.n	800573e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	e000      	b.n	800573e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800573c:	2302      	movs	r3, #2
  }
}
 800573e:	4618      	mov	r0, r3
 8005740:	3720      	adds	r7, #32
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b0ba      	sub	sp, #232	; 0xe8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800576e:	2300      	movs	r3, #0
 8005770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005774:	2300      	movs	r3, #0
 8005776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800577a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10f      	bne.n	80057ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800578e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d009      	beq.n	80057ae <HAL_UART_IRQHandler+0x66>
 800579a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fbc2 	bl	8005f30 <UART_Receive_IT>
      return;
 80057ac:	e25b      	b.n	8005c66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 80de 	beq.w	8005974 <HAL_UART_IRQHandler+0x22c>
 80057b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80d1 	beq.w	8005974 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <HAL_UART_IRQHandler+0xae>
 80057de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ee:	f043 0201 	orr.w	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00b      	beq.n	800581a <HAL_UART_IRQHandler+0xd2>
 8005802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005812:	f043 0202 	orr.w	r2, r3, #2
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800581a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <HAL_UART_IRQHandler+0xf6>
 8005826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005836:	f043 0204 	orr.w	r2, r3, #4
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800583e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d011      	beq.n	800586e <HAL_UART_IRQHandler+0x126>
 800584a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b00      	cmp	r3, #0
 8005854:	d105      	bne.n	8005862 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005866:	f043 0208 	orr.w	r2, r3, #8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 81f2 	beq.w	8005c5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_UART_IRQHandler+0x14e>
 8005884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fb4d 	bl	8005f30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a0:	2b40      	cmp	r3, #64	; 0x40
 80058a2:	bf0c      	ite	eq
 80058a4:	2301      	moveq	r3, #1
 80058a6:	2300      	movne	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d103      	bne.n	80058c2 <HAL_UART_IRQHandler+0x17a>
 80058ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d04f      	beq.n	8005962 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fa55 	bl	8005d72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d2:	2b40      	cmp	r3, #64	; 0x40
 80058d4:	d141      	bne.n	800595a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3314      	adds	r3, #20
 80058dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3314      	adds	r3, #20
 80058fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005902:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800590e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800591a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1d9      	bne.n	80058d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d013      	beq.n	8005952 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592e:	4a7e      	ldr	r2, [pc, #504]	; (8005b28 <HAL_UART_IRQHandler+0x3e0>)
 8005930:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005936:	4618      	mov	r0, r3
 8005938:	f7fc ffaf 	bl	800289a <HAL_DMA_Abort_IT>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d016      	beq.n	8005970 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800594c:	4610      	mov	r0, r2
 800594e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005950:	e00e      	b.n	8005970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f99e 	bl	8005c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005958:	e00a      	b.n	8005970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f99a 	bl	8005c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005960:	e006      	b.n	8005970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f996 	bl	8005c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800596e:	e175      	b.n	8005c5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005970:	bf00      	nop
    return;
 8005972:	e173      	b.n	8005c5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	2b01      	cmp	r3, #1
 800597a:	f040 814f 	bne.w	8005c1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 8148 	beq.w	8005c1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800598c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 8141 	beq.w	8005c1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800599a:	2300      	movs	r3, #0
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	60bb      	str	r3, [r7, #8]
 80059ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b40      	cmp	r3, #64	; 0x40
 80059bc:	f040 80b6 	bne.w	8005b2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 8145 	beq.w	8005c60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059de:	429a      	cmp	r2, r3
 80059e0:	f080 813e 	bcs.w	8005c60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f6:	f000 8088 	beq.w	8005b0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	330c      	adds	r3, #12
 8005a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	330c      	adds	r3, #12
 8005a22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1d9      	bne.n	80059fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3314      	adds	r3, #20
 8005a4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a58:	f023 0301 	bic.w	r3, r3, #1
 8005a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3314      	adds	r3, #20
 8005a66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e1      	bne.n	8005a46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3314      	adds	r3, #20
 8005a88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3314      	adds	r3, #20
 8005aa2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005aa6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005aa8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005aac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e3      	bne.n	8005a82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ada:	f023 0310 	bic.w	r3, r3, #16
 8005ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	330c      	adds	r3, #12
 8005ae8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005aec:	65ba      	str	r2, [r7, #88]	; 0x58
 8005aee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005af2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e3      	bne.n	8005ac8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fc fe58 	bl	80027ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f8c1 	bl	8005ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b26:	e09b      	b.n	8005c60 <HAL_UART_IRQHandler+0x518>
 8005b28:	08005e39 	.word	0x08005e39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 808e 	beq.w	8005c64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 8089 	beq.w	8005c64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	330c      	adds	r3, #12
 8005b58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b76:	647a      	str	r2, [r7, #68]	; 0x44
 8005b78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e3      	bne.n	8005b52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3314      	adds	r3, #20
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	623b      	str	r3, [r7, #32]
   return(result);
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	f023 0301 	bic.w	r3, r3, #1
 8005ba0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3314      	adds	r3, #20
 8005baa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bae:	633a      	str	r2, [r7, #48]	; 0x30
 8005bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e3      	bne.n	8005b8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	330c      	adds	r3, #12
 8005bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0310 	bic.w	r3, r3, #16
 8005be6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005bf4:	61fa      	str	r2, [r7, #28]
 8005bf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	69b9      	ldr	r1, [r7, #24]
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	617b      	str	r3, [r7, #20]
   return(result);
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e3      	bne.n	8005bd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c12:	4619      	mov	r1, r3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f847 	bl	8005ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c1a:	e023      	b.n	8005c64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d009      	beq.n	8005c3c <HAL_UART_IRQHandler+0x4f4>
 8005c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f913 	bl	8005e60 <UART_Transmit_IT>
    return;
 8005c3a:	e014      	b.n	8005c66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00e      	beq.n	8005c66 <HAL_UART_IRQHandler+0x51e>
 8005c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f953 	bl	8005f00 <UART_EndTransmit_IT>
    return;
 8005c5a:	e004      	b.n	8005c66 <HAL_UART_IRQHandler+0x51e>
    return;
 8005c5c:	bf00      	nop
 8005c5e:	e002      	b.n	8005c66 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c60:	bf00      	nop
 8005c62:	e000      	b.n	8005c66 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c64:	bf00      	nop
  }
}
 8005c66:	37e8      	adds	r7, #232	; 0xe8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd0:	e03b      	b.n	8005d4a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd8:	d037      	beq.n	8005d4a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cda:	f7fc fc2d 	bl	8002538 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	6a3a      	ldr	r2, [r7, #32]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d302      	bcc.n	8005cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e03a      	b.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d023      	beq.n	8005d4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b80      	cmp	r3, #128	; 0x80
 8005d06:	d020      	beq.n	8005d4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d01d      	beq.n	8005d4a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d116      	bne.n	8005d4a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	617b      	str	r3, [r7, #20]
 8005d30:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 f81d 	bl	8005d72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e00f      	b.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4013      	ands	r3, r2
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	bf0c      	ite	eq
 8005d5a:	2301      	moveq	r3, #1
 8005d5c:	2300      	movne	r3, #0
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	79fb      	ldrb	r3, [r7, #7]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d0b4      	beq.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b095      	sub	sp, #84	; 0x54
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	330c      	adds	r3, #12
 8005d80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	330c      	adds	r3, #12
 8005d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d9a:	643a      	str	r2, [r7, #64]	; 0x40
 8005d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005da0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e5      	bne.n	8005d7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3314      	adds	r3, #20
 8005db4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3314      	adds	r3, #20
 8005dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e5      	bne.n	8005dae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d119      	bne.n	8005e1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	330c      	adds	r3, #12
 8005df0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f023 0310 	bic.w	r3, r3, #16
 8005e00:	647b      	str	r3, [r7, #68]	; 0x44
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	330c      	adds	r3, #12
 8005e08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e0a:	61ba      	str	r2, [r7, #24]
 8005e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	6979      	ldr	r1, [r7, #20]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	613b      	str	r3, [r7, #16]
   return(result);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e5      	bne.n	8005dea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e2c:	bf00      	nop
 8005e2e:	3754      	adds	r7, #84	; 0x54
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f7ff ff1e 	bl	8005c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b21      	cmp	r3, #33	; 0x21
 8005e72:	d13e      	bne.n	8005ef2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7c:	d114      	bne.n	8005ea8 <UART_Transmit_IT+0x48>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d110      	bne.n	8005ea8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	461a      	mov	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	1c9a      	adds	r2, r3, #2
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	621a      	str	r2, [r3, #32]
 8005ea6:	e008      	b.n	8005eba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	1c59      	adds	r1, r3, #1
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6211      	str	r1, [r2, #32]
 8005eb2:	781a      	ldrb	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10f      	bne.n	8005eee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005edc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	e000      	b.n	8005ef4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ef2:	2302      	movs	r3, #2
  }
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff fea3 	bl	8005c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08c      	sub	sp, #48	; 0x30
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b22      	cmp	r3, #34	; 0x22
 8005f42:	f040 80ae 	bne.w	80060a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4e:	d117      	bne.n	8005f80 <UART_Receive_IT+0x50>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d113      	bne.n	8005f80 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	1c9a      	adds	r2, r3, #2
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	629a      	str	r2, [r3, #40]	; 0x28
 8005f7e:	e026      	b.n	8005fce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f92:	d007      	beq.n	8005fa4 <UART_Receive_IT+0x74>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <UART_Receive_IT+0x82>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d106      	bne.n	8005fb2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fae:	701a      	strb	r2, [r3, #0]
 8005fb0:	e008      	b.n	8005fc4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d15d      	bne.n	800609e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68da      	ldr	r2, [r3, #12]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0220 	bic.w	r2, r2, #32
 8005ff0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006000:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695a      	ldr	r2, [r3, #20]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0201 	bic.w	r2, r2, #1
 8006010:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	2b01      	cmp	r3, #1
 8006026:	d135      	bne.n	8006094 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	330c      	adds	r3, #12
 8006034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	613b      	str	r3, [r7, #16]
   return(result);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f023 0310 	bic.w	r3, r3, #16
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	330c      	adds	r3, #12
 800604c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604e:	623a      	str	r2, [r7, #32]
 8006050:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	69f9      	ldr	r1, [r7, #28]
 8006054:	6a3a      	ldr	r2, [r7, #32]
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	61bb      	str	r3, [r7, #24]
   return(result);
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e5      	bne.n	800602e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b10      	cmp	r3, #16
 800606e:	d10a      	bne.n	8006086 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff fe0b 	bl	8005ca8 <HAL_UARTEx_RxEventCallback>
 8006092:	e002      	b.n	800609a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff fdf3 	bl	8005c80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	e002      	b.n	80060a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	e000      	b.n	80060a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80060a2:	2302      	movs	r3, #2
  }
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3730      	adds	r7, #48	; 0x30
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b0:	b0c0      	sub	sp, #256	; 0x100
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c8:	68d9      	ldr	r1, [r3, #12]
 80060ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	ea40 0301 	orr.w	r3, r0, r1
 80060d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	431a      	orrs	r2, r3
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006104:	f021 010c 	bic.w	r1, r1, #12
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006112:	430b      	orrs	r3, r1
 8006114:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006126:	6999      	ldr	r1, [r3, #24]
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	ea40 0301 	orr.w	r3, r0, r1
 8006132:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	4b8f      	ldr	r3, [pc, #572]	; (8006378 <UART_SetConfig+0x2cc>)
 800613c:	429a      	cmp	r2, r3
 800613e:	d005      	beq.n	800614c <UART_SetConfig+0xa0>
 8006140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b8d      	ldr	r3, [pc, #564]	; (800637c <UART_SetConfig+0x2d0>)
 8006148:	429a      	cmp	r2, r3
 800614a:	d104      	bne.n	8006156 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800614c:	f7fe f9fe 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 8006150:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006154:	e003      	b.n	800615e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006156:	f7fe f9e5 	bl	8004524 <HAL_RCC_GetPCLK1Freq>
 800615a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800615e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006168:	f040 810c 	bne.w	8006384 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800616c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006170:	2200      	movs	r2, #0
 8006172:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006176:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800617a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800617e:	4622      	mov	r2, r4
 8006180:	462b      	mov	r3, r5
 8006182:	1891      	adds	r1, r2, r2
 8006184:	65b9      	str	r1, [r7, #88]	; 0x58
 8006186:	415b      	adcs	r3, r3
 8006188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800618a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800618e:	4621      	mov	r1, r4
 8006190:	eb12 0801 	adds.w	r8, r2, r1
 8006194:	4629      	mov	r1, r5
 8006196:	eb43 0901 	adc.w	r9, r3, r1
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061ae:	4690      	mov	r8, r2
 80061b0:	4699      	mov	r9, r3
 80061b2:	4623      	mov	r3, r4
 80061b4:	eb18 0303 	adds.w	r3, r8, r3
 80061b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061bc:	462b      	mov	r3, r5
 80061be:	eb49 0303 	adc.w	r3, r9, r3
 80061c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80061d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80061da:	460b      	mov	r3, r1
 80061dc:	18db      	adds	r3, r3, r3
 80061de:	653b      	str	r3, [r7, #80]	; 0x50
 80061e0:	4613      	mov	r3, r2
 80061e2:	eb42 0303 	adc.w	r3, r2, r3
 80061e6:	657b      	str	r3, [r7, #84]	; 0x54
 80061e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061f0:	f7fa fc34 	bl	8000a5c <__aeabi_uldivmod>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4b61      	ldr	r3, [pc, #388]	; (8006380 <UART_SetConfig+0x2d4>)
 80061fa:	fba3 2302 	umull	r2, r3, r3, r2
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	011c      	lsls	r4, r3, #4
 8006202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006206:	2200      	movs	r2, #0
 8006208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800620c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006210:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006214:	4642      	mov	r2, r8
 8006216:	464b      	mov	r3, r9
 8006218:	1891      	adds	r1, r2, r2
 800621a:	64b9      	str	r1, [r7, #72]	; 0x48
 800621c:	415b      	adcs	r3, r3
 800621e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006220:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006224:	4641      	mov	r1, r8
 8006226:	eb12 0a01 	adds.w	sl, r2, r1
 800622a:	4649      	mov	r1, r9
 800622c:	eb43 0b01 	adc.w	fp, r3, r1
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800623c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006240:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006244:	4692      	mov	sl, r2
 8006246:	469b      	mov	fp, r3
 8006248:	4643      	mov	r3, r8
 800624a:	eb1a 0303 	adds.w	r3, sl, r3
 800624e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006252:	464b      	mov	r3, r9
 8006254:	eb4b 0303 	adc.w	r3, fp, r3
 8006258:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006268:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800626c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006270:	460b      	mov	r3, r1
 8006272:	18db      	adds	r3, r3, r3
 8006274:	643b      	str	r3, [r7, #64]	; 0x40
 8006276:	4613      	mov	r3, r2
 8006278:	eb42 0303 	adc.w	r3, r2, r3
 800627c:	647b      	str	r3, [r7, #68]	; 0x44
 800627e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006282:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006286:	f7fa fbe9 	bl	8000a5c <__aeabi_uldivmod>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4611      	mov	r1, r2
 8006290:	4b3b      	ldr	r3, [pc, #236]	; (8006380 <UART_SetConfig+0x2d4>)
 8006292:	fba3 2301 	umull	r2, r3, r3, r1
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	2264      	movs	r2, #100	; 0x64
 800629a:	fb02 f303 	mul.w	r3, r2, r3
 800629e:	1acb      	subs	r3, r1, r3
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062a6:	4b36      	ldr	r3, [pc, #216]	; (8006380 <UART_SetConfig+0x2d4>)
 80062a8:	fba3 2302 	umull	r2, r3, r3, r2
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062b4:	441c      	add	r4, r3
 80062b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80062c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80062c8:	4642      	mov	r2, r8
 80062ca:	464b      	mov	r3, r9
 80062cc:	1891      	adds	r1, r2, r2
 80062ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80062d0:	415b      	adcs	r3, r3
 80062d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062d8:	4641      	mov	r1, r8
 80062da:	1851      	adds	r1, r2, r1
 80062dc:	6339      	str	r1, [r7, #48]	; 0x30
 80062de:	4649      	mov	r1, r9
 80062e0:	414b      	adcs	r3, r1
 80062e2:	637b      	str	r3, [r7, #52]	; 0x34
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062f0:	4659      	mov	r1, fp
 80062f2:	00cb      	lsls	r3, r1, #3
 80062f4:	4651      	mov	r1, sl
 80062f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062fa:	4651      	mov	r1, sl
 80062fc:	00ca      	lsls	r2, r1, #3
 80062fe:	4610      	mov	r0, r2
 8006300:	4619      	mov	r1, r3
 8006302:	4603      	mov	r3, r0
 8006304:	4642      	mov	r2, r8
 8006306:	189b      	adds	r3, r3, r2
 8006308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800630c:	464b      	mov	r3, r9
 800630e:	460a      	mov	r2, r1
 8006310:	eb42 0303 	adc.w	r3, r2, r3
 8006314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006324:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800632c:	460b      	mov	r3, r1
 800632e:	18db      	adds	r3, r3, r3
 8006330:	62bb      	str	r3, [r7, #40]	; 0x28
 8006332:	4613      	mov	r3, r2
 8006334:	eb42 0303 	adc.w	r3, r2, r3
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800633a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800633e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006342:	f7fa fb8b 	bl	8000a5c <__aeabi_uldivmod>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <UART_SetConfig+0x2d4>)
 800634c:	fba3 1302 	umull	r1, r3, r3, r2
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	2164      	movs	r1, #100	; 0x64
 8006354:	fb01 f303 	mul.w	r3, r1, r3
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	3332      	adds	r3, #50	; 0x32
 800635e:	4a08      	ldr	r2, [pc, #32]	; (8006380 <UART_SetConfig+0x2d4>)
 8006360:	fba2 2303 	umull	r2, r3, r2, r3
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	f003 0207 	and.w	r2, r3, #7
 800636a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4422      	add	r2, r4
 8006372:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006374:	e106      	b.n	8006584 <UART_SetConfig+0x4d8>
 8006376:	bf00      	nop
 8006378:	40011000 	.word	0x40011000
 800637c:	40011400 	.word	0x40011400
 8006380:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006388:	2200      	movs	r2, #0
 800638a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800638e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006392:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006396:	4642      	mov	r2, r8
 8006398:	464b      	mov	r3, r9
 800639a:	1891      	adds	r1, r2, r2
 800639c:	6239      	str	r1, [r7, #32]
 800639e:	415b      	adcs	r3, r3
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
 80063a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063a6:	4641      	mov	r1, r8
 80063a8:	1854      	adds	r4, r2, r1
 80063aa:	4649      	mov	r1, r9
 80063ac:	eb43 0501 	adc.w	r5, r3, r1
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	00eb      	lsls	r3, r5, #3
 80063ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063be:	00e2      	lsls	r2, r4, #3
 80063c0:	4614      	mov	r4, r2
 80063c2:	461d      	mov	r5, r3
 80063c4:	4643      	mov	r3, r8
 80063c6:	18e3      	adds	r3, r4, r3
 80063c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063cc:	464b      	mov	r3, r9
 80063ce:	eb45 0303 	adc.w	r3, r5, r3
 80063d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063f2:	4629      	mov	r1, r5
 80063f4:	008b      	lsls	r3, r1, #2
 80063f6:	4621      	mov	r1, r4
 80063f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063fc:	4621      	mov	r1, r4
 80063fe:	008a      	lsls	r2, r1, #2
 8006400:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006404:	f7fa fb2a 	bl	8000a5c <__aeabi_uldivmod>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4b60      	ldr	r3, [pc, #384]	; (8006590 <UART_SetConfig+0x4e4>)
 800640e:	fba3 2302 	umull	r2, r3, r3, r2
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	011c      	lsls	r4, r3, #4
 8006416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800641a:	2200      	movs	r2, #0
 800641c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006420:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006424:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006428:	4642      	mov	r2, r8
 800642a:	464b      	mov	r3, r9
 800642c:	1891      	adds	r1, r2, r2
 800642e:	61b9      	str	r1, [r7, #24]
 8006430:	415b      	adcs	r3, r3
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006438:	4641      	mov	r1, r8
 800643a:	1851      	adds	r1, r2, r1
 800643c:	6139      	str	r1, [r7, #16]
 800643e:	4649      	mov	r1, r9
 8006440:	414b      	adcs	r3, r1
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006450:	4659      	mov	r1, fp
 8006452:	00cb      	lsls	r3, r1, #3
 8006454:	4651      	mov	r1, sl
 8006456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800645a:	4651      	mov	r1, sl
 800645c:	00ca      	lsls	r2, r1, #3
 800645e:	4610      	mov	r0, r2
 8006460:	4619      	mov	r1, r3
 8006462:	4603      	mov	r3, r0
 8006464:	4642      	mov	r2, r8
 8006466:	189b      	adds	r3, r3, r2
 8006468:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800646c:	464b      	mov	r3, r9
 800646e:	460a      	mov	r2, r1
 8006470:	eb42 0303 	adc.w	r3, r2, r3
 8006474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	67bb      	str	r3, [r7, #120]	; 0x78
 8006482:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006490:	4649      	mov	r1, r9
 8006492:	008b      	lsls	r3, r1, #2
 8006494:	4641      	mov	r1, r8
 8006496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800649a:	4641      	mov	r1, r8
 800649c:	008a      	lsls	r2, r1, #2
 800649e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064a2:	f7fa fadb 	bl	8000a5c <__aeabi_uldivmod>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4611      	mov	r1, r2
 80064ac:	4b38      	ldr	r3, [pc, #224]	; (8006590 <UART_SetConfig+0x4e4>)
 80064ae:	fba3 2301 	umull	r2, r3, r3, r1
 80064b2:	095b      	lsrs	r3, r3, #5
 80064b4:	2264      	movs	r2, #100	; 0x64
 80064b6:	fb02 f303 	mul.w	r3, r2, r3
 80064ba:	1acb      	subs	r3, r1, r3
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	3332      	adds	r3, #50	; 0x32
 80064c0:	4a33      	ldr	r2, [pc, #204]	; (8006590 <UART_SetConfig+0x4e4>)
 80064c2:	fba2 2303 	umull	r2, r3, r2, r3
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064cc:	441c      	add	r4, r3
 80064ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064d2:	2200      	movs	r2, #0
 80064d4:	673b      	str	r3, [r7, #112]	; 0x70
 80064d6:	677a      	str	r2, [r7, #116]	; 0x74
 80064d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80064dc:	4642      	mov	r2, r8
 80064de:	464b      	mov	r3, r9
 80064e0:	1891      	adds	r1, r2, r2
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	415b      	adcs	r3, r3
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064ec:	4641      	mov	r1, r8
 80064ee:	1851      	adds	r1, r2, r1
 80064f0:	6039      	str	r1, [r7, #0]
 80064f2:	4649      	mov	r1, r9
 80064f4:	414b      	adcs	r3, r1
 80064f6:	607b      	str	r3, [r7, #4]
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006504:	4659      	mov	r1, fp
 8006506:	00cb      	lsls	r3, r1, #3
 8006508:	4651      	mov	r1, sl
 800650a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800650e:	4651      	mov	r1, sl
 8006510:	00ca      	lsls	r2, r1, #3
 8006512:	4610      	mov	r0, r2
 8006514:	4619      	mov	r1, r3
 8006516:	4603      	mov	r3, r0
 8006518:	4642      	mov	r2, r8
 800651a:	189b      	adds	r3, r3, r2
 800651c:	66bb      	str	r3, [r7, #104]	; 0x68
 800651e:	464b      	mov	r3, r9
 8006520:	460a      	mov	r2, r1
 8006522:	eb42 0303 	adc.w	r3, r2, r3
 8006526:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	663b      	str	r3, [r7, #96]	; 0x60
 8006532:	667a      	str	r2, [r7, #100]	; 0x64
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006540:	4649      	mov	r1, r9
 8006542:	008b      	lsls	r3, r1, #2
 8006544:	4641      	mov	r1, r8
 8006546:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800654a:	4641      	mov	r1, r8
 800654c:	008a      	lsls	r2, r1, #2
 800654e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006552:	f7fa fa83 	bl	8000a5c <__aeabi_uldivmod>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4b0d      	ldr	r3, [pc, #52]	; (8006590 <UART_SetConfig+0x4e4>)
 800655c:	fba3 1302 	umull	r1, r3, r3, r2
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	2164      	movs	r1, #100	; 0x64
 8006564:	fb01 f303 	mul.w	r3, r1, r3
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	3332      	adds	r3, #50	; 0x32
 800656e:	4a08      	ldr	r2, [pc, #32]	; (8006590 <UART_SetConfig+0x4e4>)
 8006570:	fba2 2303 	umull	r2, r3, r2, r3
 8006574:	095b      	lsrs	r3, r3, #5
 8006576:	f003 020f 	and.w	r2, r3, #15
 800657a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4422      	add	r2, r4
 8006582:	609a      	str	r2, [r3, #8]
}
 8006584:	bf00      	nop
 8006586:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800658a:	46bd      	mov	sp, r7
 800658c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006590:	51eb851f 	.word	0x51eb851f

08006594 <__NVIC_SetPriority>:
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	4603      	mov	r3, r0
 800659c:	6039      	str	r1, [r7, #0]
 800659e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	db0a      	blt.n	80065be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	490c      	ldr	r1, [pc, #48]	; (80065e0 <__NVIC_SetPriority+0x4c>)
 80065ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065b2:	0112      	lsls	r2, r2, #4
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	440b      	add	r3, r1
 80065b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80065bc:	e00a      	b.n	80065d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	4908      	ldr	r1, [pc, #32]	; (80065e4 <__NVIC_SetPriority+0x50>)
 80065c4:	79fb      	ldrb	r3, [r7, #7]
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	3b04      	subs	r3, #4
 80065cc:	0112      	lsls	r2, r2, #4
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	440b      	add	r3, r1
 80065d2:	761a      	strb	r2, [r3, #24]
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	e000e100 	.word	0xe000e100
 80065e4:	e000ed00 	.word	0xe000ed00

080065e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80065ec:	2100      	movs	r1, #0
 80065ee:	f06f 0004 	mvn.w	r0, #4
 80065f2:	f7ff ffcf 	bl	8006594 <__NVIC_SetPriority>
#endif
}
 80065f6:	bf00      	nop
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006602:	f3ef 8305 	mrs	r3, IPSR
 8006606:	603b      	str	r3, [r7, #0]
  return(result);
 8006608:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800660e:	f06f 0305 	mvn.w	r3, #5
 8006612:	607b      	str	r3, [r7, #4]
 8006614:	e00c      	b.n	8006630 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006616:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <osKernelInitialize+0x44>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d105      	bne.n	800662a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800661e:	4b08      	ldr	r3, [pc, #32]	; (8006640 <osKernelInitialize+0x44>)
 8006620:	2201      	movs	r2, #1
 8006622:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006624:	2300      	movs	r3, #0
 8006626:	607b      	str	r3, [r7, #4]
 8006628:	e002      	b.n	8006630 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800662a:	f04f 33ff 	mov.w	r3, #4294967295
 800662e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006630:	687b      	ldr	r3, [r7, #4]
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	20000684 	.word	0x20000684

08006644 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800664a:	f3ef 8305 	mrs	r3, IPSR
 800664e:	603b      	str	r3, [r7, #0]
  return(result);
 8006650:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006656:	f06f 0305 	mvn.w	r3, #5
 800665a:	607b      	str	r3, [r7, #4]
 800665c:	e010      	b.n	8006680 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800665e:	4b0b      	ldr	r3, [pc, #44]	; (800668c <osKernelStart+0x48>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d109      	bne.n	800667a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006666:	f7ff ffbf 	bl	80065e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800666a:	4b08      	ldr	r3, [pc, #32]	; (800668c <osKernelStart+0x48>)
 800666c:	2202      	movs	r2, #2
 800666e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006670:	f001 f866 	bl	8007740 <vTaskStartScheduler>
      stat = osOK;
 8006674:	2300      	movs	r3, #0
 8006676:	607b      	str	r3, [r7, #4]
 8006678:	e002      	b.n	8006680 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800667a:	f04f 33ff 	mov.w	r3, #4294967295
 800667e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006680:	687b      	ldr	r3, [r7, #4]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000684 	.word	0x20000684

08006690 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006690:	b580      	push	{r7, lr}
 8006692:	b08e      	sub	sp, #56	; 0x38
 8006694:	af04      	add	r7, sp, #16
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800669c:	2300      	movs	r3, #0
 800669e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066a0:	f3ef 8305 	mrs	r3, IPSR
 80066a4:	617b      	str	r3, [r7, #20]
  return(result);
 80066a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d17e      	bne.n	80067aa <osThreadNew+0x11a>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d07b      	beq.n	80067aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80066b2:	2380      	movs	r3, #128	; 0x80
 80066b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80066b6:	2318      	movs	r3, #24
 80066b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80066be:	f04f 33ff 	mov.w	r3, #4294967295
 80066c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d045      	beq.n	8006756 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <osThreadNew+0x48>
        name = attr->name;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <osThreadNew+0x6e>
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	2b38      	cmp	r3, #56	; 0x38
 80066f0:	d805      	bhi.n	80066fe <osThreadNew+0x6e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <osThreadNew+0x72>
        return (NULL);
 80066fe:	2300      	movs	r3, #0
 8006700:	e054      	b.n	80067ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	089b      	lsrs	r3, r3, #2
 8006710:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00e      	beq.n	8006738 <osThreadNew+0xa8>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	2b5b      	cmp	r3, #91	; 0x5b
 8006720:	d90a      	bls.n	8006738 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006726:	2b00      	cmp	r3, #0
 8006728:	d006      	beq.n	8006738 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <osThreadNew+0xa8>
        mem = 1;
 8006732:	2301      	movs	r3, #1
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	e010      	b.n	800675a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10c      	bne.n	800675a <osThreadNew+0xca>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d108      	bne.n	800675a <osThreadNew+0xca>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <osThreadNew+0xca>
          mem = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	e001      	b.n	800675a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d110      	bne.n	8006782 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006768:	9202      	str	r2, [sp, #8]
 800676a:	9301      	str	r3, [sp, #4]
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6a3a      	ldr	r2, [r7, #32]
 8006774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 fe0c 	bl	8007394 <xTaskCreateStatic>
 800677c:	4603      	mov	r3, r0
 800677e:	613b      	str	r3, [r7, #16]
 8006780:	e013      	b.n	80067aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d110      	bne.n	80067aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	b29a      	uxth	r2, r3
 800678c:	f107 0310 	add.w	r3, r7, #16
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 fe57 	bl	800744e <xTaskCreate>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d001      	beq.n	80067aa <osThreadNew+0x11a>
            hTask = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80067aa:	693b      	ldr	r3, [r7, #16]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3728      	adds	r7, #40	; 0x28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067bc:	f3ef 8305 	mrs	r3, IPSR
 80067c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80067c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <osDelay+0x1c>
    stat = osErrorISR;
 80067c8:	f06f 0305 	mvn.w	r3, #5
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	e007      	b.n	80067e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 ff7c 	bl	80076d8 <vTaskDelay>
    }
  }

  return (stat);
 80067e0:	68fb      	ldr	r3, [r7, #12]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4a07      	ldr	r2, [pc, #28]	; (8006818 <vApplicationGetIdleTaskMemory+0x2c>)
 80067fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	4a06      	ldr	r2, [pc, #24]	; (800681c <vApplicationGetIdleTaskMemory+0x30>)
 8006802:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2280      	movs	r2, #128	; 0x80
 8006808:	601a      	str	r2, [r3, #0]
}
 800680a:	bf00      	nop
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	20000688 	.word	0x20000688
 800681c:	200006e4 	.word	0x200006e4

08006820 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4a07      	ldr	r2, [pc, #28]	; (800684c <vApplicationGetTimerTaskMemory+0x2c>)
 8006830:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	4a06      	ldr	r2, [pc, #24]	; (8006850 <vApplicationGetTimerTaskMemory+0x30>)
 8006836:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800683e:	601a      	str	r2, [r3, #0]
}
 8006840:	bf00      	nop
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	200008e4 	.word	0x200008e4
 8006850:	20000940 	.word	0x20000940

08006854 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f103 0208 	add.w	r2, r3, #8
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f04f 32ff 	mov.w	r2, #4294967295
 800686c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f103 0208 	add.w	r2, r3, #8
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f103 0208 	add.w	r2, r3, #8
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068ae:	b480      	push	{r7}
 80068b0:	b085      	sub	sp, #20
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	601a      	str	r2, [r3, #0]
}
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068f6:	b480      	push	{r7}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690c:	d103      	bne.n	8006916 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	e00c      	b.n	8006930 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3308      	adds	r3, #8
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	e002      	b.n	8006924 <vListInsert+0x2e>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	429a      	cmp	r2, r3
 800692e:	d2f6      	bcs.n	800691e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	601a      	str	r2, [r3, #0]
}
 800695c:	bf00      	nop
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6892      	ldr	r2, [r2, #8]
 800697e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6852      	ldr	r2, [r2, #4]
 8006988:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	429a      	cmp	r2, r3
 8006992:	d103      	bne.n	800699c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	1e5a      	subs	r2, r3, #1
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069e6:	f002 f84d 	bl	8008a84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f2:	68f9      	ldr	r1, [r7, #12]
 80069f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069f6:	fb01 f303 	mul.w	r3, r1, r3
 80069fa:	441a      	add	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a16:	3b01      	subs	r3, #1
 8006a18:	68f9      	ldr	r1, [r7, #12]
 8006a1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	441a      	add	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	22ff      	movs	r2, #255	; 0xff
 8006a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	22ff      	movs	r2, #255	; 0xff
 8006a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d114      	bne.n	8006a66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d01a      	beq.n	8006a7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3310      	adds	r3, #16
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 f903 	bl	8007c54 <xTaskRemoveFromEventList>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d012      	beq.n	8006a7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a54:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <xQueueGenericReset+0xcc>)
 8006a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	e009      	b.n	8006a7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3310      	adds	r3, #16
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7ff fef2 	bl	8006854 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3324      	adds	r3, #36	; 0x24
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff feed 	bl	8006854 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a7a:	f002 f833 	bl	8008ae4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a7e:	2301      	movs	r3, #1
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08e      	sub	sp, #56	; 0x38
 8006a90:	af02      	add	r7, sp, #8
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <xQueueGenericCreateStatic+0x52>
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <xQueueGenericCreateStatic+0x56>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e000      	b.n	8006ae4 <xQueueGenericCreateStatic+0x58>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	623b      	str	r3, [r7, #32]
}
 8006afa:	bf00      	nop
 8006afc:	e7fe      	b.n	8006afc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d102      	bne.n	8006b0a <xQueueGenericCreateStatic+0x7e>
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <xQueueGenericCreateStatic+0x82>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e000      	b.n	8006b10 <xQueueGenericCreateStatic+0x84>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	61fb      	str	r3, [r7, #28]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b2a:	2350      	movs	r3, #80	; 0x50
 8006b2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b50      	cmp	r3, #80	; 0x50
 8006b32:	d00a      	beq.n	8006b4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	61bb      	str	r3, [r7, #24]
}
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00d      	beq.n	8006b72 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	4613      	mov	r3, r2
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	68b9      	ldr	r1, [r7, #8]
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f805 	bl	8006b7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3730      	adds	r7, #48	; 0x30
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d103      	bne.n	8006b98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	e002      	b.n	8006b9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006baa:	2101      	movs	r1, #1
 8006bac:	69b8      	ldr	r0, [r7, #24]
 8006bae:	f7ff ff05 	bl	80069bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	78fa      	ldrb	r2, [r7, #3]
 8006bb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08e      	sub	sp, #56	; 0x38
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <xQueueGenericSend+0x32>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d103      	bne.n	8006c04 <xQueueGenericSend+0x40>
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <xQueueGenericSend+0x44>
 8006c04:	2301      	movs	r3, #1
 8006c06:	e000      	b.n	8006c0a <xQueueGenericSend+0x46>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10a      	bne.n	8006c24 <xQueueGenericSend+0x60>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c20:	bf00      	nop
 8006c22:	e7fe      	b.n	8006c22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d103      	bne.n	8006c32 <xQueueGenericSend+0x6e>
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <xQueueGenericSend+0x72>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e000      	b.n	8006c38 <xQueueGenericSend+0x74>
 8006c36:	2300      	movs	r3, #0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10a      	bne.n	8006c52 <xQueueGenericSend+0x8e>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	623b      	str	r3, [r7, #32]
}
 8006c4e:	bf00      	nop
 8006c50:	e7fe      	b.n	8006c50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c52:	f001 f9bd 	bl	8007fd0 <xTaskGetSchedulerState>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d102      	bne.n	8006c62 <xQueueGenericSend+0x9e>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <xQueueGenericSend+0xa2>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <xQueueGenericSend+0xa4>
 8006c66:	2300      	movs	r3, #0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10a      	bne.n	8006c82 <xQueueGenericSend+0xbe>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	61fb      	str	r3, [r7, #28]
}
 8006c7e:	bf00      	nop
 8006c80:	e7fe      	b.n	8006c80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c82:	f001 feff 	bl	8008a84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d302      	bcc.n	8006c98 <xQueueGenericSend+0xd4>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d129      	bne.n	8006cec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	68b9      	ldr	r1, [r7, #8]
 8006c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c9e:	f000 fa0b 	bl	80070b8 <prvCopyDataToQueue>
 8006ca2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d010      	beq.n	8006cce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	3324      	adds	r3, #36	; 0x24
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 ffcf 	bl	8007c54 <xTaskRemoveFromEventList>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d013      	beq.n	8006ce4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006cbc:	4b3f      	ldr	r3, [pc, #252]	; (8006dbc <xQueueGenericSend+0x1f8>)
 8006cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	e00a      	b.n	8006ce4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d007      	beq.n	8006ce4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006cd4:	4b39      	ldr	r3, [pc, #228]	; (8006dbc <xQueueGenericSend+0x1f8>)
 8006cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ce4:	f001 fefe 	bl	8008ae4 <vPortExitCritical>
				return pdPASS;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e063      	b.n	8006db4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d103      	bne.n	8006cfa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cf2:	f001 fef7 	bl	8008ae4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e05c      	b.n	8006db4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d106      	bne.n	8006d0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d00:	f107 0314 	add.w	r3, r7, #20
 8006d04:	4618      	mov	r0, r3
 8006d06:	f001 f809 	bl	8007d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d0e:	f001 fee9 	bl	8008ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d12:	f000 fd7b 	bl	800780c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d16:	f001 feb5 	bl	8008a84 <vPortEnterCritical>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d20:	b25b      	sxtb	r3, r3
 8006d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d26:	d103      	bne.n	8006d30 <xQueueGenericSend+0x16c>
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d36:	b25b      	sxtb	r3, r3
 8006d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3c:	d103      	bne.n	8006d46 <xQueueGenericSend+0x182>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d46:	f001 fecd 	bl	8008ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d4a:	1d3a      	adds	r2, r7, #4
 8006d4c:	f107 0314 	add.w	r3, r7, #20
 8006d50:	4611      	mov	r1, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fff8 	bl	8007d48 <xTaskCheckForTimeOut>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d124      	bne.n	8006da8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d60:	f000 faa2 	bl	80072a8 <prvIsQueueFull>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d018      	beq.n	8006d9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	3310      	adds	r3, #16
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	4611      	mov	r1, r2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 ff1e 	bl	8007bb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d7a:	f000 fa2d 	bl	80071d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d7e:	f000 fd53 	bl	8007828 <xTaskResumeAll>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f47f af7c 	bne.w	8006c82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d8a:	4b0c      	ldr	r3, [pc, #48]	; (8006dbc <xQueueGenericSend+0x1f8>)
 8006d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	e772      	b.n	8006c82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d9e:	f000 fa1b 	bl	80071d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006da2:	f000 fd41 	bl	8007828 <xTaskResumeAll>
 8006da6:	e76c      	b.n	8006c82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006daa:	f000 fa15 	bl	80071d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dae:	f000 fd3b 	bl	8007828 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006db2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3738      	adds	r7, #56	; 0x38
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	e000ed04 	.word	0xe000ed04

08006dc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b090      	sub	sp, #64	; 0x40
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10a      	bne.n	8006dee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006dea:	bf00      	nop
 8006dec:	e7fe      	b.n	8006dec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d103      	bne.n	8006dfc <xQueueGenericSendFromISR+0x3c>
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <xQueueGenericSendFromISR+0x40>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e000      	b.n	8006e02 <xQueueGenericSendFromISR+0x42>
 8006e00:	2300      	movs	r3, #0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10a      	bne.n	8006e1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e18:	bf00      	nop
 8006e1a:	e7fe      	b.n	8006e1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d103      	bne.n	8006e2a <xQueueGenericSendFromISR+0x6a>
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d101      	bne.n	8006e2e <xQueueGenericSendFromISR+0x6e>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e000      	b.n	8006e30 <xQueueGenericSendFromISR+0x70>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10a      	bne.n	8006e4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	623b      	str	r3, [r7, #32]
}
 8006e46:	bf00      	nop
 8006e48:	e7fe      	b.n	8006e48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e4a:	f001 fefd 	bl	8008c48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e4e:	f3ef 8211 	mrs	r2, BASEPRI
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	61fa      	str	r2, [r7, #28]
 8006e64:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e66:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e68:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d302      	bcc.n	8006e7c <xQueueGenericSendFromISR+0xbc>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d12f      	bne.n	8006edc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e92:	f000 f911 	bl	80070b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9e:	d112      	bne.n	8006ec6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d016      	beq.n	8006ed6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eaa:	3324      	adds	r3, #36	; 0x24
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fed1 	bl	8007c54 <xTaskRemoveFromEventList>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00e      	beq.n	8006ed6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00b      	beq.n	8006ed6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	e007      	b.n	8006ed6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ec6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006eca:	3301      	adds	r3, #1
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	b25a      	sxtb	r2, r3
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006eda:	e001      	b.n	8006ee0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006edc:	2300      	movs	r3, #0
 8006ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006eea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3740      	adds	r7, #64	; 0x40
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
	...

08006ef8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08c      	sub	sp, #48	; 0x30
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f04:	2300      	movs	r3, #0
 8006f06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <xQueueReceive+0x30>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	623b      	str	r3, [r7, #32]
}
 8006f24:	bf00      	nop
 8006f26:	e7fe      	b.n	8006f26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d103      	bne.n	8006f36 <xQueueReceive+0x3e>
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <xQueueReceive+0x42>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e000      	b.n	8006f3c <xQueueReceive+0x44>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <xQueueReceive+0x5e>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	61fb      	str	r3, [r7, #28]
}
 8006f52:	bf00      	nop
 8006f54:	e7fe      	b.n	8006f54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f56:	f001 f83b 	bl	8007fd0 <xTaskGetSchedulerState>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <xQueueReceive+0x6e>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <xQueueReceive+0x72>
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <xQueueReceive+0x74>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10a      	bne.n	8006f86 <xQueueReceive+0x8e>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	61bb      	str	r3, [r7, #24]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f86:	f001 fd7d 	bl	8008a84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d01f      	beq.n	8006fd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f96:	68b9      	ldr	r1, [r7, #8]
 8006f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f9a:	f000 f8f7 	bl	800718c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	1e5a      	subs	r2, r3, #1
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00f      	beq.n	8006fce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	3310      	adds	r3, #16
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 fe4e 	bl	8007c54 <xTaskRemoveFromEventList>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d007      	beq.n	8006fce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fbe:	4b3d      	ldr	r3, [pc, #244]	; (80070b4 <xQueueReceive+0x1bc>)
 8006fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fce:	f001 fd89 	bl	8008ae4 <vPortExitCritical>
				return pdPASS;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e069      	b.n	80070aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d103      	bne.n	8006fe4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fdc:	f001 fd82 	bl	8008ae4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	e062      	b.n	80070aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d106      	bne.n	8006ff8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fea:	f107 0310 	add.w	r3, r7, #16
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fe94 	bl	8007d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ff8:	f001 fd74 	bl	8008ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ffc:	f000 fc06 	bl	800780c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007000:	f001 fd40 	bl	8008a84 <vPortEnterCritical>
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800700a:	b25b      	sxtb	r3, r3
 800700c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007010:	d103      	bne.n	800701a <xQueueReceive+0x122>
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007020:	b25b      	sxtb	r3, r3
 8007022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007026:	d103      	bne.n	8007030 <xQueueReceive+0x138>
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007030:	f001 fd58 	bl	8008ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007034:	1d3a      	adds	r2, r7, #4
 8007036:	f107 0310 	add.w	r3, r7, #16
 800703a:	4611      	mov	r1, r2
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fe83 	bl	8007d48 <xTaskCheckForTimeOut>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d123      	bne.n	8007090 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800704a:	f000 f917 	bl	800727c <prvIsQueueEmpty>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d017      	beq.n	8007084 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007056:	3324      	adds	r3, #36	; 0x24
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	4611      	mov	r1, r2
 800705c:	4618      	mov	r0, r3
 800705e:	f000 fda9 	bl	8007bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007064:	f000 f8b8 	bl	80071d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007068:	f000 fbde 	bl	8007828 <xTaskResumeAll>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d189      	bne.n	8006f86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007072:	4b10      	ldr	r3, [pc, #64]	; (80070b4 <xQueueReceive+0x1bc>)
 8007074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	e780      	b.n	8006f86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007086:	f000 f8a7 	bl	80071d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800708a:	f000 fbcd 	bl	8007828 <xTaskResumeAll>
 800708e:	e77a      	b.n	8006f86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007092:	f000 f8a1 	bl	80071d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007096:	f000 fbc7 	bl	8007828 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800709a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800709c:	f000 f8ee 	bl	800727c <prvIsQueueEmpty>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f43f af6f 	beq.w	8006f86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3730      	adds	r7, #48	; 0x30
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	e000ed04 	.word	0xe000ed04

080070b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070c4:	2300      	movs	r3, #0
 80070c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10d      	bne.n	80070f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d14d      	bne.n	800717a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 ff92 	bl	800800c <xTaskPriorityDisinherit>
 80070e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	609a      	str	r2, [r3, #8]
 80070f0:	e043      	b.n	800717a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d119      	bne.n	800712c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6858      	ldr	r0, [r3, #4]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007100:	461a      	mov	r2, r3
 8007102:	68b9      	ldr	r1, [r7, #8]
 8007104:	f002 f81e 	bl	8009144 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007110:	441a      	add	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	429a      	cmp	r2, r3
 8007120:	d32b      	bcc.n	800717a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	605a      	str	r2, [r3, #4]
 800712a:	e026      	b.n	800717a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	68d8      	ldr	r0, [r3, #12]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007134:	461a      	mov	r2, r3
 8007136:	68b9      	ldr	r1, [r7, #8]
 8007138:	f002 f804 	bl	8009144 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	68da      	ldr	r2, [r3, #12]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007144:	425b      	negs	r3, r3
 8007146:	441a      	add	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	68da      	ldr	r2, [r3, #12]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	429a      	cmp	r2, r3
 8007156:	d207      	bcs.n	8007168 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007160:	425b      	negs	r3, r3
 8007162:	441a      	add	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d105      	bne.n	800717a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	3b01      	subs	r3, #1
 8007178:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007182:	697b      	ldr	r3, [r7, #20]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	d018      	beq.n	80071d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	441a      	add	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68da      	ldr	r2, [r3, #12]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d303      	bcc.n	80071c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68d9      	ldr	r1, [r3, #12]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c8:	461a      	mov	r2, r3
 80071ca:	6838      	ldr	r0, [r7, #0]
 80071cc:	f001 ffba 	bl	8009144 <memcpy>
	}
}
 80071d0:	bf00      	nop
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071e0:	f001 fc50 	bl	8008a84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071ec:	e011      	b.n	8007212 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d012      	beq.n	800721c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3324      	adds	r3, #36	; 0x24
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 fd2a 	bl	8007c54 <xTaskRemoveFromEventList>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007206:	f000 fe01 	bl	8007e0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	3b01      	subs	r3, #1
 800720e:	b2db      	uxtb	r3, r3
 8007210:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007216:	2b00      	cmp	r3, #0
 8007218:	dce9      	bgt.n	80071ee <prvUnlockQueue+0x16>
 800721a:	e000      	b.n	800721e <prvUnlockQueue+0x46>
					break;
 800721c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	22ff      	movs	r2, #255	; 0xff
 8007222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007226:	f001 fc5d 	bl	8008ae4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800722a:	f001 fc2b 	bl	8008a84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007234:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007236:	e011      	b.n	800725c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d012      	beq.n	8007266 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3310      	adds	r3, #16
 8007244:	4618      	mov	r0, r3
 8007246:	f000 fd05 	bl	8007c54 <xTaskRemoveFromEventList>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007250:	f000 fddc 	bl	8007e0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007254:	7bbb      	ldrb	r3, [r7, #14]
 8007256:	3b01      	subs	r3, #1
 8007258:	b2db      	uxtb	r3, r3
 800725a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800725c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007260:	2b00      	cmp	r3, #0
 8007262:	dce9      	bgt.n	8007238 <prvUnlockQueue+0x60>
 8007264:	e000      	b.n	8007268 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007266:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	22ff      	movs	r2, #255	; 0xff
 800726c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007270:	f001 fc38 	bl	8008ae4 <vPortExitCritical>
}
 8007274:	bf00      	nop
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007284:	f001 fbfe 	bl	8008a84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728c:	2b00      	cmp	r3, #0
 800728e:	d102      	bne.n	8007296 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007290:	2301      	movs	r3, #1
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	e001      	b.n	800729a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007296:	2300      	movs	r3, #0
 8007298:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800729a:	f001 fc23 	bl	8008ae4 <vPortExitCritical>

	return xReturn;
 800729e:	68fb      	ldr	r3, [r7, #12]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072b0:	f001 fbe8 	bl	8008a84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072bc:	429a      	cmp	r2, r3
 80072be:	d102      	bne.n	80072c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072c0:	2301      	movs	r3, #1
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	e001      	b.n	80072ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072ca:	f001 fc0b 	bl	8008ae4 <vPortExitCritical>

	return xReturn;
 80072ce:	68fb      	ldr	r3, [r7, #12]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	e014      	b.n	8007312 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072e8:	4a0f      	ldr	r2, [pc, #60]	; (8007328 <vQueueAddToRegistry+0x50>)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10b      	bne.n	800730c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072f4:	490c      	ldr	r1, [pc, #48]	; (8007328 <vQueueAddToRegistry+0x50>)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80072fe:	4a0a      	ldr	r2, [pc, #40]	; (8007328 <vQueueAddToRegistry+0x50>)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	4413      	add	r3, r2
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800730a:	e006      	b.n	800731a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	3301      	adds	r3, #1
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b07      	cmp	r3, #7
 8007316:	d9e7      	bls.n	80072e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007318:	bf00      	nop
 800731a:	bf00      	nop
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	20000d40 	.word	0x20000d40

0800732c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800733c:	f001 fba2 	bl	8008a84 <vPortEnterCritical>
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007346:	b25b      	sxtb	r3, r3
 8007348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734c:	d103      	bne.n	8007356 <vQueueWaitForMessageRestricted+0x2a>
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800735c:	b25b      	sxtb	r3, r3
 800735e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007362:	d103      	bne.n	800736c <vQueueWaitForMessageRestricted+0x40>
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800736c:	f001 fbba 	bl	8008ae4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	2b00      	cmp	r3, #0
 8007376:	d106      	bne.n	8007386 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	3324      	adds	r3, #36	; 0x24
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	4618      	mov	r0, r3
 8007382:	f000 fc3b 	bl	8007bfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007386:	6978      	ldr	r0, [r7, #20]
 8007388:	f7ff ff26 	bl	80071d8 <prvUnlockQueue>
	}
 800738c:	bf00      	nop
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08e      	sub	sp, #56	; 0x38
 8007398:	af04      	add	r7, sp, #16
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10a      	bne.n	80073be <xTaskCreateStatic+0x2a>
	__asm volatile
 80073a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	623b      	str	r3, [r7, #32]
}
 80073ba:	bf00      	nop
 80073bc:	e7fe      	b.n	80073bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80073be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10a      	bne.n	80073da <xTaskCreateStatic+0x46>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	61fb      	str	r3, [r7, #28]
}
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073da:	235c      	movs	r3, #92	; 0x5c
 80073dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	2b5c      	cmp	r3, #92	; 0x5c
 80073e2:	d00a      	beq.n	80073fa <xTaskCreateStatic+0x66>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	61bb      	str	r3, [r7, #24]
}
 80073f6:	bf00      	nop
 80073f8:	e7fe      	b.n	80073f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80073fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d01e      	beq.n	8007440 <xTaskCreateStatic+0xac>
 8007402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007404:	2b00      	cmp	r3, #0
 8007406:	d01b      	beq.n	8007440 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007410:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	2202      	movs	r2, #2
 8007416:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800741a:	2300      	movs	r3, #0
 800741c:	9303      	str	r3, [sp, #12]
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	9302      	str	r3, [sp, #8]
 8007422:	f107 0314 	add.w	r3, r7, #20
 8007426:	9301      	str	r3, [sp, #4]
 8007428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	68b9      	ldr	r1, [r7, #8]
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 f850 	bl	80074d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800743a:	f000 f8dd 	bl	80075f8 <prvAddNewTaskToReadyList>
 800743e:	e001      	b.n	8007444 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007440:	2300      	movs	r3, #0
 8007442:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007444:	697b      	ldr	r3, [r7, #20]
	}
 8007446:	4618      	mov	r0, r3
 8007448:	3728      	adds	r7, #40	; 0x28
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800744e:	b580      	push	{r7, lr}
 8007450:	b08c      	sub	sp, #48	; 0x30
 8007452:	af04      	add	r7, sp, #16
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	60b9      	str	r1, [r7, #8]
 8007458:	603b      	str	r3, [r7, #0]
 800745a:	4613      	mov	r3, r2
 800745c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800745e:	88fb      	ldrh	r3, [r7, #6]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4618      	mov	r0, r3
 8007464:	f001 fc30 	bl	8008cc8 <pvPortMalloc>
 8007468:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00e      	beq.n	800748e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007470:	205c      	movs	r0, #92	; 0x5c
 8007472:	f001 fc29 	bl	8008cc8 <pvPortMalloc>
 8007476:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	631a      	str	r2, [r3, #48]	; 0x30
 8007484:	e005      	b.n	8007492 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007486:	6978      	ldr	r0, [r7, #20]
 8007488:	f001 fcea 	bl	8008e60 <vPortFree>
 800748c:	e001      	b.n	8007492 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d017      	beq.n	80074c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074a0:	88fa      	ldrh	r2, [r7, #6]
 80074a2:	2300      	movs	r3, #0
 80074a4:	9303      	str	r3, [sp, #12]
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	9302      	str	r3, [sp, #8]
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ac:	9301      	str	r3, [sp, #4]
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68b9      	ldr	r1, [r7, #8]
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 f80e 	bl	80074d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074bc:	69f8      	ldr	r0, [r7, #28]
 80074be:	f000 f89b 	bl	80075f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074c2:	2301      	movs	r3, #1
 80074c4:	61bb      	str	r3, [r7, #24]
 80074c6:	e002      	b.n	80074ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074c8:	f04f 33ff 	mov.w	r3, #4294967295
 80074cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074ce:	69bb      	ldr	r3, [r7, #24]
	}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3720      	adds	r7, #32
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	461a      	mov	r2, r3
 80074f0:	21a5      	movs	r1, #165	; 0xa5
 80074f2:	f001 fdf3 	bl	80090dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007500:	3b01      	subs	r3, #1
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	f023 0307 	bic.w	r3, r3, #7
 800750e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <prvInitialiseNewTask+0x58>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	617b      	str	r3, [r7, #20]
}
 800752c:	bf00      	nop
 800752e:	e7fe      	b.n	800752e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d01f      	beq.n	8007576 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007536:	2300      	movs	r3, #0
 8007538:	61fb      	str	r3, [r7, #28]
 800753a:	e012      	b.n	8007562 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	4413      	add	r3, r2
 8007542:	7819      	ldrb	r1, [r3, #0]
 8007544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	4413      	add	r3, r2
 800754a:	3334      	adds	r3, #52	; 0x34
 800754c:	460a      	mov	r2, r1
 800754e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	4413      	add	r3, r2
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d006      	beq.n	800756a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	3301      	adds	r3, #1
 8007560:	61fb      	str	r3, [r7, #28]
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	2b0f      	cmp	r3, #15
 8007566:	d9e9      	bls.n	800753c <prvInitialiseNewTask+0x64>
 8007568:	e000      	b.n	800756c <prvInitialiseNewTask+0x94>
			{
				break;
 800756a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007574:	e003      	b.n	800757e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	2b37      	cmp	r3, #55	; 0x37
 8007582:	d901      	bls.n	8007588 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007584:	2337      	movs	r3, #55	; 0x37
 8007586:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800758c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007592:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	2200      	movs	r2, #0
 8007598:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	3304      	adds	r3, #4
 800759e:	4618      	mov	r0, r3
 80075a0:	f7ff f978 	bl	8006894 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	3318      	adds	r3, #24
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff f973 	bl	8006894 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	2200      	movs	r2, #0
 80075c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	68f9      	ldr	r1, [r7, #12]
 80075d6:	69b8      	ldr	r0, [r7, #24]
 80075d8:	f001 f928 	bl	800882c <pxPortInitialiseStack>
 80075dc:	4602      	mov	r2, r0
 80075de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ee:	bf00      	nop
 80075f0:	3720      	adds	r7, #32
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007600:	f001 fa40 	bl	8008a84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007604:	4b2d      	ldr	r3, [pc, #180]	; (80076bc <prvAddNewTaskToReadyList+0xc4>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3301      	adds	r3, #1
 800760a:	4a2c      	ldr	r2, [pc, #176]	; (80076bc <prvAddNewTaskToReadyList+0xc4>)
 800760c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800760e:	4b2c      	ldr	r3, [pc, #176]	; (80076c0 <prvAddNewTaskToReadyList+0xc8>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d109      	bne.n	800762a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007616:	4a2a      	ldr	r2, [pc, #168]	; (80076c0 <prvAddNewTaskToReadyList+0xc8>)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800761c:	4b27      	ldr	r3, [pc, #156]	; (80076bc <prvAddNewTaskToReadyList+0xc4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d110      	bne.n	8007646 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007624:	f000 fc16 	bl	8007e54 <prvInitialiseTaskLists>
 8007628:	e00d      	b.n	8007646 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800762a:	4b26      	ldr	r3, [pc, #152]	; (80076c4 <prvAddNewTaskToReadyList+0xcc>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007632:	4b23      	ldr	r3, [pc, #140]	; (80076c0 <prvAddNewTaskToReadyList+0xc8>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	429a      	cmp	r2, r3
 800763e:	d802      	bhi.n	8007646 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007640:	4a1f      	ldr	r2, [pc, #124]	; (80076c0 <prvAddNewTaskToReadyList+0xc8>)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007646:	4b20      	ldr	r3, [pc, #128]	; (80076c8 <prvAddNewTaskToReadyList+0xd0>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3301      	adds	r3, #1
 800764c:	4a1e      	ldr	r2, [pc, #120]	; (80076c8 <prvAddNewTaskToReadyList+0xd0>)
 800764e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007650:	4b1d      	ldr	r3, [pc, #116]	; (80076c8 <prvAddNewTaskToReadyList+0xd0>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765c:	4b1b      	ldr	r3, [pc, #108]	; (80076cc <prvAddNewTaskToReadyList+0xd4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d903      	bls.n	800766c <prvAddNewTaskToReadyList+0x74>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	4a18      	ldr	r2, [pc, #96]	; (80076cc <prvAddNewTaskToReadyList+0xd4>)
 800766a:	6013      	str	r3, [r2, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4a15      	ldr	r2, [pc, #84]	; (80076d0 <prvAddNewTaskToReadyList+0xd8>)
 800767a:	441a      	add	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3304      	adds	r3, #4
 8007680:	4619      	mov	r1, r3
 8007682:	4610      	mov	r0, r2
 8007684:	f7ff f913 	bl	80068ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007688:	f001 fa2c 	bl	8008ae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800768c:	4b0d      	ldr	r3, [pc, #52]	; (80076c4 <prvAddNewTaskToReadyList+0xcc>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00e      	beq.n	80076b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007694:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <prvAddNewTaskToReadyList+0xc8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	429a      	cmp	r2, r3
 80076a0:	d207      	bcs.n	80076b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076a2:	4b0c      	ldr	r3, [pc, #48]	; (80076d4 <prvAddNewTaskToReadyList+0xdc>)
 80076a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076b2:	bf00      	nop
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	20001254 	.word	0x20001254
 80076c0:	20000d80 	.word	0x20000d80
 80076c4:	20001260 	.word	0x20001260
 80076c8:	20001270 	.word	0x20001270
 80076cc:	2000125c 	.word	0x2000125c
 80076d0:	20000d84 	.word	0x20000d84
 80076d4:	e000ed04 	.word	0xe000ed04

080076d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076e0:	2300      	movs	r3, #0
 80076e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d017      	beq.n	800771a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076ea:	4b13      	ldr	r3, [pc, #76]	; (8007738 <vTaskDelay+0x60>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <vTaskDelay+0x30>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60bb      	str	r3, [r7, #8]
}
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007708:	f000 f880 	bl	800780c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800770c:	2100      	movs	r1, #0
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fcea 	bl	80080e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007714:	f000 f888 	bl	8007828 <xTaskResumeAll>
 8007718:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d107      	bne.n	8007730 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007720:	4b06      	ldr	r3, [pc, #24]	; (800773c <vTaskDelay+0x64>)
 8007722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	2000127c 	.word	0x2000127c
 800773c:	e000ed04 	.word	0xe000ed04

08007740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08a      	sub	sp, #40	; 0x28
 8007744:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800774a:	2300      	movs	r3, #0
 800774c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800774e:	463a      	mov	r2, r7
 8007750:	1d39      	adds	r1, r7, #4
 8007752:	f107 0308 	add.w	r3, r7, #8
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff f848 	bl	80067ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	9202      	str	r2, [sp, #8]
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	2300      	movs	r3, #0
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	2300      	movs	r3, #0
 800776c:	460a      	mov	r2, r1
 800776e:	4921      	ldr	r1, [pc, #132]	; (80077f4 <vTaskStartScheduler+0xb4>)
 8007770:	4821      	ldr	r0, [pc, #132]	; (80077f8 <vTaskStartScheduler+0xb8>)
 8007772:	f7ff fe0f 	bl	8007394 <xTaskCreateStatic>
 8007776:	4603      	mov	r3, r0
 8007778:	4a20      	ldr	r2, [pc, #128]	; (80077fc <vTaskStartScheduler+0xbc>)
 800777a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800777c:	4b1f      	ldr	r3, [pc, #124]	; (80077fc <vTaskStartScheduler+0xbc>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007784:	2301      	movs	r3, #1
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	e001      	b.n	800778e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800778a:	2300      	movs	r3, #0
 800778c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d102      	bne.n	800779a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007794:	f000 fcfc 	bl	8008190 <xTimerCreateTimerTask>
 8007798:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d116      	bne.n	80077ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	613b      	str	r3, [r7, #16]
}
 80077b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077b4:	4b12      	ldr	r3, [pc, #72]	; (8007800 <vTaskStartScheduler+0xc0>)
 80077b6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077bc:	4b11      	ldr	r3, [pc, #68]	; (8007804 <vTaskStartScheduler+0xc4>)
 80077be:	2201      	movs	r2, #1
 80077c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077c2:	4b11      	ldr	r3, [pc, #68]	; (8007808 <vTaskStartScheduler+0xc8>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077c8:	f001 f8ba 	bl	8008940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077cc:	e00e      	b.n	80077ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d4:	d10a      	bne.n	80077ec <vTaskStartScheduler+0xac>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	60fb      	str	r3, [r7, #12]
}
 80077e8:	bf00      	nop
 80077ea:	e7fe      	b.n	80077ea <vTaskStartScheduler+0xaa>
}
 80077ec:	bf00      	nop
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	08009a50 	.word	0x08009a50
 80077f8:	08007e25 	.word	0x08007e25
 80077fc:	20001278 	.word	0x20001278
 8007800:	20001274 	.word	0x20001274
 8007804:	20001260 	.word	0x20001260
 8007808:	20001258 	.word	0x20001258

0800780c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007810:	4b04      	ldr	r3, [pc, #16]	; (8007824 <vTaskSuspendAll+0x18>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3301      	adds	r3, #1
 8007816:	4a03      	ldr	r2, [pc, #12]	; (8007824 <vTaskSuspendAll+0x18>)
 8007818:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800781a:	bf00      	nop
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	2000127c 	.word	0x2000127c

08007828 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800782e:	2300      	movs	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007832:	2300      	movs	r3, #0
 8007834:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007836:	4b42      	ldr	r3, [pc, #264]	; (8007940 <xTaskResumeAll+0x118>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10a      	bne.n	8007854 <xTaskResumeAll+0x2c>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	603b      	str	r3, [r7, #0]
}
 8007850:	bf00      	nop
 8007852:	e7fe      	b.n	8007852 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007854:	f001 f916 	bl	8008a84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007858:	4b39      	ldr	r3, [pc, #228]	; (8007940 <xTaskResumeAll+0x118>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3b01      	subs	r3, #1
 800785e:	4a38      	ldr	r2, [pc, #224]	; (8007940 <xTaskResumeAll+0x118>)
 8007860:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007862:	4b37      	ldr	r3, [pc, #220]	; (8007940 <xTaskResumeAll+0x118>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d162      	bne.n	8007930 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800786a:	4b36      	ldr	r3, [pc, #216]	; (8007944 <xTaskResumeAll+0x11c>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d05e      	beq.n	8007930 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007872:	e02f      	b.n	80078d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007874:	4b34      	ldr	r3, [pc, #208]	; (8007948 <xTaskResumeAll+0x120>)
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3318      	adds	r3, #24
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff f871 	bl	8006968 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3304      	adds	r3, #4
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff f86c 	bl	8006968 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007894:	4b2d      	ldr	r3, [pc, #180]	; (800794c <xTaskResumeAll+0x124>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d903      	bls.n	80078a4 <xTaskResumeAll+0x7c>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	4a2a      	ldr	r2, [pc, #168]	; (800794c <xTaskResumeAll+0x124>)
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a8:	4613      	mov	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4a27      	ldr	r2, [pc, #156]	; (8007950 <xTaskResumeAll+0x128>)
 80078b2:	441a      	add	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3304      	adds	r3, #4
 80078b8:	4619      	mov	r1, r3
 80078ba:	4610      	mov	r0, r2
 80078bc:	f7fe fff7 	bl	80068ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c4:	4b23      	ldr	r3, [pc, #140]	; (8007954 <xTaskResumeAll+0x12c>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d302      	bcc.n	80078d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80078ce:	4b22      	ldr	r3, [pc, #136]	; (8007958 <xTaskResumeAll+0x130>)
 80078d0:	2201      	movs	r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078d4:	4b1c      	ldr	r3, [pc, #112]	; (8007948 <xTaskResumeAll+0x120>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1cb      	bne.n	8007874 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078e2:	f000 fb55 	bl	8007f90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80078e6:	4b1d      	ldr	r3, [pc, #116]	; (800795c <xTaskResumeAll+0x134>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d010      	beq.n	8007914 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078f2:	f000 f847 	bl	8007984 <xTaskIncrementTick>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80078fc:	4b16      	ldr	r3, [pc, #88]	; (8007958 <xTaskResumeAll+0x130>)
 80078fe:	2201      	movs	r2, #1
 8007900:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3b01      	subs	r3, #1
 8007906:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1f1      	bne.n	80078f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800790e:	4b13      	ldr	r3, [pc, #76]	; (800795c <xTaskResumeAll+0x134>)
 8007910:	2200      	movs	r2, #0
 8007912:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007914:	4b10      	ldr	r3, [pc, #64]	; (8007958 <xTaskResumeAll+0x130>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d009      	beq.n	8007930 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800791c:	2301      	movs	r3, #1
 800791e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007920:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <xTaskResumeAll+0x138>)
 8007922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007930:	f001 f8d8 	bl	8008ae4 <vPortExitCritical>

	return xAlreadyYielded;
 8007934:	68bb      	ldr	r3, [r7, #8]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	2000127c 	.word	0x2000127c
 8007944:	20001254 	.word	0x20001254
 8007948:	20001214 	.word	0x20001214
 800794c:	2000125c 	.word	0x2000125c
 8007950:	20000d84 	.word	0x20000d84
 8007954:	20000d80 	.word	0x20000d80
 8007958:	20001268 	.word	0x20001268
 800795c:	20001264 	.word	0x20001264
 8007960:	e000ed04 	.word	0xe000ed04

08007964 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800796a:	4b05      	ldr	r3, [pc, #20]	; (8007980 <xTaskGetTickCount+0x1c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007970:	687b      	ldr	r3, [r7, #4]
}
 8007972:	4618      	mov	r0, r3
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	20001258 	.word	0x20001258

08007984 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800798a:	2300      	movs	r3, #0
 800798c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800798e:	4b4f      	ldr	r3, [pc, #316]	; (8007acc <xTaskIncrementTick+0x148>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	f040 808f 	bne.w	8007ab6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007998:	4b4d      	ldr	r3, [pc, #308]	; (8007ad0 <xTaskIncrementTick+0x14c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3301      	adds	r3, #1
 800799e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079a0:	4a4b      	ldr	r2, [pc, #300]	; (8007ad0 <xTaskIncrementTick+0x14c>)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d120      	bne.n	80079ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80079ac:	4b49      	ldr	r3, [pc, #292]	; (8007ad4 <xTaskIncrementTick+0x150>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <xTaskIncrementTick+0x48>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	603b      	str	r3, [r7, #0]
}
 80079c8:	bf00      	nop
 80079ca:	e7fe      	b.n	80079ca <xTaskIncrementTick+0x46>
 80079cc:	4b41      	ldr	r3, [pc, #260]	; (8007ad4 <xTaskIncrementTick+0x150>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60fb      	str	r3, [r7, #12]
 80079d2:	4b41      	ldr	r3, [pc, #260]	; (8007ad8 <xTaskIncrementTick+0x154>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a3f      	ldr	r2, [pc, #252]	; (8007ad4 <xTaskIncrementTick+0x150>)
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	4a3f      	ldr	r2, [pc, #252]	; (8007ad8 <xTaskIncrementTick+0x154>)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	4b3e      	ldr	r3, [pc, #248]	; (8007adc <xTaskIncrementTick+0x158>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3301      	adds	r3, #1
 80079e6:	4a3d      	ldr	r2, [pc, #244]	; (8007adc <xTaskIncrementTick+0x158>)
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	f000 fad1 	bl	8007f90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079ee:	4b3c      	ldr	r3, [pc, #240]	; (8007ae0 <xTaskIncrementTick+0x15c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d349      	bcc.n	8007a8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079f8:	4b36      	ldr	r3, [pc, #216]	; (8007ad4 <xTaskIncrementTick+0x150>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d104      	bne.n	8007a0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a02:	4b37      	ldr	r3, [pc, #220]	; (8007ae0 <xTaskIncrementTick+0x15c>)
 8007a04:	f04f 32ff 	mov.w	r2, #4294967295
 8007a08:	601a      	str	r2, [r3, #0]
					break;
 8007a0a:	e03f      	b.n	8007a8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a0c:	4b31      	ldr	r3, [pc, #196]	; (8007ad4 <xTaskIncrementTick+0x150>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d203      	bcs.n	8007a2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a24:	4a2e      	ldr	r2, [pc, #184]	; (8007ae0 <xTaskIncrementTick+0x15c>)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a2a:	e02f      	b.n	8007a8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe ff99 	bl	8006968 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d004      	beq.n	8007a48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	3318      	adds	r3, #24
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fe ff90 	bl	8006968 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4c:	4b25      	ldr	r3, [pc, #148]	; (8007ae4 <xTaskIncrementTick+0x160>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d903      	bls.n	8007a5c <xTaskIncrementTick+0xd8>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	4a22      	ldr	r2, [pc, #136]	; (8007ae4 <xTaskIncrementTick+0x160>)
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4a1f      	ldr	r2, [pc, #124]	; (8007ae8 <xTaskIncrementTick+0x164>)
 8007a6a:	441a      	add	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4619      	mov	r1, r3
 8007a72:	4610      	mov	r0, r2
 8007a74:	f7fe ff1b 	bl	80068ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7c:	4b1b      	ldr	r3, [pc, #108]	; (8007aec <xTaskIncrementTick+0x168>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d3b8      	bcc.n	80079f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a86:	2301      	movs	r3, #1
 8007a88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a8a:	e7b5      	b.n	80079f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a8c:	4b17      	ldr	r3, [pc, #92]	; (8007aec <xTaskIncrementTick+0x168>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a92:	4915      	ldr	r1, [pc, #84]	; (8007ae8 <xTaskIncrementTick+0x164>)
 8007a94:	4613      	mov	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d901      	bls.n	8007aa8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007aa8:	4b11      	ldr	r3, [pc, #68]	; (8007af0 <xTaskIncrementTick+0x16c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d007      	beq.n	8007ac0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	e004      	b.n	8007ac0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ab6:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <xTaskIncrementTick+0x170>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3301      	adds	r3, #1
 8007abc:	4a0d      	ldr	r2, [pc, #52]	; (8007af4 <xTaskIncrementTick+0x170>)
 8007abe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ac0:	697b      	ldr	r3, [r7, #20]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	2000127c 	.word	0x2000127c
 8007ad0:	20001258 	.word	0x20001258
 8007ad4:	2000120c 	.word	0x2000120c
 8007ad8:	20001210 	.word	0x20001210
 8007adc:	2000126c 	.word	0x2000126c
 8007ae0:	20001274 	.word	0x20001274
 8007ae4:	2000125c 	.word	0x2000125c
 8007ae8:	20000d84 	.word	0x20000d84
 8007aec:	20000d80 	.word	0x20000d80
 8007af0:	20001268 	.word	0x20001268
 8007af4:	20001264 	.word	0x20001264

08007af8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007afe:	4b28      	ldr	r3, [pc, #160]	; (8007ba0 <vTaskSwitchContext+0xa8>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b06:	4b27      	ldr	r3, [pc, #156]	; (8007ba4 <vTaskSwitchContext+0xac>)
 8007b08:	2201      	movs	r2, #1
 8007b0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b0c:	e041      	b.n	8007b92 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007b0e:	4b25      	ldr	r3, [pc, #148]	; (8007ba4 <vTaskSwitchContext+0xac>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b14:	4b24      	ldr	r3, [pc, #144]	; (8007ba8 <vTaskSwitchContext+0xb0>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60fb      	str	r3, [r7, #12]
 8007b1a:	e010      	b.n	8007b3e <vTaskSwitchContext+0x46>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10a      	bne.n	8007b38 <vTaskSwitchContext+0x40>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	607b      	str	r3, [r7, #4]
}
 8007b34:	bf00      	nop
 8007b36:	e7fe      	b.n	8007b36 <vTaskSwitchContext+0x3e>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	60fb      	str	r3, [r7, #12]
 8007b3e:	491b      	ldr	r1, [pc, #108]	; (8007bac <vTaskSwitchContext+0xb4>)
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	440b      	add	r3, r1
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0e4      	beq.n	8007b1c <vTaskSwitchContext+0x24>
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4613      	mov	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4a13      	ldr	r2, [pc, #76]	; (8007bac <vTaskSwitchContext+0xb4>)
 8007b5e:	4413      	add	r3, r2
 8007b60:	60bb      	str	r3, [r7, #8]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	605a      	str	r2, [r3, #4]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	3308      	adds	r3, #8
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d104      	bne.n	8007b82 <vTaskSwitchContext+0x8a>
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	605a      	str	r2, [r3, #4]
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <vTaskSwitchContext+0xb8>)
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	4a06      	ldr	r2, [pc, #24]	; (8007ba8 <vTaskSwitchContext+0xb0>)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6013      	str	r3, [r2, #0]
}
 8007b92:	bf00      	nop
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	2000127c 	.word	0x2000127c
 8007ba4:	20001268 	.word	0x20001268
 8007ba8:	2000125c 	.word	0x2000125c
 8007bac:	20000d84 	.word	0x20000d84
 8007bb0:	20000d80 	.word	0x20000d80

08007bb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10a      	bne.n	8007bda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	60fb      	str	r3, [r7, #12]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bda:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <vTaskPlaceOnEventList+0x44>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3318      	adds	r3, #24
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7fe fe87 	bl	80068f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007be8:	2101      	movs	r1, #1
 8007bea:	6838      	ldr	r0, [r7, #0]
 8007bec:	f000 fa7c 	bl	80080e8 <prvAddCurrentTaskToDelayedList>
}
 8007bf0:	bf00      	nop
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20000d80 	.word	0x20000d80

08007bfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10a      	bne.n	8007c24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	617b      	str	r3, [r7, #20]
}
 8007c20:	bf00      	nop
 8007c22:	e7fe      	b.n	8007c22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c24:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3318      	adds	r3, #24
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7fe fe3e 	bl	80068ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007c38:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	68b8      	ldr	r0, [r7, #8]
 8007c42:	f000 fa51 	bl	80080e8 <prvAddCurrentTaskToDelayedList>
	}
 8007c46:	bf00      	nop
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000d80 	.word	0x20000d80

08007c54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10a      	bne.n	8007c80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	60fb      	str	r3, [r7, #12]
}
 8007c7c:	bf00      	nop
 8007c7e:	e7fe      	b.n	8007c7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	3318      	adds	r3, #24
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fe fe6f 	bl	8006968 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c8a:	4b1e      	ldr	r3, [pc, #120]	; (8007d04 <xTaskRemoveFromEventList+0xb0>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d11d      	bne.n	8007cce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	3304      	adds	r3, #4
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fe66 	bl	8006968 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca0:	4b19      	ldr	r3, [pc, #100]	; (8007d08 <xTaskRemoveFromEventList+0xb4>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d903      	bls.n	8007cb0 <xTaskRemoveFromEventList+0x5c>
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cac:	4a16      	ldr	r2, [pc, #88]	; (8007d08 <xTaskRemoveFromEventList+0xb4>)
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4a13      	ldr	r2, [pc, #76]	; (8007d0c <xTaskRemoveFromEventList+0xb8>)
 8007cbe:	441a      	add	r2, r3
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	f7fe fdf1 	bl	80068ae <vListInsertEnd>
 8007ccc:	e005      	b.n	8007cda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	3318      	adds	r3, #24
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	480e      	ldr	r0, [pc, #56]	; (8007d10 <xTaskRemoveFromEventList+0xbc>)
 8007cd6:	f7fe fdea 	bl	80068ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cde:	4b0d      	ldr	r3, [pc, #52]	; (8007d14 <xTaskRemoveFromEventList+0xc0>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d905      	bls.n	8007cf4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007cec:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <xTaskRemoveFromEventList+0xc4>)
 8007cee:	2201      	movs	r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	e001      	b.n	8007cf8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007cf8:	697b      	ldr	r3, [r7, #20]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	2000127c 	.word	0x2000127c
 8007d08:	2000125c 	.word	0x2000125c
 8007d0c:	20000d84 	.word	0x20000d84
 8007d10:	20001214 	.word	0x20001214
 8007d14:	20000d80 	.word	0x20000d80
 8007d18:	20001268 	.word	0x20001268

08007d1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d24:	4b06      	ldr	r3, [pc, #24]	; (8007d40 <vTaskInternalSetTimeOutState+0x24>)
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d2c:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <vTaskInternalSetTimeOutState+0x28>)
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	605a      	str	r2, [r3, #4]
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	2000126c 	.word	0x2000126c
 8007d44:	20001258 	.word	0x20001258

08007d48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b088      	sub	sp, #32
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10a      	bne.n	8007d6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	613b      	str	r3, [r7, #16]
}
 8007d6a:	bf00      	nop
 8007d6c:	e7fe      	b.n	8007d6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10a      	bne.n	8007d8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	60fb      	str	r3, [r7, #12]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007d8a:	f000 fe7b 	bl	8008a84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d8e:	4b1d      	ldr	r3, [pc, #116]	; (8007e04 <xTaskCheckForTimeOut+0xbc>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da6:	d102      	bne.n	8007dae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007da8:	2300      	movs	r3, #0
 8007daa:	61fb      	str	r3, [r7, #28]
 8007dac:	e023      	b.n	8007df6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <xTaskCheckForTimeOut+0xc0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d007      	beq.n	8007dca <xTaskCheckForTimeOut+0x82>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d302      	bcc.n	8007dca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	61fb      	str	r3, [r7, #28]
 8007dc8:	e015      	b.n	8007df6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d20b      	bcs.n	8007dec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	1ad2      	subs	r2, r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7ff ff9b 	bl	8007d1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007de6:	2300      	movs	r3, #0
 8007de8:	61fb      	str	r3, [r7, #28]
 8007dea:	e004      	b.n	8007df6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	2200      	movs	r2, #0
 8007df0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007df2:	2301      	movs	r3, #1
 8007df4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007df6:	f000 fe75 	bl	8008ae4 <vPortExitCritical>

	return xReturn;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3720      	adds	r7, #32
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20001258 	.word	0x20001258
 8007e08:	2000126c 	.word	0x2000126c

08007e0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e10:	4b03      	ldr	r3, [pc, #12]	; (8007e20 <vTaskMissedYield+0x14>)
 8007e12:	2201      	movs	r2, #1
 8007e14:	601a      	str	r2, [r3, #0]
}
 8007e16:	bf00      	nop
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	20001268 	.word	0x20001268

08007e24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e2c:	f000 f852 	bl	8007ed4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e30:	4b06      	ldr	r3, [pc, #24]	; (8007e4c <prvIdleTask+0x28>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d9f9      	bls.n	8007e2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <prvIdleTask+0x2c>)
 8007e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e3e:	601a      	str	r2, [r3, #0]
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e48:	e7f0      	b.n	8007e2c <prvIdleTask+0x8>
 8007e4a:	bf00      	nop
 8007e4c:	20000d84 	.word	0x20000d84
 8007e50:	e000ed04 	.word	0xe000ed04

08007e54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	607b      	str	r3, [r7, #4]
 8007e5e:	e00c      	b.n	8007e7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4a12      	ldr	r2, [pc, #72]	; (8007eb4 <prvInitialiseTaskLists+0x60>)
 8007e6c:	4413      	add	r3, r2
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe fcf0 	bl	8006854 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3301      	adds	r3, #1
 8007e78:	607b      	str	r3, [r7, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b37      	cmp	r3, #55	; 0x37
 8007e7e:	d9ef      	bls.n	8007e60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e80:	480d      	ldr	r0, [pc, #52]	; (8007eb8 <prvInitialiseTaskLists+0x64>)
 8007e82:	f7fe fce7 	bl	8006854 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e86:	480d      	ldr	r0, [pc, #52]	; (8007ebc <prvInitialiseTaskLists+0x68>)
 8007e88:	f7fe fce4 	bl	8006854 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e8c:	480c      	ldr	r0, [pc, #48]	; (8007ec0 <prvInitialiseTaskLists+0x6c>)
 8007e8e:	f7fe fce1 	bl	8006854 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e92:	480c      	ldr	r0, [pc, #48]	; (8007ec4 <prvInitialiseTaskLists+0x70>)
 8007e94:	f7fe fcde 	bl	8006854 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e98:	480b      	ldr	r0, [pc, #44]	; (8007ec8 <prvInitialiseTaskLists+0x74>)
 8007e9a:	f7fe fcdb 	bl	8006854 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e9e:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <prvInitialiseTaskLists+0x78>)
 8007ea0:	4a05      	ldr	r2, [pc, #20]	; (8007eb8 <prvInitialiseTaskLists+0x64>)
 8007ea2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <prvInitialiseTaskLists+0x7c>)
 8007ea6:	4a05      	ldr	r2, [pc, #20]	; (8007ebc <prvInitialiseTaskLists+0x68>)
 8007ea8:	601a      	str	r2, [r3, #0]
}
 8007eaa:	bf00      	nop
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20000d84 	.word	0x20000d84
 8007eb8:	200011e4 	.word	0x200011e4
 8007ebc:	200011f8 	.word	0x200011f8
 8007ec0:	20001214 	.word	0x20001214
 8007ec4:	20001228 	.word	0x20001228
 8007ec8:	20001240 	.word	0x20001240
 8007ecc:	2000120c 	.word	0x2000120c
 8007ed0:	20001210 	.word	0x20001210

08007ed4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eda:	e019      	b.n	8007f10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007edc:	f000 fdd2 	bl	8008a84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ee0:	4b10      	ldr	r3, [pc, #64]	; (8007f24 <prvCheckTasksWaitingTermination+0x50>)
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3304      	adds	r3, #4
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fe fd3b 	bl	8006968 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ef2:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <prvCheckTasksWaitingTermination+0x54>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	4a0b      	ldr	r2, [pc, #44]	; (8007f28 <prvCheckTasksWaitingTermination+0x54>)
 8007efa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007efc:	4b0b      	ldr	r3, [pc, #44]	; (8007f2c <prvCheckTasksWaitingTermination+0x58>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3b01      	subs	r3, #1
 8007f02:	4a0a      	ldr	r2, [pc, #40]	; (8007f2c <prvCheckTasksWaitingTermination+0x58>)
 8007f04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f06:	f000 fded 	bl	8008ae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f810 	bl	8007f30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f10:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <prvCheckTasksWaitingTermination+0x58>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e1      	bne.n	8007edc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20001228 	.word	0x20001228
 8007f28:	20001254 	.word	0x20001254
 8007f2c:	2000123c 	.word	0x2000123c

08007f30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d108      	bne.n	8007f54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 ff8a 	bl	8008e60 <vPortFree>
				vPortFree( pxTCB );
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 ff87 	bl	8008e60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f52:	e018      	b.n	8007f86 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d103      	bne.n	8007f66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 ff7e 	bl	8008e60 <vPortFree>
	}
 8007f64:	e00f      	b.n	8007f86 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d00a      	beq.n	8007f86 <prvDeleteTCB+0x56>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	60fb      	str	r3, [r7, #12]
}
 8007f82:	bf00      	nop
 8007f84:	e7fe      	b.n	8007f84 <prvDeleteTCB+0x54>
	}
 8007f86:	bf00      	nop
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f96:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <prvResetNextTaskUnblockTime+0x38>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d104      	bne.n	8007faa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fa0:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <prvResetNextTaskUnblockTime+0x3c>)
 8007fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fa8:	e008      	b.n	8007fbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007faa:	4b07      	ldr	r3, [pc, #28]	; (8007fc8 <prvResetNextTaskUnblockTime+0x38>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	4a04      	ldr	r2, [pc, #16]	; (8007fcc <prvResetNextTaskUnblockTime+0x3c>)
 8007fba:	6013      	str	r3, [r2, #0]
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	2000120c 	.word	0x2000120c
 8007fcc:	20001274 	.word	0x20001274

08007fd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fd6:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <xTaskGetSchedulerState+0x34>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d102      	bne.n	8007fe4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	607b      	str	r3, [r7, #4]
 8007fe2:	e008      	b.n	8007ff6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fe4:	4b08      	ldr	r3, [pc, #32]	; (8008008 <xTaskGetSchedulerState+0x38>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d102      	bne.n	8007ff2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fec:	2302      	movs	r3, #2
 8007fee:	607b      	str	r3, [r7, #4]
 8007ff0:	e001      	b.n	8007ff6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ff6:	687b      	ldr	r3, [r7, #4]
	}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	20001260 	.word	0x20001260
 8008008:	2000127c 	.word	0x2000127c

0800800c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008018:	2300      	movs	r3, #0
 800801a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d056      	beq.n	80080d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008022:	4b2e      	ldr	r3, [pc, #184]	; (80080dc <xTaskPriorityDisinherit+0xd0>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	429a      	cmp	r2, r3
 800802a:	d00a      	beq.n	8008042 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	60fb      	str	r3, [r7, #12]
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10a      	bne.n	8008060 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	60bb      	str	r3, [r7, #8]
}
 800805c:	bf00      	nop
 800805e:	e7fe      	b.n	800805e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008064:	1e5a      	subs	r2, r3, #1
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008072:	429a      	cmp	r2, r3
 8008074:	d02c      	beq.n	80080d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800807a:	2b00      	cmp	r3, #0
 800807c:	d128      	bne.n	80080d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	3304      	adds	r3, #4
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe fc70 	bl	8006968 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a0:	4b0f      	ldr	r3, [pc, #60]	; (80080e0 <xTaskPriorityDisinherit+0xd4>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d903      	bls.n	80080b0 <xTaskPriorityDisinherit+0xa4>
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	4a0c      	ldr	r2, [pc, #48]	; (80080e0 <xTaskPriorityDisinherit+0xd4>)
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b4:	4613      	mov	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4413      	add	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4a09      	ldr	r2, [pc, #36]	; (80080e4 <xTaskPriorityDisinherit+0xd8>)
 80080be:	441a      	add	r2, r3
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	3304      	adds	r3, #4
 80080c4:	4619      	mov	r1, r3
 80080c6:	4610      	mov	r0, r2
 80080c8:	f7fe fbf1 	bl	80068ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080cc:	2301      	movs	r3, #1
 80080ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080d0:	697b      	ldr	r3, [r7, #20]
	}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000d80 	.word	0x20000d80
 80080e0:	2000125c 	.word	0x2000125c
 80080e4:	20000d84 	.word	0x20000d84

080080e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080f2:	4b21      	ldr	r3, [pc, #132]	; (8008178 <prvAddCurrentTaskToDelayedList+0x90>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080f8:	4b20      	ldr	r3, [pc, #128]	; (800817c <prvAddCurrentTaskToDelayedList+0x94>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3304      	adds	r3, #4
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe fc32 	bl	8006968 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810a:	d10a      	bne.n	8008122 <prvAddCurrentTaskToDelayedList+0x3a>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d007      	beq.n	8008122 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008112:	4b1a      	ldr	r3, [pc, #104]	; (800817c <prvAddCurrentTaskToDelayedList+0x94>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3304      	adds	r3, #4
 8008118:	4619      	mov	r1, r3
 800811a:	4819      	ldr	r0, [pc, #100]	; (8008180 <prvAddCurrentTaskToDelayedList+0x98>)
 800811c:	f7fe fbc7 	bl	80068ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008120:	e026      	b.n	8008170 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4413      	add	r3, r2
 8008128:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800812a:	4b14      	ldr	r3, [pc, #80]	; (800817c <prvAddCurrentTaskToDelayedList+0x94>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	429a      	cmp	r2, r3
 8008138:	d209      	bcs.n	800814e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800813a:	4b12      	ldr	r3, [pc, #72]	; (8008184 <prvAddCurrentTaskToDelayedList+0x9c>)
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	4b0f      	ldr	r3, [pc, #60]	; (800817c <prvAddCurrentTaskToDelayedList+0x94>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3304      	adds	r3, #4
 8008144:	4619      	mov	r1, r3
 8008146:	4610      	mov	r0, r2
 8008148:	f7fe fbd5 	bl	80068f6 <vListInsert>
}
 800814c:	e010      	b.n	8008170 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800814e:	4b0e      	ldr	r3, [pc, #56]	; (8008188 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	4b0a      	ldr	r3, [pc, #40]	; (800817c <prvAddCurrentTaskToDelayedList+0x94>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3304      	adds	r3, #4
 8008158:	4619      	mov	r1, r3
 800815a:	4610      	mov	r0, r2
 800815c:	f7fe fbcb 	bl	80068f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008160:	4b0a      	ldr	r3, [pc, #40]	; (800818c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	429a      	cmp	r2, r3
 8008168:	d202      	bcs.n	8008170 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800816a:	4a08      	ldr	r2, [pc, #32]	; (800818c <prvAddCurrentTaskToDelayedList+0xa4>)
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	6013      	str	r3, [r2, #0]
}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20001258 	.word	0x20001258
 800817c:	20000d80 	.word	0x20000d80
 8008180:	20001240 	.word	0x20001240
 8008184:	20001210 	.word	0x20001210
 8008188:	2000120c 	.word	0x2000120c
 800818c:	20001274 	.word	0x20001274

08008190 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b08a      	sub	sp, #40	; 0x28
 8008194:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008196:	2300      	movs	r3, #0
 8008198:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800819a:	f000 fb07 	bl	80087ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800819e:	4b1c      	ldr	r3, [pc, #112]	; (8008210 <xTimerCreateTimerTask+0x80>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d021      	beq.n	80081ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081aa:	2300      	movs	r3, #0
 80081ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081ae:	1d3a      	adds	r2, r7, #4
 80081b0:	f107 0108 	add.w	r1, r7, #8
 80081b4:	f107 030c 	add.w	r3, r7, #12
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fe fb31 	bl	8006820 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081be:	6879      	ldr	r1, [r7, #4]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	9202      	str	r2, [sp, #8]
 80081c6:	9301      	str	r3, [sp, #4]
 80081c8:	2302      	movs	r3, #2
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	2300      	movs	r3, #0
 80081ce:	460a      	mov	r2, r1
 80081d0:	4910      	ldr	r1, [pc, #64]	; (8008214 <xTimerCreateTimerTask+0x84>)
 80081d2:	4811      	ldr	r0, [pc, #68]	; (8008218 <xTimerCreateTimerTask+0x88>)
 80081d4:	f7ff f8de 	bl	8007394 <xTaskCreateStatic>
 80081d8:	4603      	mov	r3, r0
 80081da:	4a10      	ldr	r2, [pc, #64]	; (800821c <xTimerCreateTimerTask+0x8c>)
 80081dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80081de:	4b0f      	ldr	r3, [pc, #60]	; (800821c <xTimerCreateTimerTask+0x8c>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081e6:	2301      	movs	r3, #1
 80081e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10a      	bne.n	8008206 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	613b      	str	r3, [r7, #16]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008206:	697b      	ldr	r3, [r7, #20]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3718      	adds	r7, #24
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	200012b0 	.word	0x200012b0
 8008214:	08009a58 	.word	0x08009a58
 8008218:	08008355 	.word	0x08008355
 800821c:	200012b4 	.word	0x200012b4

08008220 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b08a      	sub	sp, #40	; 0x28
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
 800822c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800822e:	2300      	movs	r3, #0
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10a      	bne.n	800824e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	623b      	str	r3, [r7, #32]
}
 800824a:	bf00      	nop
 800824c:	e7fe      	b.n	800824c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800824e:	4b1a      	ldr	r3, [pc, #104]	; (80082b8 <xTimerGenericCommand+0x98>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d02a      	beq.n	80082ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	2b05      	cmp	r3, #5
 8008266:	dc18      	bgt.n	800829a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008268:	f7ff feb2 	bl	8007fd0 <xTaskGetSchedulerState>
 800826c:	4603      	mov	r3, r0
 800826e:	2b02      	cmp	r3, #2
 8008270:	d109      	bne.n	8008286 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008272:	4b11      	ldr	r3, [pc, #68]	; (80082b8 <xTimerGenericCommand+0x98>)
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	f107 0110 	add.w	r1, r7, #16
 800827a:	2300      	movs	r3, #0
 800827c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800827e:	f7fe fca1 	bl	8006bc4 <xQueueGenericSend>
 8008282:	6278      	str	r0, [r7, #36]	; 0x24
 8008284:	e012      	b.n	80082ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008286:	4b0c      	ldr	r3, [pc, #48]	; (80082b8 <xTimerGenericCommand+0x98>)
 8008288:	6818      	ldr	r0, [r3, #0]
 800828a:	f107 0110 	add.w	r1, r7, #16
 800828e:	2300      	movs	r3, #0
 8008290:	2200      	movs	r2, #0
 8008292:	f7fe fc97 	bl	8006bc4 <xQueueGenericSend>
 8008296:	6278      	str	r0, [r7, #36]	; 0x24
 8008298:	e008      	b.n	80082ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800829a:	4b07      	ldr	r3, [pc, #28]	; (80082b8 <xTimerGenericCommand+0x98>)
 800829c:	6818      	ldr	r0, [r3, #0]
 800829e:	f107 0110 	add.w	r1, r7, #16
 80082a2:	2300      	movs	r3, #0
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	f7fe fd8b 	bl	8006dc0 <xQueueGenericSendFromISR>
 80082aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3728      	adds	r7, #40	; 0x28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	200012b0 	.word	0x200012b0

080082bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b088      	sub	sp, #32
 80082c0:	af02      	add	r7, sp, #8
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082c6:	4b22      	ldr	r3, [pc, #136]	; (8008350 <prvProcessExpiredTimer+0x94>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe fb47 	bl	8006968 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d022      	beq.n	800832e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	699a      	ldr	r2, [r3, #24]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	18d1      	adds	r1, r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	6978      	ldr	r0, [r7, #20]
 80082f6:	f000 f8d1 	bl	800849c <prvInsertTimerInActiveList>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d01f      	beq.n	8008340 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008300:	2300      	movs	r3, #0
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	2300      	movs	r3, #0
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	2100      	movs	r1, #0
 800830a:	6978      	ldr	r0, [r7, #20]
 800830c:	f7ff ff88 	bl	8008220 <xTimerGenericCommand>
 8008310:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d113      	bne.n	8008340 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	60fb      	str	r3, [r7, #12]
}
 800832a:	bf00      	nop
 800832c:	e7fe      	b.n	800832c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008334:	f023 0301 	bic.w	r3, r3, #1
 8008338:	b2da      	uxtb	r2, r3
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	6978      	ldr	r0, [r7, #20]
 8008346:	4798      	blx	r3
}
 8008348:	bf00      	nop
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	200012a8 	.word	0x200012a8

08008354 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800835c:	f107 0308 	add.w	r3, r7, #8
 8008360:	4618      	mov	r0, r3
 8008362:	f000 f857 	bl	8008414 <prvGetNextExpireTime>
 8008366:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	4619      	mov	r1, r3
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 f803 	bl	8008378 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008372:	f000 f8d5 	bl	8008520 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008376:	e7f1      	b.n	800835c <prvTimerTask+0x8>

08008378 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008382:	f7ff fa43 	bl	800780c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008386:	f107 0308 	add.w	r3, r7, #8
 800838a:	4618      	mov	r0, r3
 800838c:	f000 f866 	bl	800845c <prvSampleTimeNow>
 8008390:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d130      	bne.n	80083fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10a      	bne.n	80083b4 <prvProcessTimerOrBlockTask+0x3c>
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d806      	bhi.n	80083b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80083a6:	f7ff fa3f 	bl	8007828 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80083aa:	68f9      	ldr	r1, [r7, #12]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7ff ff85 	bl	80082bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80083b2:	e024      	b.n	80083fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d008      	beq.n	80083cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083ba:	4b13      	ldr	r3, [pc, #76]	; (8008408 <prvProcessTimerOrBlockTask+0x90>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d101      	bne.n	80083c8 <prvProcessTimerOrBlockTask+0x50>
 80083c4:	2301      	movs	r3, #1
 80083c6:	e000      	b.n	80083ca <prvProcessTimerOrBlockTask+0x52>
 80083c8:	2300      	movs	r3, #0
 80083ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083cc:	4b0f      	ldr	r3, [pc, #60]	; (800840c <prvProcessTimerOrBlockTask+0x94>)
 80083ce:	6818      	ldr	r0, [r3, #0]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	4619      	mov	r1, r3
 80083da:	f7fe ffa7 	bl	800732c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083de:	f7ff fa23 	bl	8007828 <xTaskResumeAll>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10a      	bne.n	80083fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083e8:	4b09      	ldr	r3, [pc, #36]	; (8008410 <prvProcessTimerOrBlockTask+0x98>)
 80083ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	f3bf 8f6f 	isb	sy
}
 80083f8:	e001      	b.n	80083fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083fa:	f7ff fa15 	bl	8007828 <xTaskResumeAll>
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	200012ac 	.word	0x200012ac
 800840c:	200012b0 	.word	0x200012b0
 8008410:	e000ed04 	.word	0xe000ed04

08008414 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800841c:	4b0e      	ldr	r3, [pc, #56]	; (8008458 <prvGetNextExpireTime+0x44>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <prvGetNextExpireTime+0x16>
 8008426:	2201      	movs	r2, #1
 8008428:	e000      	b.n	800842c <prvGetNextExpireTime+0x18>
 800842a:	2200      	movs	r2, #0
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d105      	bne.n	8008444 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008438:	4b07      	ldr	r3, [pc, #28]	; (8008458 <prvGetNextExpireTime+0x44>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	60fb      	str	r3, [r7, #12]
 8008442:	e001      	b.n	8008448 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008448:	68fb      	ldr	r3, [r7, #12]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	200012a8 	.word	0x200012a8

0800845c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008464:	f7ff fa7e 	bl	8007964 <xTaskGetTickCount>
 8008468:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800846a:	4b0b      	ldr	r3, [pc, #44]	; (8008498 <prvSampleTimeNow+0x3c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	429a      	cmp	r2, r3
 8008472:	d205      	bcs.n	8008480 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008474:	f000 f936 	bl	80086e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	e002      	b.n	8008486 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008486:	4a04      	ldr	r2, [pc, #16]	; (8008498 <prvSampleTimeNow+0x3c>)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800848c:	68fb      	ldr	r3, [r7, #12]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	200012b8 	.word	0x200012b8

0800849c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80084aa:	2300      	movs	r3, #0
 80084ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d812      	bhi.n	80084e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	1ad2      	subs	r2, r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d302      	bcc.n	80084d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80084d0:	2301      	movs	r3, #1
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	e01b      	b.n	800850e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084d6:	4b10      	ldr	r3, [pc, #64]	; (8008518 <prvInsertTimerInActiveList+0x7c>)
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3304      	adds	r3, #4
 80084de:	4619      	mov	r1, r3
 80084e0:	4610      	mov	r0, r2
 80084e2:	f7fe fa08 	bl	80068f6 <vListInsert>
 80084e6:	e012      	b.n	800850e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d206      	bcs.n	80084fe <prvInsertTimerInActiveList+0x62>
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d302      	bcc.n	80084fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084f8:	2301      	movs	r3, #1
 80084fa:	617b      	str	r3, [r7, #20]
 80084fc:	e007      	b.n	800850e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084fe:	4b07      	ldr	r3, [pc, #28]	; (800851c <prvInsertTimerInActiveList+0x80>)
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	3304      	adds	r3, #4
 8008506:	4619      	mov	r1, r3
 8008508:	4610      	mov	r0, r2
 800850a:	f7fe f9f4 	bl	80068f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800850e:	697b      	ldr	r3, [r7, #20]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	200012ac 	.word	0x200012ac
 800851c:	200012a8 	.word	0x200012a8

08008520 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b08e      	sub	sp, #56	; 0x38
 8008524:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008526:	e0ca      	b.n	80086be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	da18      	bge.n	8008560 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800852e:	1d3b      	adds	r3, r7, #4
 8008530:	3304      	adds	r3, #4
 8008532:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10a      	bne.n	8008550 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800853a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	61fb      	str	r3, [r7, #28]
}
 800854c:	bf00      	nop
 800854e:	e7fe      	b.n	800854e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008556:	6850      	ldr	r0, [r2, #4]
 8008558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800855a:	6892      	ldr	r2, [r2, #8]
 800855c:	4611      	mov	r1, r2
 800855e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	f2c0 80ab 	blt.w	80086be <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800856c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d004      	beq.n	800857e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	3304      	adds	r3, #4
 8008578:	4618      	mov	r0, r3
 800857a:	f7fe f9f5 	bl	8006968 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800857e:	463b      	mov	r3, r7
 8008580:	4618      	mov	r0, r3
 8008582:	f7ff ff6b 	bl	800845c <prvSampleTimeNow>
 8008586:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b09      	cmp	r3, #9
 800858c:	f200 8096 	bhi.w	80086bc <prvProcessReceivedCommands+0x19c>
 8008590:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <prvProcessReceivedCommands+0x78>)
 8008592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008596:	bf00      	nop
 8008598:	080085c1 	.word	0x080085c1
 800859c:	080085c1 	.word	0x080085c1
 80085a0:	080085c1 	.word	0x080085c1
 80085a4:	08008635 	.word	0x08008635
 80085a8:	08008649 	.word	0x08008649
 80085ac:	08008693 	.word	0x08008693
 80085b0:	080085c1 	.word	0x080085c1
 80085b4:	080085c1 	.word	0x080085c1
 80085b8:	08008635 	.word	0x08008635
 80085bc:	08008649 	.word	0x08008649
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085c6:	f043 0301 	orr.w	r3, r3, #1
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	18d1      	adds	r1, r2, r3
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085e0:	f7ff ff5c 	bl	800849c <prvInsertTimerInActiveList>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d069      	beq.n	80086be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d05e      	beq.n	80086be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	441a      	add	r2, r3
 8008608:	2300      	movs	r3, #0
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	2300      	movs	r3, #0
 800860e:	2100      	movs	r1, #0
 8008610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008612:	f7ff fe05 	bl	8008220 <xTimerGenericCommand>
 8008616:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d14f      	bne.n	80086be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	61bb      	str	r3, [r7, #24]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800863a:	f023 0301 	bic.w	r3, r3, #1
 800863e:	b2da      	uxtb	r2, r3
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008646:	e03a      	b.n	80086be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800864e:	f043 0301 	orr.w	r3, r3, #1
 8008652:	b2da      	uxtb	r2, r3
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10a      	bne.n	800867e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	617b      	str	r3, [r7, #20]
}
 800867a:	bf00      	nop
 800867c:	e7fe      	b.n	800867c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008680:	699a      	ldr	r2, [r3, #24]
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	18d1      	adds	r1, r2, r3
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800868a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800868c:	f7ff ff06 	bl	800849c <prvInsertTimerInActiveList>
					break;
 8008690:	e015      	b.n	80086be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b00      	cmp	r3, #0
 800869e:	d103      	bne.n	80086a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80086a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086a2:	f000 fbdd 	bl	8008e60 <vPortFree>
 80086a6:	e00a      	b.n	80086be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ae:	f023 0301 	bic.w	r3, r3, #1
 80086b2:	b2da      	uxtb	r2, r3
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80086ba:	e000      	b.n	80086be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80086bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086be:	4b08      	ldr	r3, [pc, #32]	; (80086e0 <prvProcessReceivedCommands+0x1c0>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	1d39      	adds	r1, r7, #4
 80086c4:	2200      	movs	r2, #0
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fe fc16 	bl	8006ef8 <xQueueReceive>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f47f af2a 	bne.w	8008528 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80086d4:	bf00      	nop
 80086d6:	bf00      	nop
 80086d8:	3730      	adds	r7, #48	; 0x30
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	200012b0 	.word	0x200012b0

080086e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086ea:	e048      	b.n	800877e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086ec:	4b2d      	ldr	r3, [pc, #180]	; (80087a4 <prvSwitchTimerLists+0xc0>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086f6:	4b2b      	ldr	r3, [pc, #172]	; (80087a4 <prvSwitchTimerLists+0xc0>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3304      	adds	r3, #4
 8008704:	4618      	mov	r0, r3
 8008706:	f7fe f92f 	bl	8006968 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008718:	f003 0304 	and.w	r3, r3, #4
 800871c:	2b00      	cmp	r3, #0
 800871e:	d02e      	beq.n	800877e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	4413      	add	r3, r2
 8008728:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	429a      	cmp	r2, r3
 8008730:	d90e      	bls.n	8008750 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800873e:	4b19      	ldr	r3, [pc, #100]	; (80087a4 <prvSwitchTimerLists+0xc0>)
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3304      	adds	r3, #4
 8008746:	4619      	mov	r1, r3
 8008748:	4610      	mov	r0, r2
 800874a:	f7fe f8d4 	bl	80068f6 <vListInsert>
 800874e:	e016      	b.n	800877e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008750:	2300      	movs	r3, #0
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	2300      	movs	r3, #0
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	2100      	movs	r1, #0
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f7ff fd60 	bl	8008220 <xTimerGenericCommand>
 8008760:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10a      	bne.n	800877e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	603b      	str	r3, [r7, #0]
}
 800877a:	bf00      	nop
 800877c:	e7fe      	b.n	800877c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800877e:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <prvSwitchTimerLists+0xc0>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1b1      	bne.n	80086ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008788:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <prvSwitchTimerLists+0xc0>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800878e:	4b06      	ldr	r3, [pc, #24]	; (80087a8 <prvSwitchTimerLists+0xc4>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a04      	ldr	r2, [pc, #16]	; (80087a4 <prvSwitchTimerLists+0xc0>)
 8008794:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008796:	4a04      	ldr	r2, [pc, #16]	; (80087a8 <prvSwitchTimerLists+0xc4>)
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	6013      	str	r3, [r2, #0]
}
 800879c:	bf00      	nop
 800879e:	3718      	adds	r7, #24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	200012a8 	.word	0x200012a8
 80087a8:	200012ac 	.word	0x200012ac

080087ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80087b2:	f000 f967 	bl	8008a84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80087b6:	4b15      	ldr	r3, [pc, #84]	; (800880c <prvCheckForValidListAndQueue+0x60>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d120      	bne.n	8008800 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80087be:	4814      	ldr	r0, [pc, #80]	; (8008810 <prvCheckForValidListAndQueue+0x64>)
 80087c0:	f7fe f848 	bl	8006854 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80087c4:	4813      	ldr	r0, [pc, #76]	; (8008814 <prvCheckForValidListAndQueue+0x68>)
 80087c6:	f7fe f845 	bl	8006854 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80087ca:	4b13      	ldr	r3, [pc, #76]	; (8008818 <prvCheckForValidListAndQueue+0x6c>)
 80087cc:	4a10      	ldr	r2, [pc, #64]	; (8008810 <prvCheckForValidListAndQueue+0x64>)
 80087ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80087d0:	4b12      	ldr	r3, [pc, #72]	; (800881c <prvCheckForValidListAndQueue+0x70>)
 80087d2:	4a10      	ldr	r2, [pc, #64]	; (8008814 <prvCheckForValidListAndQueue+0x68>)
 80087d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087d6:	2300      	movs	r3, #0
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	4b11      	ldr	r3, [pc, #68]	; (8008820 <prvCheckForValidListAndQueue+0x74>)
 80087dc:	4a11      	ldr	r2, [pc, #68]	; (8008824 <prvCheckForValidListAndQueue+0x78>)
 80087de:	2110      	movs	r1, #16
 80087e0:	200a      	movs	r0, #10
 80087e2:	f7fe f953 	bl	8006a8c <xQueueGenericCreateStatic>
 80087e6:	4603      	mov	r3, r0
 80087e8:	4a08      	ldr	r2, [pc, #32]	; (800880c <prvCheckForValidListAndQueue+0x60>)
 80087ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087ec:	4b07      	ldr	r3, [pc, #28]	; (800880c <prvCheckForValidListAndQueue+0x60>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087f4:	4b05      	ldr	r3, [pc, #20]	; (800880c <prvCheckForValidListAndQueue+0x60>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	490b      	ldr	r1, [pc, #44]	; (8008828 <prvCheckForValidListAndQueue+0x7c>)
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fe fd6c 	bl	80072d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008800:	f000 f970 	bl	8008ae4 <vPortExitCritical>
}
 8008804:	bf00      	nop
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	200012b0 	.word	0x200012b0
 8008810:	20001280 	.word	0x20001280
 8008814:	20001294 	.word	0x20001294
 8008818:	200012a8 	.word	0x200012a8
 800881c:	200012ac 	.word	0x200012ac
 8008820:	2000135c 	.word	0x2000135c
 8008824:	200012bc 	.word	0x200012bc
 8008828:	08009a60 	.word	0x08009a60

0800882c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3b04      	subs	r3, #4
 800883c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3b04      	subs	r3, #4
 800884a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	f023 0201 	bic.w	r2, r3, #1
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3b04      	subs	r3, #4
 800885a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800885c:	4a0c      	ldr	r2, [pc, #48]	; (8008890 <pxPortInitialiseStack+0x64>)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3b14      	subs	r3, #20
 8008866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3b04      	subs	r3, #4
 8008872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f06f 0202 	mvn.w	r2, #2
 800887a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3b20      	subs	r3, #32
 8008880:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008882:	68fb      	ldr	r3, [r7, #12]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	08008895 	.word	0x08008895

08008894 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800889e:	4b12      	ldr	r3, [pc, #72]	; (80088e8 <prvTaskExitError+0x54>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a6:	d00a      	beq.n	80088be <prvTaskExitError+0x2a>
	__asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	60fb      	str	r3, [r7, #12]
}
 80088ba:	bf00      	nop
 80088bc:	e7fe      	b.n	80088bc <prvTaskExitError+0x28>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	60bb      	str	r3, [r7, #8]
}
 80088d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80088d2:	bf00      	nop
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0fc      	beq.n	80088d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80088da:	bf00      	nop
 80088dc:	bf00      	nop
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	20000014 	.word	0x20000014
 80088ec:	00000000 	.word	0x00000000

080088f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088f0:	4b07      	ldr	r3, [pc, #28]	; (8008910 <pxCurrentTCBConst2>)
 80088f2:	6819      	ldr	r1, [r3, #0]
 80088f4:	6808      	ldr	r0, [r1, #0]
 80088f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fa:	f380 8809 	msr	PSP, r0
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f04f 0000 	mov.w	r0, #0
 8008906:	f380 8811 	msr	BASEPRI, r0
 800890a:	4770      	bx	lr
 800890c:	f3af 8000 	nop.w

08008910 <pxCurrentTCBConst2>:
 8008910:	20000d80 	.word	0x20000d80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop

08008918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008918:	4808      	ldr	r0, [pc, #32]	; (800893c <prvPortStartFirstTask+0x24>)
 800891a:	6800      	ldr	r0, [r0, #0]
 800891c:	6800      	ldr	r0, [r0, #0]
 800891e:	f380 8808 	msr	MSP, r0
 8008922:	f04f 0000 	mov.w	r0, #0
 8008926:	f380 8814 	msr	CONTROL, r0
 800892a:	b662      	cpsie	i
 800892c:	b661      	cpsie	f
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	df00      	svc	0
 8008938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800893a:	bf00      	nop
 800893c:	e000ed08 	.word	0xe000ed08

08008940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008946:	4b46      	ldr	r3, [pc, #280]	; (8008a60 <xPortStartScheduler+0x120>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a46      	ldr	r2, [pc, #280]	; (8008a64 <xPortStartScheduler+0x124>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d10a      	bne.n	8008966 <xPortStartScheduler+0x26>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	613b      	str	r3, [r7, #16]
}
 8008962:	bf00      	nop
 8008964:	e7fe      	b.n	8008964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008966:	4b3e      	ldr	r3, [pc, #248]	; (8008a60 <xPortStartScheduler+0x120>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a3f      	ldr	r2, [pc, #252]	; (8008a68 <xPortStartScheduler+0x128>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d10a      	bne.n	8008986 <xPortStartScheduler+0x46>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	60fb      	str	r3, [r7, #12]
}
 8008982:	bf00      	nop
 8008984:	e7fe      	b.n	8008984 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008986:	4b39      	ldr	r3, [pc, #228]	; (8008a6c <xPortStartScheduler+0x12c>)
 8008988:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	22ff      	movs	r2, #255	; 0xff
 8008996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	b2db      	uxtb	r3, r3
 800899e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089a0:	78fb      	ldrb	r3, [r7, #3]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	4b31      	ldr	r3, [pc, #196]	; (8008a70 <xPortStartScheduler+0x130>)
 80089ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089ae:	4b31      	ldr	r3, [pc, #196]	; (8008a74 <xPortStartScheduler+0x134>)
 80089b0:	2207      	movs	r2, #7
 80089b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089b4:	e009      	b.n	80089ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80089b6:	4b2f      	ldr	r3, [pc, #188]	; (8008a74 <xPortStartScheduler+0x134>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	4a2d      	ldr	r2, [pc, #180]	; (8008a74 <xPortStartScheduler+0x134>)
 80089be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089c0:	78fb      	ldrb	r3, [r7, #3]
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089ca:	78fb      	ldrb	r3, [r7, #3]
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d2:	2b80      	cmp	r3, #128	; 0x80
 80089d4:	d0ef      	beq.n	80089b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089d6:	4b27      	ldr	r3, [pc, #156]	; (8008a74 <xPortStartScheduler+0x134>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f1c3 0307 	rsb	r3, r3, #7
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d00a      	beq.n	80089f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	60bb      	str	r3, [r7, #8]
}
 80089f4:	bf00      	nop
 80089f6:	e7fe      	b.n	80089f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089f8:	4b1e      	ldr	r3, [pc, #120]	; (8008a74 <xPortStartScheduler+0x134>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	021b      	lsls	r3, r3, #8
 80089fe:	4a1d      	ldr	r2, [pc, #116]	; (8008a74 <xPortStartScheduler+0x134>)
 8008a00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a02:	4b1c      	ldr	r3, [pc, #112]	; (8008a74 <xPortStartScheduler+0x134>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a0a:	4a1a      	ldr	r2, [pc, #104]	; (8008a74 <xPortStartScheduler+0x134>)
 8008a0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a16:	4b18      	ldr	r3, [pc, #96]	; (8008a78 <xPortStartScheduler+0x138>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a17      	ldr	r2, [pc, #92]	; (8008a78 <xPortStartScheduler+0x138>)
 8008a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a22:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <xPortStartScheduler+0x138>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a14      	ldr	r2, [pc, #80]	; (8008a78 <xPortStartScheduler+0x138>)
 8008a28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a2e:	f000 f8dd 	bl	8008bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a32:	4b12      	ldr	r3, [pc, #72]	; (8008a7c <xPortStartScheduler+0x13c>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a38:	f000 f8fc 	bl	8008c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a3c:	4b10      	ldr	r3, [pc, #64]	; (8008a80 <xPortStartScheduler+0x140>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a0f      	ldr	r2, [pc, #60]	; (8008a80 <xPortStartScheduler+0x140>)
 8008a42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008a46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a48:	f7ff ff66 	bl	8008918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a4c:	f7ff f854 	bl	8007af8 <vTaskSwitchContext>
	prvTaskExitError();
 8008a50:	f7ff ff20 	bl	8008894 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	e000ed00 	.word	0xe000ed00
 8008a64:	410fc271 	.word	0x410fc271
 8008a68:	410fc270 	.word	0x410fc270
 8008a6c:	e000e400 	.word	0xe000e400
 8008a70:	200013ac 	.word	0x200013ac
 8008a74:	200013b0 	.word	0x200013b0
 8008a78:	e000ed20 	.word	0xe000ed20
 8008a7c:	20000014 	.word	0x20000014
 8008a80:	e000ef34 	.word	0xe000ef34

08008a84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	607b      	str	r3, [r7, #4]
}
 8008a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a9e:	4b0f      	ldr	r3, [pc, #60]	; (8008adc <vPortEnterCritical+0x58>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	4a0d      	ldr	r2, [pc, #52]	; (8008adc <vPortEnterCritical+0x58>)
 8008aa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008aa8:	4b0c      	ldr	r3, [pc, #48]	; (8008adc <vPortEnterCritical+0x58>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d10f      	bne.n	8008ad0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ab0:	4b0b      	ldr	r3, [pc, #44]	; (8008ae0 <vPortEnterCritical+0x5c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	603b      	str	r3, [r7, #0]
}
 8008acc:	bf00      	nop
 8008ace:	e7fe      	b.n	8008ace <vPortEnterCritical+0x4a>
	}
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	20000014 	.word	0x20000014
 8008ae0:	e000ed04 	.word	0xe000ed04

08008ae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008aea:	4b12      	ldr	r3, [pc, #72]	; (8008b34 <vPortExitCritical+0x50>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10a      	bne.n	8008b08 <vPortExitCritical+0x24>
	__asm volatile
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	607b      	str	r3, [r7, #4]
}
 8008b04:	bf00      	nop
 8008b06:	e7fe      	b.n	8008b06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b08:	4b0a      	ldr	r3, [pc, #40]	; (8008b34 <vPortExitCritical+0x50>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	4a09      	ldr	r2, [pc, #36]	; (8008b34 <vPortExitCritical+0x50>)
 8008b10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b12:	4b08      	ldr	r3, [pc, #32]	; (8008b34 <vPortExitCritical+0x50>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d105      	bne.n	8008b26 <vPortExitCritical+0x42>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	f383 8811 	msr	BASEPRI, r3
}
 8008b24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	20000014 	.word	0x20000014
	...

08008b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b40:	f3ef 8009 	mrs	r0, PSP
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	4b15      	ldr	r3, [pc, #84]	; (8008ba0 <pxCurrentTCBConst>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	f01e 0f10 	tst.w	lr, #16
 8008b50:	bf08      	it	eq
 8008b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5a:	6010      	str	r0, [r2, #0]
 8008b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b64:	f380 8811 	msr	BASEPRI, r0
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f7fe ffc2 	bl	8007af8 <vTaskSwitchContext>
 8008b74:	f04f 0000 	mov.w	r0, #0
 8008b78:	f380 8811 	msr	BASEPRI, r0
 8008b7c:	bc09      	pop	{r0, r3}
 8008b7e:	6819      	ldr	r1, [r3, #0]
 8008b80:	6808      	ldr	r0, [r1, #0]
 8008b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b86:	f01e 0f10 	tst.w	lr, #16
 8008b8a:	bf08      	it	eq
 8008b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b90:	f380 8809 	msr	PSP, r0
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	f3af 8000 	nop.w

08008ba0 <pxCurrentTCBConst>:
 8008ba0:	20000d80 	.word	0x20000d80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop

08008ba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	607b      	str	r3, [r7, #4]
}
 8008bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008bc2:	f7fe fedf 	bl	8007984 <xTaskIncrementTick>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d003      	beq.n	8008bd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bcc:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <xPortSysTickHandler+0x40>)
 8008bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	f383 8811 	msr	BASEPRI, r3
}
 8008bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008be0:	bf00      	nop
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	e000ed04 	.word	0xe000ed04

08008bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bf0:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <vPortSetupTimerInterrupt+0x34>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bf6:	4b0b      	ldr	r3, [pc, #44]	; (8008c24 <vPortSetupTimerInterrupt+0x38>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bfc:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <vPortSetupTimerInterrupt+0x3c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a0a      	ldr	r2, [pc, #40]	; (8008c2c <vPortSetupTimerInterrupt+0x40>)
 8008c02:	fba2 2303 	umull	r2, r3, r2, r3
 8008c06:	099b      	lsrs	r3, r3, #6
 8008c08:	4a09      	ldr	r2, [pc, #36]	; (8008c30 <vPortSetupTimerInterrupt+0x44>)
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c0e:	4b04      	ldr	r3, [pc, #16]	; (8008c20 <vPortSetupTimerInterrupt+0x34>)
 8008c10:	2207      	movs	r2, #7
 8008c12:	601a      	str	r2, [r3, #0]
}
 8008c14:	bf00      	nop
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	e000e010 	.word	0xe000e010
 8008c24:	e000e018 	.word	0xe000e018
 8008c28:	20000008 	.word	0x20000008
 8008c2c:	10624dd3 	.word	0x10624dd3
 8008c30:	e000e014 	.word	0xe000e014

08008c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008c44 <vPortEnableVFP+0x10>
 8008c38:	6801      	ldr	r1, [r0, #0]
 8008c3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c3e:	6001      	str	r1, [r0, #0]
 8008c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c42:	bf00      	nop
 8008c44:	e000ed88 	.word	0xe000ed88

08008c48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c4e:	f3ef 8305 	mrs	r3, IPSR
 8008c52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b0f      	cmp	r3, #15
 8008c58:	d914      	bls.n	8008c84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c5a:	4a17      	ldr	r2, [pc, #92]	; (8008cb8 <vPortValidateInterruptPriority+0x70>)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4413      	add	r3, r2
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c64:	4b15      	ldr	r3, [pc, #84]	; (8008cbc <vPortValidateInterruptPriority+0x74>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	7afa      	ldrb	r2, [r7, #11]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d20a      	bcs.n	8008c84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	607b      	str	r3, [r7, #4]
}
 8008c80:	bf00      	nop
 8008c82:	e7fe      	b.n	8008c82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c84:	4b0e      	ldr	r3, [pc, #56]	; (8008cc0 <vPortValidateInterruptPriority+0x78>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c8c:	4b0d      	ldr	r3, [pc, #52]	; (8008cc4 <vPortValidateInterruptPriority+0x7c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d90a      	bls.n	8008caa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	603b      	str	r3, [r7, #0]
}
 8008ca6:	bf00      	nop
 8008ca8:	e7fe      	b.n	8008ca8 <vPortValidateInterruptPriority+0x60>
	}
 8008caa:	bf00      	nop
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	e000e3f0 	.word	0xe000e3f0
 8008cbc:	200013ac 	.word	0x200013ac
 8008cc0:	e000ed0c 	.word	0xe000ed0c
 8008cc4:	200013b0 	.word	0x200013b0

08008cc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b08a      	sub	sp, #40	; 0x28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008cd4:	f7fe fd9a 	bl	800780c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008cd8:	4b5b      	ldr	r3, [pc, #364]	; (8008e48 <pvPortMalloc+0x180>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ce0:	f000 f920 	bl	8008f24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ce4:	4b59      	ldr	r3, [pc, #356]	; (8008e4c <pvPortMalloc+0x184>)
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4013      	ands	r3, r2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f040 8093 	bne.w	8008e18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d01d      	beq.n	8008d34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008cf8:	2208      	movs	r2, #8
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f003 0307 	and.w	r3, r3, #7
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d014      	beq.n	8008d34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f023 0307 	bic.w	r3, r3, #7
 8008d10:	3308      	adds	r3, #8
 8008d12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f003 0307 	and.w	r3, r3, #7
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <pvPortMalloc+0x6c>
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	617b      	str	r3, [r7, #20]
}
 8008d30:	bf00      	nop
 8008d32:	e7fe      	b.n	8008d32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d06e      	beq.n	8008e18 <pvPortMalloc+0x150>
 8008d3a:	4b45      	ldr	r3, [pc, #276]	; (8008e50 <pvPortMalloc+0x188>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d869      	bhi.n	8008e18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d44:	4b43      	ldr	r3, [pc, #268]	; (8008e54 <pvPortMalloc+0x18c>)
 8008d46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d48:	4b42      	ldr	r3, [pc, #264]	; (8008e54 <pvPortMalloc+0x18c>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d4e:	e004      	b.n	8008d5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d903      	bls.n	8008d6c <pvPortMalloc+0xa4>
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1f1      	bne.n	8008d50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d6c:	4b36      	ldr	r3, [pc, #216]	; (8008e48 <pvPortMalloc+0x180>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d050      	beq.n	8008e18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2208      	movs	r2, #8
 8008d7c:	4413      	add	r3, r2
 8008d7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	1ad2      	subs	r2, r2, r3
 8008d90:	2308      	movs	r3, #8
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d91f      	bls.n	8008dd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	f003 0307 	and.w	r3, r3, #7
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00a      	beq.n	8008dc0 <pvPortMalloc+0xf8>
	__asm volatile
 8008daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	613b      	str	r3, [r7, #16]
}
 8008dbc:	bf00      	nop
 8008dbe:	e7fe      	b.n	8008dbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	1ad2      	subs	r2, r2, r3
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008dd2:	69b8      	ldr	r0, [r7, #24]
 8008dd4:	f000 f908 	bl	8008fe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008dd8:	4b1d      	ldr	r3, [pc, #116]	; (8008e50 <pvPortMalloc+0x188>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	4a1b      	ldr	r2, [pc, #108]	; (8008e50 <pvPortMalloc+0x188>)
 8008de4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008de6:	4b1a      	ldr	r3, [pc, #104]	; (8008e50 <pvPortMalloc+0x188>)
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	4b1b      	ldr	r3, [pc, #108]	; (8008e58 <pvPortMalloc+0x190>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d203      	bcs.n	8008dfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008df2:	4b17      	ldr	r3, [pc, #92]	; (8008e50 <pvPortMalloc+0x188>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a18      	ldr	r2, [pc, #96]	; (8008e58 <pvPortMalloc+0x190>)
 8008df8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	4b13      	ldr	r3, [pc, #76]	; (8008e4c <pvPortMalloc+0x184>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	431a      	orrs	r2, r3
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e0e:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <pvPortMalloc+0x194>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3301      	adds	r3, #1
 8008e14:	4a11      	ldr	r2, [pc, #68]	; (8008e5c <pvPortMalloc+0x194>)
 8008e16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e18:	f7fe fd06 	bl	8007828 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	f003 0307 	and.w	r3, r3, #7
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <pvPortMalloc+0x174>
	__asm volatile
 8008e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	60fb      	str	r3, [r7, #12]
}
 8008e38:	bf00      	nop
 8008e3a:	e7fe      	b.n	8008e3a <pvPortMalloc+0x172>
	return pvReturn;
 8008e3c:	69fb      	ldr	r3, [r7, #28]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3728      	adds	r7, #40	; 0x28
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	20004fbc 	.word	0x20004fbc
 8008e4c:	20004fd0 	.word	0x20004fd0
 8008e50:	20004fc0 	.word	0x20004fc0
 8008e54:	20004fb4 	.word	0x20004fb4
 8008e58:	20004fc4 	.word	0x20004fc4
 8008e5c:	20004fc8 	.word	0x20004fc8

08008e60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d04d      	beq.n	8008f0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e72:	2308      	movs	r3, #8
 8008e74:	425b      	negs	r3, r3
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	4413      	add	r3, r2
 8008e7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	4b24      	ldr	r3, [pc, #144]	; (8008f18 <vPortFree+0xb8>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4013      	ands	r3, r2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10a      	bne.n	8008ea4 <vPortFree+0x44>
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	60fb      	str	r3, [r7, #12]
}
 8008ea0:	bf00      	nop
 8008ea2:	e7fe      	b.n	8008ea2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00a      	beq.n	8008ec2 <vPortFree+0x62>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	60bb      	str	r3, [r7, #8]
}
 8008ebe:	bf00      	nop
 8008ec0:	e7fe      	b.n	8008ec0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	685a      	ldr	r2, [r3, #4]
 8008ec6:	4b14      	ldr	r3, [pc, #80]	; (8008f18 <vPortFree+0xb8>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4013      	ands	r3, r2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d01e      	beq.n	8008f0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d11a      	bne.n	8008f0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	4b0e      	ldr	r3, [pc, #56]	; (8008f18 <vPortFree+0xb8>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	43db      	mvns	r3, r3
 8008ee2:	401a      	ands	r2, r3
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ee8:	f7fe fc90 	bl	800780c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	4b0a      	ldr	r3, [pc, #40]	; (8008f1c <vPortFree+0xbc>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	4a09      	ldr	r2, [pc, #36]	; (8008f1c <vPortFree+0xbc>)
 8008ef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008efa:	6938      	ldr	r0, [r7, #16]
 8008efc:	f000 f874 	bl	8008fe8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f00:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <vPortFree+0xc0>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	3301      	adds	r3, #1
 8008f06:	4a06      	ldr	r2, [pc, #24]	; (8008f20 <vPortFree+0xc0>)
 8008f08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f0a:	f7fe fc8d 	bl	8007828 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f0e:	bf00      	nop
 8008f10:	3718      	adds	r7, #24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20004fd0 	.word	0x20004fd0
 8008f1c:	20004fc0 	.word	0x20004fc0
 8008f20:	20004fcc 	.word	0x20004fcc

08008f24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f30:	4b27      	ldr	r3, [pc, #156]	; (8008fd0 <prvHeapInit+0xac>)
 8008f32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f003 0307 	and.w	r3, r3, #7
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00c      	beq.n	8008f58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3307      	adds	r3, #7
 8008f42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f023 0307 	bic.w	r3, r3, #7
 8008f4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	4a1f      	ldr	r2, [pc, #124]	; (8008fd0 <prvHeapInit+0xac>)
 8008f54:	4413      	add	r3, r2
 8008f56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f5c:	4a1d      	ldr	r2, [pc, #116]	; (8008fd4 <prvHeapInit+0xb0>)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f62:	4b1c      	ldr	r3, [pc, #112]	; (8008fd4 <prvHeapInit+0xb0>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f70:	2208      	movs	r2, #8
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	1a9b      	subs	r3, r3, r2
 8008f76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f023 0307 	bic.w	r3, r3, #7
 8008f7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4a15      	ldr	r2, [pc, #84]	; (8008fd8 <prvHeapInit+0xb4>)
 8008f84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f86:	4b14      	ldr	r3, [pc, #80]	; (8008fd8 <prvHeapInit+0xb4>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f8e:	4b12      	ldr	r3, [pc, #72]	; (8008fd8 <prvHeapInit+0xb4>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	1ad2      	subs	r2, r2, r3
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fa4:	4b0c      	ldr	r3, [pc, #48]	; (8008fd8 <prvHeapInit+0xb4>)
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	4a0a      	ldr	r2, [pc, #40]	; (8008fdc <prvHeapInit+0xb8>)
 8008fb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	4a09      	ldr	r2, [pc, #36]	; (8008fe0 <prvHeapInit+0xbc>)
 8008fba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fbc:	4b09      	ldr	r3, [pc, #36]	; (8008fe4 <prvHeapInit+0xc0>)
 8008fbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fc2:	601a      	str	r2, [r3, #0]
}
 8008fc4:	bf00      	nop
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	200013b4 	.word	0x200013b4
 8008fd4:	20004fb4 	.word	0x20004fb4
 8008fd8:	20004fbc 	.word	0x20004fbc
 8008fdc:	20004fc4 	.word	0x20004fc4
 8008fe0:	20004fc0 	.word	0x20004fc0
 8008fe4:	20004fd0 	.word	0x20004fd0

08008fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ff0:	4b28      	ldr	r3, [pc, #160]	; (8009094 <prvInsertBlockIntoFreeList+0xac>)
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	e002      	b.n	8008ffc <prvInsertBlockIntoFreeList+0x14>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	429a      	cmp	r2, r3
 8009004:	d8f7      	bhi.n	8008ff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	4413      	add	r3, r2
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	429a      	cmp	r2, r3
 8009016:	d108      	bne.n	800902a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	441a      	add	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	441a      	add	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	429a      	cmp	r2, r3
 800903c:	d118      	bne.n	8009070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	4b15      	ldr	r3, [pc, #84]	; (8009098 <prvInsertBlockIntoFreeList+0xb0>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	429a      	cmp	r2, r3
 8009048:	d00d      	beq.n	8009066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	441a      	add	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	e008      	b.n	8009078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009066:	4b0c      	ldr	r3, [pc, #48]	; (8009098 <prvInsertBlockIntoFreeList+0xb0>)
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	601a      	str	r2, [r3, #0]
 800906e:	e003      	b.n	8009078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	429a      	cmp	r2, r3
 800907e:	d002      	beq.n	8009086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009086:	bf00      	nop
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	20004fb4 	.word	0x20004fb4
 8009098:	20004fbc 	.word	0x20004fbc

0800909c <siprintf>:
 800909c:	b40e      	push	{r1, r2, r3}
 800909e:	b500      	push	{lr}
 80090a0:	b09c      	sub	sp, #112	; 0x70
 80090a2:	ab1d      	add	r3, sp, #116	; 0x74
 80090a4:	9002      	str	r0, [sp, #8]
 80090a6:	9006      	str	r0, [sp, #24]
 80090a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090ac:	4809      	ldr	r0, [pc, #36]	; (80090d4 <siprintf+0x38>)
 80090ae:	9107      	str	r1, [sp, #28]
 80090b0:	9104      	str	r1, [sp, #16]
 80090b2:	4909      	ldr	r1, [pc, #36]	; (80090d8 <siprintf+0x3c>)
 80090b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b8:	9105      	str	r1, [sp, #20]
 80090ba:	6800      	ldr	r0, [r0, #0]
 80090bc:	9301      	str	r3, [sp, #4]
 80090be:	a902      	add	r1, sp, #8
 80090c0:	f000 f9a0 	bl	8009404 <_svfiprintf_r>
 80090c4:	9b02      	ldr	r3, [sp, #8]
 80090c6:	2200      	movs	r2, #0
 80090c8:	701a      	strb	r2, [r3, #0]
 80090ca:	b01c      	add	sp, #112	; 0x70
 80090cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80090d0:	b003      	add	sp, #12
 80090d2:	4770      	bx	lr
 80090d4:	20000064 	.word	0x20000064
 80090d8:	ffff0208 	.word	0xffff0208

080090dc <memset>:
 80090dc:	4402      	add	r2, r0
 80090de:	4603      	mov	r3, r0
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d100      	bne.n	80090e6 <memset+0xa>
 80090e4:	4770      	bx	lr
 80090e6:	f803 1b01 	strb.w	r1, [r3], #1
 80090ea:	e7f9      	b.n	80090e0 <memset+0x4>

080090ec <__errno>:
 80090ec:	4b01      	ldr	r3, [pc, #4]	; (80090f4 <__errno+0x8>)
 80090ee:	6818      	ldr	r0, [r3, #0]
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20000064 	.word	0x20000064

080090f8 <__libc_init_array>:
 80090f8:	b570      	push	{r4, r5, r6, lr}
 80090fa:	4d0d      	ldr	r5, [pc, #52]	; (8009130 <__libc_init_array+0x38>)
 80090fc:	4c0d      	ldr	r4, [pc, #52]	; (8009134 <__libc_init_array+0x3c>)
 80090fe:	1b64      	subs	r4, r4, r5
 8009100:	10a4      	asrs	r4, r4, #2
 8009102:	2600      	movs	r6, #0
 8009104:	42a6      	cmp	r6, r4
 8009106:	d109      	bne.n	800911c <__libc_init_array+0x24>
 8009108:	4d0b      	ldr	r5, [pc, #44]	; (8009138 <__libc_init_array+0x40>)
 800910a:	4c0c      	ldr	r4, [pc, #48]	; (800913c <__libc_init_array+0x44>)
 800910c:	f000 fc6a 	bl	80099e4 <_init>
 8009110:	1b64      	subs	r4, r4, r5
 8009112:	10a4      	asrs	r4, r4, #2
 8009114:	2600      	movs	r6, #0
 8009116:	42a6      	cmp	r6, r4
 8009118:	d105      	bne.n	8009126 <__libc_init_array+0x2e>
 800911a:	bd70      	pop	{r4, r5, r6, pc}
 800911c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009120:	4798      	blx	r3
 8009122:	3601      	adds	r6, #1
 8009124:	e7ee      	b.n	8009104 <__libc_init_array+0xc>
 8009126:	f855 3b04 	ldr.w	r3, [r5], #4
 800912a:	4798      	blx	r3
 800912c:	3601      	adds	r6, #1
 800912e:	e7f2      	b.n	8009116 <__libc_init_array+0x1e>
 8009130:	0800a5f8 	.word	0x0800a5f8
 8009134:	0800a5f8 	.word	0x0800a5f8
 8009138:	0800a5f8 	.word	0x0800a5f8
 800913c:	0800a5fc 	.word	0x0800a5fc

08009140 <__retarget_lock_acquire_recursive>:
 8009140:	4770      	bx	lr

08009142 <__retarget_lock_release_recursive>:
 8009142:	4770      	bx	lr

08009144 <memcpy>:
 8009144:	440a      	add	r2, r1
 8009146:	4291      	cmp	r1, r2
 8009148:	f100 33ff 	add.w	r3, r0, #4294967295
 800914c:	d100      	bne.n	8009150 <memcpy+0xc>
 800914e:	4770      	bx	lr
 8009150:	b510      	push	{r4, lr}
 8009152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800915a:	4291      	cmp	r1, r2
 800915c:	d1f9      	bne.n	8009152 <memcpy+0xe>
 800915e:	bd10      	pop	{r4, pc}

08009160 <_free_r>:
 8009160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009162:	2900      	cmp	r1, #0
 8009164:	d044      	beq.n	80091f0 <_free_r+0x90>
 8009166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800916a:	9001      	str	r0, [sp, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	f1a1 0404 	sub.w	r4, r1, #4
 8009172:	bfb8      	it	lt
 8009174:	18e4      	addlt	r4, r4, r3
 8009176:	f000 f8df 	bl	8009338 <__malloc_lock>
 800917a:	4a1e      	ldr	r2, [pc, #120]	; (80091f4 <_free_r+0x94>)
 800917c:	9801      	ldr	r0, [sp, #4]
 800917e:	6813      	ldr	r3, [r2, #0]
 8009180:	b933      	cbnz	r3, 8009190 <_free_r+0x30>
 8009182:	6063      	str	r3, [r4, #4]
 8009184:	6014      	str	r4, [r2, #0]
 8009186:	b003      	add	sp, #12
 8009188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800918c:	f000 b8da 	b.w	8009344 <__malloc_unlock>
 8009190:	42a3      	cmp	r3, r4
 8009192:	d908      	bls.n	80091a6 <_free_r+0x46>
 8009194:	6825      	ldr	r5, [r4, #0]
 8009196:	1961      	adds	r1, r4, r5
 8009198:	428b      	cmp	r3, r1
 800919a:	bf01      	itttt	eq
 800919c:	6819      	ldreq	r1, [r3, #0]
 800919e:	685b      	ldreq	r3, [r3, #4]
 80091a0:	1949      	addeq	r1, r1, r5
 80091a2:	6021      	streq	r1, [r4, #0]
 80091a4:	e7ed      	b.n	8009182 <_free_r+0x22>
 80091a6:	461a      	mov	r2, r3
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	b10b      	cbz	r3, 80091b0 <_free_r+0x50>
 80091ac:	42a3      	cmp	r3, r4
 80091ae:	d9fa      	bls.n	80091a6 <_free_r+0x46>
 80091b0:	6811      	ldr	r1, [r2, #0]
 80091b2:	1855      	adds	r5, r2, r1
 80091b4:	42a5      	cmp	r5, r4
 80091b6:	d10b      	bne.n	80091d0 <_free_r+0x70>
 80091b8:	6824      	ldr	r4, [r4, #0]
 80091ba:	4421      	add	r1, r4
 80091bc:	1854      	adds	r4, r2, r1
 80091be:	42a3      	cmp	r3, r4
 80091c0:	6011      	str	r1, [r2, #0]
 80091c2:	d1e0      	bne.n	8009186 <_free_r+0x26>
 80091c4:	681c      	ldr	r4, [r3, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	6053      	str	r3, [r2, #4]
 80091ca:	440c      	add	r4, r1
 80091cc:	6014      	str	r4, [r2, #0]
 80091ce:	e7da      	b.n	8009186 <_free_r+0x26>
 80091d0:	d902      	bls.n	80091d8 <_free_r+0x78>
 80091d2:	230c      	movs	r3, #12
 80091d4:	6003      	str	r3, [r0, #0]
 80091d6:	e7d6      	b.n	8009186 <_free_r+0x26>
 80091d8:	6825      	ldr	r5, [r4, #0]
 80091da:	1961      	adds	r1, r4, r5
 80091dc:	428b      	cmp	r3, r1
 80091de:	bf04      	itt	eq
 80091e0:	6819      	ldreq	r1, [r3, #0]
 80091e2:	685b      	ldreq	r3, [r3, #4]
 80091e4:	6063      	str	r3, [r4, #4]
 80091e6:	bf04      	itt	eq
 80091e8:	1949      	addeq	r1, r1, r5
 80091ea:	6021      	streq	r1, [r4, #0]
 80091ec:	6054      	str	r4, [r2, #4]
 80091ee:	e7ca      	b.n	8009186 <_free_r+0x26>
 80091f0:	b003      	add	sp, #12
 80091f2:	bd30      	pop	{r4, r5, pc}
 80091f4:	20005114 	.word	0x20005114

080091f8 <sbrk_aligned>:
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	4e0e      	ldr	r6, [pc, #56]	; (8009234 <sbrk_aligned+0x3c>)
 80091fc:	460c      	mov	r4, r1
 80091fe:	6831      	ldr	r1, [r6, #0]
 8009200:	4605      	mov	r5, r0
 8009202:	b911      	cbnz	r1, 800920a <sbrk_aligned+0x12>
 8009204:	f000 fba6 	bl	8009954 <_sbrk_r>
 8009208:	6030      	str	r0, [r6, #0]
 800920a:	4621      	mov	r1, r4
 800920c:	4628      	mov	r0, r5
 800920e:	f000 fba1 	bl	8009954 <_sbrk_r>
 8009212:	1c43      	adds	r3, r0, #1
 8009214:	d00a      	beq.n	800922c <sbrk_aligned+0x34>
 8009216:	1cc4      	adds	r4, r0, #3
 8009218:	f024 0403 	bic.w	r4, r4, #3
 800921c:	42a0      	cmp	r0, r4
 800921e:	d007      	beq.n	8009230 <sbrk_aligned+0x38>
 8009220:	1a21      	subs	r1, r4, r0
 8009222:	4628      	mov	r0, r5
 8009224:	f000 fb96 	bl	8009954 <_sbrk_r>
 8009228:	3001      	adds	r0, #1
 800922a:	d101      	bne.n	8009230 <sbrk_aligned+0x38>
 800922c:	f04f 34ff 	mov.w	r4, #4294967295
 8009230:	4620      	mov	r0, r4
 8009232:	bd70      	pop	{r4, r5, r6, pc}
 8009234:	20005118 	.word	0x20005118

08009238 <_malloc_r>:
 8009238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800923c:	1ccd      	adds	r5, r1, #3
 800923e:	f025 0503 	bic.w	r5, r5, #3
 8009242:	3508      	adds	r5, #8
 8009244:	2d0c      	cmp	r5, #12
 8009246:	bf38      	it	cc
 8009248:	250c      	movcc	r5, #12
 800924a:	2d00      	cmp	r5, #0
 800924c:	4607      	mov	r7, r0
 800924e:	db01      	blt.n	8009254 <_malloc_r+0x1c>
 8009250:	42a9      	cmp	r1, r5
 8009252:	d905      	bls.n	8009260 <_malloc_r+0x28>
 8009254:	230c      	movs	r3, #12
 8009256:	603b      	str	r3, [r7, #0]
 8009258:	2600      	movs	r6, #0
 800925a:	4630      	mov	r0, r6
 800925c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009260:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009334 <_malloc_r+0xfc>
 8009264:	f000 f868 	bl	8009338 <__malloc_lock>
 8009268:	f8d8 3000 	ldr.w	r3, [r8]
 800926c:	461c      	mov	r4, r3
 800926e:	bb5c      	cbnz	r4, 80092c8 <_malloc_r+0x90>
 8009270:	4629      	mov	r1, r5
 8009272:	4638      	mov	r0, r7
 8009274:	f7ff ffc0 	bl	80091f8 <sbrk_aligned>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	4604      	mov	r4, r0
 800927c:	d155      	bne.n	800932a <_malloc_r+0xf2>
 800927e:	f8d8 4000 	ldr.w	r4, [r8]
 8009282:	4626      	mov	r6, r4
 8009284:	2e00      	cmp	r6, #0
 8009286:	d145      	bne.n	8009314 <_malloc_r+0xdc>
 8009288:	2c00      	cmp	r4, #0
 800928a:	d048      	beq.n	800931e <_malloc_r+0xe6>
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	4631      	mov	r1, r6
 8009290:	4638      	mov	r0, r7
 8009292:	eb04 0903 	add.w	r9, r4, r3
 8009296:	f000 fb5d 	bl	8009954 <_sbrk_r>
 800929a:	4581      	cmp	r9, r0
 800929c:	d13f      	bne.n	800931e <_malloc_r+0xe6>
 800929e:	6821      	ldr	r1, [r4, #0]
 80092a0:	1a6d      	subs	r5, r5, r1
 80092a2:	4629      	mov	r1, r5
 80092a4:	4638      	mov	r0, r7
 80092a6:	f7ff ffa7 	bl	80091f8 <sbrk_aligned>
 80092aa:	3001      	adds	r0, #1
 80092ac:	d037      	beq.n	800931e <_malloc_r+0xe6>
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	442b      	add	r3, r5
 80092b2:	6023      	str	r3, [r4, #0]
 80092b4:	f8d8 3000 	ldr.w	r3, [r8]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d038      	beq.n	800932e <_malloc_r+0xf6>
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	42a2      	cmp	r2, r4
 80092c0:	d12b      	bne.n	800931a <_malloc_r+0xe2>
 80092c2:	2200      	movs	r2, #0
 80092c4:	605a      	str	r2, [r3, #4]
 80092c6:	e00f      	b.n	80092e8 <_malloc_r+0xb0>
 80092c8:	6822      	ldr	r2, [r4, #0]
 80092ca:	1b52      	subs	r2, r2, r5
 80092cc:	d41f      	bmi.n	800930e <_malloc_r+0xd6>
 80092ce:	2a0b      	cmp	r2, #11
 80092d0:	d917      	bls.n	8009302 <_malloc_r+0xca>
 80092d2:	1961      	adds	r1, r4, r5
 80092d4:	42a3      	cmp	r3, r4
 80092d6:	6025      	str	r5, [r4, #0]
 80092d8:	bf18      	it	ne
 80092da:	6059      	strne	r1, [r3, #4]
 80092dc:	6863      	ldr	r3, [r4, #4]
 80092de:	bf08      	it	eq
 80092e0:	f8c8 1000 	streq.w	r1, [r8]
 80092e4:	5162      	str	r2, [r4, r5]
 80092e6:	604b      	str	r3, [r1, #4]
 80092e8:	4638      	mov	r0, r7
 80092ea:	f104 060b 	add.w	r6, r4, #11
 80092ee:	f000 f829 	bl	8009344 <__malloc_unlock>
 80092f2:	f026 0607 	bic.w	r6, r6, #7
 80092f6:	1d23      	adds	r3, r4, #4
 80092f8:	1af2      	subs	r2, r6, r3
 80092fa:	d0ae      	beq.n	800925a <_malloc_r+0x22>
 80092fc:	1b9b      	subs	r3, r3, r6
 80092fe:	50a3      	str	r3, [r4, r2]
 8009300:	e7ab      	b.n	800925a <_malloc_r+0x22>
 8009302:	42a3      	cmp	r3, r4
 8009304:	6862      	ldr	r2, [r4, #4]
 8009306:	d1dd      	bne.n	80092c4 <_malloc_r+0x8c>
 8009308:	f8c8 2000 	str.w	r2, [r8]
 800930c:	e7ec      	b.n	80092e8 <_malloc_r+0xb0>
 800930e:	4623      	mov	r3, r4
 8009310:	6864      	ldr	r4, [r4, #4]
 8009312:	e7ac      	b.n	800926e <_malloc_r+0x36>
 8009314:	4634      	mov	r4, r6
 8009316:	6876      	ldr	r6, [r6, #4]
 8009318:	e7b4      	b.n	8009284 <_malloc_r+0x4c>
 800931a:	4613      	mov	r3, r2
 800931c:	e7cc      	b.n	80092b8 <_malloc_r+0x80>
 800931e:	230c      	movs	r3, #12
 8009320:	603b      	str	r3, [r7, #0]
 8009322:	4638      	mov	r0, r7
 8009324:	f000 f80e 	bl	8009344 <__malloc_unlock>
 8009328:	e797      	b.n	800925a <_malloc_r+0x22>
 800932a:	6025      	str	r5, [r4, #0]
 800932c:	e7dc      	b.n	80092e8 <_malloc_r+0xb0>
 800932e:	605b      	str	r3, [r3, #4]
 8009330:	deff      	udf	#255	; 0xff
 8009332:	bf00      	nop
 8009334:	20005114 	.word	0x20005114

08009338 <__malloc_lock>:
 8009338:	4801      	ldr	r0, [pc, #4]	; (8009340 <__malloc_lock+0x8>)
 800933a:	f7ff bf01 	b.w	8009140 <__retarget_lock_acquire_recursive>
 800933e:	bf00      	nop
 8009340:	20005110 	.word	0x20005110

08009344 <__malloc_unlock>:
 8009344:	4801      	ldr	r0, [pc, #4]	; (800934c <__malloc_unlock+0x8>)
 8009346:	f7ff befc 	b.w	8009142 <__retarget_lock_release_recursive>
 800934a:	bf00      	nop
 800934c:	20005110 	.word	0x20005110

08009350 <__ssputs_r>:
 8009350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009354:	688e      	ldr	r6, [r1, #8]
 8009356:	461f      	mov	r7, r3
 8009358:	42be      	cmp	r6, r7
 800935a:	680b      	ldr	r3, [r1, #0]
 800935c:	4682      	mov	sl, r0
 800935e:	460c      	mov	r4, r1
 8009360:	4690      	mov	r8, r2
 8009362:	d82c      	bhi.n	80093be <__ssputs_r+0x6e>
 8009364:	898a      	ldrh	r2, [r1, #12]
 8009366:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800936a:	d026      	beq.n	80093ba <__ssputs_r+0x6a>
 800936c:	6965      	ldr	r5, [r4, #20]
 800936e:	6909      	ldr	r1, [r1, #16]
 8009370:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009374:	eba3 0901 	sub.w	r9, r3, r1
 8009378:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800937c:	1c7b      	adds	r3, r7, #1
 800937e:	444b      	add	r3, r9
 8009380:	106d      	asrs	r5, r5, #1
 8009382:	429d      	cmp	r5, r3
 8009384:	bf38      	it	cc
 8009386:	461d      	movcc	r5, r3
 8009388:	0553      	lsls	r3, r2, #21
 800938a:	d527      	bpl.n	80093dc <__ssputs_r+0x8c>
 800938c:	4629      	mov	r1, r5
 800938e:	f7ff ff53 	bl	8009238 <_malloc_r>
 8009392:	4606      	mov	r6, r0
 8009394:	b360      	cbz	r0, 80093f0 <__ssputs_r+0xa0>
 8009396:	6921      	ldr	r1, [r4, #16]
 8009398:	464a      	mov	r2, r9
 800939a:	f7ff fed3 	bl	8009144 <memcpy>
 800939e:	89a3      	ldrh	r3, [r4, #12]
 80093a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093a8:	81a3      	strh	r3, [r4, #12]
 80093aa:	6126      	str	r6, [r4, #16]
 80093ac:	6165      	str	r5, [r4, #20]
 80093ae:	444e      	add	r6, r9
 80093b0:	eba5 0509 	sub.w	r5, r5, r9
 80093b4:	6026      	str	r6, [r4, #0]
 80093b6:	60a5      	str	r5, [r4, #8]
 80093b8:	463e      	mov	r6, r7
 80093ba:	42be      	cmp	r6, r7
 80093bc:	d900      	bls.n	80093c0 <__ssputs_r+0x70>
 80093be:	463e      	mov	r6, r7
 80093c0:	6820      	ldr	r0, [r4, #0]
 80093c2:	4632      	mov	r2, r6
 80093c4:	4641      	mov	r1, r8
 80093c6:	f000 faab 	bl	8009920 <memmove>
 80093ca:	68a3      	ldr	r3, [r4, #8]
 80093cc:	1b9b      	subs	r3, r3, r6
 80093ce:	60a3      	str	r3, [r4, #8]
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	4433      	add	r3, r6
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	2000      	movs	r0, #0
 80093d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093dc:	462a      	mov	r2, r5
 80093de:	f000 fac9 	bl	8009974 <_realloc_r>
 80093e2:	4606      	mov	r6, r0
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d1e0      	bne.n	80093aa <__ssputs_r+0x5a>
 80093e8:	6921      	ldr	r1, [r4, #16]
 80093ea:	4650      	mov	r0, sl
 80093ec:	f7ff feb8 	bl	8009160 <_free_r>
 80093f0:	230c      	movs	r3, #12
 80093f2:	f8ca 3000 	str.w	r3, [sl]
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009402:	e7e9      	b.n	80093d8 <__ssputs_r+0x88>

08009404 <_svfiprintf_r>:
 8009404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009408:	4698      	mov	r8, r3
 800940a:	898b      	ldrh	r3, [r1, #12]
 800940c:	061b      	lsls	r3, r3, #24
 800940e:	b09d      	sub	sp, #116	; 0x74
 8009410:	4607      	mov	r7, r0
 8009412:	460d      	mov	r5, r1
 8009414:	4614      	mov	r4, r2
 8009416:	d50e      	bpl.n	8009436 <_svfiprintf_r+0x32>
 8009418:	690b      	ldr	r3, [r1, #16]
 800941a:	b963      	cbnz	r3, 8009436 <_svfiprintf_r+0x32>
 800941c:	2140      	movs	r1, #64	; 0x40
 800941e:	f7ff ff0b 	bl	8009238 <_malloc_r>
 8009422:	6028      	str	r0, [r5, #0]
 8009424:	6128      	str	r0, [r5, #16]
 8009426:	b920      	cbnz	r0, 8009432 <_svfiprintf_r+0x2e>
 8009428:	230c      	movs	r3, #12
 800942a:	603b      	str	r3, [r7, #0]
 800942c:	f04f 30ff 	mov.w	r0, #4294967295
 8009430:	e0d0      	b.n	80095d4 <_svfiprintf_r+0x1d0>
 8009432:	2340      	movs	r3, #64	; 0x40
 8009434:	616b      	str	r3, [r5, #20]
 8009436:	2300      	movs	r3, #0
 8009438:	9309      	str	r3, [sp, #36]	; 0x24
 800943a:	2320      	movs	r3, #32
 800943c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009440:	f8cd 800c 	str.w	r8, [sp, #12]
 8009444:	2330      	movs	r3, #48	; 0x30
 8009446:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80095ec <_svfiprintf_r+0x1e8>
 800944a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800944e:	f04f 0901 	mov.w	r9, #1
 8009452:	4623      	mov	r3, r4
 8009454:	469a      	mov	sl, r3
 8009456:	f813 2b01 	ldrb.w	r2, [r3], #1
 800945a:	b10a      	cbz	r2, 8009460 <_svfiprintf_r+0x5c>
 800945c:	2a25      	cmp	r2, #37	; 0x25
 800945e:	d1f9      	bne.n	8009454 <_svfiprintf_r+0x50>
 8009460:	ebba 0b04 	subs.w	fp, sl, r4
 8009464:	d00b      	beq.n	800947e <_svfiprintf_r+0x7a>
 8009466:	465b      	mov	r3, fp
 8009468:	4622      	mov	r2, r4
 800946a:	4629      	mov	r1, r5
 800946c:	4638      	mov	r0, r7
 800946e:	f7ff ff6f 	bl	8009350 <__ssputs_r>
 8009472:	3001      	adds	r0, #1
 8009474:	f000 80a9 	beq.w	80095ca <_svfiprintf_r+0x1c6>
 8009478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800947a:	445a      	add	r2, fp
 800947c:	9209      	str	r2, [sp, #36]	; 0x24
 800947e:	f89a 3000 	ldrb.w	r3, [sl]
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 80a1 	beq.w	80095ca <_svfiprintf_r+0x1c6>
 8009488:	2300      	movs	r3, #0
 800948a:	f04f 32ff 	mov.w	r2, #4294967295
 800948e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009492:	f10a 0a01 	add.w	sl, sl, #1
 8009496:	9304      	str	r3, [sp, #16]
 8009498:	9307      	str	r3, [sp, #28]
 800949a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800949e:	931a      	str	r3, [sp, #104]	; 0x68
 80094a0:	4654      	mov	r4, sl
 80094a2:	2205      	movs	r2, #5
 80094a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a8:	4850      	ldr	r0, [pc, #320]	; (80095ec <_svfiprintf_r+0x1e8>)
 80094aa:	f7f6 fe91 	bl	80001d0 <memchr>
 80094ae:	9a04      	ldr	r2, [sp, #16]
 80094b0:	b9d8      	cbnz	r0, 80094ea <_svfiprintf_r+0xe6>
 80094b2:	06d0      	lsls	r0, r2, #27
 80094b4:	bf44      	itt	mi
 80094b6:	2320      	movmi	r3, #32
 80094b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094bc:	0711      	lsls	r1, r2, #28
 80094be:	bf44      	itt	mi
 80094c0:	232b      	movmi	r3, #43	; 0x2b
 80094c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094c6:	f89a 3000 	ldrb.w	r3, [sl]
 80094ca:	2b2a      	cmp	r3, #42	; 0x2a
 80094cc:	d015      	beq.n	80094fa <_svfiprintf_r+0xf6>
 80094ce:	9a07      	ldr	r2, [sp, #28]
 80094d0:	4654      	mov	r4, sl
 80094d2:	2000      	movs	r0, #0
 80094d4:	f04f 0c0a 	mov.w	ip, #10
 80094d8:	4621      	mov	r1, r4
 80094da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094de:	3b30      	subs	r3, #48	; 0x30
 80094e0:	2b09      	cmp	r3, #9
 80094e2:	d94d      	bls.n	8009580 <_svfiprintf_r+0x17c>
 80094e4:	b1b0      	cbz	r0, 8009514 <_svfiprintf_r+0x110>
 80094e6:	9207      	str	r2, [sp, #28]
 80094e8:	e014      	b.n	8009514 <_svfiprintf_r+0x110>
 80094ea:	eba0 0308 	sub.w	r3, r0, r8
 80094ee:	fa09 f303 	lsl.w	r3, r9, r3
 80094f2:	4313      	orrs	r3, r2
 80094f4:	9304      	str	r3, [sp, #16]
 80094f6:	46a2      	mov	sl, r4
 80094f8:	e7d2      	b.n	80094a0 <_svfiprintf_r+0x9c>
 80094fa:	9b03      	ldr	r3, [sp, #12]
 80094fc:	1d19      	adds	r1, r3, #4
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	9103      	str	r1, [sp, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	bfbb      	ittet	lt
 8009506:	425b      	neglt	r3, r3
 8009508:	f042 0202 	orrlt.w	r2, r2, #2
 800950c:	9307      	strge	r3, [sp, #28]
 800950e:	9307      	strlt	r3, [sp, #28]
 8009510:	bfb8      	it	lt
 8009512:	9204      	strlt	r2, [sp, #16]
 8009514:	7823      	ldrb	r3, [r4, #0]
 8009516:	2b2e      	cmp	r3, #46	; 0x2e
 8009518:	d10c      	bne.n	8009534 <_svfiprintf_r+0x130>
 800951a:	7863      	ldrb	r3, [r4, #1]
 800951c:	2b2a      	cmp	r3, #42	; 0x2a
 800951e:	d134      	bne.n	800958a <_svfiprintf_r+0x186>
 8009520:	9b03      	ldr	r3, [sp, #12]
 8009522:	1d1a      	adds	r2, r3, #4
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	9203      	str	r2, [sp, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	bfb8      	it	lt
 800952c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009530:	3402      	adds	r4, #2
 8009532:	9305      	str	r3, [sp, #20]
 8009534:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80095fc <_svfiprintf_r+0x1f8>
 8009538:	7821      	ldrb	r1, [r4, #0]
 800953a:	2203      	movs	r2, #3
 800953c:	4650      	mov	r0, sl
 800953e:	f7f6 fe47 	bl	80001d0 <memchr>
 8009542:	b138      	cbz	r0, 8009554 <_svfiprintf_r+0x150>
 8009544:	9b04      	ldr	r3, [sp, #16]
 8009546:	eba0 000a 	sub.w	r0, r0, sl
 800954a:	2240      	movs	r2, #64	; 0x40
 800954c:	4082      	lsls	r2, r0
 800954e:	4313      	orrs	r3, r2
 8009550:	3401      	adds	r4, #1
 8009552:	9304      	str	r3, [sp, #16]
 8009554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009558:	4825      	ldr	r0, [pc, #148]	; (80095f0 <_svfiprintf_r+0x1ec>)
 800955a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800955e:	2206      	movs	r2, #6
 8009560:	f7f6 fe36 	bl	80001d0 <memchr>
 8009564:	2800      	cmp	r0, #0
 8009566:	d038      	beq.n	80095da <_svfiprintf_r+0x1d6>
 8009568:	4b22      	ldr	r3, [pc, #136]	; (80095f4 <_svfiprintf_r+0x1f0>)
 800956a:	bb1b      	cbnz	r3, 80095b4 <_svfiprintf_r+0x1b0>
 800956c:	9b03      	ldr	r3, [sp, #12]
 800956e:	3307      	adds	r3, #7
 8009570:	f023 0307 	bic.w	r3, r3, #7
 8009574:	3308      	adds	r3, #8
 8009576:	9303      	str	r3, [sp, #12]
 8009578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800957a:	4433      	add	r3, r6
 800957c:	9309      	str	r3, [sp, #36]	; 0x24
 800957e:	e768      	b.n	8009452 <_svfiprintf_r+0x4e>
 8009580:	fb0c 3202 	mla	r2, ip, r2, r3
 8009584:	460c      	mov	r4, r1
 8009586:	2001      	movs	r0, #1
 8009588:	e7a6      	b.n	80094d8 <_svfiprintf_r+0xd4>
 800958a:	2300      	movs	r3, #0
 800958c:	3401      	adds	r4, #1
 800958e:	9305      	str	r3, [sp, #20]
 8009590:	4619      	mov	r1, r3
 8009592:	f04f 0c0a 	mov.w	ip, #10
 8009596:	4620      	mov	r0, r4
 8009598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800959c:	3a30      	subs	r2, #48	; 0x30
 800959e:	2a09      	cmp	r2, #9
 80095a0:	d903      	bls.n	80095aa <_svfiprintf_r+0x1a6>
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d0c6      	beq.n	8009534 <_svfiprintf_r+0x130>
 80095a6:	9105      	str	r1, [sp, #20]
 80095a8:	e7c4      	b.n	8009534 <_svfiprintf_r+0x130>
 80095aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80095ae:	4604      	mov	r4, r0
 80095b0:	2301      	movs	r3, #1
 80095b2:	e7f0      	b.n	8009596 <_svfiprintf_r+0x192>
 80095b4:	ab03      	add	r3, sp, #12
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	462a      	mov	r2, r5
 80095ba:	4b0f      	ldr	r3, [pc, #60]	; (80095f8 <_svfiprintf_r+0x1f4>)
 80095bc:	a904      	add	r1, sp, #16
 80095be:	4638      	mov	r0, r7
 80095c0:	f3af 8000 	nop.w
 80095c4:	1c42      	adds	r2, r0, #1
 80095c6:	4606      	mov	r6, r0
 80095c8:	d1d6      	bne.n	8009578 <_svfiprintf_r+0x174>
 80095ca:	89ab      	ldrh	r3, [r5, #12]
 80095cc:	065b      	lsls	r3, r3, #25
 80095ce:	f53f af2d 	bmi.w	800942c <_svfiprintf_r+0x28>
 80095d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095d4:	b01d      	add	sp, #116	; 0x74
 80095d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095da:	ab03      	add	r3, sp, #12
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	462a      	mov	r2, r5
 80095e0:	4b05      	ldr	r3, [pc, #20]	; (80095f8 <_svfiprintf_r+0x1f4>)
 80095e2:	a904      	add	r1, sp, #16
 80095e4:	4638      	mov	r0, r7
 80095e6:	f000 f879 	bl	80096dc <_printf_i>
 80095ea:	e7eb      	b.n	80095c4 <_svfiprintf_r+0x1c0>
 80095ec:	0800a5bc 	.word	0x0800a5bc
 80095f0:	0800a5c6 	.word	0x0800a5c6
 80095f4:	00000000 	.word	0x00000000
 80095f8:	08009351 	.word	0x08009351
 80095fc:	0800a5c2 	.word	0x0800a5c2

08009600 <_printf_common>:
 8009600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009604:	4616      	mov	r6, r2
 8009606:	4699      	mov	r9, r3
 8009608:	688a      	ldr	r2, [r1, #8]
 800960a:	690b      	ldr	r3, [r1, #16]
 800960c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009610:	4293      	cmp	r3, r2
 8009612:	bfb8      	it	lt
 8009614:	4613      	movlt	r3, r2
 8009616:	6033      	str	r3, [r6, #0]
 8009618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800961c:	4607      	mov	r7, r0
 800961e:	460c      	mov	r4, r1
 8009620:	b10a      	cbz	r2, 8009626 <_printf_common+0x26>
 8009622:	3301      	adds	r3, #1
 8009624:	6033      	str	r3, [r6, #0]
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	0699      	lsls	r1, r3, #26
 800962a:	bf42      	ittt	mi
 800962c:	6833      	ldrmi	r3, [r6, #0]
 800962e:	3302      	addmi	r3, #2
 8009630:	6033      	strmi	r3, [r6, #0]
 8009632:	6825      	ldr	r5, [r4, #0]
 8009634:	f015 0506 	ands.w	r5, r5, #6
 8009638:	d106      	bne.n	8009648 <_printf_common+0x48>
 800963a:	f104 0a19 	add.w	sl, r4, #25
 800963e:	68e3      	ldr	r3, [r4, #12]
 8009640:	6832      	ldr	r2, [r6, #0]
 8009642:	1a9b      	subs	r3, r3, r2
 8009644:	42ab      	cmp	r3, r5
 8009646:	dc26      	bgt.n	8009696 <_printf_common+0x96>
 8009648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800964c:	1e13      	subs	r3, r2, #0
 800964e:	6822      	ldr	r2, [r4, #0]
 8009650:	bf18      	it	ne
 8009652:	2301      	movne	r3, #1
 8009654:	0692      	lsls	r2, r2, #26
 8009656:	d42b      	bmi.n	80096b0 <_printf_common+0xb0>
 8009658:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800965c:	4649      	mov	r1, r9
 800965e:	4638      	mov	r0, r7
 8009660:	47c0      	blx	r8
 8009662:	3001      	adds	r0, #1
 8009664:	d01e      	beq.n	80096a4 <_printf_common+0xa4>
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	6922      	ldr	r2, [r4, #16]
 800966a:	f003 0306 	and.w	r3, r3, #6
 800966e:	2b04      	cmp	r3, #4
 8009670:	bf02      	ittt	eq
 8009672:	68e5      	ldreq	r5, [r4, #12]
 8009674:	6833      	ldreq	r3, [r6, #0]
 8009676:	1aed      	subeq	r5, r5, r3
 8009678:	68a3      	ldr	r3, [r4, #8]
 800967a:	bf0c      	ite	eq
 800967c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009680:	2500      	movne	r5, #0
 8009682:	4293      	cmp	r3, r2
 8009684:	bfc4      	itt	gt
 8009686:	1a9b      	subgt	r3, r3, r2
 8009688:	18ed      	addgt	r5, r5, r3
 800968a:	2600      	movs	r6, #0
 800968c:	341a      	adds	r4, #26
 800968e:	42b5      	cmp	r5, r6
 8009690:	d11a      	bne.n	80096c8 <_printf_common+0xc8>
 8009692:	2000      	movs	r0, #0
 8009694:	e008      	b.n	80096a8 <_printf_common+0xa8>
 8009696:	2301      	movs	r3, #1
 8009698:	4652      	mov	r2, sl
 800969a:	4649      	mov	r1, r9
 800969c:	4638      	mov	r0, r7
 800969e:	47c0      	blx	r8
 80096a0:	3001      	adds	r0, #1
 80096a2:	d103      	bne.n	80096ac <_printf_common+0xac>
 80096a4:	f04f 30ff 	mov.w	r0, #4294967295
 80096a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ac:	3501      	adds	r5, #1
 80096ae:	e7c6      	b.n	800963e <_printf_common+0x3e>
 80096b0:	18e1      	adds	r1, r4, r3
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	2030      	movs	r0, #48	; 0x30
 80096b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096ba:	4422      	add	r2, r4
 80096bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096c4:	3302      	adds	r3, #2
 80096c6:	e7c7      	b.n	8009658 <_printf_common+0x58>
 80096c8:	2301      	movs	r3, #1
 80096ca:	4622      	mov	r2, r4
 80096cc:	4649      	mov	r1, r9
 80096ce:	4638      	mov	r0, r7
 80096d0:	47c0      	blx	r8
 80096d2:	3001      	adds	r0, #1
 80096d4:	d0e6      	beq.n	80096a4 <_printf_common+0xa4>
 80096d6:	3601      	adds	r6, #1
 80096d8:	e7d9      	b.n	800968e <_printf_common+0x8e>
	...

080096dc <_printf_i>:
 80096dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096e0:	7e0f      	ldrb	r7, [r1, #24]
 80096e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096e4:	2f78      	cmp	r7, #120	; 0x78
 80096e6:	4691      	mov	r9, r2
 80096e8:	4680      	mov	r8, r0
 80096ea:	460c      	mov	r4, r1
 80096ec:	469a      	mov	sl, r3
 80096ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096f2:	d807      	bhi.n	8009704 <_printf_i+0x28>
 80096f4:	2f62      	cmp	r7, #98	; 0x62
 80096f6:	d80a      	bhi.n	800970e <_printf_i+0x32>
 80096f8:	2f00      	cmp	r7, #0
 80096fa:	f000 80d4 	beq.w	80098a6 <_printf_i+0x1ca>
 80096fe:	2f58      	cmp	r7, #88	; 0x58
 8009700:	f000 80c0 	beq.w	8009884 <_printf_i+0x1a8>
 8009704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800970c:	e03a      	b.n	8009784 <_printf_i+0xa8>
 800970e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009712:	2b15      	cmp	r3, #21
 8009714:	d8f6      	bhi.n	8009704 <_printf_i+0x28>
 8009716:	a101      	add	r1, pc, #4	; (adr r1, 800971c <_printf_i+0x40>)
 8009718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800971c:	08009775 	.word	0x08009775
 8009720:	08009789 	.word	0x08009789
 8009724:	08009705 	.word	0x08009705
 8009728:	08009705 	.word	0x08009705
 800972c:	08009705 	.word	0x08009705
 8009730:	08009705 	.word	0x08009705
 8009734:	08009789 	.word	0x08009789
 8009738:	08009705 	.word	0x08009705
 800973c:	08009705 	.word	0x08009705
 8009740:	08009705 	.word	0x08009705
 8009744:	08009705 	.word	0x08009705
 8009748:	0800988d 	.word	0x0800988d
 800974c:	080097b5 	.word	0x080097b5
 8009750:	08009847 	.word	0x08009847
 8009754:	08009705 	.word	0x08009705
 8009758:	08009705 	.word	0x08009705
 800975c:	080098af 	.word	0x080098af
 8009760:	08009705 	.word	0x08009705
 8009764:	080097b5 	.word	0x080097b5
 8009768:	08009705 	.word	0x08009705
 800976c:	08009705 	.word	0x08009705
 8009770:	0800984f 	.word	0x0800984f
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	1d1a      	adds	r2, r3, #4
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	602a      	str	r2, [r5, #0]
 800977c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009784:	2301      	movs	r3, #1
 8009786:	e09f      	b.n	80098c8 <_printf_i+0x1ec>
 8009788:	6820      	ldr	r0, [r4, #0]
 800978a:	682b      	ldr	r3, [r5, #0]
 800978c:	0607      	lsls	r7, r0, #24
 800978e:	f103 0104 	add.w	r1, r3, #4
 8009792:	6029      	str	r1, [r5, #0]
 8009794:	d501      	bpl.n	800979a <_printf_i+0xbe>
 8009796:	681e      	ldr	r6, [r3, #0]
 8009798:	e003      	b.n	80097a2 <_printf_i+0xc6>
 800979a:	0646      	lsls	r6, r0, #25
 800979c:	d5fb      	bpl.n	8009796 <_printf_i+0xba>
 800979e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80097a2:	2e00      	cmp	r6, #0
 80097a4:	da03      	bge.n	80097ae <_printf_i+0xd2>
 80097a6:	232d      	movs	r3, #45	; 0x2d
 80097a8:	4276      	negs	r6, r6
 80097aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097ae:	485a      	ldr	r0, [pc, #360]	; (8009918 <_printf_i+0x23c>)
 80097b0:	230a      	movs	r3, #10
 80097b2:	e012      	b.n	80097da <_printf_i+0xfe>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	6820      	ldr	r0, [r4, #0]
 80097b8:	1d19      	adds	r1, r3, #4
 80097ba:	6029      	str	r1, [r5, #0]
 80097bc:	0605      	lsls	r5, r0, #24
 80097be:	d501      	bpl.n	80097c4 <_printf_i+0xe8>
 80097c0:	681e      	ldr	r6, [r3, #0]
 80097c2:	e002      	b.n	80097ca <_printf_i+0xee>
 80097c4:	0641      	lsls	r1, r0, #25
 80097c6:	d5fb      	bpl.n	80097c0 <_printf_i+0xe4>
 80097c8:	881e      	ldrh	r6, [r3, #0]
 80097ca:	4853      	ldr	r0, [pc, #332]	; (8009918 <_printf_i+0x23c>)
 80097cc:	2f6f      	cmp	r7, #111	; 0x6f
 80097ce:	bf0c      	ite	eq
 80097d0:	2308      	moveq	r3, #8
 80097d2:	230a      	movne	r3, #10
 80097d4:	2100      	movs	r1, #0
 80097d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097da:	6865      	ldr	r5, [r4, #4]
 80097dc:	60a5      	str	r5, [r4, #8]
 80097de:	2d00      	cmp	r5, #0
 80097e0:	bfa2      	ittt	ge
 80097e2:	6821      	ldrge	r1, [r4, #0]
 80097e4:	f021 0104 	bicge.w	r1, r1, #4
 80097e8:	6021      	strge	r1, [r4, #0]
 80097ea:	b90e      	cbnz	r6, 80097f0 <_printf_i+0x114>
 80097ec:	2d00      	cmp	r5, #0
 80097ee:	d04b      	beq.n	8009888 <_printf_i+0x1ac>
 80097f0:	4615      	mov	r5, r2
 80097f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80097f6:	fb03 6711 	mls	r7, r3, r1, r6
 80097fa:	5dc7      	ldrb	r7, [r0, r7]
 80097fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009800:	4637      	mov	r7, r6
 8009802:	42bb      	cmp	r3, r7
 8009804:	460e      	mov	r6, r1
 8009806:	d9f4      	bls.n	80097f2 <_printf_i+0x116>
 8009808:	2b08      	cmp	r3, #8
 800980a:	d10b      	bne.n	8009824 <_printf_i+0x148>
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	07de      	lsls	r6, r3, #31
 8009810:	d508      	bpl.n	8009824 <_printf_i+0x148>
 8009812:	6923      	ldr	r3, [r4, #16]
 8009814:	6861      	ldr	r1, [r4, #4]
 8009816:	4299      	cmp	r1, r3
 8009818:	bfde      	ittt	le
 800981a:	2330      	movle	r3, #48	; 0x30
 800981c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009820:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009824:	1b52      	subs	r2, r2, r5
 8009826:	6122      	str	r2, [r4, #16]
 8009828:	f8cd a000 	str.w	sl, [sp]
 800982c:	464b      	mov	r3, r9
 800982e:	aa03      	add	r2, sp, #12
 8009830:	4621      	mov	r1, r4
 8009832:	4640      	mov	r0, r8
 8009834:	f7ff fee4 	bl	8009600 <_printf_common>
 8009838:	3001      	adds	r0, #1
 800983a:	d14a      	bne.n	80098d2 <_printf_i+0x1f6>
 800983c:	f04f 30ff 	mov.w	r0, #4294967295
 8009840:	b004      	add	sp, #16
 8009842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	f043 0320 	orr.w	r3, r3, #32
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	4833      	ldr	r0, [pc, #204]	; (800991c <_printf_i+0x240>)
 8009850:	2778      	movs	r7, #120	; 0x78
 8009852:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009856:	6823      	ldr	r3, [r4, #0]
 8009858:	6829      	ldr	r1, [r5, #0]
 800985a:	061f      	lsls	r7, r3, #24
 800985c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009860:	d402      	bmi.n	8009868 <_printf_i+0x18c>
 8009862:	065f      	lsls	r7, r3, #25
 8009864:	bf48      	it	mi
 8009866:	b2b6      	uxthmi	r6, r6
 8009868:	07df      	lsls	r7, r3, #31
 800986a:	bf48      	it	mi
 800986c:	f043 0320 	orrmi.w	r3, r3, #32
 8009870:	6029      	str	r1, [r5, #0]
 8009872:	bf48      	it	mi
 8009874:	6023      	strmi	r3, [r4, #0]
 8009876:	b91e      	cbnz	r6, 8009880 <_printf_i+0x1a4>
 8009878:	6823      	ldr	r3, [r4, #0]
 800987a:	f023 0320 	bic.w	r3, r3, #32
 800987e:	6023      	str	r3, [r4, #0]
 8009880:	2310      	movs	r3, #16
 8009882:	e7a7      	b.n	80097d4 <_printf_i+0xf8>
 8009884:	4824      	ldr	r0, [pc, #144]	; (8009918 <_printf_i+0x23c>)
 8009886:	e7e4      	b.n	8009852 <_printf_i+0x176>
 8009888:	4615      	mov	r5, r2
 800988a:	e7bd      	b.n	8009808 <_printf_i+0x12c>
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	6826      	ldr	r6, [r4, #0]
 8009890:	6961      	ldr	r1, [r4, #20]
 8009892:	1d18      	adds	r0, r3, #4
 8009894:	6028      	str	r0, [r5, #0]
 8009896:	0635      	lsls	r5, r6, #24
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	d501      	bpl.n	80098a0 <_printf_i+0x1c4>
 800989c:	6019      	str	r1, [r3, #0]
 800989e:	e002      	b.n	80098a6 <_printf_i+0x1ca>
 80098a0:	0670      	lsls	r0, r6, #25
 80098a2:	d5fb      	bpl.n	800989c <_printf_i+0x1c0>
 80098a4:	8019      	strh	r1, [r3, #0]
 80098a6:	2300      	movs	r3, #0
 80098a8:	6123      	str	r3, [r4, #16]
 80098aa:	4615      	mov	r5, r2
 80098ac:	e7bc      	b.n	8009828 <_printf_i+0x14c>
 80098ae:	682b      	ldr	r3, [r5, #0]
 80098b0:	1d1a      	adds	r2, r3, #4
 80098b2:	602a      	str	r2, [r5, #0]
 80098b4:	681d      	ldr	r5, [r3, #0]
 80098b6:	6862      	ldr	r2, [r4, #4]
 80098b8:	2100      	movs	r1, #0
 80098ba:	4628      	mov	r0, r5
 80098bc:	f7f6 fc88 	bl	80001d0 <memchr>
 80098c0:	b108      	cbz	r0, 80098c6 <_printf_i+0x1ea>
 80098c2:	1b40      	subs	r0, r0, r5
 80098c4:	6060      	str	r0, [r4, #4]
 80098c6:	6863      	ldr	r3, [r4, #4]
 80098c8:	6123      	str	r3, [r4, #16]
 80098ca:	2300      	movs	r3, #0
 80098cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098d0:	e7aa      	b.n	8009828 <_printf_i+0x14c>
 80098d2:	6923      	ldr	r3, [r4, #16]
 80098d4:	462a      	mov	r2, r5
 80098d6:	4649      	mov	r1, r9
 80098d8:	4640      	mov	r0, r8
 80098da:	47d0      	blx	sl
 80098dc:	3001      	adds	r0, #1
 80098de:	d0ad      	beq.n	800983c <_printf_i+0x160>
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	079b      	lsls	r3, r3, #30
 80098e4:	d413      	bmi.n	800990e <_printf_i+0x232>
 80098e6:	68e0      	ldr	r0, [r4, #12]
 80098e8:	9b03      	ldr	r3, [sp, #12]
 80098ea:	4298      	cmp	r0, r3
 80098ec:	bfb8      	it	lt
 80098ee:	4618      	movlt	r0, r3
 80098f0:	e7a6      	b.n	8009840 <_printf_i+0x164>
 80098f2:	2301      	movs	r3, #1
 80098f4:	4632      	mov	r2, r6
 80098f6:	4649      	mov	r1, r9
 80098f8:	4640      	mov	r0, r8
 80098fa:	47d0      	blx	sl
 80098fc:	3001      	adds	r0, #1
 80098fe:	d09d      	beq.n	800983c <_printf_i+0x160>
 8009900:	3501      	adds	r5, #1
 8009902:	68e3      	ldr	r3, [r4, #12]
 8009904:	9903      	ldr	r1, [sp, #12]
 8009906:	1a5b      	subs	r3, r3, r1
 8009908:	42ab      	cmp	r3, r5
 800990a:	dcf2      	bgt.n	80098f2 <_printf_i+0x216>
 800990c:	e7eb      	b.n	80098e6 <_printf_i+0x20a>
 800990e:	2500      	movs	r5, #0
 8009910:	f104 0619 	add.w	r6, r4, #25
 8009914:	e7f5      	b.n	8009902 <_printf_i+0x226>
 8009916:	bf00      	nop
 8009918:	0800a5cd 	.word	0x0800a5cd
 800991c:	0800a5de 	.word	0x0800a5de

08009920 <memmove>:
 8009920:	4288      	cmp	r0, r1
 8009922:	b510      	push	{r4, lr}
 8009924:	eb01 0402 	add.w	r4, r1, r2
 8009928:	d902      	bls.n	8009930 <memmove+0x10>
 800992a:	4284      	cmp	r4, r0
 800992c:	4623      	mov	r3, r4
 800992e:	d807      	bhi.n	8009940 <memmove+0x20>
 8009930:	1e43      	subs	r3, r0, #1
 8009932:	42a1      	cmp	r1, r4
 8009934:	d008      	beq.n	8009948 <memmove+0x28>
 8009936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800993a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800993e:	e7f8      	b.n	8009932 <memmove+0x12>
 8009940:	4402      	add	r2, r0
 8009942:	4601      	mov	r1, r0
 8009944:	428a      	cmp	r2, r1
 8009946:	d100      	bne.n	800994a <memmove+0x2a>
 8009948:	bd10      	pop	{r4, pc}
 800994a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800994e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009952:	e7f7      	b.n	8009944 <memmove+0x24>

08009954 <_sbrk_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4d06      	ldr	r5, [pc, #24]	; (8009970 <_sbrk_r+0x1c>)
 8009958:	2300      	movs	r3, #0
 800995a:	4604      	mov	r4, r0
 800995c:	4608      	mov	r0, r1
 800995e:	602b      	str	r3, [r5, #0]
 8009960:	f7f8 fae0 	bl	8001f24 <_sbrk>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_sbrk_r+0x1a>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	b103      	cbz	r3, 800996e <_sbrk_r+0x1a>
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	2000510c 	.word	0x2000510c

08009974 <_realloc_r>:
 8009974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009978:	4680      	mov	r8, r0
 800997a:	4614      	mov	r4, r2
 800997c:	460e      	mov	r6, r1
 800997e:	b921      	cbnz	r1, 800998a <_realloc_r+0x16>
 8009980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009984:	4611      	mov	r1, r2
 8009986:	f7ff bc57 	b.w	8009238 <_malloc_r>
 800998a:	b92a      	cbnz	r2, 8009998 <_realloc_r+0x24>
 800998c:	f7ff fbe8 	bl	8009160 <_free_r>
 8009990:	4625      	mov	r5, r4
 8009992:	4628      	mov	r0, r5
 8009994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009998:	f000 f81b 	bl	80099d2 <_malloc_usable_size_r>
 800999c:	4284      	cmp	r4, r0
 800999e:	4607      	mov	r7, r0
 80099a0:	d802      	bhi.n	80099a8 <_realloc_r+0x34>
 80099a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099a6:	d812      	bhi.n	80099ce <_realloc_r+0x5a>
 80099a8:	4621      	mov	r1, r4
 80099aa:	4640      	mov	r0, r8
 80099ac:	f7ff fc44 	bl	8009238 <_malloc_r>
 80099b0:	4605      	mov	r5, r0
 80099b2:	2800      	cmp	r0, #0
 80099b4:	d0ed      	beq.n	8009992 <_realloc_r+0x1e>
 80099b6:	42bc      	cmp	r4, r7
 80099b8:	4622      	mov	r2, r4
 80099ba:	4631      	mov	r1, r6
 80099bc:	bf28      	it	cs
 80099be:	463a      	movcs	r2, r7
 80099c0:	f7ff fbc0 	bl	8009144 <memcpy>
 80099c4:	4631      	mov	r1, r6
 80099c6:	4640      	mov	r0, r8
 80099c8:	f7ff fbca 	bl	8009160 <_free_r>
 80099cc:	e7e1      	b.n	8009992 <_realloc_r+0x1e>
 80099ce:	4635      	mov	r5, r6
 80099d0:	e7df      	b.n	8009992 <_realloc_r+0x1e>

080099d2 <_malloc_usable_size_r>:
 80099d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099d6:	1f18      	subs	r0, r3, #4
 80099d8:	2b00      	cmp	r3, #0
 80099da:	bfbc      	itt	lt
 80099dc:	580b      	ldrlt	r3, [r1, r0]
 80099de:	18c0      	addlt	r0, r0, r3
 80099e0:	4770      	bx	lr
	...

080099e4 <_init>:
 80099e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e6:	bf00      	nop
 80099e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ea:	bc08      	pop	{r3}
 80099ec:	469e      	mov	lr, r3
 80099ee:	4770      	bx	lr

080099f0 <_fini>:
 80099f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f2:	bf00      	nop
 80099f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f6:	bc08      	pop	{r3}
 80099f8:	469e      	mov	lr, r3
 80099fa:	4770      	bx	lr
