
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b01c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c54  0800b1ac  0800b1ac  0000c1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be00  0800be00  0000d064  2**0
                  CONTENTS
  4 .ARM          00000008  0800be00  0800be00  0000ce00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be08  0800be08  0000d064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be08  0800be08  0000ce08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be0c  0800be0c  0000ce0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800be10  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d064  2**0
                  CONTENTS
 10 .bss          000051d8  20000068  20000068  0000d068  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005240  20005240  0000d068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c4ee  00000000  00000000  0000d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003997  00000000  00000000  00029582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001900  00000000  00000000  0002cf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013a3  00000000  00000000  0002e820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000043cf  00000000  00000000  0002fbc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ca78  00000000  00000000  00033f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8f8e  00000000  00000000  00050a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129998  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007184  00000000  00000000  001299dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00130b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b194 	.word	0x0800b194

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800b194 	.word	0x0800b194

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96a 	b.w	8000e98 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	460c      	mov	r4, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14e      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000be8:	4694      	mov	ip, r2
 8000bea:	458c      	cmp	ip, r1
 8000bec:	4686      	mov	lr, r0
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	d962      	bls.n	8000cba <__udivmoddi4+0xde>
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0320 	rsb	r3, r2, #32
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	4319      	orrs	r1, r3
 8000c06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0e:	fa1f f68c 	uxth.w	r6, ip
 8000c12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb04 f106 	mul.w	r1, r4, r6
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c32:	f080 8112 	bcs.w	8000e5a <__udivmoddi4+0x27e>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 810f 	bls.w	8000e5a <__udivmoddi4+0x27e>
 8000c3c:	3c02      	subs	r4, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	fa1f f38e 	uxth.w	r3, lr
 8000c46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb00 f606 	mul.w	r6, r0, r6
 8000c56:	429e      	cmp	r6, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x94>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c62:	f080 80fc 	bcs.w	8000e5e <__udivmoddi4+0x282>
 8000c66:	429e      	cmp	r6, r3
 8000c68:	f240 80f9 	bls.w	8000e5e <__udivmoddi4+0x282>
 8000c6c:	4463      	add	r3, ip
 8000c6e:	3802      	subs	r0, #2
 8000c70:	1b9b      	subs	r3, r3, r6
 8000c72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11d      	cbz	r5, 8000c82 <__udivmoddi4+0xa6>
 8000c7a:	40d3      	lsrs	r3, r2
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d905      	bls.n	8000c96 <__udivmoddi4+0xba>
 8000c8a:	b10d      	cbz	r5, 8000c90 <__udivmoddi4+0xb4>
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4608      	mov	r0, r1
 8000c94:	e7f5      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d146      	bne.n	8000d2c <__udivmoddi4+0x150>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xcc>
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	f0c0 80f0 	bcc.w	8000e88 <__udivmoddi4+0x2ac>
 8000ca8:	1a86      	subs	r6, r0, r2
 8000caa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d0e6      	beq.n	8000c82 <__udivmoddi4+0xa6>
 8000cb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb8:	e7e3      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	f040 8090 	bne.w	8000de0 <__udivmoddi4+0x204>
 8000cc0:	eba1 040c 	sub.w	r4, r1, ip
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa1f f78c 	uxth.w	r7, ip
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cde:	fb07 f006 	mul.w	r0, r7, r6
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x11c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x11a>
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	f200 80cd 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cf6:	4626      	mov	r6, r4
 8000cf8:	1a1c      	subs	r4, r3, r0
 8000cfa:	fa1f f38e 	uxth.w	r3, lr
 8000cfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d02:	fb08 4410 	mls	r4, r8, r0, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb00 f707 	mul.w	r7, r0, r7
 8000d0e:	429f      	cmp	r7, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x148>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x146>
 8000d1c:	429f      	cmp	r7, r3
 8000d1e:	f200 80b0 	bhi.w	8000e82 <__udivmoddi4+0x2a6>
 8000d22:	4620      	mov	r0, r4
 8000d24:	1bdb      	subs	r3, r3, r7
 8000d26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0x9c>
 8000d2c:	f1c1 0620 	rsb	r6, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 f706 	lsr.w	r7, r2, r6
 8000d36:	431f      	orrs	r7, r3
 8000d38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d40:	ea43 030c 	orr.w	r3, r3, ip
 8000d44:	40f4      	lsrs	r4, r6
 8000d46:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4a:	0c38      	lsrs	r0, r7, #16
 8000d4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d50:	fbb4 fef0 	udiv	lr, r4, r0
 8000d54:	fa1f fc87 	uxth.w	ip, r7
 8000d58:	fb00 441e 	mls	r4, r0, lr, r4
 8000d5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d60:	fb0e f90c 	mul.w	r9, lr, ip
 8000d64:	45a1      	cmp	r9, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	d90a      	bls.n	8000d82 <__udivmoddi4+0x1a6>
 8000d6c:	193c      	adds	r4, r7, r4
 8000d6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d72:	f080 8084 	bcs.w	8000e7e <__udivmoddi4+0x2a2>
 8000d76:	45a1      	cmp	r9, r4
 8000d78:	f240 8081 	bls.w	8000e7e <__udivmoddi4+0x2a2>
 8000d7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	eba4 0409 	sub.w	r4, r4, r9
 8000d86:	fa1f f983 	uxth.w	r9, r3
 8000d8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x1d2>
 8000d9e:	193c      	adds	r4, r7, r4
 8000da0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da4:	d267      	bcs.n	8000e76 <__udivmoddi4+0x29a>
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d965      	bls.n	8000e76 <__udivmoddi4+0x29a>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000db2:	fba0 9302 	umull	r9, r3, r0, r2
 8000db6:	eba4 040c 	sub.w	r4, r4, ip
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	46ce      	mov	lr, r9
 8000dbe:	469c      	mov	ip, r3
 8000dc0:	d351      	bcc.n	8000e66 <__udivmoddi4+0x28a>
 8000dc2:	d04e      	beq.n	8000e62 <__udivmoddi4+0x286>
 8000dc4:	b155      	cbz	r5, 8000ddc <__udivmoddi4+0x200>
 8000dc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dca:	eb64 040c 	sbc.w	r4, r4, ip
 8000dce:	fa04 f606 	lsl.w	r6, r4, r6
 8000dd2:	40cb      	lsrs	r3, r1
 8000dd4:	431e      	orrs	r6, r3
 8000dd6:	40cc      	lsrs	r4, r1
 8000dd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	e750      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f103 	lsr.w	r1, r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa24 f303 	lsr.w	r3, r4, r3
 8000df0:	4094      	lsls	r4, r2
 8000df2:	430c      	orrs	r4, r1
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dfc:	fa1f f78c 	uxth.w	r7, ip
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3110 	mls	r1, r8, r0, r3
 8000e08:	0c23      	lsrs	r3, r4, #16
 8000e0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0e:	fb00 f107 	mul.w	r1, r0, r7
 8000e12:	4299      	cmp	r1, r3
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x24c>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1e:	d22c      	bcs.n	8000e7a <__udivmoddi4+0x29e>
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d92a      	bls.n	8000e7a <__udivmoddi4+0x29e>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e30:	fb08 3311 	mls	r3, r8, r1, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb01 f307 	mul.w	r3, r1, r7
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x276>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e48:	d213      	bcs.n	8000e72 <__udivmoddi4+0x296>
 8000e4a:	42a3      	cmp	r3, r4
 8000e4c:	d911      	bls.n	8000e72 <__udivmoddi4+0x296>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	1ae4      	subs	r4, r4, r3
 8000e54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e58:	e739      	b.n	8000cce <__udivmoddi4+0xf2>
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	e6f0      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e5e:	4608      	mov	r0, r1
 8000e60:	e706      	b.n	8000c70 <__udivmoddi4+0x94>
 8000e62:	45c8      	cmp	r8, r9
 8000e64:	d2ae      	bcs.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6e:	3801      	subs	r0, #1
 8000e70:	e7a8      	b.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e72:	4631      	mov	r1, r6
 8000e74:	e7ed      	b.n	8000e52 <__udivmoddi4+0x276>
 8000e76:	4603      	mov	r3, r0
 8000e78:	e799      	b.n	8000dae <__udivmoddi4+0x1d2>
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	e7d4      	b.n	8000e28 <__udivmoddi4+0x24c>
 8000e7e:	46d6      	mov	lr, sl
 8000e80:	e77f      	b.n	8000d82 <__udivmoddi4+0x1a6>
 8000e82:	4463      	add	r3, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e74d      	b.n	8000d24 <__udivmoddi4+0x148>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e70f      	b.n	8000cb0 <__udivmoddi4+0xd4>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	e730      	b.n	8000cf8 <__udivmoddi4+0x11c>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea0:	f3bf 8f4f 	dsb	sy
}
 8000ea4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <__NVIC_SystemReset+0x24>)
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000eae:	4904      	ldr	r1, [pc, #16]	@ (8000ec0 <__NVIC_SystemReset+0x24>)
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <__NVIC_SystemReset+0x28>)
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eb6:	f3bf 8f4f 	dsb	sy
}
 8000eba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <__NVIC_SystemReset+0x20>
 8000ec0:	e000ed00 	.word	0xe000ed00
 8000ec4:	05fa0004 	.word	0x05fa0004

08000ec8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ecc:	f002 fa44 	bl	8003358 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ed0:	f000 f884 	bl	8000fdc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ed4:	f000 fb7c 	bl	80015d0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000ed8:	f000 f8de 	bl	8001098 <MX_I2C1_Init>
	MX_TIM1_Init();
 8000edc:	f000 f90a 	bl	80010f4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000ee0:	f000 f9a6 	bl	8001230 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000ee4:	f000 f9f8 	bl	80012d8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000ee8:	f000 fa4a 	bl	8001380 <MX_TIM4_Init>
	MX_TIM8_Init();
 8000eec:	f000 fa9c 	bl	8001428 <MX_TIM8_Init>
	MX_USART3_UART_Init();
 8000ef0:	f000 fb44 	bl	800157c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 8000ef4:	f002 f9a4 	bl	8003240 <OLED_Init>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 5);
 8000ef8:	2205      	movs	r2, #5
 8000efa:	4921      	ldr	r1, [pc, #132]	@ (8000f80 <main+0xb8>)
 8000efc:	4821      	ldr	r0, [pc, #132]	@ (8000f84 <main+0xbc>)
 8000efe:	f005 fed4 	bl	8006caa <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000f02:	f006 fe9f 	bl	8007c44 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000f06:	4a20      	ldr	r2, [pc, #128]	@ (8000f88 <main+0xc0>)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4820      	ldr	r0, [pc, #128]	@ (8000f8c <main+0xc4>)
 8000f0c:	f006 fee4 	bl	8007cd8 <osThreadNew>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a1f      	ldr	r2, [pc, #124]	@ (8000f90 <main+0xc8>)
 8000f14:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of motorTask */
	motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000f16:	4a1f      	ldr	r2, [pc, #124]	@ (8000f94 <main+0xcc>)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	481f      	ldr	r0, [pc, #124]	@ (8000f98 <main+0xd0>)
 8000f1c:	f006 fedc 	bl	8007cd8 <osThreadNew>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a1e      	ldr	r2, [pc, #120]	@ (8000f9c <main+0xd4>)
 8000f24:	6013      	str	r3, [r2, #0]

	/* creation of OLEDTask */
	OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000f26:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa0 <main+0xd8>)
 8000f28:	2100      	movs	r1, #0
 8000f2a:	481e      	ldr	r0, [pc, #120]	@ (8000fa4 <main+0xdc>)
 8000f2c:	f006 fed4 	bl	8007cd8 <osThreadNew>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa8 <main+0xe0>)
 8000f34:	6013      	str	r3, [r2, #0]

	/* creation of gyroTask */
	gyroTaskHandle = osThreadNew(StartGyroTask, NULL, &gyroTask_attributes);
 8000f36:	4a1d      	ldr	r2, [pc, #116]	@ (8000fac <main+0xe4>)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	481d      	ldr	r0, [pc, #116]	@ (8000fb0 <main+0xe8>)
 8000f3c:	f006 fecc 	bl	8007cd8 <osThreadNew>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb4 <main+0xec>)
 8000f44:	6013      	str	r3, [r2, #0]
	/* creation of ultrasonicTask */
//	ultrasonicTaskHandle = osThreadNew(StartUltrasonicTask, NULL,
//			&ultrasonicTask_attributes);

	/* creation of communicateTask */
	communicateTaskHandle = osThreadNew(StartCommunicateTask, NULL,
 8000f46:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb8 <main+0xf0>)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	481c      	ldr	r0, [pc, #112]	@ (8000fbc <main+0xf4>)
 8000f4c:	f006 fec4 	bl	8007cd8 <osThreadNew>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <main+0xf8>)
 8000f54:	6013      	str	r3, [r2, #0]
			&communicateTask_attributes);

	/* creation of encoderRTask */
	encoderRTaskHandle = osThreadNew(StartEncoderRTask, NULL,
 8000f56:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc4 <main+0xfc>)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	481b      	ldr	r0, [pc, #108]	@ (8000fc8 <main+0x100>)
 8000f5c:	f006 febc 	bl	8007cd8 <osThreadNew>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a1a      	ldr	r2, [pc, #104]	@ (8000fcc <main+0x104>)
 8000f64:	6013      	str	r3, [r2, #0]
			&encoderRTask_attributes);

	/* creation of encoderLTask */
	encoderLTaskHandle = osThreadNew(StartEncoderLTask, NULL,
 8000f66:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd0 <main+0x108>)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	481a      	ldr	r0, [pc, #104]	@ (8000fd4 <main+0x10c>)
 8000f6c:	f006 feb4 	bl	8007cd8 <osThreadNew>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a19      	ldr	r2, [pc, #100]	@ (8000fd8 <main+0x110>)
 8000f74:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000f76:	f006 fe89 	bl	8007c8c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	while (1){
 8000f7a:	bf00      	nop
 8000f7c:	e7fd      	b.n	8000f7a <main+0xb2>
 8000f7e:	bf00      	nop
 8000f80:	200002a0 	.word	0x200002a0
 8000f84:	20000240 	.word	0x20000240
 8000f88:	0800b254 	.word	0x0800b254
 8000f8c:	08001e1d 	.word	0x08001e1d
 8000f90:	20000284 	.word	0x20000284
 8000f94:	0800b278 	.word	0x0800b278
 8000f98:	08001e41 	.word	0x08001e41
 8000f9c:	20000288 	.word	0x20000288
 8000fa0:	0800b29c 	.word	0x0800b29c
 8000fa4:	08002289 	.word	0x08002289
 8000fa8:	2000028c 	.word	0x2000028c
 8000fac:	0800b2c0 	.word	0x0800b2c0
 8000fb0:	080023a1 	.word	0x080023a1
 8000fb4:	20000290 	.word	0x20000290
 8000fb8:	0800b2e4 	.word	0x0800b2e4
 8000fbc:	0800253d 	.word	0x0800253d
 8000fc0:	20000294 	.word	0x20000294
 8000fc4:	0800b308 	.word	0x0800b308
 8000fc8:	08002765 	.word	0x08002765
 8000fcc:	20000298 	.word	0x20000298
 8000fd0:	0800b32c 	.word	0x0800b32c
 8000fd4:	080027ed 	.word	0x080027ed
 8000fd8:	2000029c 	.word	0x2000029c

08000fdc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	@ 0x50
 8000fe0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	2230      	movs	r2, #48	@ 0x30
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f009 fbfc 	bl	800a7e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <SystemClock_Config+0xb4>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	4a21      	ldr	r2, [pc, #132]	@ (8001090 <SystemClock_Config+0xb4>)
 800100a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800100e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001010:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <SystemClock_Config+0xb4>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <SystemClock_Config+0xb8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a1b      	ldr	r2, [pc, #108]	@ (8001094 <SystemClock_Config+0xb8>)
 8001026:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <SystemClock_Config+0xb8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001038:	2302      	movs	r3, #2
 800103a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001040:	2310      	movs	r3, #16
 8001042:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001044:	2300      	movs	r3, #0
 8001046:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001048:	f107 0320 	add.w	r3, r7, #32
 800104c:	4618      	mov	r0, r3
 800104e:	f003 fd4b 	bl	8004ae8 <HAL_RCC_OscConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x80>
		Error_Handler();
 8001058:	f001 fc0c 	bl	8002874 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800105c:	230f      	movs	r3, #15
 800105e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f003 ffae 	bl	8004fd8 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xaa>
		Error_Handler();
 8001082:	f001 fbf7 	bl	8002874 <Error_Handler>
	}
}
 8001086:	bf00      	nop
 8001088:	3750      	adds	r7, #80	@ 0x50
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40007000 	.word	0x40007000

08001098 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <MX_I2C1_Init+0x50>)
 800109e:	4a13      	ldr	r2, [pc, #76]	@ (80010ec <MX_I2C1_Init+0x54>)
 80010a0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010a4:	4a12      	ldr	r2, [pc, #72]	@ (80010f0 <MX_I2C1_Init+0x58>)
 80010a6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010ba:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80010d4:	4804      	ldr	r0, [pc, #16]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010d6:	f002 fd49 	bl	8003b6c <HAL_I2C_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80010e0:	f001 fbc8 	bl	8002874 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000084 	.word	0x20000084
 80010ec:	40005400 	.word	0x40005400
 80010f0:	000186a0 	.word	0x000186a0

080010f4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b096      	sub	sp, #88	@ 0x58
 80010f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80010fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001108:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
 8001122:	615a      	str	r2, [r3, #20]
 8001124:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2220      	movs	r2, #32
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f009 fb5b 	bl	800a7e8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001132:	4b3d      	ldr	r3, [pc, #244]	@ (8001228 <MX_TIM1_Init+0x134>)
 8001134:	4a3d      	ldr	r2, [pc, #244]	@ (800122c <MX_TIM1_Init+0x138>)
 8001136:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 8001138:	4b3b      	ldr	r3, [pc, #236]	@ (8001228 <MX_TIM1_Init+0x134>)
 800113a:	22a0      	movs	r2, #160	@ 0xa0
 800113c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113e:	4b3a      	ldr	r3, [pc, #232]	@ (8001228 <MX_TIM1_Init+0x134>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 8001144:	4b38      	ldr	r3, [pc, #224]	@ (8001228 <MX_TIM1_Init+0x134>)
 8001146:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800114a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114c:	4b36      	ldr	r3, [pc, #216]	@ (8001228 <MX_TIM1_Init+0x134>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001152:	4b35      	ldr	r3, [pc, #212]	@ (8001228 <MX_TIM1_Init+0x134>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001158:	4b33      	ldr	r3, [pc, #204]	@ (8001228 <MX_TIM1_Init+0x134>)
 800115a:	2280      	movs	r2, #128	@ 0x80
 800115c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800115e:	4832      	ldr	r0, [pc, #200]	@ (8001228 <MX_TIM1_Init+0x134>)
 8001160:	f004 f91a 	bl	8005398 <HAL_TIM_Base_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM1_Init+0x7a>
		Error_Handler();
 800116a:	f001 fb83 	bl	8002874 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001172:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001174:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001178:	4619      	mov	r1, r3
 800117a:	482b      	ldr	r0, [pc, #172]	@ (8001228 <MX_TIM1_Init+0x134>)
 800117c:	f004 fe66 	bl	8005e4c <HAL_TIM_ConfigClockSource>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM1_Init+0x96>
		Error_Handler();
 8001186:	f001 fb75 	bl	8002874 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800118a:	4827      	ldr	r0, [pc, #156]	@ (8001228 <MX_TIM1_Init+0x134>)
 800118c:	f004 f953 	bl	8005436 <HAL_TIM_PWM_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0xa6>
		Error_Handler();
 8001196:	f001 fb6d 	bl	8002874 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80011a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011a6:	4619      	mov	r1, r3
 80011a8:	481f      	ldr	r0, [pc, #124]	@ (8001228 <MX_TIM1_Init+0x134>)
 80011aa:	f005 fbbd 	bl	8006928 <HAL_TIMEx_MasterConfigSynchronization>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80011b4:	f001 fb5e 	bl	8002874 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b8:	2360      	movs	r3, #96	@ 0x60
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 80011d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d4:	220c      	movs	r2, #12
 80011d6:	4619      	mov	r1, r3
 80011d8:	4813      	ldr	r0, [pc, #76]	@ (8001228 <MX_TIM1_Init+0x134>)
 80011da:	f004 fd75 	bl	8005cc8 <HAL_TIM_PWM_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 80011e4:	f001 fb46 	bl	8002874 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001200:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	4807      	ldr	r0, [pc, #28]	@ (8001228 <MX_TIM1_Init+0x134>)
 800120c:	f005 fc08 	bl	8006a20 <HAL_TIMEx_ConfigBreakDeadTime>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM1_Init+0x126>
			!= HAL_OK) {
		Error_Handler();
 8001216:	f001 fb2d 	bl	8002874 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800121a:	4803      	ldr	r0, [pc, #12]	@ (8001228 <MX_TIM1_Init+0x134>)
 800121c:	f001 fd0c 	bl	8002c38 <HAL_TIM_MspPostInit>

}
 8001220:	bf00      	nop
 8001222:	3758      	adds	r7, #88	@ 0x58
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200000d8 	.word	0x200000d8
 800122c:	40010000 	.word	0x40010000

08001230 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	@ 0x30
 8001234:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2224      	movs	r2, #36	@ 0x24
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f009 fad2 	bl	800a7e8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800124c:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 800124e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001252:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001260:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 8001262:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001266:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126e:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001274:	2303      	movs	r3, #3
 8001276:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800127c:	2301      	movs	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8001284:	230a      	movs	r3, #10
 8001286:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800128c:	2301      	movs	r3, #1
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 8001294:	230a      	movs	r3, #10
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4619      	mov	r1, r3
 800129e:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 80012a0:	f004 fa39 	bl	8005716 <HAL_TIM_Encoder_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0x7e>
		Error_Handler();
 80012aa:	f001 fae3 	bl	8002874 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4619      	mov	r1, r3
 80012ba:	4806      	ldr	r0, [pc, #24]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 80012bc:	f005 fb34 	bl	8006928 <HAL_TIMEx_MasterConfigSynchronization>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80012c6:	f001 fad5 	bl	8002874 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	3730      	adds	r7, #48	@ 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000120 	.word	0x20000120

080012d8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	@ 0x30
 80012dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2224      	movs	r2, #36	@ 0x24
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f009 fa7e 	bl	800a7e8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80012f4:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <MX_TIM3_Init+0xa0>)
 80012f6:	4a21      	ldr	r2, [pc, #132]	@ (800137c <MX_TIM3_Init+0xa4>)
 80012f8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80012fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <MX_TIM3_Init+0xa0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <MX_TIM3_Init+0xa0>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001306:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <MX_TIM3_Init+0xa0>)
 8001308:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800130c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <MX_TIM3_Init+0xa0>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001314:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <MX_TIM3_Init+0xa0>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800131a:	2303      	movs	r3, #3
 800131c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001322:	2301      	movs	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 800132a:	230a      	movs	r3, #10
 800132c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001332:	2301      	movs	r3, #1
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 800133a:	230a      	movs	r3, #10
 800133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4619      	mov	r1, r3
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <MX_TIM3_Init+0xa0>)
 8001346:	f004 f9e6 	bl	8005716 <HAL_TIM_Encoder_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x7c>
		Error_Handler();
 8001350:	f001 fa90 	bl	8002874 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	@ (8001378 <MX_TIM3_Init+0xa0>)
 8001362:	f005 fae1 	bl	8006928 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 800136c:	f001 fa82 	bl	8002874 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	@ 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000168 	.word	0x20000168
 800137c:	40000400 	.word	0x40000400

08001380 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800139c:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <MX_TIM4_Init+0xa0>)
 800139e:	4a21      	ldr	r2, [pc, #132]	@ (8001424 <MX_TIM4_Init+0xa4>)
 80013a0:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 16 - 1;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <MX_TIM4_Init+0xa0>)
 80013a4:	220f      	movs	r2, #15
 80013a6:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <MX_TIM4_Init+0xa0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <MX_TIM4_Init+0xa0>)
 80013b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b4:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <MX_TIM4_Init+0xa0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013bc:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <MX_TIM4_Init+0xa0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK) {
 80013c2:	4817      	ldr	r0, [pc, #92]	@ (8001420 <MX_TIM4_Init+0xa0>)
 80013c4:	f004 f958 	bl	8005678 <HAL_TIM_IC_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM4_Init+0x52>
		Error_Handler();
 80013ce:	f001 fa51 	bl	8002874 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	4619      	mov	r1, r3
 80013e0:	480f      	ldr	r0, [pc, #60]	@ (8001420 <MX_TIM4_Init+0xa0>)
 80013e2:	f005 faa1 	bl	8006928 <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM4_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 80013ec:	f001 fa42 	bl	8002874 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013f0:	2300      	movs	r3, #0
 80013f2:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013f4:	2301      	movs	r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001400:	463b      	mov	r3, r7
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	@ (8001420 <MX_TIM4_Init+0xa0>)
 8001408:	f004 fbc1 	bl	8005b8e <HAL_TIM_IC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM4_Init+0x96>
		Error_Handler();
 8001412:	f001 fa2f 	bl	8002874 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200001b0 	.word	0x200001b0
 8001424:	40000800 	.word	0x40000800

08001428 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b096      	sub	sp, #88	@ 0x58
 800142c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800142e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800143c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2220      	movs	r2, #32
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f009 f9c1 	bl	800a7e8 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001466:	4b43      	ldr	r3, [pc, #268]	@ (8001574 <MX_TIM8_Init+0x14c>)
 8001468:	4a43      	ldr	r2, [pc, #268]	@ (8001578 <MX_TIM8_Init+0x150>)
 800146a:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 800146c:	4b41      	ldr	r3, [pc, #260]	@ (8001574 <MX_TIM8_Init+0x14c>)
 800146e:	2200      	movs	r2, #0
 8001470:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b40      	ldr	r3, [pc, #256]	@ (8001574 <MX_TIM8_Init+0x14c>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 8001478:	4b3e      	ldr	r3, [pc, #248]	@ (8001574 <MX_TIM8_Init+0x14c>)
 800147a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800147e:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001480:	4b3c      	ldr	r3, [pc, #240]	@ (8001574 <MX_TIM8_Init+0x14c>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001486:	4b3b      	ldr	r3, [pc, #236]	@ (8001574 <MX_TIM8_Init+0x14c>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b39      	ldr	r3, [pc, #228]	@ (8001574 <MX_TIM8_Init+0x14c>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8001492:	4838      	ldr	r0, [pc, #224]	@ (8001574 <MX_TIM8_Init+0x14c>)
 8001494:	f003 ff80 	bl	8005398 <HAL_TIM_Base_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM8_Init+0x7a>
		Error_Handler();
 800149e:	f001 f9e9 	bl	8002874 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a6:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 80014a8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014ac:	4619      	mov	r1, r3
 80014ae:	4831      	ldr	r0, [pc, #196]	@ (8001574 <MX_TIM8_Init+0x14c>)
 80014b0:	f004 fccc 	bl	8005e4c <HAL_TIM_ConfigClockSource>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM8_Init+0x96>
		Error_Handler();
 80014ba:	f001 f9db 	bl	8002874 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80014be:	482d      	ldr	r0, [pc, #180]	@ (8001574 <MX_TIM8_Init+0x14c>)
 80014c0:	f003 ffb9 	bl	8005436 <HAL_TIM_PWM_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM8_Init+0xa6>
		Error_Handler();
 80014ca:	f001 f9d3 	bl	8002874 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80014d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014da:	4619      	mov	r1, r3
 80014dc:	4825      	ldr	r0, [pc, #148]	@ (8001574 <MX_TIM8_Init+0x14c>)
 80014de:	f005 fa23 	bl	8006928 <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80014e8:	f001 f9c4 	bl	8002874 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ec:	2360      	movs	r3, #96	@ 0x60
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 8001508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150c:	2200      	movs	r2, #0
 800150e:	4619      	mov	r1, r3
 8001510:	4818      	ldr	r0, [pc, #96]	@ (8001574 <MX_TIM8_Init+0x14c>)
 8001512:	f004 fbd9 	bl	8005cc8 <HAL_TIM_PWM_ConfigChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM8_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 800151c:	f001 f9aa 	bl	8002874 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 8001520:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001524:	2204      	movs	r2, #4
 8001526:	4619      	mov	r1, r3
 8001528:	4812      	ldr	r0, [pc, #72]	@ (8001574 <MX_TIM8_Init+0x14c>)
 800152a:	f004 fbcd 	bl	8005cc8 <HAL_TIM_PWM_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM8_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8001534:	f001 f99e 	bl	8002874 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800154c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001550:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	@ (8001574 <MX_TIM8_Init+0x14c>)
 800155c:	f005 fa60 	bl	8006a20 <HAL_TIMEx_ConfigBreakDeadTime>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM8_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 8001566:	f001 f985 	bl	8002874 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	3758      	adds	r7, #88	@ 0x58
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001f8 	.word	0x200001f8
 8001578:	40010400 	.word	0x40010400

0800157c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001580:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 8001582:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <MX_USART3_UART_Init+0x50>)
 8001584:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 8001588:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800158c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80015b2:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 80015b4:	f005 fa9a 	bl	8006aec <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80015be:	f001 f959 	bl	8002874 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000240 	.word	0x20000240
 80015cc:	40004800 	.word	0x40004800

080015d0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	@ 0x30
 80015d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001758 <MX_GPIO_Init+0x188>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001758 <MX_GPIO_Init+0x188>)
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b58      	ldr	r3, [pc, #352]	@ (8001758 <MX_GPIO_Init+0x188>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	4b54      	ldr	r3, [pc, #336]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a53      	ldr	r2, [pc, #332]	@ (8001758 <MX_GPIO_Init+0x188>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b51      	ldr	r3, [pc, #324]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b4d      	ldr	r3, [pc, #308]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a4c      	ldr	r2, [pc, #304]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b4a      	ldr	r3, [pc, #296]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b46      	ldr	r3, [pc, #280]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a45      	ldr	r2, [pc, #276]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b43      	ldr	r3, [pc, #268]	@ (8001758 <MX_GPIO_Init+0x188>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	4b3f      	ldr	r3, [pc, #252]	@ (8001758 <MX_GPIO_Init+0x188>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a3e      	ldr	r2, [pc, #248]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b3c      	ldr	r3, [pc, #240]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b38      	ldr	r3, [pc, #224]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a37      	ldr	r2, [pc, #220]	@ (8001758 <MX_GPIO_Init+0x188>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b35      	ldr	r3, [pc, #212]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 8001694:	4831      	ldr	r0, [pc, #196]	@ (800175c <MX_GPIO_Init+0x18c>)
 8001696:	f002 fa35 	bl	8003b04 <HAL_GPIO_WritePin>
	OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin,
 800169a:	2200      	movs	r2, #0
 800169c:	213c      	movs	r1, #60	@ 0x3c
 800169e:	4830      	ldr	r0, [pc, #192]	@ (8001760 <MX_GPIO_Init+0x190>)
 80016a0:	f002 fa30 	bl	8003b04 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016aa:	482e      	ldr	r0, [pc, #184]	@ (8001764 <MX_GPIO_Init+0x194>)
 80016ac:	f002 fa2a 	bl	8003b04 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016b6:	482c      	ldr	r0, [pc, #176]	@ (8001768 <MX_GPIO_Init+0x198>)
 80016b8:	f002 fa24 	bl	8003b04 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
	 LED3_Pin */
	GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin
 80016bc:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 80016c0:	61fb      	str	r3, [r7, #28]
			| OLED_DC_Pin | LED3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	4821      	ldr	r0, [pc, #132]	@ (800175c <MX_GPIO_Init+0x18c>)
 80016d6:	f002 f879 	bl	80037cc <HAL_GPIO_Init>

	/*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
	GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin;
 80016da:	233c      	movs	r3, #60	@ 0x3c
 80016dc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e6:	2302      	movs	r3, #2
 80016e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	481b      	ldr	r0, [pc, #108]	@ (8001760 <MX_GPIO_Init+0x190>)
 80016f2:	f002 f86b 	bl	80037cc <HAL_GPIO_Init>

	/*Configure GPIO pin : Buzzer_Pin */
	GPIO_InitStruct.Pin = Buzzer_Pin;
 80016f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	4815      	ldr	r0, [pc, #84]	@ (8001764 <MX_GPIO_Init+0x194>)
 8001710:	f002 f85c 	bl	80037cc <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_PB_Pin */
	GPIO_InitStruct.Pin = USER_PB_Pin;
 8001714:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001718:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800171a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800171e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	480f      	ldr	r0, [pc, #60]	@ (8001768 <MX_GPIO_Init+0x198>)
 800172c:	f002 f84e 	bl	80037cc <HAL_GPIO_Init>

	/*Configure GPIO pin : Trigger_Pin */
	GPIO_InitStruct.Pin = Trigger_Pin;
 8001730:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001734:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	2301      	movs	r3, #1
 8001738:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	4807      	ldr	r0, [pc, #28]	@ (8001768 <MX_GPIO_Init+0x198>)
 800174a:	f002 f83f 	bl	80037cc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800174e:	bf00      	nop
 8001750:	3730      	adds	r7, #48	@ 0x30
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40021000 	.word	0x40021000
 8001760:	40020000 	.word	0x40020000
 8001764:	40020400 	.word	0x40020400
 8001768:	40020c00 	.word	0x40020c00

0800176c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// communication
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	/* to prevent unused argument(s) compilation warning */
	UNUSED(huart);
	HAL_UART_Receive_IT(&huart3, aRxBuffer, 5);
 8001774:	2205      	movs	r2, #5
 8001776:	4905      	ldr	r1, [pc, #20]	@ (800178c <HAL_UART_RxCpltCallback+0x20>)
 8001778:	4805      	ldr	r0, [pc, #20]	@ (8001790 <HAL_UART_RxCpltCallback+0x24>)
 800177a:	f005 fa96 	bl	8006caa <HAL_UART_Receive_IT>
	receivedInstruction = 1;
 800177e:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <HAL_UART_RxCpltCallback+0x28>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200002a0 	.word	0x200002a0
 8001790:	20000240 	.word	0x20000240
 8001794:	20000304 	.word	0x20000304

08001798 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim4, 0);
	while (__HAL_TIM_GET_COUNTER (&htim4) < time)
		;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7f1b      	ldrb	r3, [r3, #28]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	f040 808a 	bne.w	80018be <HAL_TIM_IC_CaptureCallback+0x126>
		if (Is_First_Captured == 0) {
 80017aa:	4b49      	ldr	r3, [pc, #292]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d11b      	bne.n	80017ea <HAL_TIM_IC_CaptureCallback+0x52>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017b2:	2100      	movs	r1, #0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f004 fc11 	bl	8005fdc <HAL_TIM_ReadCapturedValue>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	4b45      	ldr	r3, [pc, #276]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80017c0:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;
 80017c2:	4b43      	ldr	r3, [pc, #268]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6a1a      	ldr	r2, [r3, #32]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 020a 	bic.w	r2, r2, #10
 80017d6:	621a      	str	r2, [r3, #32]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6a1a      	ldr	r2, [r3, #32]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0202 	orr.w	r2, r2, #2
 80017e6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 80017e8:	e069      	b.n	80018be <HAL_TIM_IC_CaptureCallback+0x126>
		} else if (Is_First_Captured == 1) {
 80017ea:	4b39      	ldr	r3, [pc, #228]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d165      	bne.n	80018be <HAL_TIM_IC_CaptureCallback+0x126>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017f2:	2100      	movs	r1, #0
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f004 fbf1 	bl	8005fdc <HAL_TIM_ReadCapturedValue>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b36      	ldr	r3, [pc, #216]	@ (80018d8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001800:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1) {
 800180a:	4b33      	ldr	r3, [pc, #204]	@ (80018d8 <HAL_TIM_IC_CaptureCallback+0x140>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	dd0a      	ble.n	800182c <HAL_TIM_IC_CaptureCallback+0x94>
				Difference = IC_Val2 - IC_Val1;
 8001816:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b2d      	ldr	r3, [pc, #180]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	b29b      	uxth	r3, r3
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b2d      	ldr	r3, [pc, #180]	@ (80018dc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001828:	801a      	strh	r2, [r3, #0]
 800182a:	e011      	b.n	8001850 <HAL_TIM_IC_CaptureCallback+0xb8>
			else if (IC_Val1 > IC_Val2) {
 800182c:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	dd0b      	ble.n	8001850 <HAL_TIM_IC_CaptureCallback+0xb8>
				Difference = (65535 - IC_Val1) + IC_Val2;
 8001838:	4b27      	ldr	r3, [pc, #156]	@ (80018d8 <HAL_TIM_IC_CaptureCallback+0x140>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	b29a      	uxth	r2, r3
 800183e:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	b29b      	uxth	r3, r3
 8001848:	3b01      	subs	r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <HAL_TIM_IC_CaptureCallback+0x144>)
 800184e:	801a      	strh	r2, [r3, #0]
			uDistance = Difference * .0343 / 2;
 8001850:	4b22      	ldr	r3, [pc, #136]	@ (80018dc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe5d 	bl	8000514 <__aeabi_i2d>
 800185a:	a31b      	add	r3, pc, #108	@ (adr r3, 80018c8 <HAL_TIM_IC_CaptureCallback+0x130>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7fe fec2 	bl	80005e8 <__aeabi_dmul>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001874:	f7fe ffe2 	bl	800083c <__aeabi_ddiv>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff f974 	bl	8000b6c <__aeabi_d2uiz>
 8001884:	4603      	mov	r3, r0
 8001886:	b29a      	uxth	r2, r3
 8001888:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <HAL_TIM_IC_CaptureCallback+0x148>)
 800188a:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0;
 800188c:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6a1a      	ldr	r2, [r3, #32]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 020a 	bic.w	r2, r2, #10
 80018a0:	621a      	str	r2, [r3, #32]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6a12      	ldr	r2, [r2, #32]
 80018ac:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80018ae:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0202 	bic.w	r2, r2, #2
 80018bc:	60da      	str	r2, [r3, #12]
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	04816f00 	.word	0x04816f00
 80018cc:	3fa18fc5 	.word	0x3fa18fc5
 80018d0:	200002f4 	.word	0x200002f4
 80018d4:	200002f8 	.word	0x200002f8
 80018d8:	200002fc 	.word	0x200002fc
 80018dc:	20000300 	.word	0x20000300
 80018e0:	20000302 	.word	0x20000302
 80018e4:	200001b0 	.word	0x200001b0

080018e8 <moveCarStraight>:
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
}

// movement
void moveCarStraight(double distance) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	ed87 0b00 	vstr	d0, [r7]
	distance = distance * 75;
 80018f2:	a331      	add	r3, pc, #196	@ (adr r3, 80019b8 <moveCarStraight+0xd0>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018fc:	f7fe fe74 	bl	80005e8 <__aeabi_dmul>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	e9c7 2300 	strd	r2, r3, [r7]
	pwmVal_servo = SERVOCENTER;
 8001908:	4b23      	ldr	r3, [pc, #140]	@ (8001998 <moveCarStraight+0xb0>)
 800190a:	2292      	movs	r2, #146	@ 0x92
 800190c:	801a      	strh	r2, [r3, #0]
	osDelay(450);
 800190e:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001912:	f006 fa73 	bl	8007dfc <osDelay>
	e_brake = 0;
 8001916:	4b21      	ldr	r3, [pc, #132]	@ (800199c <moveCarStraight+0xb4>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 800191c:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <moveCarStraight+0xb8>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
	rightEncoderVal = 75000;
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <moveCarStraight+0xbc>)
 8001924:	4a20      	ldr	r2, [pc, #128]	@ (80019a8 <moveCarStraight+0xc0>)
 8001926:	601a      	str	r2, [r3, #0]
	leftEncoderVal = 75000;
 8001928:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <moveCarStraight+0xc4>)
 800192a:	4a1f      	ldr	r2, [pc, #124]	@ (80019a8 <moveCarStraight+0xc0>)
 800192c:	601a      	str	r2, [r3, #0]
	rightTarget = 75000;
 800192e:	4b20      	ldr	r3, [pc, #128]	@ (80019b0 <moveCarStraight+0xc8>)
 8001930:	4a1d      	ldr	r2, [pc, #116]	@ (80019a8 <moveCarStraight+0xc0>)
 8001932:	601a      	str	r2, [r3, #0]
	leftTarget = 75000;
 8001934:	4b1f      	ldr	r3, [pc, #124]	@ (80019b4 <moveCarStraight+0xcc>)
 8001936:	4a1c      	ldr	r2, [pc, #112]	@ (80019a8 <moveCarStraight+0xc0>)
 8001938:	601a      	str	r2, [r3, #0]
	rightTarget += distance;
 800193a:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <moveCarStraight+0xc8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fde8 	bl	8000514 <__aeabi_i2d>
 8001944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001948:	f7fe fc98 	bl	800027c <__adddf3>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	f7ff f8e2 	bl	8000b1c <__aeabi_d2iz>
 8001958:	4603      	mov	r3, r0
 800195a:	4a15      	ldr	r2, [pc, #84]	@ (80019b0 <moveCarStraight+0xc8>)
 800195c:	6013      	str	r3, [r2, #0]
	leftTarget += distance;
 800195e:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <moveCarStraight+0xcc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fdd6 	bl	8000514 <__aeabi_i2d>
 8001968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800196c:	f7fe fc86 	bl	800027c <__adddf3>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	f7ff f8d0 	bl	8000b1c <__aeabi_d2iz>
 800197c:	4603      	mov	r3, r0
 800197e:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <moveCarStraight+0xcc>)
 8001980:	6013      	str	r3, [r2, #0]
	while (finishCheck())
 8001982:	bf00      	nop
 8001984:	f000 f984 	bl	8001c90 <finishCheck>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1fa      	bne.n	8001984 <moveCarStraight+0x9c>
		;
}
 800198e:	bf00      	nop
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000000 	.word	0x20000000
 800199c:	200002b8 	.word	0x200002b8
 80019a0:	200002b4 	.word	0x200002b4
 80019a4:	200002bc 	.word	0x200002bc
 80019a8:	000124f8 	.word	0x000124f8
 80019ac:	200002c0 	.word	0x200002c0
 80019b0:	200002c4 	.word	0x200002c4
 80019b4:	200002c8 	.word	0x200002c8
 80019b8:	00000000 	.word	0x00000000
 80019bc:	4052c000 	.word	0x4052c000

080019c0 <moveCarRight>:
	e_brake = 1;
	pwmVal_servo = SERVOCENTER;
	osDelay(200);
}

void moveCarRight(double angle) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVORIGHT;
 80019ca:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <moveCarRight+0x54>)
 80019cc:	22fa      	movs	r2, #250	@ 0xfa
 80019ce:	801a      	strh	r2, [r3, #0]
	osDelay(450);
 80019d0:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80019d4:	f006 fa12 	bl	8007dfc <osDelay>
	e_brake = 0;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <moveCarRight+0x58>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 80019de:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <moveCarRight+0x5c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 80019e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <moveCarRight+0x60>)
 80019e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019ee:	f7fe fc43 	bl	8000278 <__aeabi_dsub>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	490a      	ldr	r1, [pc, #40]	@ (8001a20 <moveCarRight+0x60>)
 80019f8:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck())
 80019fc:	bf00      	nop
 80019fe:	f000 f947 	bl	8001c90 <finishCheck>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1fa      	bne.n	80019fe <moveCarRight+0x3e>
		;
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000000 	.word	0x20000000
 8001a18:	200002b8 	.word	0x200002b8
 8001a1c:	200002b4 	.word	0x200002b4
 8001a20:	200002d0 	.word	0x200002d0

08001a24 <moveCarLeft>:

void moveCarLeft(double angle) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVOLEFT;
 8001a2e:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <moveCarLeft+0x54>)
 8001a30:	2260      	movs	r2, #96	@ 0x60
 8001a32:	801a      	strh	r2, [r3, #0]
	osDelay(450);
 8001a34:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001a38:	f006 f9e0 	bl	8007dfc <osDelay>
	e_brake = 0;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <moveCarLeft+0x58>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <moveCarLeft+0x5c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001a48:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <moveCarLeft+0x60>)
 8001a4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a52:	f7fe fc13 	bl	800027c <__adddf3>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	490a      	ldr	r1, [pc, #40]	@ (8001a84 <moveCarLeft+0x60>)
 8001a5c:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck())
 8001a60:	bf00      	nop
 8001a62:	f000 f915 	bl	8001c90 <finishCheck>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1fa      	bne.n	8001a62 <moveCarLeft+0x3e>
		;
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	200002b8 	.word	0x200002b8
 8001a80:	200002b4 	.word	0x200002b4
 8001a84:	200002d0 	.word	0x200002d0

08001a88 <PID_Control>:

// error correction
int PID_Control(int error, int right) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
	if (right) { //rightMotor
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d018      	beq.n	8001aca <PID_Control+0x42>
		if (error > 0) { //go forward
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	dd0a      	ble.n	8001ab4 <PID_Control+0x2c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2110      	movs	r1, #16
 8001aa2:	4835      	ldr	r0, [pc, #212]	@ (8001b78 <PID_Control+0xf0>)
 8001aa4:	f002 f82e 	bl	8003b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2120      	movs	r1, #32
 8001aac:	4832      	ldr	r0, [pc, #200]	@ (8001b78 <PID_Control+0xf0>)
 8001aae:	f002 f829 	bl	8003b04 <HAL_GPIO_WritePin>
 8001ab2:	e022      	b.n	8001afa <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2110      	movs	r1, #16
 8001ab8:	482f      	ldr	r0, [pc, #188]	@ (8001b78 <PID_Control+0xf0>)
 8001aba:	f002 f823 	bl	8003b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2120      	movs	r1, #32
 8001ac2:	482d      	ldr	r0, [pc, #180]	@ (8001b78 <PID_Control+0xf0>)
 8001ac4:	f002 f81e 	bl	8003b04 <HAL_GPIO_WritePin>
 8001ac8:	e017      	b.n	8001afa <PID_Control+0x72>
		}
	} else { //leftMotor
		if (error > 0) { //go forward
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	dd0a      	ble.n	8001ae6 <PID_Control+0x5e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	2108      	movs	r1, #8
 8001ad4:	4828      	ldr	r0, [pc, #160]	@ (8001b78 <PID_Control+0xf0>)
 8001ad6:	f002 f815 	bl	8003b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2104      	movs	r1, #4
 8001ade:	4826      	ldr	r0, [pc, #152]	@ (8001b78 <PID_Control+0xf0>)
 8001ae0:	f002 f810 	bl	8003b04 <HAL_GPIO_WritePin>
 8001ae4:	e009      	b.n	8001afa <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2108      	movs	r1, #8
 8001aea:	4823      	ldr	r0, [pc, #140]	@ (8001b78 <PID_Control+0xf0>)
 8001aec:	f002 f80a 	bl	8003b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	2104      	movs	r1, #4
 8001af4:	4820      	ldr	r0, [pc, #128]	@ (8001b78 <PID_Control+0xf0>)
 8001af6:	f002 f805 	bl	8003b04 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bfb8      	it	lt
 8001b00:	425b      	neglt	r3, r3
 8001b02:	607b      	str	r3, [r7, #4]
	if (error > 2000) {
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b0a:	dd02      	ble.n	8001b12 <PID_Control+0x8a>
		return 3000;
 8001b0c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001b10:	e02d      	b.n	8001b6e <PID_Control+0xe6>
	} else if (error > 500) {
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b18:	dd02      	ble.n	8001b20 <PID_Control+0x98>
		return 2000;
 8001b1a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001b1e:	e026      	b.n	8001b6e <PID_Control+0xe6>
	} else if (error > 200) {
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2bc8      	cmp	r3, #200	@ 0xc8
 8001b24:	dd02      	ble.n	8001b2c <PID_Control+0xa4>
		return 1400;
 8001b26:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8001b2a:	e020      	b.n	8001b6e <PID_Control+0xe6>
	} else if (error > 100) {
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b64      	cmp	r3, #100	@ 0x64
 8001b30:	dd02      	ble.n	8001b38 <PID_Control+0xb0>
		return 1000;
 8001b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b36:	e01a      	b.n	8001b6e <PID_Control+0xe6>
	} else if (error > 2) {
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	dd07      	ble.n	8001b4e <PID_Control+0xc6>
		times_acceptable++;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <PID_Control+0xf4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	4a0d      	ldr	r2, [pc, #52]	@ (8001b7c <PID_Control+0xf4>)
 8001b46:	6013      	str	r3, [r2, #0]
		return 500;
 8001b48:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b4c:	e00f      	b.n	8001b6e <PID_Control+0xe6>
	} else if (error >= 1) {
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	dd06      	ble.n	8001b62 <PID_Control+0xda>
		times_acceptable++;
 8001b54:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <PID_Control+0xf4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	4a08      	ldr	r2, [pc, #32]	@ (8001b7c <PID_Control+0xf4>)
 8001b5c:	6013      	str	r3, [r2, #0]
		return 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e005      	b.n	8001b6e <PID_Control+0xe6>
	} else {
		times_acceptable++;
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <PID_Control+0xf4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	4a04      	ldr	r2, [pc, #16]	@ (8001b7c <PID_Control+0xf4>)
 8001b6a:	6013      	str	r3, [r2, #0]
		return 0;
 8001b6c:	2300      	movs	r3, #0
	}
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	200002b4 	.word	0x200002b4

08001b80 <PID_Angle>:

int PID_Angle(double errord, int right) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b8a:	6078      	str	r0, [r7, #4]
	int error = (int) (errord * 10);
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4b3c      	ldr	r3, [pc, #240]	@ (8001c84 <PID_Angle+0x104>)
 8001b92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b96:	f7fe fd27 	bl	80005e8 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7fe ffbb 	bl	8000b1c <__aeabi_d2iz>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	617b      	str	r3, [r7, #20]
	if (right) { //rightMotor
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d018      	beq.n	8001be2 <PID_Angle+0x62>
		if (error > 0) { //go forward
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	dd0a      	ble.n	8001bcc <PID_Angle+0x4c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2110      	movs	r1, #16
 8001bba:	4833      	ldr	r0, [pc, #204]	@ (8001c88 <PID_Angle+0x108>)
 8001bbc:	f001 ffa2 	bl	8003b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2120      	movs	r1, #32
 8001bc4:	4830      	ldr	r0, [pc, #192]	@ (8001c88 <PID_Angle+0x108>)
 8001bc6:	f001 ff9d 	bl	8003b04 <HAL_GPIO_WritePin>
 8001bca:	e022      	b.n	8001c12 <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2110      	movs	r1, #16
 8001bd0:	482d      	ldr	r0, [pc, #180]	@ (8001c88 <PID_Angle+0x108>)
 8001bd2:	f001 ff97 	bl	8003b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2120      	movs	r1, #32
 8001bda:	482b      	ldr	r0, [pc, #172]	@ (8001c88 <PID_Angle+0x108>)
 8001bdc:	f001 ff92 	bl	8003b04 <HAL_GPIO_WritePin>
 8001be0:	e017      	b.n	8001c12 <PID_Angle+0x92>
		}
	} else { //leftMotor
		if (error < 0) { //go forward
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	da0a      	bge.n	8001bfe <PID_Angle+0x7e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001be8:	2201      	movs	r2, #1
 8001bea:	2108      	movs	r1, #8
 8001bec:	4826      	ldr	r0, [pc, #152]	@ (8001c88 <PID_Angle+0x108>)
 8001bee:	f001 ff89 	bl	8003b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	4824      	ldr	r0, [pc, #144]	@ (8001c88 <PID_Angle+0x108>)
 8001bf8:	f001 ff84 	bl	8003b04 <HAL_GPIO_WritePin>
 8001bfc:	e009      	b.n	8001c12 <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2108      	movs	r1, #8
 8001c02:	4821      	ldr	r0, [pc, #132]	@ (8001c88 <PID_Angle+0x108>)
 8001c04:	f001 ff7e 	bl	8003b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2104      	movs	r1, #4
 8001c0c:	481e      	ldr	r0, [pc, #120]	@ (8001c88 <PID_Angle+0x108>)
 8001c0e:	f001 ff79 	bl	8003b04 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bfb8      	it	lt
 8001c18:	425b      	neglt	r3, r3
 8001c1a:	617b      	str	r3, [r7, #20]
	if (error > 300) {
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001c22:	dd02      	ble.n	8001c2a <PID_Angle+0xaa>
		return 3000;
 8001c24:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001c28:	e028      	b.n	8001c7c <PID_Angle+0xfc>
	} else if (error > 200) {
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2bc8      	cmp	r3, #200	@ 0xc8
 8001c2e:	dd02      	ble.n	8001c36 <PID_Angle+0xb6>
		return 2000;
 8001c30:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c34:	e022      	b.n	8001c7c <PID_Angle+0xfc>
	} else if (error > 150) {
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2b96      	cmp	r3, #150	@ 0x96
 8001c3a:	dd02      	ble.n	8001c42 <PID_Angle+0xc2>
		return 1600;
 8001c3c:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8001c40:	e01c      	b.n	8001c7c <PID_Angle+0xfc>
	} else if (error > 100) {
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2b64      	cmp	r3, #100	@ 0x64
 8001c46:	dd02      	ble.n	8001c4e <PID_Angle+0xce>
		return 1400;
 8001c48:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8001c4c:	e016      	b.n	8001c7c <PID_Angle+0xfc>
	} else if (error > 10) {
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b0a      	cmp	r3, #10
 8001c52:	dd02      	ble.n	8001c5a <PID_Angle+0xda>
		return 1000;
 8001c54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c58:	e010      	b.n	8001c7c <PID_Angle+0xfc>
	} else if (error >= 2) {
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	dd07      	ble.n	8001c70 <PID_Angle+0xf0>
		times_acceptable++;
 8001c60:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <PID_Angle+0x10c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	4a09      	ldr	r2, [pc, #36]	@ (8001c8c <PID_Angle+0x10c>)
 8001c68:	6013      	str	r3, [r2, #0]
		return 600;
 8001c6a:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001c6e:	e005      	b.n	8001c7c <PID_Angle+0xfc>
	} else {
		times_acceptable++;
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <PID_Angle+0x10c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	4a05      	ldr	r2, [pc, #20]	@ (8001c8c <PID_Angle+0x10c>)
 8001c78:	6013      	str	r3, [r2, #0]
		return 0;
 8001c7a:	2300      	movs	r3, #0
	}
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40240000 	.word	0x40240000
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	200002b4 	.word	0x200002b4

08001c90 <finishCheck>:

int finishCheck() {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	if (times_acceptable > 20) {
 8001c94:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <finishCheck+0x48>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b14      	cmp	r3, #20
 8001c9a:	dd1a      	ble.n	8001cd2 <finishCheck+0x42>
		e_brake = 1;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <finishCheck+0x4c>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
		pwmVal_L = pwmVal_R = 0;
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce0 <finishCheck+0x50>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	801a      	strh	r2, [r3, #0]
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce0 <finishCheck+0x50>)
 8001caa:	881a      	ldrh	r2, [r3, #0]
 8001cac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <finishCheck+0x54>)
 8001cae:	801a      	strh	r2, [r3, #0]
		leftTarget = leftEncoderVal;
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce8 <finishCheck+0x58>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <finishCheck+0x5c>)
 8001cb6:	6013      	str	r3, [r2, #0]
		rightTarget = rightEncoderVal;
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <finishCheck+0x60>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <finishCheck+0x64>)
 8001cbe:	6013      	str	r3, [r2, #0]
		times_acceptable = 0;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <finishCheck+0x48>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
		osDelay(300);
 8001cc6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001cca:	f006 f897 	bl	8007dfc <osDelay>
		return 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <finishCheck+0x44>
	}
	return 1;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200002b4 	.word	0x200002b4
 8001cdc:	200002b8 	.word	0x200002b8
 8001ce0:	200002b0 	.word	0x200002b0
 8001ce4:	200002b2 	.word	0x200002b2
 8001ce8:	200002c0 	.word	0x200002c0
 8001cec:	200002c8 	.word	0x200002c8
 8001cf0:	200002bc 	.word	0x200002bc
 8001cf4:	200002c4 	.word	0x200002c4

08001cf8 <readByte>:

// gyro
void readByte(uint8_t addr, uint8_t *data) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 8001d04:	4a0e      	ldr	r2, [pc, #56]	@ (8001d40 <readByte+0x48>)
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 1, 10);
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <readByte+0x4c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	b299      	uxth	r1, r3
 8001d12:	230a      	movs	r3, #10
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2301      	movs	r3, #1
 8001d18:	4a09      	ldr	r2, [pc, #36]	@ (8001d40 <readByte+0x48>)
 8001d1a:	480b      	ldr	r0, [pc, #44]	@ (8001d48 <readByte+0x50>)
 8001d1c:	f002 f86a 	bl	8003df4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress << 1, data, 2, 20);
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <readByte+0x4c>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	b299      	uxth	r1, r3
 8001d28:	2314      	movs	r3, #20
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <readByte+0x50>)
 8001d32:	f002 f95d 	bl	8003ff0 <HAL_I2C_Master_Receive>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200002e0 	.word	0x200002e0
 8001d44:	20000002 	.word	0x20000002
 8001d48:	20000084 	.word	0x20000084

08001d4c <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	4603      	mov	r3, r0
 8001d54:	460a      	mov	r2, r1
 8001d56:	71fb      	strb	r3, [r7, #7]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <writeByte+0x3c>)
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 8001d62:	4a09      	ldr	r2, [pc, #36]	@ (8001d88 <writeByte+0x3c>)
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <writeByte+0x40>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	b299      	uxth	r1, r3
 8001d70:	2314      	movs	r3, #20
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2302      	movs	r3, #2
 8001d76:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <writeByte+0x3c>)
 8001d78:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <writeByte+0x44>)
 8001d7a:	f002 f83b 	bl	8003df4 <HAL_I2C_Master_Transmit>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200002e0 	.word	0x200002e0
 8001d8c:	20000002 	.word	0x20000002
 8001d90:	20000084 	.word	0x20000084

08001d94 <gyroInit>:

void gyroInit() {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2006      	movs	r0, #6
 8001d9c:	f7ff ffd6 	bl	8001d4c <writeByte>
	osDelay(10);
 8001da0:	200a      	movs	r0, #10
 8001da2:	f006 f82b 	bl	8007dfc <osDelay>
	writeByte(0x03, 0x80);
 8001da6:	2180      	movs	r1, #128	@ 0x80
 8001da8:	2003      	movs	r0, #3
 8001daa:	f7ff ffcf 	bl	8001d4c <writeByte>
	osDelay(10);
 8001dae:	200a      	movs	r0, #10
 8001db0:	f006 f824 	bl	8007dfc <osDelay>
	writeByte(0x07, 0x07);
 8001db4:	2107      	movs	r1, #7
 8001db6:	2007      	movs	r0, #7
 8001db8:	f7ff ffc8 	bl	8001d4c <writeByte>
	osDelay(10);
 8001dbc:	200a      	movs	r0, #10
 8001dbe:	f006 f81d 	bl	8007dfc <osDelay>
	writeByte(0x06, 0x01);
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	2006      	movs	r0, #6
 8001dc6:	f7ff ffc1 	bl	8001d4c <writeByte>
	osDelay(10);
 8001dca:	200a      	movs	r0, #10
 8001dcc:	f006 f816 	bl	8007dfc <osDelay>
	writeByte(0x7F, 0x20);
 8001dd0:	2120      	movs	r1, #32
 8001dd2:	207f      	movs	r0, #127	@ 0x7f
 8001dd4:	f7ff ffba 	bl	8001d4c <writeByte>
	osDelay(10);
 8001dd8:	200a      	movs	r0, #10
 8001dda:	f006 f80f 	bl	8007dfc <osDelay>
	writeByte(0x01, 0x2F);
 8001dde:	212f      	movs	r1, #47	@ 0x2f
 8001de0:	2001      	movs	r0, #1
 8001de2:	f7ff ffb3 	bl	8001d4c <writeByte>
	osDelay(10);
 8001de6:	200a      	movs	r0, #10
 8001de8:	f006 f808 	bl	8007dfc <osDelay>
	writeByte(0x0, 0x00);
 8001dec:	2100      	movs	r1, #0
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff ffac 	bl	8001d4c <writeByte>
	osDelay(10);
 8001df4:	200a      	movs	r0, #10
 8001df6:	f006 f801 	bl	8007dfc <osDelay>
	writeByte(0x7F, 0x00);
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	207f      	movs	r0, #127	@ 0x7f
 8001dfe:	f7ff ffa5 	bl	8001d4c <writeByte>
	osDelay(10);
 8001e02:	200a      	movs	r0, #10
 8001e04:	f005 fffa 	bl	8007dfc <osDelay>
	writeByte(0x07, 0x00);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2007      	movs	r0, #7
 8001e0c:	f7ff ff9e 	bl	8001d4c <writeByte>
	osDelay(10);
 8001e10:	200a      	movs	r0, #10
 8001e12:	f005 fff3 	bl	8007dfc <osDelay>
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001e24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e28:	4804      	ldr	r0, [pc, #16]	@ (8001e3c <StartDefaultTask+0x20>)
 8001e2a:	f001 fe84 	bl	8003b36 <HAL_GPIO_TogglePin>
		osDelay(2000);
 8001e2e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e32:	f005 ffe3 	bl	8007dfc <osDelay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001e36:	bf00      	nop
 8001e38:	e7f4      	b.n	8001e24 <StartDefaultTask+0x8>
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000

08001e40 <StartMotorTask>:
 * @brief Function implementing the motorTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotorTask */
	pwmVal_R = 0;
 8001e48:	4bad      	ldr	r3, [pc, #692]	@ (8002100 <StartMotorTask+0x2c0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	801a      	strh	r2, [r3, #0]
	pwmVal_L = 0;
 8001e4e:	4bad      	ldr	r3, [pc, #692]	@ (8002104 <StartMotorTask+0x2c4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	801a      	strh	r2, [r3, #0]
	int straightCorrection = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001e58:	2100      	movs	r1, #0
 8001e5a:	48ab      	ldr	r0, [pc, #684]	@ (8002108 <StartMotorTask+0x2c8>)
 8001e5c:	f003 fb44 	bl	80054e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001e60:	2104      	movs	r1, #4
 8001e62:	48a9      	ldr	r0, [pc, #676]	@ (8002108 <StartMotorTask+0x2c8>)
 8001e64:	f003 fb40 	bl	80054e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001e68:	210c      	movs	r1, #12
 8001e6a:	48a8      	ldr	r0, [pc, #672]	@ (800210c <StartMotorTask+0x2cc>)
 8001e6c:	f003 fb3c 	bl	80054e8 <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = SERVOCENTER; //Centre
 8001e70:	4ba6      	ldr	r3, [pc, #664]	@ (800210c <StartMotorTask+0x2cc>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2292      	movs	r2, #146	@ 0x92
 8001e76:	641a      	str	r2, [r3, #64]	@ 0x40

	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2110      	movs	r1, #16
 8001e7c:	48a4      	ldr	r0, [pc, #656]	@ (8002110 <StartMotorTask+0x2d0>)
 8001e7e:	f001 fe41 	bl	8003b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2120      	movs	r1, #32
 8001e86:	48a2      	ldr	r0, [pc, #648]	@ (8002110 <StartMotorTask+0x2d0>)
 8001e88:	f001 fe3c 	bl	8003b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2108      	movs	r1, #8
 8001e90:	489f      	ldr	r0, [pc, #636]	@ (8002110 <StartMotorTask+0x2d0>)
 8001e92:	f001 fe37 	bl	8003b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2104      	movs	r1, #4
 8001e9a:	489d      	ldr	r0, [pc, #628]	@ (8002110 <StartMotorTask+0x2d0>)
 8001e9c:	f001 fe32 	bl	8003b04 <HAL_GPIO_WritePin>
	osDelay(1000);
 8001ea0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ea4:	f005 ffaa 	bl	8007dfc <osDelay>

	/* Infinite loop */
	for (;;) {
		htim1.Instance->CCR4 = pwmVal_servo;
 8001ea8:	4b9a      	ldr	r3, [pc, #616]	@ (8002114 <StartMotorTask+0x2d4>)
 8001eaa:	881a      	ldrh	r2, [r3, #0]
 8001eac:	4b97      	ldr	r3, [pc, #604]	@ (800210c <StartMotorTask+0x2cc>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	641a      	str	r2, [r3, #64]	@ 0x40
		double error_angle = target_angle - total_angle;
 8001eb2:	4b99      	ldr	r3, [pc, #612]	@ (8002118 <StartMotorTask+0x2d8>)
 8001eb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eb8:	4b98      	ldr	r3, [pc, #608]	@ (800211c <StartMotorTask+0x2dc>)
 8001eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebe:	f7fe f9db 	bl	8000278 <__aeabi_dsub>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if (pwmVal_servo < 127) { //TURN LEFT
 8001eca:	4b92      	ldr	r3, [pc, #584]	@ (8002114 <StartMotorTask+0x2d4>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ed0:	d84c      	bhi.n	8001f6c <StartMotorTask+0x12c>
			pwmVal_R = PID_Angle(error_angle, 1) * 1.072;  //right is master
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	ed97 0b02 	vldr	d0, [r7, #8]
 8001ed8:	f7ff fe52 	bl	8001b80 <PID_Angle>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fb18 	bl	8000514 <__aeabi_i2d>
 8001ee4:	a382      	add	r3, pc, #520	@ (adr r3, 80020f0 <StartMotorTask+0x2b0>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe fb7d 	bl	80005e8 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7fe fe39 	bl	8000b6c <__aeabi_d2uiz>
 8001efa:	4603      	mov	r3, r0
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	4b80      	ldr	r3, [pc, #512]	@ (8002100 <StartMotorTask+0x2c0>)
 8001f00:	801a      	strh	r2, [r3, #0]
			pwmVal_L = pwmVal_R * (0.59); //left is slave
 8001f02:	4b7f      	ldr	r3, [pc, #508]	@ (8002100 <StartMotorTask+0x2c0>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fb04 	bl	8000514 <__aeabi_i2d>
 8001f0c:	a37a      	add	r3, pc, #488	@ (adr r3, 80020f8 <StartMotorTask+0x2b8>)
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	f7fe fb69 	bl	80005e8 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7fe fe25 	bl	8000b6c <__aeabi_d2uiz>
 8001f22:	4603      	mov	r3, r0
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	4b77      	ldr	r3, [pc, #476]	@ (8002104 <StartMotorTask+0x2c4>)
 8001f28:	801a      	strh	r2, [r3, #0]

			if (error_angle > 0) {
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f36:	f7fe fde7 	bl	8000b08 <__aeabi_dcmpgt>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <StartMotorTask+0x116>
				//go forward
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- forward
 8001f40:	2201      	movs	r2, #1
 8001f42:	2108      	movs	r1, #8
 8001f44:	4872      	ldr	r0, [pc, #456]	@ (8002110 <StartMotorTask+0x2d0>)
 8001f46:	f001 fddd 	bl	8003b04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2104      	movs	r1, #4
 8001f4e:	4870      	ldr	r0, [pc, #448]	@ (8002110 <StartMotorTask+0x2d0>)
 8001f50:	f001 fdd8 	bl	8003b04 <HAL_GPIO_WritePin>
 8001f54:	e151      	b.n	80021fa <StartMotorTask+0x3ba>
			} else {
				//go backward
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001f56:	2200      	movs	r2, #0
 8001f58:	2108      	movs	r1, #8
 8001f5a:	486d      	ldr	r0, [pc, #436]	@ (8002110 <StartMotorTask+0x2d0>)
 8001f5c:	f001 fdd2 	bl	8003b04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	2104      	movs	r1, #4
 8001f64:	486a      	ldr	r0, [pc, #424]	@ (8002110 <StartMotorTask+0x2d0>)
 8001f66:	f001 fdcd 	bl	8003b04 <HAL_GPIO_WritePin>
 8001f6a:	e146      	b.n	80021fa <StartMotorTask+0x3ba>
			}
		}

		else if (pwmVal_servo > 189) { //TURN RIGHT
 8001f6c:	4b69      	ldr	r3, [pc, #420]	@ (8002114 <StartMotorTask+0x2d4>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	2bbd      	cmp	r3, #189	@ 0xbd
 8001f72:	d93d      	bls.n	8001ff0 <StartMotorTask+0x1b0>
			pwmVal_L = PID_Angle(error_angle, 0);
 8001f74:	2000      	movs	r0, #0
 8001f76:	ed97 0b02 	vldr	d0, [r7, #8]
 8001f7a:	f7ff fe01 	bl	8001b80 <PID_Angle>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	4b60      	ldr	r3, [pc, #384]	@ (8002104 <StartMotorTask+0x2c4>)
 8001f84:	801a      	strh	r2, [r3, #0]
			pwmVal_R = pwmVal_L * (0.59); //right is slave
 8001f86:	4b5f      	ldr	r3, [pc, #380]	@ (8002104 <StartMotorTask+0x2c4>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fac2 	bl	8000514 <__aeabi_i2d>
 8001f90:	a359      	add	r3, pc, #356	@ (adr r3, 80020f8 <StartMotorTask+0x2b8>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	f7fe fb27 	bl	80005e8 <__aeabi_dmul>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f7fe fde3 	bl	8000b6c <__aeabi_d2uiz>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	4b55      	ldr	r3, [pc, #340]	@ (8002100 <StartMotorTask+0x2c0>)
 8001fac:	801a      	strh	r2, [r3, #0]

			if (error_angle < 0) {
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fba:	f7fe fd87 	bl	8000acc <__aeabi_dcmplt>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00a      	beq.n	8001fda <StartMotorTask+0x19a>
				//go forward
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	4851      	ldr	r0, [pc, #324]	@ (8002110 <StartMotorTask+0x2d0>)
 8001fca:	f001 fd9b 	bl	8003b04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2120      	movs	r1, #32
 8001fd2:	484f      	ldr	r0, [pc, #316]	@ (8002110 <StartMotorTask+0x2d0>)
 8001fd4:	f001 fd96 	bl	8003b04 <HAL_GPIO_WritePin>
 8001fd8:	e10f      	b.n	80021fa <StartMotorTask+0x3ba>
			} else {
				//go backward
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2110      	movs	r1, #16
 8001fde:	484c      	ldr	r0, [pc, #304]	@ (8002110 <StartMotorTask+0x2d0>)
 8001fe0:	f001 fd90 	bl	8003b04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	2120      	movs	r1, #32
 8001fe8:	4849      	ldr	r0, [pc, #292]	@ (8002110 <StartMotorTask+0x2d0>)
 8001fea:	f001 fd8b 	bl	8003b04 <HAL_GPIO_WritePin>
 8001fee:	e104      	b.n	80021fa <StartMotorTask+0x3ba>
			}
		}

		else {

			pwmVal_R = PID_Control(leftTarget - leftEncoderVal, 0) * 1.072;
 8001ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8002120 <StartMotorTask+0x2e0>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8002124 <StartMotorTask+0x2e4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fd43 	bl	8001a88 <PID_Control>
 8002002:	4603      	mov	r3, r0
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fa85 	bl	8000514 <__aeabi_i2d>
 800200a:	a339      	add	r3, pc, #228	@ (adr r3, 80020f0 <StartMotorTask+0x2b0>)
 800200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002010:	f7fe faea 	bl	80005e8 <__aeabi_dmul>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fda6 	bl	8000b6c <__aeabi_d2uiz>
 8002020:	4603      	mov	r3, r0
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b36      	ldr	r3, [pc, #216]	@ (8002100 <StartMotorTask+0x2c0>)
 8002026:	801a      	strh	r2, [r3, #0]
			if (abs(leftTarget - leftEncoderVal)
 8002028:	4b3d      	ldr	r3, [pc, #244]	@ (8002120 <StartMotorTask+0x2e0>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b3d      	ldr	r3, [pc, #244]	@ (8002124 <StartMotorTask+0x2e4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002036:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
					> abs(rightTarget - rightEncoderVal)) {
 800203a:	4b3b      	ldr	r3, [pc, #236]	@ (8002128 <StartMotorTask+0x2e8>)
 800203c:	6819      	ldr	r1, [r3, #0]
 800203e:	4b3b      	ldr	r3, [pc, #236]	@ (800212c <StartMotorTask+0x2ec>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1acb      	subs	r3, r1, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	bfb8      	it	lt
 8002048:	425b      	neglt	r3, r3
			if (abs(leftTarget - leftEncoderVal)
 800204a:	429a      	cmp	r2, r3
 800204c:	dd03      	ble.n	8002056 <StartMotorTask+0x216>
				straightCorrection++;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3301      	adds	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	e002      	b.n	800205c <StartMotorTask+0x21c>
			} else {
				straightCorrection--;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3b01      	subs	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
			}
			if (abs(leftTarget - leftEncoderVal) < 100) {
 800205c:	4b30      	ldr	r3, [pc, #192]	@ (8002120 <StartMotorTask+0x2e0>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b30      	ldr	r3, [pc, #192]	@ (8002124 <StartMotorTask+0x2e4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 800206a:	db08      	blt.n	800207e <StartMotorTask+0x23e>
 800206c:	4b2c      	ldr	r3, [pc, #176]	@ (8002120 <StartMotorTask+0x2e0>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b2c      	ldr	r3, [pc, #176]	@ (8002124 <StartMotorTask+0x2e4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b63      	cmp	r3, #99	@ 0x63
 8002078:	dc01      	bgt.n	800207e <StartMotorTask+0x23e>
				straightCorrection = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
			}
			pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)
 800207e:	4b2a      	ldr	r3, [pc, #168]	@ (8002128 <StartMotorTask+0x2e8>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b2a      	ldr	r3, [pc, #168]	@ (800212c <StartMotorTask+0x2ec>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2101      	movs	r1, #1
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fcfc 	bl	8001a88 <PID_Control>
 8002090:	4603      	mov	r3, r0
					+ straightCorrection;
 8002092:	b29a      	uxth	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	b29b      	uxth	r3, r3
 8002098:	4413      	add	r3, r2
 800209a:	b29a      	uxth	r2, r3
			pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)
 800209c:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <StartMotorTask+0x2c4>)
 800209e:	801a      	strh	r2, [r3, #0]

			if ((leftTarget - leftEncoderVal) < 0) {
 80020a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002120 <StartMotorTask+0x2e0>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002124 <StartMotorTask+0x2e4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da64      	bge.n	8002178 <StartMotorTask+0x338>
				if (error_angle > 2) { // left +. right -.
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020ba:	f7fe fd25 	bl	8000b08 <__aeabi_dcmpgt>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <StartMotorTask+0x28c>
					pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 80020c4:	4b13      	ldr	r3, [pc, #76]	@ (8002114 <StartMotorTask+0x2d4>)
 80020c6:	22a5      	movs	r2, #165	@ 0xa5
 80020c8:	801a      	strh	r2, [r3, #0]
 80020ca:	e096      	b.n	80021fa <StartMotorTask+0x3ba>
				} else if (error_angle < -2) {
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80020d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020d8:	f7fe fcf8 	bl	8000acc <__aeabi_dcmplt>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d026      	beq.n	8002130 <StartMotorTask+0x2f0>
					pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 80020e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <StartMotorTask+0x2d4>)
 80020e4:	227f      	movs	r2, #127	@ 0x7f
 80020e6:	801a      	strh	r2, [r3, #0]
 80020e8:	e087      	b.n	80021fa <StartMotorTask+0x3ba>
 80020ea:	bf00      	nop
 80020ec:	f3af 8000 	nop.w
 80020f0:	78d4fdf4 	.word	0x78d4fdf4
 80020f4:	3ff126e9 	.word	0x3ff126e9
 80020f8:	ae147ae1 	.word	0xae147ae1
 80020fc:	3fe2e147 	.word	0x3fe2e147
 8002100:	200002b0 	.word	0x200002b0
 8002104:	200002b2 	.word	0x200002b2
 8002108:	200001f8 	.word	0x200001f8
 800210c:	200000d8 	.word	0x200000d8
 8002110:	40020000 	.word	0x40020000
 8002114:	20000000 	.word	0x20000000
 8002118:	200002d0 	.word	0x200002d0
 800211c:	200002d8 	.word	0x200002d8
 8002120:	200002c8 	.word	0x200002c8
 8002124:	200002c0 	.word	0x200002c0
 8002128:	200002c4 	.word	0x200002c4
 800212c:	200002bc 	.word	0x200002bc
				} else {
					pwmVal_servo = ((19 * error_angle) / 5 + SERVOCENTER);
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	4b46      	ldr	r3, [pc, #280]	@ (8002250 <StartMotorTask+0x410>)
 8002136:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800213a:	f7fe fa55 	bl	80005e8 <__aeabi_dmul>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	4b42      	ldr	r3, [pc, #264]	@ (8002254 <StartMotorTask+0x414>)
 800214c:	f7fe fb76 	bl	800083c <__aeabi_ddiv>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	4b3e      	ldr	r3, [pc, #248]	@ (8002258 <StartMotorTask+0x418>)
 800215e:	f7fe f88d 	bl	800027c <__adddf3>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	f7fe fcff 	bl	8000b6c <__aeabi_d2uiz>
 800216e:	4603      	mov	r3, r0
 8002170:	b29a      	uxth	r2, r3
 8002172:	4b3a      	ldr	r3, [pc, #232]	@ (800225c <StartMotorTask+0x41c>)
 8002174:	801a      	strh	r2, [r3, #0]
 8002176:	e040      	b.n	80021fa <StartMotorTask+0x3ba>
				}

			} else {
				if (error_angle > 2) { // left +. right -.
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002180:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002184:	f7fe fcc0 	bl	8000b08 <__aeabi_dcmpgt>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <StartMotorTask+0x356>
					pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 800218e:	4b33      	ldr	r3, [pc, #204]	@ (800225c <StartMotorTask+0x41c>)
 8002190:	227f      	movs	r2, #127	@ 0x7f
 8002192:	801a      	strh	r2, [r3, #0]
 8002194:	e031      	b.n	80021fa <StartMotorTask+0x3ba>
				} else if (error_angle < -2) {
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800219e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021a2:	f7fe fc93 	bl	8000acc <__aeabi_dcmplt>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <StartMotorTask+0x374>
					pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 80021ac:	4b2b      	ldr	r3, [pc, #172]	@ (800225c <StartMotorTask+0x41c>)
 80021ae:	22a5      	movs	r2, #165	@ 0xa5
 80021b0:	801a      	strh	r2, [r3, #0]
 80021b2:	e022      	b.n	80021fa <StartMotorTask+0x3ba>
				} else {
					pwmVal_servo = ((-19 * error_angle) / 5 + SERVOCENTER);
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	4b29      	ldr	r3, [pc, #164]	@ (8002260 <StartMotorTask+0x420>)
 80021ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021be:	f7fe fa13 	bl	80005e8 <__aeabi_dmul>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	4b21      	ldr	r3, [pc, #132]	@ (8002254 <StartMotorTask+0x414>)
 80021d0:	f7fe fb34 	bl	800083c <__aeabi_ddiv>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002258 <StartMotorTask+0x418>)
 80021e2:	f7fe f84b 	bl	800027c <__adddf3>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	f7fe fcbd 	bl	8000b6c <__aeabi_d2uiz>
 80021f2:	4603      	mov	r3, r0
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b19      	ldr	r3, [pc, #100]	@ (800225c <StartMotorTask+0x41c>)
 80021f8:	801a      	strh	r2, [r3, #0]
			}

			//line correction equation is pwmVal = (19*error)/5 + SERVOCENTER
		}

		if (e_brake) {
 80021fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002264 <StartMotorTask+0x424>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00e      	beq.n	8002220 <StartMotorTask+0x3e0>
			pwmVal_L = pwmVal_R = 0;
 8002202:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <StartMotorTask+0x428>)
 8002204:	2200      	movs	r2, #0
 8002206:	801a      	strh	r2, [r3, #0]
 8002208:	4b17      	ldr	r3, [pc, #92]	@ (8002268 <StartMotorTask+0x428>)
 800220a:	881a      	ldrh	r2, [r3, #0]
 800220c:	4b17      	ldr	r3, [pc, #92]	@ (800226c <StartMotorTask+0x42c>)
 800220e:	801a      	strh	r2, [r3, #0]
			leftTarget = leftEncoderVal;
 8002210:	4b17      	ldr	r3, [pc, #92]	@ (8002270 <StartMotorTask+0x430>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a17      	ldr	r2, [pc, #92]	@ (8002274 <StartMotorTask+0x434>)
 8002216:	6013      	str	r3, [r2, #0]
			rightTarget = rightEncoderVal;
 8002218:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <StartMotorTask+0x438>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a17      	ldr	r2, [pc, #92]	@ (800227c <StartMotorTask+0x43c>)
 800221e:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L);
 8002220:	4b12      	ldr	r3, [pc, #72]	@ (800226c <StartMotorTask+0x42c>)
 8002222:	881a      	ldrh	r2, [r3, #0]
 8002224:	4b16      	ldr	r3, [pc, #88]	@ (8002280 <StartMotorTask+0x440>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_R);
 800222a:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <StartMotorTask+0x428>)
 800222c:	881a      	ldrh	r2, [r3, #0]
 800222e:	4b14      	ldr	r3, [pc, #80]	@ (8002280 <StartMotorTask+0x440>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	639a      	str	r2, [r3, #56]	@ 0x38
		osDelay(1);
 8002234:	2001      	movs	r0, #1
 8002236:	f005 fde1 	bl	8007dfc <osDelay>

		if (times_acceptable > 1000) {
 800223a:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <StartMotorTask+0x444>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002242:	f77f ae31 	ble.w	8001ea8 <StartMotorTask+0x68>
			times_acceptable = 1001;
 8002246:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <StartMotorTask+0x444>)
 8002248:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800224c:	601a      	str	r2, [r3, #0]
	for (;;) {
 800224e:	e62b      	b.n	8001ea8 <StartMotorTask+0x68>
 8002250:	40330000 	.word	0x40330000
 8002254:	40140000 	.word	0x40140000
 8002258:	40624000 	.word	0x40624000
 800225c:	20000000 	.word	0x20000000
 8002260:	c0330000 	.word	0xc0330000
 8002264:	200002b8 	.word	0x200002b8
 8002268:	200002b0 	.word	0x200002b0
 800226c:	200002b2 	.word	0x200002b2
 8002270:	200002c0 	.word	0x200002c0
 8002274:	200002c8 	.word	0x200002c8
 8002278:	200002bc 	.word	0x200002bc
 800227c:	200002c4 	.word	0x200002c4
 8002280:	200001f8 	.word	0x200001f8
 8002284:	200002b4 	.word	0x200002b4

08002288 <StartOLEDTask>:
 * @brief Function implementing the OLEDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument) {
 8002288:	b5b0      	push	{r4, r5, r7, lr}
 800228a:	b096      	sub	sp, #88	@ 0x58
 800228c:	af04      	add	r7, sp, #16
 800228e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartOLEDTask */
	uint8_t usVal[20] = { 0 };
 8002290:	2300      	movs	r3, #0
 8002292:	633b      	str	r3, [r7, #48]	@ 0x30
 8002294:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
	uint8_t gyroVal[20] = { 0 };
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	f107 0320 	add.w	r3, r7, #32
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
	uint8_t command[20] = { 0 };
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
	for (;;) {
		int decimals = abs((int) ((total_angle - (int) (total_angle)) * 1000));
 80022c6:	4b31      	ldr	r3, [pc, #196]	@ (800238c <StartOLEDTask+0x104>)
 80022c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80022cc:	4b2f      	ldr	r3, [pc, #188]	@ (800238c <StartOLEDTask+0x104>)
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f7fe fc21 	bl	8000b1c <__aeabi_d2iz>
 80022da:	4603      	mov	r3, r0
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f919 	bl	8000514 <__aeabi_i2d>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4620      	mov	r0, r4
 80022e8:	4629      	mov	r1, r5
 80022ea:	f7fd ffc5 	bl	8000278 <__aeabi_dsub>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	4b25      	ldr	r3, [pc, #148]	@ (8002390 <StartOLEDTask+0x108>)
 80022fc:	f7fe f974 	bl	80005e8 <__aeabi_dmul>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	f7fe fc08 	bl	8000b1c <__aeabi_d2iz>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	bfb8      	it	lt
 8002312:	425b      	neglt	r3, r3
 8002314:	647b      	str	r3, [r7, #68]	@ 0x44
		sprintf(gyroVal, "Gyro: %d.%d \0", (int) total_angle, decimals);
 8002316:	4b1d      	ldr	r3, [pc, #116]	@ (800238c <StartOLEDTask+0x104>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	f7fe fbfc 	bl	8000b1c <__aeabi_d2iz>
 8002324:	4602      	mov	r2, r0
 8002326:	f107 001c 	add.w	r0, r7, #28
 800232a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800232c:	4919      	ldr	r1, [pc, #100]	@ (8002394 <StartOLEDTask+0x10c>)
 800232e:	f008 fa3b 	bl	800a7a8 <siprintf>
		OLED_ShowString(0, 10, gyroVal);
 8002332:	f107 031c 	add.w	r3, r7, #28
 8002336:	461a      	mov	r2, r3
 8002338:	210a      	movs	r1, #10
 800233a:	2000      	movs	r0, #0
 800233c:	f000 ff4e 	bl	80031dc <OLED_ShowString>

		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002340:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <StartOLEDTask+0x110>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461c      	mov	r4, r3
 8002346:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <StartOLEDTask+0x110>)
 8002348:	785b      	ldrb	r3, [r3, #1]
 800234a:	461d      	mov	r5, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 800234c:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <StartOLEDTask+0x110>)
 800234e:	789b      	ldrb	r3, [r3, #2]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002350:	461a      	mov	r2, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002352:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <StartOLEDTask+0x110>)
 8002354:	78db      	ldrb	r3, [r3, #3]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002356:	4619      	mov	r1, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002358:	4b0f      	ldr	r3, [pc, #60]	@ (8002398 <StartOLEDTask+0x110>)
 800235a:	791b      	ldrb	r3, [r3, #4]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 800235c:	f107 0008 	add.w	r0, r7, #8
 8002360:	9302      	str	r3, [sp, #8]
 8002362:	9101      	str	r1, [sp, #4]
 8002364:	9200      	str	r2, [sp, #0]
 8002366:	462b      	mov	r3, r5
 8002368:	4622      	mov	r2, r4
 800236a:	490c      	ldr	r1, [pc, #48]	@ (800239c <StartOLEDTask+0x114>)
 800236c:	f008 fa1c 	bl	800a7a8 <siprintf>
		OLED_ShowString(0, 20, command);
 8002370:	f107 0308 	add.w	r3, r7, #8
 8002374:	461a      	mov	r2, r3
 8002376:	2114      	movs	r1, #20
 8002378:	2000      	movs	r0, #0
 800237a:	f000 ff2f 	bl	80031dc <OLED_ShowString>

		OLED_Refresh_Gram();
 800237e:	f000 fdb9 	bl	8002ef4 <OLED_Refresh_Gram>
		osDelay(100);
 8002382:	2064      	movs	r0, #100	@ 0x64
 8002384:	f005 fd3a 	bl	8007dfc <osDelay>
	for (;;) {
 8002388:	bf00      	nop
 800238a:	e79c      	b.n	80022c6 <StartOLEDTask+0x3e>
 800238c:	200002d8 	.word	0x200002d8
 8002390:	408f4000 	.word	0x408f4000
 8002394:	0800b21c 	.word	0x0800b21c
 8002398:	200002a0 	.word	0x200002a0
 800239c:	0800b22c 	.word	0x0800b22c

080023a0 <StartGyroTask>:
 * @brief Function implementing the gyroTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument) {
 80023a0:	b5b0      	push	{r4, r5, r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGyroTask */
	gyroInit();
 80023a8:	f7ff fcf4 	bl	8001d94 <gyroInit>
	uint8_t val[2] = { 0, 0 };
 80023ac:	2300      	movs	r3, #0
 80023ae:	813b      	strh	r3, [r7, #8]

	int16_t angular_speed = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	817b      	strh	r3, [r7, #10]

	uint32_t tick = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
	double offset = 0;
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double trash = 0;
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int i = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
	osDelay(50);
 80023d4:	2032      	movs	r0, #50	@ 0x32
 80023d6:	f005 fd11 	bl	8007dfc <osDelay>
	while (i < 1000) {
 80023da:	e048      	b.n	800246e <StartGyroTask+0xce>
		osDelay(1);
 80023dc:	2001      	movs	r0, #1
 80023de:	f005 fd0d 	bl	8007dfc <osDelay>
		readByte(0x37, val);
 80023e2:	f107 0308 	add.w	r3, r7, #8
 80023e6:	4619      	mov	r1, r3
 80023e8:	2037      	movs	r0, #55	@ 0x37
 80023ea:	f7ff fc85 	bl	8001cf8 <readByte>
		angular_speed = (val[0] << 8) | val[1];
 80023ee:	7a3b      	ldrb	r3, [r7, #8]
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	b21a      	sxth	r2, r3
 80023f4:	7a7b      	ldrb	r3, [r7, #9]
 80023f6:	b21b      	sxth	r3, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	817b      	strh	r3, [r7, #10]
		trash += (double) ((double) angular_speed)
 80023fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe f887 	bl	8000514 <__aeabi_i2d>
 8002406:	4604      	mov	r4, r0
 8002408:	460d      	mov	r5, r1
				* ((HAL_GetTick() - tick) / 16400.0);
 800240a:	f001 f80b 	bl	8003424 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f86d 	bl	80004f4 <__aeabi_ui2d>
 800241a:	a346      	add	r3, pc, #280	@ (adr r3, 8002534 <StartGyroTask+0x194>)
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	f7fe fa0c 	bl	800083c <__aeabi_ddiv>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4620      	mov	r0, r4
 800242a:	4629      	mov	r1, r5
 800242c:	f7fe f8dc 	bl	80005e8 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
		trash += (double) ((double) angular_speed)
 8002434:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002438:	f7fd ff20 	bl	800027c <__adddf3>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	e9c7 2304 	strd	r2, r3, [r7, #16]
		offset += angular_speed;
 8002444:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe f863 	bl	8000514 <__aeabi_i2d>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002456:	f7fd ff11 	bl	800027c <__adddf3>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		tick = HAL_GetTick();
 8002462:	f000 ffdf 	bl	8003424 <HAL_GetTick>
 8002466:	6278      	str	r0, [r7, #36]	@ 0x24
		i++;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3301      	adds	r3, #1
 800246c:	60fb      	str	r3, [r7, #12]
	while (i < 1000) {
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002474:	dbb2      	blt.n	80023dc <StartGyroTask+0x3c>
	}
	offset = offset / i;
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f7fe f84c 	bl	8000514 <__aeabi_i2d>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002484:	f7fe f9da 	bl	800083c <__aeabi_ddiv>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	tick = HAL_GetTick();
 8002490:	f000 ffc8 	bl	8003424 <HAL_GetTick>
 8002494:	6278      	str	r0, [r7, #36]	@ 0x24
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8002496:	2064      	movs	r0, #100	@ 0x64
 8002498:	f005 fcb0 	bl	8007dfc <osDelay>
		readByte(0x37, val);
 800249c:	f107 0308 	add.w	r3, r7, #8
 80024a0:	4619      	mov	r1, r3
 80024a2:	2037      	movs	r0, #55	@ 0x37
 80024a4:	f7ff fc28 	bl	8001cf8 <readByte>
		angular_speed = (val[0] << 8) | val[1];
 80024a8:	7a3b      	ldrb	r3, [r7, #8]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	b21a      	sxth	r2, r3
 80024ae:	7a7b      	ldrb	r3, [r7, #9]
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	4313      	orrs	r3, r2
 80024b4:	817b      	strh	r3, [r7, #10]
		total_angle += (double) ((double) angular_speed - offset)
 80024b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe f82a 	bl	8000514 <__aeabi_i2d>
 80024c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c4:	f7fd fed8 	bl	8000278 <__aeabi_dsub>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4614      	mov	r4, r2
 80024ce:	461d      	mov	r5, r3
				* ((HAL_GetTick() - tick) / 16400.0);
 80024d0:	f000 ffa8 	bl	8003424 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe f80a 	bl	80004f4 <__aeabi_ui2d>
 80024e0:	a314      	add	r3, pc, #80	@ (adr r3, 8002534 <StartGyroTask+0x194>)
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	f7fe f9a9 	bl	800083c <__aeabi_ddiv>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4620      	mov	r0, r4
 80024f0:	4629      	mov	r1, r5
 80024f2:	f7fe f879 	bl	80005e8 <__aeabi_dmul>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4610      	mov	r0, r2
 80024fc:	4619      	mov	r1, r3
		total_angle += (double) ((double) angular_speed - offset)
 80024fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <StartGyroTask+0x190>)
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	f7fd feba 	bl	800027c <__adddf3>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4908      	ldr	r1, [pc, #32]	@ (8002530 <StartGyroTask+0x190>)
 800250e:	e9c1 2300 	strd	r2, r3, [r1]
		i -= angular_speed;
 8002512:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	60fb      	str	r3, [r7, #12]
		tick = HAL_GetTick();
 800251c:	f000 ff82 	bl	8003424 <HAL_GetTick>
 8002520:	6278      	str	r0, [r7, #36]	@ 0x24
		i++;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	3301      	adds	r3, #1
 8002526:	60fb      	str	r3, [r7, #12]
		osDelay(100);
 8002528:	bf00      	nop
 800252a:	e7b4      	b.n	8002496 <StartGyroTask+0xf6>
 800252c:	f3af 8000 	nop.w
 8002530:	200002d8 	.word	0x200002d8
 8002534:	00000000 	.word	0x00000000
 8002538:	40d00400 	.word	0x40d00400

0800253c <StartCommunicateTask>:
 * @brief Function implementing the communicateTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommunicateTask */
void StartCommunicateTask(void *argument) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCommunicateTask */
	char ack = 'A';
 8002544:	2341      	movs	r3, #65	@ 0x41
 8002546:	73fb      	strb	r3, [r7, #15]

	aRxBuffer[0] = 'E';
 8002548:	4b81      	ldr	r3, [pc, #516]	@ (8002750 <StartCommunicateTask+0x214>)
 800254a:	2245      	movs	r2, #69	@ 0x45
 800254c:	701a      	strb	r2, [r3, #0]
	aRxBuffer[1] = 'M';
 800254e:	4b80      	ldr	r3, [pc, #512]	@ (8002750 <StartCommunicateTask+0x214>)
 8002550:	224d      	movs	r2, #77	@ 0x4d
 8002552:	705a      	strb	r2, [r3, #1]
	aRxBuffer[2] = 'P';
 8002554:	4b7e      	ldr	r3, [pc, #504]	@ (8002750 <StartCommunicateTask+0x214>)
 8002556:	2250      	movs	r2, #80	@ 0x50
 8002558:	709a      	strb	r2, [r3, #2]
	aRxBuffer[3] = 'T';
 800255a:	4b7d      	ldr	r3, [pc, #500]	@ (8002750 <StartCommunicateTask+0x214>)
 800255c:	2254      	movs	r2, #84	@ 0x54
 800255e:	70da      	strb	r2, [r3, #3]
	aRxBuffer[4] = 'Y';
 8002560:	4b7b      	ldr	r3, [pc, #492]	@ (8002750 <StartCommunicateTask+0x214>)
 8002562:	2259      	movs	r2, #89	@ 0x59
 8002564:	711a      	strb	r2, [r3, #4]

	/* Infinite loop */
	for (;;) {
		if (receivedInstruction == 1)
 8002566:	4b7b      	ldr	r3, [pc, #492]	@ (8002754 <StartCommunicateTask+0x218>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b01      	cmp	r3, #1
 800256c:	f040 80d7 	bne.w	800271e <StartCommunicateTask+0x1e2>
		{
			magnitude = 0;
 8002570:	4b79      	ldr	r3, [pc, #484]	@ (8002758 <StartCommunicateTask+0x21c>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
					if ((aRxBuffer[0] == 'G' && aRxBuffer[1] == 'Y' && aRxBuffer[2] == 'R'
 8002576:	4b76      	ldr	r3, [pc, #472]	@ (8002750 <StartCommunicateTask+0x214>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b47      	cmp	r3, #71	@ 0x47
 800257c:	d10f      	bne.n	800259e <StartCommunicateTask+0x62>
 800257e:	4b74      	ldr	r3, [pc, #464]	@ (8002750 <StartCommunicateTask+0x214>)
 8002580:	785b      	ldrb	r3, [r3, #1]
 8002582:	2b59      	cmp	r3, #89	@ 0x59
 8002584:	d10b      	bne.n	800259e <StartCommunicateTask+0x62>
 8002586:	4b72      	ldr	r3, [pc, #456]	@ (8002750 <StartCommunicateTask+0x214>)
 8002588:	789b      	ldrb	r3, [r3, #2]
 800258a:	2b52      	cmp	r3, #82	@ 0x52
 800258c:	d107      	bne.n	800259e <StartCommunicateTask+0x62>
							&& aRxBuffer[3] == 'O' && aRxBuffer[4] == 'R')
 800258e:	4b70      	ldr	r3, [pc, #448]	@ (8002750 <StartCommunicateTask+0x214>)
 8002590:	78db      	ldrb	r3, [r3, #3]
 8002592:	2b4f      	cmp	r3, #79	@ 0x4f
 8002594:	d103      	bne.n	800259e <StartCommunicateTask+0x62>
 8002596:	4b6e      	ldr	r3, [pc, #440]	@ (8002750 <StartCommunicateTask+0x214>)
 8002598:	791b      	ldrb	r3, [r3, #4]
 800259a:	2b52      	cmp	r3, #82	@ 0x52
 800259c:	d015      	beq.n	80025ca <StartCommunicateTask+0x8e>
							|| (aRxBuffer[0] == 'S' || aRxBuffer[0] == 'R'
 800259e:	4b6c      	ldr	r3, [pc, #432]	@ (8002750 <StartCommunicateTask+0x214>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b53      	cmp	r3, #83	@ 0x53
 80025a4:	d008      	beq.n	80025b8 <StartCommunicateTask+0x7c>
 80025a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002750 <StartCommunicateTask+0x214>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b52      	cmp	r3, #82	@ 0x52
 80025ac:	d004      	beq.n	80025b8 <StartCommunicateTask+0x7c>
									|| aRxBuffer[0] == 'L')
 80025ae:	4b68      	ldr	r3, [pc, #416]	@ (8002750 <StartCommunicateTask+0x214>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b4c      	cmp	r3, #76	@ 0x4c
 80025b4:	f040 80b3 	bne.w	800271e <StartCommunicateTask+0x1e2>
									&& (aRxBuffer[1] == 'F' || aRxBuffer[1] == 'B')
 80025b8:	4b65      	ldr	r3, [pc, #404]	@ (8002750 <StartCommunicateTask+0x214>)
 80025ba:	785b      	ldrb	r3, [r3, #1]
									&& (0 <= aRxBuffer[2] - '0' <= 9)
									&& (0 <= aRxBuffer[3] - '0' <= 9)
									&& (0 <= aRxBuffer[4] - '0' <= 9)) {
 80025bc:	2b46      	cmp	r3, #70	@ 0x46
 80025be:	d004      	beq.n	80025ca <StartCommunicateTask+0x8e>
									&& (aRxBuffer[1] == 'F' || aRxBuffer[1] == 'B')
 80025c0:	4b63      	ldr	r3, [pc, #396]	@ (8002750 <StartCommunicateTask+0x214>)
 80025c2:	785b      	ldrb	r3, [r3, #1]
 80025c4:	2b42      	cmp	r3, #66	@ 0x42
 80025c6:	f040 80aa 	bne.w	800271e <StartCommunicateTask+0x1e2>

						magnitude = ((int) (aRxBuffer[2]) - 48) * 100
 80025ca:	4b61      	ldr	r3, [pc, #388]	@ (8002750 <StartCommunicateTask+0x214>)
 80025cc:	789b      	ldrb	r3, [r3, #2]
 80025ce:	3b30      	subs	r3, #48	@ 0x30
 80025d0:	2264      	movs	r2, #100	@ 0x64
 80025d2:	fb02 f103 	mul.w	r1, r2, r3
								+ ((int) (aRxBuffer[3]) - 48) * 10
 80025d6:	4b5e      	ldr	r3, [pc, #376]	@ (8002750 <StartCommunicateTask+0x214>)
 80025d8:	78db      	ldrb	r3, [r3, #3]
 80025da:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	18ca      	adds	r2, r1, r3
								+ ((int) (aRxBuffer[4]) - 48);
 80025e8:	4b59      	ldr	r3, [pc, #356]	@ (8002750 <StartCommunicateTask+0x214>)
 80025ea:	791b      	ldrb	r3, [r3, #4]
 80025ec:	3b30      	subs	r3, #48	@ 0x30
 80025ee:	4413      	add	r3, r2
						magnitude = ((int) (aRxBuffer[2]) - 48) * 100
 80025f0:	4a59      	ldr	r2, [pc, #356]	@ (8002758 <StartCommunicateTask+0x21c>)
 80025f2:	6013      	str	r3, [r2, #0]

						if (aRxBuffer[1] == 'B') {
 80025f4:	4b56      	ldr	r3, [pc, #344]	@ (8002750 <StartCommunicateTask+0x214>)
 80025f6:	785b      	ldrb	r3, [r3, #1]
 80025f8:	2b42      	cmp	r3, #66	@ 0x42
 80025fa:	d104      	bne.n	8002606 <StartCommunicateTask+0xca>
							magnitude *= -1;
 80025fc:	4b56      	ldr	r3, [pc, #344]	@ (8002758 <StartCommunicateTask+0x21c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	425b      	negs	r3, r3
 8002602:	4a55      	ldr	r2, [pc, #340]	@ (8002758 <StartCommunicateTask+0x21c>)
 8002604:	6013      	str	r3, [r2, #0]
						}

						osDelay(10);
 8002606:	200a      	movs	r0, #10
 8002608:	f005 fbf8 	bl	8007dfc <osDelay>
						switch (aRxBuffer[0]) {
 800260c:	4b50      	ldr	r3, [pc, #320]	@ (8002750 <StartCommunicateTask+0x214>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	3b47      	subs	r3, #71	@ 0x47
 8002612:	2b0c      	cmp	r3, #12
 8002614:	f200 8083 	bhi.w	800271e <StartCommunicateTask+0x1e2>
 8002618:	a201      	add	r2, pc, #4	@ (adr r2, 8002620 <StartCommunicateTask+0xe4>)
 800261a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261e:	bf00      	nop
 8002620:	0800271b 	.word	0x0800271b
 8002624:	0800271f 	.word	0x0800271f
 8002628:	0800271f 	.word	0x0800271f
 800262c:	0800271f 	.word	0x0800271f
 8002630:	0800271f 	.word	0x0800271f
 8002634:	080026d9 	.word	0x080026d9
 8002638:	0800271f 	.word	0x0800271f
 800263c:	0800271f 	.word	0x0800271f
 8002640:	0800271f 	.word	0x0800271f
 8002644:	0800271f 	.word	0x0800271f
 8002648:	0800271f 	.word	0x0800271f
 800264c:	08002697 	.word	0x08002697
 8002650:	08002655 	.word	0x08002655
						case 'S':
							moveCarStraight(magnitude);
 8002654:	4b40      	ldr	r3, [pc, #256]	@ (8002758 <StartCommunicateTask+0x21c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd ff5b 	bl	8000514 <__aeabi_i2d>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	ec43 2b10 	vmov	d0, r2, r3
 8002666:	f7ff f93f 	bl	80018e8 <moveCarStraight>
							flagDone = 1;
 800266a:	4b3c      	ldr	r3, [pc, #240]	@ (800275c <StartCommunicateTask+0x220>)
 800266c:	2201      	movs	r2, #1
 800266e:	601a      	str	r2, [r3, #0]
							aRxBuffer[0] = 'D';
 8002670:	4b37      	ldr	r3, [pc, #220]	@ (8002750 <StartCommunicateTask+0x214>)
 8002672:	2244      	movs	r2, #68	@ 0x44
 8002674:	701a      	strb	r2, [r3, #0]
							aRxBuffer[1] = 'O';
 8002676:	4b36      	ldr	r3, [pc, #216]	@ (8002750 <StartCommunicateTask+0x214>)
 8002678:	224f      	movs	r2, #79	@ 0x4f
 800267a:	705a      	strb	r2, [r3, #1]
							aRxBuffer[2] = 'N';
 800267c:	4b34      	ldr	r3, [pc, #208]	@ (8002750 <StartCommunicateTask+0x214>)
 800267e:	224e      	movs	r2, #78	@ 0x4e
 8002680:	709a      	strb	r2, [r3, #2]
							aRxBuffer[3] = 'E';
 8002682:	4b33      	ldr	r3, [pc, #204]	@ (8002750 <StartCommunicateTask+0x214>)
 8002684:	2245      	movs	r2, #69	@ 0x45
 8002686:	70da      	strb	r2, [r3, #3]
							aRxBuffer[4] = '!';
 8002688:	4b31      	ldr	r3, [pc, #196]	@ (8002750 <StartCommunicateTask+0x214>)
 800268a:	2221      	movs	r2, #33	@ 0x21
 800268c:	711a      	strb	r2, [r3, #4]
							osDelay(10);
 800268e:	200a      	movs	r0, #10
 8002690:	f005 fbb4 	bl	8007dfc <osDelay>
							break;
 8002694:	e043      	b.n	800271e <StartCommunicateTask+0x1e2>
						case 'R':
							moveCarRight(magnitude);
 8002696:	4b30      	ldr	r3, [pc, #192]	@ (8002758 <StartCommunicateTask+0x21c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd ff3a 	bl	8000514 <__aeabi_i2d>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	ec43 2b10 	vmov	d0, r2, r3
 80026a8:	f7ff f98a 	bl	80019c0 <moveCarRight>
							flagDone = 1;
 80026ac:	4b2b      	ldr	r3, [pc, #172]	@ (800275c <StartCommunicateTask+0x220>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
							aRxBuffer[0] = 'D';
 80026b2:	4b27      	ldr	r3, [pc, #156]	@ (8002750 <StartCommunicateTask+0x214>)
 80026b4:	2244      	movs	r2, #68	@ 0x44
 80026b6:	701a      	strb	r2, [r3, #0]
							aRxBuffer[1] = 'O';
 80026b8:	4b25      	ldr	r3, [pc, #148]	@ (8002750 <StartCommunicateTask+0x214>)
 80026ba:	224f      	movs	r2, #79	@ 0x4f
 80026bc:	705a      	strb	r2, [r3, #1]
							aRxBuffer[2] = 'N';
 80026be:	4b24      	ldr	r3, [pc, #144]	@ (8002750 <StartCommunicateTask+0x214>)
 80026c0:	224e      	movs	r2, #78	@ 0x4e
 80026c2:	709a      	strb	r2, [r3, #2]
							aRxBuffer[3] = 'E';
 80026c4:	4b22      	ldr	r3, [pc, #136]	@ (8002750 <StartCommunicateTask+0x214>)
 80026c6:	2245      	movs	r2, #69	@ 0x45
 80026c8:	70da      	strb	r2, [r3, #3]
							aRxBuffer[4] = '!';
 80026ca:	4b21      	ldr	r3, [pc, #132]	@ (8002750 <StartCommunicateTask+0x214>)
 80026cc:	2221      	movs	r2, #33	@ 0x21
 80026ce:	711a      	strb	r2, [r3, #4]
							osDelay(10);
 80026d0:	200a      	movs	r0, #10
 80026d2:	f005 fb93 	bl	8007dfc <osDelay>
							break;
 80026d6:	e022      	b.n	800271e <StartCommunicateTask+0x1e2>
						case 'L':
							moveCarLeft(magnitude);
 80026d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002758 <StartCommunicateTask+0x21c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fd ff19 	bl	8000514 <__aeabi_i2d>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	ec43 2b10 	vmov	d0, r2, r3
 80026ea:	f7ff f99b 	bl	8001a24 <moveCarLeft>
							flagDone = 1;
 80026ee:	4b1b      	ldr	r3, [pc, #108]	@ (800275c <StartCommunicateTask+0x220>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
							aRxBuffer[0] = 'D';
 80026f4:	4b16      	ldr	r3, [pc, #88]	@ (8002750 <StartCommunicateTask+0x214>)
 80026f6:	2244      	movs	r2, #68	@ 0x44
 80026f8:	701a      	strb	r2, [r3, #0]
							aRxBuffer[1] = 'O';
 80026fa:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <StartCommunicateTask+0x214>)
 80026fc:	224f      	movs	r2, #79	@ 0x4f
 80026fe:	705a      	strb	r2, [r3, #1]
							aRxBuffer[2] = 'N';
 8002700:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <StartCommunicateTask+0x214>)
 8002702:	224e      	movs	r2, #78	@ 0x4e
 8002704:	709a      	strb	r2, [r3, #2]
							aRxBuffer[3] = 'E';
 8002706:	4b12      	ldr	r3, [pc, #72]	@ (8002750 <StartCommunicateTask+0x214>)
 8002708:	2245      	movs	r2, #69	@ 0x45
 800270a:	70da      	strb	r2, [r3, #3]
							aRxBuffer[4] = '!';
 800270c:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <StartCommunicateTask+0x214>)
 800270e:	2221      	movs	r2, #33	@ 0x21
 8002710:	711a      	strb	r2, [r3, #4]
							osDelay(10);
 8002712:	200a      	movs	r0, #10
 8002714:	f005 fb72 	bl	8007dfc <osDelay>
							break;
 8002718:	e001      	b.n	800271e <StartCommunicateTask+0x1e2>
						case 'G':
							NVIC_SystemReset();
 800271a:	f7fe fbbf 	bl	8000e9c <__NVIC_SystemReset>
							break;
						}
					}
		}

		if (flagDone == 1) {
 800271e:	4b0f      	ldr	r3, [pc, #60]	@ (800275c <StartCommunicateTask+0x220>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d110      	bne.n	8002748 <StartCommunicateTask+0x20c>
			receivedInstruction = 0;
 8002726:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <StartCommunicateTask+0x218>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
			osDelay(10);
 800272c:	200a      	movs	r0, #10
 800272e:	f005 fb65 	bl	8007dfc <osDelay>
			HAL_UART_Transmit(&huart3, (uint8_t*) &ack, 1, 0xFFFF);
 8002732:	f107 010f 	add.w	r1, r7, #15
 8002736:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800273a:	2201      	movs	r2, #1
 800273c:	4808      	ldr	r0, [pc, #32]	@ (8002760 <StartCommunicateTask+0x224>)
 800273e:	f004 fa22 	bl	8006b86 <HAL_UART_Transmit>
			flagDone = 0;
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <StartCommunicateTask+0x220>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
		}
		osDelay(10);
 8002748:	200a      	movs	r0, #10
 800274a:	f005 fb57 	bl	8007dfc <osDelay>
		if (receivedInstruction == 1)
 800274e:	e70a      	b.n	8002566 <StartCommunicateTask+0x2a>
 8002750:	200002a0 	.word	0x200002a0
 8002754:	20000304 	.word	0x20000304
 8002758:	200002ac 	.word	0x200002ac
 800275c:	200002a8 	.word	0x200002a8
 8002760:	20000240 	.word	0x20000240

08002764 <StartEncoderRTask>:
 * @brief Function implementing the encoderRTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderRTask */
void StartEncoderRTask(void *argument) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartEncoderRTask */
	/* Infinite loop */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800276c:	213c      	movs	r1, #60	@ 0x3c
 800276e:	481d      	ldr	r0, [pc, #116]	@ (80027e4 <StartEncoderRTask+0x80>)
 8002770:	f003 f877 	bl	8005862 <HAL_TIM_Encoder_Start>
	int cnt1;
	int dirR = 1;
 8002774:	2301      	movs	r3, #1
 8002776:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8002778:	f000 fe54 	bl	8003424 <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 800277e:	f000 fe51 	bl	8003424 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b0a      	cmp	r3, #10
 800278a:	d9f8      	bls.n	800277e <StartEncoderRTask+0x1a>
			cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 800278c:	4b15      	ldr	r3, [pc, #84]	@ (80027e4 <StartEncoderRTask+0x80>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	60bb      	str	r3, [r7, #8]
			if (cnt1 > 32000) {
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800279a:	dd06      	ble.n	80027aa <StartEncoderRTask+0x46>
				dirR = 1;
 800279c:	2301      	movs	r3, #1
 800279e:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt1);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	e004      	b.n	80027b4 <StartEncoderRTask+0x50>
			} else {
				dirR = -1;
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	617b      	str	r3, [r7, #20]
				diff = cnt1;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	613b      	str	r3, [r7, #16]
			}
			if (dirR == 1) {
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d106      	bne.n	80027c8 <StartEncoderRTask+0x64>
				rightEncoderVal -= diff;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <StartEncoderRTask+0x84>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	4a09      	ldr	r2, [pc, #36]	@ (80027e8 <StartEncoderRTask+0x84>)
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e005      	b.n	80027d4 <StartEncoderRTask+0x70>
			} else {
				rightEncoderVal += diff;
 80027c8:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <StartEncoderRTask+0x84>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4413      	add	r3, r2
 80027d0:	4a05      	ldr	r2, [pc, #20]	@ (80027e8 <StartEncoderRTask+0x84>)
 80027d2:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim3, 0);
 80027d4:	4b03      	ldr	r3, [pc, #12]	@ (80027e4 <StartEncoderRTask+0x80>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2200      	movs	r2, #0
 80027da:	625a      	str	r2, [r3, #36]	@ 0x24

			tick = HAL_GetTick();
 80027dc:	f000 fe22 	bl	8003424 <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - tick > 10L) {
 80027e2:	e7cc      	b.n	800277e <StartEncoderRTask+0x1a>
 80027e4:	20000168 	.word	0x20000168
 80027e8:	200002bc 	.word	0x200002bc

080027ec <StartEncoderLTask>:
 * @brief Function implementing the encoderLTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderLTask */
void StartEncoderLTask(void *argument) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartEncoderLTask */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80027f4:	213c      	movs	r1, #60	@ 0x3c
 80027f6:	481d      	ldr	r0, [pc, #116]	@ (800286c <StartEncoderLTask+0x80>)
 80027f8:	f003 f833 	bl	8005862 <HAL_TIM_Encoder_Start>
	int cnt2;
	int dirL = 1;
 80027fc:	2301      	movs	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8002800:	f000 fe10 	bl	8003424 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 8002806:	f000 fe0d 	bl	8003424 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b0a      	cmp	r3, #10
 8002812:	d9f8      	bls.n	8002806 <StartEncoderLTask+0x1a>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8002814:	4b15      	ldr	r3, [pc, #84]	@ (800286c <StartEncoderLTask+0x80>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	60bb      	str	r3, [r7, #8]

			if (cnt2 > 32000) {
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002822:	dd06      	ble.n	8002832 <StartEncoderLTask+0x46>
				dirL = 1;
 8002824:	2301      	movs	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt2);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	e004      	b.n	800283c <StartEncoderLTask+0x50>
			} else {
				dirL = -1;
 8002832:	f04f 33ff 	mov.w	r3, #4294967295
 8002836:	617b      	str	r3, [r7, #20]
				diff = cnt2;
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	613b      	str	r3, [r7, #16]
			}
			if (dirL == 1) {
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d106      	bne.n	8002850 <StartEncoderLTask+0x64>
				leftEncoderVal += diff;
 8002842:	4b0b      	ldr	r3, [pc, #44]	@ (8002870 <StartEncoderLTask+0x84>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4413      	add	r3, r2
 800284a:	4a09      	ldr	r2, [pc, #36]	@ (8002870 <StartEncoderLTask+0x84>)
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e005      	b.n	800285c <StartEncoderLTask+0x70>
			} else {
				leftEncoderVal -= diff;
 8002850:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <StartEncoderLTask+0x84>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	4a05      	ldr	r2, [pc, #20]	@ (8002870 <StartEncoderLTask+0x84>)
 800285a:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 800285c:	4b03      	ldr	r3, [pc, #12]	@ (800286c <StartEncoderLTask+0x80>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2200      	movs	r2, #0
 8002862:	625a      	str	r2, [r3, #36]	@ 0x24

			tick = HAL_GetTick();
 8002864:	f000 fdde 	bl	8003424 <HAL_GetTick>
 8002868:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - tick > 10L) {
 800286a:	e7cc      	b.n	8002806 <StartEncoderLTask+0x1a>
 800286c:	20000120 	.word	0x20000120
 8002870:	200002c0 	.word	0x200002c0

08002874 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002878:	b672      	cpsid	i
}
 800287a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <Error_Handler+0x8>

08002880 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	4b16      	ldr	r3, [pc, #88]	@ (80028e4 <HAL_MspInit+0x64>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	4a15      	ldr	r2, [pc, #84]	@ (80028e4 <HAL_MspInit+0x64>)
 8002890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002894:	6453      	str	r3, [r2, #68]	@ 0x44
 8002896:	4b13      	ldr	r3, [pc, #76]	@ (80028e4 <HAL_MspInit+0x64>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	4b0f      	ldr	r3, [pc, #60]	@ (80028e4 <HAL_MspInit+0x64>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	4a0e      	ldr	r2, [pc, #56]	@ (80028e4 <HAL_MspInit+0x64>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b2:	4b0c      	ldr	r3, [pc, #48]	@ (80028e4 <HAL_MspInit+0x64>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	210f      	movs	r1, #15
 80028c2:	f06f 0001 	mvn.w	r0, #1
 80028c6:	f000 feb8 	bl	800363a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2105      	movs	r1, #5
 80028ce:	2005      	movs	r0, #5
 80028d0:	f000 feb3 	bl	800363a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80028d4:	2005      	movs	r0, #5
 80028d6:	f000 fecc 	bl	8003672 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800

080028e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	@ 0x28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	f107 0314 	add.w	r3, r7, #20
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a19      	ldr	r2, [pc, #100]	@ (800296c <HAL_I2C_MspInit+0x84>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d12c      	bne.n	8002964 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	4b18      	ldr	r3, [pc, #96]	@ (8002970 <HAL_I2C_MspInit+0x88>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	4a17      	ldr	r2, [pc, #92]	@ (8002970 <HAL_I2C_MspInit+0x88>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	6313      	str	r3, [r2, #48]	@ 0x30
 800291a:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <HAL_I2C_MspInit+0x88>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002926:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800292a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800292c:	2312      	movs	r3, #18
 800292e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002934:	2303      	movs	r3, #3
 8002936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002938:	2304      	movs	r3, #4
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4619      	mov	r1, r3
 8002942:	480c      	ldr	r0, [pc, #48]	@ (8002974 <HAL_I2C_MspInit+0x8c>)
 8002944:	f000 ff42 	bl	80037cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <HAL_I2C_MspInit+0x88>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	4a07      	ldr	r2, [pc, #28]	@ (8002970 <HAL_I2C_MspInit+0x88>)
 8002952:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002956:	6413      	str	r3, [r2, #64]	@ 0x40
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_I2C_MspInit+0x88>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002964:	bf00      	nop
 8002966:	3728      	adds	r7, #40	@ 0x28
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40005400 	.word	0x40005400
 8002970:	40023800 	.word	0x40023800
 8002974:	40020400 	.word	0x40020400

08002978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	@ 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a2f      	ldr	r2, [pc, #188]	@ (8002a54 <HAL_TIM_Base_MspInit+0xdc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d11e      	bne.n	80029d8 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a58 <HAL_TIM_Base_MspInit+0xe0>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002a58 <HAL_TIM_Base_MspInit+0xe0>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002a58 <HAL_TIM_Base_MspInit+0xe0>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2100      	movs	r1, #0
 80029ba:	2018      	movs	r0, #24
 80029bc:	f000 fe3d 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80029c0:	2018      	movs	r0, #24
 80029c2:	f000 fe56 	bl	8003672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	2019      	movs	r0, #25
 80029cc:	f000 fe35 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029d0:	2019      	movs	r0, #25
 80029d2:	f000 fe4e 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80029d6:	e038      	b.n	8002a4a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM8)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1f      	ldr	r2, [pc, #124]	@ (8002a5c <HAL_TIM_Base_MspInit+0xe4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d133      	bne.n	8002a4a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a58 <HAL_TIM_Base_MspInit+0xe0>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002a58 <HAL_TIM_Base_MspInit+0xe0>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029f2:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <HAL_TIM_Base_MspInit+0xe0>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	4b15      	ldr	r3, [pc, #84]	@ (8002a58 <HAL_TIM_Base_MspInit+0xe0>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	4a14      	ldr	r2, [pc, #80]	@ (8002a58 <HAL_TIM_Base_MspInit+0xe0>)
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0e:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <HAL_TIM_Base_MspInit+0xe0>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002a1a:	23c0      	movs	r3, #192	@ 0xc0
 8002a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	480a      	ldr	r0, [pc, #40]	@ (8002a60 <HAL_TIM_Base_MspInit+0xe8>)
 8002a36:	f000 fec9 	bl	80037cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	202d      	movs	r0, #45	@ 0x2d
 8002a40:	f000 fdfb 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002a44:	202d      	movs	r0, #45	@ 0x2d
 8002a46:	f000 fe14 	bl	8003672 <HAL_NVIC_EnableIRQ>
}
 8002a4a:	bf00      	nop
 8002a4c:	3728      	adds	r7, #40	@ 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40010400 	.word	0x40010400
 8002a60:	40020800 	.word	0x40020800

08002a64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08c      	sub	sp, #48	@ 0x30
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a84:	d14b      	bne.n	8002b1e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	4a3e      	ldr	r2, [pc, #248]	@ (8002b88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a96:	4b3c      	ldr	r3, [pc, #240]	@ (8002b88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	4b38      	ldr	r3, [pc, #224]	@ (8002b88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	4a37      	ldr	r2, [pc, #220]	@ (8002b88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab2:	4b35      	ldr	r3, [pc, #212]	@ (8002b88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	4b31      	ldr	r3, [pc, #196]	@ (8002b88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	4a30      	ldr	r2, [pc, #192]	@ (8002b88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ace:	4b2e      	ldr	r3, [pc, #184]	@ (8002b88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_CH1_Pin;
 8002ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002aec:	2301      	movs	r3, #1
 8002aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(EncoderA_CH1_GPIO_Port, &GPIO_InitStruct);
 8002af0:	f107 031c 	add.w	r3, r7, #28
 8002af4:	4619      	mov	r1, r3
 8002af6:	4825      	ldr	r0, [pc, #148]	@ (8002b8c <HAL_TIM_Encoder_MspInit+0x128>)
 8002af8:	f000 fe68 	bl	80037cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA_CH2_Pin;
 8002afc:	2308      	movs	r3, #8
 8002afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(EncoderA_CH2_GPIO_Port, &GPIO_InitStruct);
 8002b10:	f107 031c 	add.w	r3, r7, #28
 8002b14:	4619      	mov	r1, r3
 8002b16:	481e      	ldr	r0, [pc, #120]	@ (8002b90 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002b18:	f000 fe58 	bl	80037cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b1c:	e030      	b.n	8002b80 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1c      	ldr	r2, [pc, #112]	@ (8002b94 <HAL_TIM_Encoder_MspInit+0x130>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d12b      	bne.n	8002b80 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	4b16      	ldr	r3, [pc, #88]	@ (8002b88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	4a15      	ldr	r2, [pc, #84]	@ (8002b88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b32:	f043 0302 	orr.w	r3, r3, #2
 8002b36:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b38:	4b13      	ldr	r3, [pc, #76]	@ (8002b88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b44:	2300      	movs	r3, #0
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	4b0f      	ldr	r3, [pc, #60]	@ (8002b88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002b88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b54:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderB_CH1_Pin|EncoderB_CH2_Pin;
 8002b60:	23c0      	movs	r3, #192	@ 0xc0
 8002b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b64:	2302      	movs	r3, #2
 8002b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b70:	2302      	movs	r3, #2
 8002b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b74:	f107 031c 	add.w	r3, r7, #28
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4804      	ldr	r0, [pc, #16]	@ (8002b8c <HAL_TIM_Encoder_MspInit+0x128>)
 8002b7c:	f000 fe26 	bl	80037cc <HAL_GPIO_Init>
}
 8002b80:	bf00      	nop
 8002b82:	3730      	adds	r7, #48	@ 0x30
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40020000 	.word	0x40020000
 8002b90:	40020400 	.word	0x40020400
 8002b94:	40000400 	.word	0x40000400

08002b98 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	@ 0x28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c2c <HAL_TIM_IC_MspInit+0x94>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d134      	bne.n	8002c24 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002c30 <HAL_TIM_IC_MspInit+0x98>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c30 <HAL_TIM_IC_MspInit+0x98>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bca:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <HAL_TIM_IC_MspInit+0x98>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <HAL_TIM_IC_MspInit+0x98>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	4a14      	ldr	r2, [pc, #80]	@ (8002c30 <HAL_TIM_IC_MspInit+0x98>)
 8002be0:	f043 0308 	orr.w	r3, r3, #8
 8002be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be6:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <HAL_TIM_IC_MspInit+0x98>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8002bf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c00:	2300      	movs	r3, #0
 8002c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c04:	2302      	movs	r3, #2
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4809      	ldr	r0, [pc, #36]	@ (8002c34 <HAL_TIM_IC_MspInit+0x9c>)
 8002c10:	f000 fddc 	bl	80037cc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002c14:	2200      	movs	r2, #0
 8002c16:	2105      	movs	r1, #5
 8002c18:	201e      	movs	r0, #30
 8002c1a:	f000 fd0e 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c1e:	201e      	movs	r0, #30
 8002c20:	f000 fd27 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c24:	bf00      	nop
 8002c26:	3728      	adds	r7, #40	@ 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40000800 	.word	0x40000800
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40020c00 	.word	0x40020c00

08002c38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 030c 	add.w	r3, r7, #12
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a12      	ldr	r2, [pc, #72]	@ (8002ca0 <HAL_TIM_MspPostInit+0x68>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d11e      	bne.n	8002c98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <HAL_TIM_MspPostInit+0x6c>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	4a10      	ldr	r2, [pc, #64]	@ (8002ca4 <HAL_TIM_MspPostInit+0x6c>)
 8002c64:	f043 0310 	orr.w	r3, r3, #16
 8002c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <HAL_TIM_MspPostInit+0x6c>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c76:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c8c:	f107 030c 	add.w	r3, r7, #12
 8002c90:	4619      	mov	r1, r3
 8002c92:	4805      	ldr	r0, [pc, #20]	@ (8002ca8 <HAL_TIM_MspPostInit+0x70>)
 8002c94:	f000 fd9a 	bl	80037cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c98:	bf00      	nop
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40010000 	.word	0x40010000
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40021000 	.word	0x40021000

08002cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	@ 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002d40 <HAL_UART_MspInit+0x94>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d134      	bne.n	8002d38 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d44 <HAL_UART_MspInit+0x98>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002d44 <HAL_UART_MspInit+0x98>)
 8002cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cde:	4b19      	ldr	r3, [pc, #100]	@ (8002d44 <HAL_UART_MspInit+0x98>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b15      	ldr	r3, [pc, #84]	@ (8002d44 <HAL_UART_MspInit+0x98>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	4a14      	ldr	r2, [pc, #80]	@ (8002d44 <HAL_UART_MspInit+0x98>)
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
 8002cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfa:	4b12      	ldr	r3, [pc, #72]	@ (8002d44 <HAL_UART_MspInit+0x98>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d06:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d14:	2303      	movs	r3, #3
 8002d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d18:	2307      	movs	r3, #7
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	4619      	mov	r1, r3
 8002d22:	4809      	ldr	r0, [pc, #36]	@ (8002d48 <HAL_UART_MspInit+0x9c>)
 8002d24:	f000 fd52 	bl	80037cc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2105      	movs	r1, #5
 8002d2c:	2027      	movs	r0, #39	@ 0x27
 8002d2e:	f000 fc84 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d32:	2027      	movs	r0, #39	@ 0x27
 8002d34:	f000 fc9d 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d38:	bf00      	nop
 8002d3a:	3728      	adds	r7, #40	@ 0x28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40004800 	.word	0x40004800
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020800 	.word	0x40020800

08002d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <NMI_Handler+0x4>

08002d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <HardFault_Handler+0x4>

08002d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <MemManage_Handler+0x4>

08002d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d68:	bf00      	nop
 8002d6a:	e7fd      	b.n	8002d68 <BusFault_Handler+0x4>

08002d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d70:	bf00      	nop
 8002d72:	e7fd      	b.n	8002d70 <UsageFault_Handler+0x4>

08002d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d86:	f000 fb39 	bl	80033fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002d8a:	f006 fc8d 	bl	80096a8 <xTaskGetSchedulerState>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d001      	beq.n	8002d98 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002d94:	f007 fa88 	bl	800a2a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002db0:	4802      	ldr	r0, [pc, #8]	@ (8002dbc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002db2:	f002 fde4 	bl	800597e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200000d8 	.word	0x200000d8

08002dc0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002dc4:	4802      	ldr	r0, [pc, #8]	@ (8002dd0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002dc6:	f002 fdda 	bl	800597e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200000d8 	.word	0x200000d8

08002dd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002dd8:	4802      	ldr	r0, [pc, #8]	@ (8002de4 <TIM4_IRQHandler+0x10>)
 8002dda:	f002 fdd0 	bl	800597e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	200001b0 	.word	0x200001b0

08002de8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002dec:	4802      	ldr	r0, [pc, #8]	@ (8002df8 <USART3_IRQHandler+0x10>)
 8002dee:	f003 ff8d 	bl	8006d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000240 	.word	0x20000240

08002dfc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002e00:	4802      	ldr	r0, [pc, #8]	@ (8002e0c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002e02:	f002 fdbc 	bl	800597e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200001f8 	.word	0x200001f8

08002e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e18:	4a14      	ldr	r2, [pc, #80]	@ (8002e6c <_sbrk+0x5c>)
 8002e1a:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <_sbrk+0x60>)
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e24:	4b13      	ldr	r3, [pc, #76]	@ (8002e74 <_sbrk+0x64>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e2c:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <_sbrk+0x64>)
 8002e2e:	4a12      	ldr	r2, [pc, #72]	@ (8002e78 <_sbrk+0x68>)
 8002e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e32:	4b10      	ldr	r3, [pc, #64]	@ (8002e74 <_sbrk+0x64>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d207      	bcs.n	8002e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e40:	f007 fd30 	bl	800a8a4 <__errno>
 8002e44:	4603      	mov	r3, r0
 8002e46:	220c      	movs	r2, #12
 8002e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4e:	e009      	b.n	8002e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e50:	4b08      	ldr	r3, [pc, #32]	@ (8002e74 <_sbrk+0x64>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e56:	4b07      	ldr	r3, [pc, #28]	@ (8002e74 <_sbrk+0x64>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	4a05      	ldr	r2, [pc, #20]	@ (8002e74 <_sbrk+0x64>)
 8002e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e62:	68fb      	ldr	r3, [r7, #12]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20020000 	.word	0x20020000
 8002e70:	00000400 	.word	0x00000400
 8002e74:	20000308 	.word	0x20000308
 8002e78:	20005240 	.word	0x20005240

08002e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e80:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <SystemInit+0x20>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e86:	4a05      	ldr	r2, [pc, #20]	@ (8002e9c <SystemInit+0x20>)
 8002e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ea0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ea4:	480d      	ldr	r0, [pc, #52]	@ (8002edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ea6:	490e      	ldr	r1, [pc, #56]	@ (8002ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ea8:	4a0e      	ldr	r2, [pc, #56]	@ (8002ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eac:	e002      	b.n	8002eb4 <LoopCopyDataInit>

08002eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eb2:	3304      	adds	r3, #4

08002eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb8:	d3f9      	bcc.n	8002eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eba:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ebc:	4c0b      	ldr	r4, [pc, #44]	@ (8002eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec0:	e001      	b.n	8002ec6 <LoopFillZerobss>

08002ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec4:	3204      	adds	r2, #4

08002ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec8:	d3fb      	bcc.n	8002ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002eca:	f7ff ffd7 	bl	8002e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ece:	f007 fcef 	bl	800a8b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ed2:	f7fd fff9 	bl	8000ec8 <main>
  bx  lr    
 8002ed6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002ee4:	0800be10 	.word	0x0800be10
  ldr r2, =_sbss
 8002ee8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002eec:	20005240 	.word	0x20005240

08002ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ef0:	e7fe      	b.n	8002ef0 <ADC_IRQHandler>
	...

08002ef4 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8002efa:	2300      	movs	r3, #0
 8002efc:	71fb      	strb	r3, [r7, #7]
 8002efe:	e026      	b.n	8002f4e <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	3b50      	subs	r3, #80	@ 0x50
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 f82b 	bl	8002f64 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8002f0e:	2100      	movs	r1, #0
 8002f10:	2000      	movs	r0, #0
 8002f12:	f000 f827 	bl	8002f64 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8002f16:	2100      	movs	r1, #0
 8002f18:	2010      	movs	r0, #16
 8002f1a:	f000 f823 	bl	8002f64 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8002f1e:	2300      	movs	r3, #0
 8002f20:	71bb      	strb	r3, [r7, #6]
 8002f22:	e00d      	b.n	8002f40 <OLED_Refresh_Gram+0x4c>
 8002f24:	79ba      	ldrb	r2, [r7, #6]
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	490d      	ldr	r1, [pc, #52]	@ (8002f60 <OLED_Refresh_Gram+0x6c>)
 8002f2a:	00d2      	lsls	r2, r2, #3
 8002f2c:	440a      	add	r2, r1
 8002f2e:	4413      	add	r3, r2
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2101      	movs	r1, #1
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f815 	bl	8002f64 <OLED_WR_Byte>
 8002f3a:	79bb      	ldrb	r3, [r7, #6]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	71bb      	strb	r3, [r7, #6]
 8002f40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	daed      	bge.n	8002f24 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	71fb      	strb	r3, [r7, #7]
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	2b07      	cmp	r3, #7
 8002f52:	d9d5      	bls.n	8002f00 <OLED_Refresh_Gram+0xc>
	}   
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	2000030c 	.word	0x2000030c

08002f64 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	460a      	mov	r2, r1
 8002f6e:	71fb      	strb	r3, [r7, #7]
 8002f70:	4613      	mov	r3, r2
 8002f72:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8002f74:	79bb      	ldrb	r3, [r7, #6]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d006      	beq.n	8002f88 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f80:	481c      	ldr	r0, [pc, #112]	@ (8002ff4 <OLED_WR_Byte+0x90>)
 8002f82:	f000 fdbf 	bl	8003b04 <HAL_GPIO_WritePin>
 8002f86:	e005      	b.n	8002f94 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f8e:	4819      	ldr	r0, [pc, #100]	@ (8002ff4 <OLED_WR_Byte+0x90>)
 8002f90:	f000 fdb8 	bl	8003b04 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	e01e      	b.n	8002fd8 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2120      	movs	r1, #32
 8002f9e:	4815      	ldr	r0, [pc, #84]	@ (8002ff4 <OLED_WR_Byte+0x90>)
 8002fa0:	f000 fdb0 	bl	8003b04 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	da05      	bge.n	8002fb8 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8002fac:	2201      	movs	r2, #1
 8002fae:	2140      	movs	r1, #64	@ 0x40
 8002fb0:	4810      	ldr	r0, [pc, #64]	@ (8002ff4 <OLED_WR_Byte+0x90>)
 8002fb2:	f000 fda7 	bl	8003b04 <HAL_GPIO_WritePin>
 8002fb6:	e004      	b.n	8002fc2 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2140      	movs	r1, #64	@ 0x40
 8002fbc:	480d      	ldr	r0, [pc, #52]	@ (8002ff4 <OLED_WR_Byte+0x90>)
 8002fbe:	f000 fda1 	bl	8003b04 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	2120      	movs	r1, #32
 8002fc6:	480b      	ldr	r0, [pc, #44]	@ (8002ff4 <OLED_WR_Byte+0x90>)
 8002fc8:	f000 fd9c 	bl	8003b04 <HAL_GPIO_WritePin>
		dat<<=1;   
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	2b07      	cmp	r3, #7
 8002fdc:	d9dd      	bls.n	8002f9a <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fe4:	4803      	ldr	r0, [pc, #12]	@ (8002ff4 <OLED_WR_Byte+0x90>)
 8002fe6:	f000 fd8d 	bl	8003b04 <HAL_GPIO_WritePin>
} 
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8002ffe:	2300      	movs	r3, #0
 8003000:	71fb      	strb	r3, [r7, #7]
 8003002:	e014      	b.n	800302e <OLED_Clear+0x36>
 8003004:	2300      	movs	r3, #0
 8003006:	71bb      	strb	r3, [r7, #6]
 8003008:	e00a      	b.n	8003020 <OLED_Clear+0x28>
 800300a:	79ba      	ldrb	r2, [r7, #6]
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	490c      	ldr	r1, [pc, #48]	@ (8003040 <OLED_Clear+0x48>)
 8003010:	00d2      	lsls	r2, r2, #3
 8003012:	440a      	add	r2, r1
 8003014:	4413      	add	r3, r2
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	79bb      	ldrb	r3, [r7, #6]
 800301c:	3301      	adds	r3, #1
 800301e:	71bb      	strb	r3, [r7, #6]
 8003020:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003024:	2b00      	cmp	r3, #0
 8003026:	daf0      	bge.n	800300a <OLED_Clear+0x12>
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	3301      	adds	r3, #1
 800302c:	71fb      	strb	r3, [r7, #7]
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	2b07      	cmp	r3, #7
 8003032:	d9e7      	bls.n	8003004 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8003034:	f7ff ff5e 	bl	8002ef4 <OLED_Refresh_Gram>
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	2000030c 	.word	0x2000030c

08003044 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
 800304e:	460b      	mov	r3, r1
 8003050:	71bb      	strb	r3, [r7, #6]
 8003052:	4613      	mov	r3, r2
 8003054:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8003056:	2300      	movs	r3, #0
 8003058:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305e:	2b00      	cmp	r3, #0
 8003060:	db41      	blt.n	80030e6 <OLED_DrawPoint+0xa2>
 8003062:	79bb      	ldrb	r3, [r7, #6]
 8003064:	2b3f      	cmp	r3, #63	@ 0x3f
 8003066:	d83e      	bhi.n	80030e6 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003068:	79bb      	ldrb	r3, [r7, #6]
 800306a:	08db      	lsrs	r3, r3, #3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f1c3 0307 	rsb	r3, r3, #7
 8003072:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8003074:	79bb      	ldrb	r3, [r7, #6]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800307c:	7b7b      	ldrb	r3, [r7, #13]
 800307e:	f1c3 0307 	rsb	r3, r3, #7
 8003082:	2201      	movs	r2, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800308a:	797b      	ldrb	r3, [r7, #5]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d012      	beq.n	80030b6 <OLED_DrawPoint+0x72>
 8003090:	79fa      	ldrb	r2, [r7, #7]
 8003092:	7bbb      	ldrb	r3, [r7, #14]
 8003094:	4917      	ldr	r1, [pc, #92]	@ (80030f4 <OLED_DrawPoint+0xb0>)
 8003096:	00d2      	lsls	r2, r2, #3
 8003098:	440a      	add	r2, r1
 800309a:	4413      	add	r3, r2
 800309c:	7818      	ldrb	r0, [r3, #0]
 800309e:	79fa      	ldrb	r2, [r7, #7]
 80030a0:	7bbb      	ldrb	r3, [r7, #14]
 80030a2:	7bf9      	ldrb	r1, [r7, #15]
 80030a4:	4301      	orrs	r1, r0
 80030a6:	b2c8      	uxtb	r0, r1
 80030a8:	4912      	ldr	r1, [pc, #72]	@ (80030f4 <OLED_DrawPoint+0xb0>)
 80030aa:	00d2      	lsls	r2, r2, #3
 80030ac:	440a      	add	r2, r1
 80030ae:	4413      	add	r3, r2
 80030b0:	4602      	mov	r2, r0
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	e018      	b.n	80030e8 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80030b6:	79fa      	ldrb	r2, [r7, #7]
 80030b8:	7bbb      	ldrb	r3, [r7, #14]
 80030ba:	490e      	ldr	r1, [pc, #56]	@ (80030f4 <OLED_DrawPoint+0xb0>)
 80030bc:	00d2      	lsls	r2, r2, #3
 80030be:	440a      	add	r2, r1
 80030c0:	4413      	add	r3, r2
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	b25a      	sxtb	r2, r3
 80030c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	b25b      	sxtb	r3, r3
 80030ce:	4013      	ands	r3, r2
 80030d0:	b259      	sxtb	r1, r3
 80030d2:	79fa      	ldrb	r2, [r7, #7]
 80030d4:	7bbb      	ldrb	r3, [r7, #14]
 80030d6:	b2c8      	uxtb	r0, r1
 80030d8:	4906      	ldr	r1, [pc, #24]	@ (80030f4 <OLED_DrawPoint+0xb0>)
 80030da:	00d2      	lsls	r2, r2, #3
 80030dc:	440a      	add	r2, r1
 80030de:	4413      	add	r3, r2
 80030e0:	4602      	mov	r2, r0
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	e000      	b.n	80030e8 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80030e6:	bf00      	nop
}
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	2000030c 	.word	0x2000030c

080030f8 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4604      	mov	r4, r0
 8003100:	4608      	mov	r0, r1
 8003102:	4611      	mov	r1, r2
 8003104:	461a      	mov	r2, r3
 8003106:	4623      	mov	r3, r4
 8003108:	71fb      	strb	r3, [r7, #7]
 800310a:	4603      	mov	r3, r0
 800310c:	71bb      	strb	r3, [r7, #6]
 800310e:	460b      	mov	r3, r1
 8003110:	717b      	strb	r3, [r7, #5]
 8003112:	4613      	mov	r3, r2
 8003114:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8003116:	79bb      	ldrb	r3, [r7, #6]
 8003118:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800311a:	797b      	ldrb	r3, [r7, #5]
 800311c:	3b20      	subs	r3, #32
 800311e:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8003120:	2300      	movs	r3, #0
 8003122:	73bb      	strb	r3, [r7, #14]
 8003124:	e04d      	b.n	80031c2 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8003126:	793b      	ldrb	r3, [r7, #4]
 8003128:	2b0c      	cmp	r3, #12
 800312a:	d10b      	bne.n	8003144 <OLED_ShowChar+0x4c>
 800312c:	797a      	ldrb	r2, [r7, #5]
 800312e:	7bb9      	ldrb	r1, [r7, #14]
 8003130:	4828      	ldr	r0, [pc, #160]	@ (80031d4 <OLED_ShowChar+0xdc>)
 8003132:	4613      	mov	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4403      	add	r3, r0
 800313c:	440b      	add	r3, r1
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	73fb      	strb	r3, [r7, #15]
 8003142:	e007      	b.n	8003154 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8003144:	797a      	ldrb	r2, [r7, #5]
 8003146:	7bbb      	ldrb	r3, [r7, #14]
 8003148:	4923      	ldr	r1, [pc, #140]	@ (80031d8 <OLED_ShowChar+0xe0>)
 800314a:	0112      	lsls	r2, r2, #4
 800314c:	440a      	add	r2, r1
 800314e:	4413      	add	r3, r2
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8003154:	2300      	movs	r3, #0
 8003156:	737b      	strb	r3, [r7, #13]
 8003158:	e02d      	b.n	80031b6 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800315a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315e:	2b00      	cmp	r3, #0
 8003160:	da07      	bge.n	8003172 <OLED_ShowChar+0x7a>
 8003162:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003166:	79b9      	ldrb	r1, [r7, #6]
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ff6a 	bl	8003044 <OLED_DrawPoint>
 8003170:	e00c      	b.n	800318c <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8003172:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003176:	2b00      	cmp	r3, #0
 8003178:	bf0c      	ite	eq
 800317a:	2301      	moveq	r3, #1
 800317c:	2300      	movne	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	79b9      	ldrb	r1, [r7, #6]
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff5c 	bl	8003044 <OLED_DrawPoint>
			temp<<=1;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
			y++;
 8003192:	79bb      	ldrb	r3, [r7, #6]
 8003194:	3301      	adds	r3, #1
 8003196:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003198:	79ba      	ldrb	r2, [r7, #6]
 800319a:	7b3b      	ldrb	r3, [r7, #12]
 800319c:	1ad2      	subs	r2, r2, r3
 800319e:	793b      	ldrb	r3, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d105      	bne.n	80031b0 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80031a4:	7b3b      	ldrb	r3, [r7, #12]
 80031a6:	71bb      	strb	r3, [r7, #6]
				x++;
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	3301      	adds	r3, #1
 80031ac:	71fb      	strb	r3, [r7, #7]
				break;
 80031ae:	e005      	b.n	80031bc <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80031b0:	7b7b      	ldrb	r3, [r7, #13]
 80031b2:	3301      	adds	r3, #1
 80031b4:	737b      	strb	r3, [r7, #13]
 80031b6:	7b7b      	ldrb	r3, [r7, #13]
 80031b8:	2b07      	cmp	r3, #7
 80031ba:	d9ce      	bls.n	800315a <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80031bc:	7bbb      	ldrb	r3, [r7, #14]
 80031be:	3301      	adds	r3, #1
 80031c0:	73bb      	strb	r3, [r7, #14]
 80031c2:	7bba      	ldrb	r2, [r7, #14]
 80031c4:	793b      	ldrb	r3, [r7, #4]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d3ad      	bcc.n	8003126 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd90      	pop	{r4, r7, pc}
 80031d4:	0800b368 	.word	0x0800b368
 80031d8:	0800b7dc 	.word	0x0800b7dc

080031dc <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	4603      	mov	r3, r0
 80031e4:	603a      	str	r2, [r7, #0]
 80031e6:	71fb      	strb	r3, [r7, #7]
 80031e8:	460b      	mov	r3, r1
 80031ea:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80031ec:	e01f      	b.n	800322e <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	2b7a      	cmp	r3, #122	@ 0x7a
 80031f2:	d904      	bls.n	80031fe <OLED_ShowString+0x22>
 80031f4:	2300      	movs	r3, #0
 80031f6:	71fb      	strb	r3, [r7, #7]
 80031f8:	79bb      	ldrb	r3, [r7, #6]
 80031fa:	3310      	adds	r3, #16
 80031fc:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80031fe:	79bb      	ldrb	r3, [r7, #6]
 8003200:	2b3a      	cmp	r3, #58	@ 0x3a
 8003202:	d905      	bls.n	8003210 <OLED_ShowString+0x34>
 8003204:	2300      	movs	r3, #0
 8003206:	71fb      	strb	r3, [r7, #7]
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	71bb      	strb	r3, [r7, #6]
 800320c:	f7ff fef4 	bl	8002ff8 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	79b9      	ldrb	r1, [r7, #6]
 8003216:	79f8      	ldrb	r0, [r7, #7]
 8003218:	2301      	movs	r3, #1
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	230c      	movs	r3, #12
 800321e:	f7ff ff6b 	bl	80030f8 <OLED_ShowChar>
        x+=8;
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	3308      	adds	r3, #8
 8003226:	71fb      	strb	r3, [r7, #7]
        p++;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	3301      	adds	r3, #1
 800322c:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1db      	bne.n	80031ee <OLED_ShowString+0x12>
    }  
}	 
 8003236:	bf00      	nop
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <OLED_Init>:

void OLED_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8003244:	f001 fc28 	bl	8004a98 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8003248:	4b41      	ldr	r3, [pc, #260]	@ (8003350 <OLED_Init+0x110>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324c:	4a40      	ldr	r2, [pc, #256]	@ (8003350 <OLED_Init+0x110>)
 800324e:	f023 0301 	bic.w	r3, r3, #1
 8003252:	6713      	str	r3, [r2, #112]	@ 0x70
 8003254:	4b3e      	ldr	r3, [pc, #248]	@ (8003350 <OLED_Init+0x110>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003258:	4a3d      	ldr	r2, [pc, #244]	@ (8003350 <OLED_Init+0x110>)
 800325a:	f023 0304 	bic.w	r3, r3, #4
 800325e:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8003260:	f001 fc2e 	bl	8004ac0 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8003264:	2200      	movs	r2, #0
 8003266:	2180      	movs	r1, #128	@ 0x80
 8003268:	483a      	ldr	r0, [pc, #232]	@ (8003354 <OLED_Init+0x114>)
 800326a:	f000 fc4b 	bl	8003b04 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800326e:	2064      	movs	r0, #100	@ 0x64
 8003270:	f000 f8e4 	bl	800343c <HAL_Delay>
	OLED_RST_Set();
 8003274:	2201      	movs	r2, #1
 8003276:	2180      	movs	r1, #128	@ 0x80
 8003278:	4836      	ldr	r0, [pc, #216]	@ (8003354 <OLED_Init+0x114>)
 800327a:	f000 fc43 	bl	8003b04 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800327e:	2100      	movs	r1, #0
 8003280:	20ae      	movs	r0, #174	@ 0xae
 8003282:	f7ff fe6f 	bl	8002f64 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8003286:	2100      	movs	r1, #0
 8003288:	20d5      	movs	r0, #213	@ 0xd5
 800328a:	f7ff fe6b 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800328e:	2100      	movs	r1, #0
 8003290:	2050      	movs	r0, #80	@ 0x50
 8003292:	f7ff fe67 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8003296:	2100      	movs	r1, #0
 8003298:	20a8      	movs	r0, #168	@ 0xa8
 800329a:	f7ff fe63 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800329e:	2100      	movs	r1, #0
 80032a0:	203f      	movs	r0, #63	@ 0x3f
 80032a2:	f7ff fe5f 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80032a6:	2100      	movs	r1, #0
 80032a8:	20d3      	movs	r0, #211	@ 0xd3
 80032aa:	f7ff fe5b 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80032ae:	2100      	movs	r1, #0
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7ff fe57 	bl	8002f64 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80032b6:	2100      	movs	r1, #0
 80032b8:	2040      	movs	r0, #64	@ 0x40
 80032ba:	f7ff fe53 	bl	8002f64 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80032be:	2100      	movs	r1, #0
 80032c0:	208d      	movs	r0, #141	@ 0x8d
 80032c2:	f7ff fe4f 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80032c6:	2100      	movs	r1, #0
 80032c8:	2014      	movs	r0, #20
 80032ca:	f7ff fe4b 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80032ce:	2100      	movs	r1, #0
 80032d0:	2020      	movs	r0, #32
 80032d2:	f7ff fe47 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80032d6:	2100      	movs	r1, #0
 80032d8:	2002      	movs	r0, #2
 80032da:	f7ff fe43 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80032de:	2100      	movs	r1, #0
 80032e0:	20a1      	movs	r0, #161	@ 0xa1
 80032e2:	f7ff fe3f 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80032e6:	2100      	movs	r1, #0
 80032e8:	20c0      	movs	r0, #192	@ 0xc0
 80032ea:	f7ff fe3b 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80032ee:	2100      	movs	r1, #0
 80032f0:	20da      	movs	r0, #218	@ 0xda
 80032f2:	f7ff fe37 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80032f6:	2100      	movs	r1, #0
 80032f8:	2012      	movs	r0, #18
 80032fa:	f7ff fe33 	bl	8002f64 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80032fe:	2100      	movs	r1, #0
 8003300:	2081      	movs	r0, #129	@ 0x81
 8003302:	f7ff fe2f 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8003306:	2100      	movs	r1, #0
 8003308:	20ef      	movs	r0, #239	@ 0xef
 800330a:	f7ff fe2b 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800330e:	2100      	movs	r1, #0
 8003310:	20d9      	movs	r0, #217	@ 0xd9
 8003312:	f7ff fe27 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8003316:	2100      	movs	r1, #0
 8003318:	20f1      	movs	r0, #241	@ 0xf1
 800331a:	f7ff fe23 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800331e:	2100      	movs	r1, #0
 8003320:	20db      	movs	r0, #219	@ 0xdb
 8003322:	f7ff fe1f 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8003326:	2100      	movs	r1, #0
 8003328:	2030      	movs	r0, #48	@ 0x30
 800332a:	f7ff fe1b 	bl	8002f64 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800332e:	2100      	movs	r1, #0
 8003330:	20a4      	movs	r0, #164	@ 0xa4
 8003332:	f7ff fe17 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8003336:	2100      	movs	r1, #0
 8003338:	20a6      	movs	r0, #166	@ 0xa6
 800333a:	f7ff fe13 	bl	8002f64 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800333e:	2100      	movs	r1, #0
 8003340:	20af      	movs	r0, #175	@ 0xaf
 8003342:	f7ff fe0f 	bl	8002f64 <OLED_WR_Byte>
	OLED_Clear(); 
 8003346:	f7ff fe57 	bl	8002ff8 <OLED_Clear>
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	40021000 	.word	0x40021000

08003358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800335c:	4b0e      	ldr	r3, [pc, #56]	@ (8003398 <HAL_Init+0x40>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0d      	ldr	r2, [pc, #52]	@ (8003398 <HAL_Init+0x40>)
 8003362:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003366:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003368:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <HAL_Init+0x40>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0a      	ldr	r2, [pc, #40]	@ (8003398 <HAL_Init+0x40>)
 800336e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003372:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003374:	4b08      	ldr	r3, [pc, #32]	@ (8003398 <HAL_Init+0x40>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a07      	ldr	r2, [pc, #28]	@ (8003398 <HAL_Init+0x40>)
 800337a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800337e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003380:	2003      	movs	r0, #3
 8003382:	f000 f94f 	bl	8003624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003386:	200f      	movs	r0, #15
 8003388:	f000 f808 	bl	800339c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800338c:	f7ff fa78 	bl	8002880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023c00 	.word	0x40023c00

0800339c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033a4:	4b12      	ldr	r3, [pc, #72]	@ (80033f0 <HAL_InitTick+0x54>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b12      	ldr	r3, [pc, #72]	@ (80033f4 <HAL_InitTick+0x58>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	4619      	mov	r1, r3
 80033ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f967 	bl	800368e <HAL_SYSTICK_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00e      	b.n	80033e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b0f      	cmp	r3, #15
 80033ce:	d80a      	bhi.n	80033e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033d0:	2200      	movs	r2, #0
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295
 80033d8:	f000 f92f 	bl	800363a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033dc:	4a06      	ldr	r2, [pc, #24]	@ (80033f8 <HAL_InitTick+0x5c>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e000      	b.n	80033e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20000004 	.word	0x20000004
 80033f4:	2000000c 	.word	0x2000000c
 80033f8:	20000008 	.word	0x20000008

080033fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003400:	4b06      	ldr	r3, [pc, #24]	@ (800341c <HAL_IncTick+0x20>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_IncTick+0x24>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4413      	add	r3, r2
 800340c:	4a04      	ldr	r2, [pc, #16]	@ (8003420 <HAL_IncTick+0x24>)
 800340e:	6013      	str	r3, [r2, #0]
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	2000000c 	.word	0x2000000c
 8003420:	2000070c 	.word	0x2000070c

08003424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return uwTick;
 8003428:	4b03      	ldr	r3, [pc, #12]	@ (8003438 <HAL_GetTick+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	2000070c 	.word	0x2000070c

0800343c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003444:	f7ff ffee 	bl	8003424 <HAL_GetTick>
 8003448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d005      	beq.n	8003462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003456:	4b0a      	ldr	r3, [pc, #40]	@ (8003480 <HAL_Delay+0x44>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4413      	add	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003462:	bf00      	nop
 8003464:	f7ff ffde 	bl	8003424 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	429a      	cmp	r2, r3
 8003472:	d8f7      	bhi.n	8003464 <HAL_Delay+0x28>
  {
  }
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	2000000c 	.word	0x2000000c

08003484 <__NVIC_SetPriorityGrouping>:
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4b0c      	ldr	r3, [pc, #48]	@ (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	@ (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_GetPriorityGrouping>:
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b04      	ldr	r3, [pc, #16]	@ (80034e4 <__NVIC_GetPriorityGrouping+0x18>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 0307 	and.w	r3, r3, #7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_EnableIRQ>:
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db0b      	blt.n	8003512 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4907      	ldr	r1, [pc, #28]	@ (8003520 <__NVIC_EnableIRQ+0x38>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2001      	movs	r0, #1
 800350a:	fa00 f202 	lsl.w	r2, r0, r2
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000e100 	.word	0xe000e100

08003524 <__NVIC_SetPriority>:
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	2b00      	cmp	r3, #0
 8003536:	db0a      	blt.n	800354e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	490c      	ldr	r1, [pc, #48]	@ (8003570 <__NVIC_SetPriority+0x4c>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	440b      	add	r3, r1
 8003548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800354c:	e00a      	b.n	8003564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4908      	ldr	r1, [pc, #32]	@ (8003574 <__NVIC_SetPriority+0x50>)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3b04      	subs	r3, #4
 800355c:	0112      	lsls	r2, r2, #4
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	440b      	add	r3, r1
 8003562:	761a      	strb	r2, [r3, #24]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000e100 	.word	0xe000e100
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <NVIC_EncodePriority>:
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	@ 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f1c3 0307 	rsb	r3, r3, #7
 8003592:	2b04      	cmp	r3, #4
 8003594:	bf28      	it	cs
 8003596:	2304      	movcs	r3, #4
 8003598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3304      	adds	r3, #4
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d902      	bls.n	80035a8 <NVIC_EncodePriority+0x30>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3b03      	subs	r3, #3
 80035a6:	e000      	b.n	80035aa <NVIC_EncodePriority+0x32>
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	401a      	ands	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43d9      	mvns	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	4313      	orrs	r3, r2
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	@ 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f0:	d301      	bcc.n	80035f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f2:	2301      	movs	r3, #1
 80035f4:	e00f      	b.n	8003616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <SysTick_Config+0x40>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035fe:	210f      	movs	r1, #15
 8003600:	f04f 30ff 	mov.w	r0, #4294967295
 8003604:	f7ff ff8e 	bl	8003524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003608:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <SysTick_Config+0x40>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800360e:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <SysTick_Config+0x40>)
 8003610:	2207      	movs	r2, #7
 8003612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	e000e010 	.word	0xe000e010

08003624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ff29 	bl	8003484 <__NVIC_SetPriorityGrouping>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	4603      	mov	r3, r0
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800364c:	f7ff ff3e 	bl	80034cc <__NVIC_GetPriorityGrouping>
 8003650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7ff ff8e 	bl	8003578 <NVIC_EncodePriority>
 800365c:	4602      	mov	r2, r0
 800365e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff5d 	bl	8003524 <__NVIC_SetPriority>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff31 	bl	80034e8 <__NVIC_EnableIRQ>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ffa2 	bl	80035e0 <SysTick_Config>
 800369c:	4603      	mov	r3, r0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036b4:	f7ff feb6 	bl	8003424 <HAL_GetTick>
 80036b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d008      	beq.n	80036d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2280      	movs	r2, #128	@ 0x80
 80036ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e052      	b.n	800377e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0216 	bic.w	r2, r2, #22
 80036e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d103      	bne.n	8003708 <HAL_DMA_Abort+0x62>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0208 	bic.w	r2, r2, #8
 8003716:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0201 	bic.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003728:	e013      	b.n	8003752 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800372a:	f7ff fe7b 	bl	8003424 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b05      	cmp	r3, #5
 8003736:	d90c      	bls.n	8003752 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2203      	movs	r2, #3
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e015      	b.n	800377e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e4      	bne.n	800372a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003764:	223f      	movs	r2, #63	@ 0x3f
 8003766:	409a      	lsls	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d004      	beq.n	80037a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2280      	movs	r2, #128	@ 0x80
 800379e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e00c      	b.n	80037be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2205      	movs	r2, #5
 80037a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	@ 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	e16b      	b.n	8003ac0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037e8:	2201      	movs	r2, #1
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4013      	ands	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	429a      	cmp	r2, r3
 8003802:	f040 815a 	bne.w	8003aba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d005      	beq.n	800381e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800381a:	2b02      	cmp	r3, #2
 800381c:	d130      	bne.n	8003880 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	2203      	movs	r2, #3
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003854:	2201      	movs	r2, #1
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f003 0201 	and.w	r2, r3, #1
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	2b03      	cmp	r3, #3
 800388a:	d017      	beq.n	80038bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	2203      	movs	r2, #3
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d123      	bne.n	8003910 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	08da      	lsrs	r2, r3, #3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3208      	adds	r2, #8
 80038d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	220f      	movs	r2, #15
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	08da      	lsrs	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3208      	adds	r2, #8
 800390a:	69b9      	ldr	r1, [r7, #24]
 800390c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	2203      	movs	r2, #3
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0203 	and.w	r2, r3, #3
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 80b4 	beq.w	8003aba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	4b60      	ldr	r3, [pc, #384]	@ (8003ad8 <HAL_GPIO_Init+0x30c>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395a:	4a5f      	ldr	r2, [pc, #380]	@ (8003ad8 <HAL_GPIO_Init+0x30c>)
 800395c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003960:	6453      	str	r3, [r2, #68]	@ 0x44
 8003962:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad8 <HAL_GPIO_Init+0x30c>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800396e:	4a5b      	ldr	r2, [pc, #364]	@ (8003adc <HAL_GPIO_Init+0x310>)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	3302      	adds	r3, #2
 8003976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	220f      	movs	r2, #15
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4013      	ands	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a52      	ldr	r2, [pc, #328]	@ (8003ae0 <HAL_GPIO_Init+0x314>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d02b      	beq.n	80039f2 <HAL_GPIO_Init+0x226>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a51      	ldr	r2, [pc, #324]	@ (8003ae4 <HAL_GPIO_Init+0x318>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d025      	beq.n	80039ee <HAL_GPIO_Init+0x222>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a50      	ldr	r2, [pc, #320]	@ (8003ae8 <HAL_GPIO_Init+0x31c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01f      	beq.n	80039ea <HAL_GPIO_Init+0x21e>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a4f      	ldr	r2, [pc, #316]	@ (8003aec <HAL_GPIO_Init+0x320>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d019      	beq.n	80039e6 <HAL_GPIO_Init+0x21a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a4e      	ldr	r2, [pc, #312]	@ (8003af0 <HAL_GPIO_Init+0x324>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <HAL_GPIO_Init+0x216>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a4d      	ldr	r2, [pc, #308]	@ (8003af4 <HAL_GPIO_Init+0x328>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00d      	beq.n	80039de <HAL_GPIO_Init+0x212>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a4c      	ldr	r2, [pc, #304]	@ (8003af8 <HAL_GPIO_Init+0x32c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d007      	beq.n	80039da <HAL_GPIO_Init+0x20e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a4b      	ldr	r2, [pc, #300]	@ (8003afc <HAL_GPIO_Init+0x330>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d101      	bne.n	80039d6 <HAL_GPIO_Init+0x20a>
 80039d2:	2307      	movs	r3, #7
 80039d4:	e00e      	b.n	80039f4 <HAL_GPIO_Init+0x228>
 80039d6:	2308      	movs	r3, #8
 80039d8:	e00c      	b.n	80039f4 <HAL_GPIO_Init+0x228>
 80039da:	2306      	movs	r3, #6
 80039dc:	e00a      	b.n	80039f4 <HAL_GPIO_Init+0x228>
 80039de:	2305      	movs	r3, #5
 80039e0:	e008      	b.n	80039f4 <HAL_GPIO_Init+0x228>
 80039e2:	2304      	movs	r3, #4
 80039e4:	e006      	b.n	80039f4 <HAL_GPIO_Init+0x228>
 80039e6:	2303      	movs	r3, #3
 80039e8:	e004      	b.n	80039f4 <HAL_GPIO_Init+0x228>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e002      	b.n	80039f4 <HAL_GPIO_Init+0x228>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <HAL_GPIO_Init+0x228>
 80039f2:	2300      	movs	r3, #0
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	f002 0203 	and.w	r2, r2, #3
 80039fa:	0092      	lsls	r2, r2, #2
 80039fc:	4093      	lsls	r3, r2
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a04:	4935      	ldr	r1, [pc, #212]	@ (8003adc <HAL_GPIO_Init+0x310>)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	089b      	lsrs	r3, r3, #2
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a12:	4b3b      	ldr	r3, [pc, #236]	@ (8003b00 <HAL_GPIO_Init+0x334>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a36:	4a32      	ldr	r2, [pc, #200]	@ (8003b00 <HAL_GPIO_Init+0x334>)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a3c:	4b30      	ldr	r3, [pc, #192]	@ (8003b00 <HAL_GPIO_Init+0x334>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a60:	4a27      	ldr	r2, [pc, #156]	@ (8003b00 <HAL_GPIO_Init+0x334>)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a66:	4b26      	ldr	r3, [pc, #152]	@ (8003b00 <HAL_GPIO_Init+0x334>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b00 <HAL_GPIO_Init+0x334>)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a90:	4b1b      	ldr	r3, [pc, #108]	@ (8003b00 <HAL_GPIO_Init+0x334>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ab4:	4a12      	ldr	r2, [pc, #72]	@ (8003b00 <HAL_GPIO_Init+0x334>)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3301      	adds	r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b0f      	cmp	r3, #15
 8003ac4:	f67f ae90 	bls.w	80037e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3724      	adds	r7, #36	@ 0x24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40013800 	.word	0x40013800
 8003ae0:	40020000 	.word	0x40020000
 8003ae4:	40020400 	.word	0x40020400
 8003ae8:	40020800 	.word	0x40020800
 8003aec:	40020c00 	.word	0x40020c00
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40021400 	.word	0x40021400
 8003af8:	40021800 	.word	0x40021800
 8003afc:	40021c00 	.word	0x40021c00
 8003b00:	40013c00 	.word	0x40013c00

08003b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	807b      	strh	r3, [r7, #2]
 8003b10:	4613      	mov	r3, r2
 8003b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b14:	787b      	ldrb	r3, [r7, #1]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b1a:	887a      	ldrh	r2, [r7, #2]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b20:	e003      	b.n	8003b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b22:	887b      	ldrh	r3, [r7, #2]
 8003b24:	041a      	lsls	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	619a      	str	r2, [r3, #24]
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b48:	887a      	ldrh	r2, [r7, #2]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	041a      	lsls	r2, r3, #16
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	43d9      	mvns	r1, r3
 8003b54:	887b      	ldrh	r3, [r7, #2]
 8003b56:	400b      	ands	r3, r1
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	619a      	str	r2, [r3, #24]
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e12b      	b.n	8003dd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe fea8 	bl	80028e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2224      	movs	r2, #36	@ 0x24
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bd0:	f001 fbba 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8003bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4a81      	ldr	r2, [pc, #516]	@ (8003de0 <HAL_I2C_Init+0x274>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d807      	bhi.n	8003bf0 <HAL_I2C_Init+0x84>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a80      	ldr	r2, [pc, #512]	@ (8003de4 <HAL_I2C_Init+0x278>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	bf94      	ite	ls
 8003be8:	2301      	movls	r3, #1
 8003bea:	2300      	movhi	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e006      	b.n	8003bfe <HAL_I2C_Init+0x92>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a7d      	ldr	r2, [pc, #500]	@ (8003de8 <HAL_I2C_Init+0x27c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	bf94      	ite	ls
 8003bf8:	2301      	movls	r3, #1
 8003bfa:	2300      	movhi	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0e7      	b.n	8003dd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a78      	ldr	r2, [pc, #480]	@ (8003dec <HAL_I2C_Init+0x280>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0c9b      	lsrs	r3, r3, #18
 8003c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4a6a      	ldr	r2, [pc, #424]	@ (8003de0 <HAL_I2C_Init+0x274>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d802      	bhi.n	8003c40 <HAL_I2C_Init+0xd4>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	e009      	b.n	8003c54 <HAL_I2C_Init+0xe8>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	4a69      	ldr	r2, [pc, #420]	@ (8003df0 <HAL_I2C_Init+0x284>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	099b      	lsrs	r3, r3, #6
 8003c52:	3301      	adds	r3, #1
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	495c      	ldr	r1, [pc, #368]	@ (8003de0 <HAL_I2C_Init+0x274>)
 8003c70:	428b      	cmp	r3, r1
 8003c72:	d819      	bhi.n	8003ca8 <HAL_I2C_Init+0x13c>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1e59      	subs	r1, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c82:	1c59      	adds	r1, r3, #1
 8003c84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c88:	400b      	ands	r3, r1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_I2C_Init+0x138>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1e59      	subs	r1, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca2:	e051      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	e04f      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d111      	bne.n	8003cd4 <HAL_I2C_Init+0x168>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e58      	subs	r0, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	440b      	add	r3, r1
 8003cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e012      	b.n	8003cfa <HAL_I2C_Init+0x18e>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1e58      	subs	r0, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	0099      	lsls	r1, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_Init+0x196>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e022      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10e      	bne.n	8003d28 <HAL_I2C_Init+0x1bc>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1e58      	subs	r0, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	440b      	add	r3, r1
 8003d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d26:	e00f      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e58      	subs	r0, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	0099      	lsls	r1, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	6809      	ldr	r1, [r1, #0]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6911      	ldr	r1, [r2, #16]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68d2      	ldr	r2, [r2, #12]
 8003d82:	4311      	orrs	r1, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	000186a0 	.word	0x000186a0
 8003de4:	001e847f 	.word	0x001e847f
 8003de8:	003d08ff 	.word	0x003d08ff
 8003dec:	431bde83 	.word	0x431bde83
 8003df0:	10624dd3 	.word	0x10624dd3

08003df4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	460b      	mov	r3, r1
 8003e02:	817b      	strh	r3, [r7, #10]
 8003e04:	4613      	mov	r3, r2
 8003e06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e08:	f7ff fb0c 	bl	8003424 <HAL_GetTick>
 8003e0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	f040 80e0 	bne.w	8003fdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	2319      	movs	r3, #25
 8003e22:	2201      	movs	r2, #1
 8003e24:	4970      	ldr	r1, [pc, #448]	@ (8003fe8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 fc58 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
 8003e34:	e0d3      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_I2C_Master_Transmit+0x50>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e0cc      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d007      	beq.n	8003e6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0201 	orr.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2221      	movs	r2, #33	@ 0x21
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2210      	movs	r2, #16
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	893a      	ldrh	r2, [r7, #8]
 8003e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a50      	ldr	r2, [pc, #320]	@ (8003fec <HAL_I2C_Master_Transmit+0x1f8>)
 8003eaa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003eac:	8979      	ldrh	r1, [r7, #10]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	6a3a      	ldr	r2, [r7, #32]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 fac2 	bl	800443c <I2C_MasterRequestWrite>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e08d      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ed8:	e066      	b.n	8003fa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	6a39      	ldr	r1, [r7, #32]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fcd2 	bl	8004888 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00d      	beq.n	8003f06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d107      	bne.n	8003f02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e06b      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	781a      	ldrb	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d11b      	bne.n	8003f7c <HAL_I2C_Master_Transmit+0x188>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d017      	beq.n	8003f7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	781a      	ldrb	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	6a39      	ldr	r1, [r7, #32]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fcc2 	bl	800490a <I2C_WaitOnBTFFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d107      	bne.n	8003fa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e01a      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d194      	bne.n	8003eda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e000      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fdc:	2302      	movs	r3, #2
  }
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	00100002 	.word	0x00100002
 8003fec:	ffff0000 	.word	0xffff0000

08003ff0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	@ 0x30
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	817b      	strh	r3, [r7, #10]
 8004000:	4613      	mov	r3, r2
 8004002:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004004:	f7ff fa0e 	bl	8003424 <HAL_GetTick>
 8004008:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b20      	cmp	r3, #32
 8004014:	f040 820b 	bne.w	800442e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	2319      	movs	r3, #25
 800401e:	2201      	movs	r2, #1
 8004020:	497c      	ldr	r1, [pc, #496]	@ (8004214 <HAL_I2C_Master_Receive+0x224>)
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 fb5a 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800402e:	2302      	movs	r3, #2
 8004030:	e1fe      	b.n	8004430 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_I2C_Master_Receive+0x50>
 800403c:	2302      	movs	r3, #2
 800403e:	e1f7      	b.n	8004430 <HAL_I2C_Master_Receive+0x440>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b01      	cmp	r3, #1
 8004054:	d007      	beq.n	8004066 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004074:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2222      	movs	r2, #34	@ 0x22
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2210      	movs	r2, #16
 8004082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	893a      	ldrh	r2, [r7, #8]
 8004096:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4a5c      	ldr	r2, [pc, #368]	@ (8004218 <HAL_I2C_Master_Receive+0x228>)
 80040a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040a8:	8979      	ldrh	r1, [r7, #10]
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fa46 	bl	8004540 <I2C_MasterRequestRead>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e1b8      	b.n	8004430 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d113      	bne.n	80040ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c6:	2300      	movs	r3, #0
 80040c8:	623b      	str	r3, [r7, #32]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	623b      	str	r3, [r7, #32]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	623b      	str	r3, [r7, #32]
 80040da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e18c      	b.n	8004408 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d11b      	bne.n	800412e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004104:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	61fb      	str	r3, [r7, #28]
 800411a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	e16c      	b.n	8004408 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004132:	2b02      	cmp	r3, #2
 8004134:	d11b      	bne.n	800416e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004144:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004156:	2300      	movs	r3, #0
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	e14c      	b.n	8004408 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800417c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004194:	e138      	b.n	8004408 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419a:	2b03      	cmp	r3, #3
 800419c:	f200 80f1 	bhi.w	8004382 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d123      	bne.n	80041f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 fbed 	bl	800498c <I2C_WaitOnRXNEFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e139      	b.n	8004430 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041ee:	e10b      	b.n	8004408 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d14e      	bne.n	8004296 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fe:	2200      	movs	r2, #0
 8004200:	4906      	ldr	r1, [pc, #24]	@ (800421c <HAL_I2C_Master_Receive+0x22c>)
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fa6a 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e10e      	b.n	8004430 <HAL_I2C_Master_Receive+0x440>
 8004212:	bf00      	nop
 8004214:	00100002 	.word	0x00100002
 8004218:	ffff0000 	.word	0xffff0000
 800421c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800422e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004294:	e0b8      	b.n	8004408 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	2200      	movs	r2, #0
 800429e:	4966      	ldr	r1, [pc, #408]	@ (8004438 <HAL_I2C_Master_Receive+0x448>)
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 fa1b 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0bf      	b.n	8004430 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	2200      	movs	r2, #0
 80042fa:	494f      	ldr	r1, [pc, #316]	@ (8004438 <HAL_I2C_Master_Receive+0x448>)
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f9ed 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e091      	b.n	8004430 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800431a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004380:	e042      	b.n	8004408 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004384:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fb00 	bl	800498c <I2C_WaitOnRXNEFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e04c      	b.n	8004430 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d118      	bne.n	8004408 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440c:	2b00      	cmp	r3, #0
 800440e:	f47f aec2 	bne.w	8004196 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	e000      	b.n	8004430 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800442e:	2302      	movs	r3, #2
  }
}
 8004430:	4618      	mov	r0, r3
 8004432:	3728      	adds	r7, #40	@ 0x28
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	00010004 	.word	0x00010004

0800443c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af02      	add	r7, sp, #8
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	460b      	mov	r3, r1
 800444a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004450:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b08      	cmp	r3, #8
 8004456:	d006      	beq.n	8004466 <I2C_MasterRequestWrite+0x2a>
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d003      	beq.n	8004466 <I2C_MasterRequestWrite+0x2a>
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004464:	d108      	bne.n	8004478 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	e00b      	b.n	8004490 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447c:	2b12      	cmp	r3, #18
 800447e:	d107      	bne.n	8004490 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800448e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f91d 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00d      	beq.n	80044c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044b6:	d103      	bne.n	80044c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e035      	b.n	8004530 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044cc:	d108      	bne.n	80044e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ce:	897b      	ldrh	r3, [r7, #10]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044dc:	611a      	str	r2, [r3, #16]
 80044de:	e01b      	b.n	8004518 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044e0:	897b      	ldrh	r3, [r7, #10]
 80044e2:	11db      	asrs	r3, r3, #7
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	f003 0306 	and.w	r3, r3, #6
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f063 030f 	orn	r3, r3, #15
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	490e      	ldr	r1, [pc, #56]	@ (8004538 <I2C_MasterRequestWrite+0xfc>)
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f943 	bl	800478a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e010      	b.n	8004530 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800450e:	897b      	ldrh	r3, [r7, #10]
 8004510:	b2da      	uxtb	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	4907      	ldr	r1, [pc, #28]	@ (800453c <I2C_MasterRequestWrite+0x100>)
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f933 	bl	800478a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	00010008 	.word	0x00010008
 800453c:	00010002 	.word	0x00010002

08004540 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	607a      	str	r2, [r7, #4]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	460b      	mov	r3, r1
 800454e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004554:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004564:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d006      	beq.n	800457a <I2C_MasterRequestRead+0x3a>
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d003      	beq.n	800457a <I2C_MasterRequestRead+0x3a>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004578:	d108      	bne.n	800458c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	e00b      	b.n	80045a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004590:	2b11      	cmp	r3, #17
 8004592:	d107      	bne.n	80045a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f893 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00d      	beq.n	80045d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ca:	d103      	bne.n	80045d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e079      	b.n	80046cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045e0:	d108      	bne.n	80045f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045e2:	897b      	ldrh	r3, [r7, #10]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	611a      	str	r2, [r3, #16]
 80045f2:	e05f      	b.n	80046b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045f4:	897b      	ldrh	r3, [r7, #10]
 80045f6:	11db      	asrs	r3, r3, #7
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	f003 0306 	and.w	r3, r3, #6
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	f063 030f 	orn	r3, r3, #15
 8004604:	b2da      	uxtb	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4930      	ldr	r1, [pc, #192]	@ (80046d4 <I2C_MasterRequestRead+0x194>)
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f8b9 	bl	800478a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e054      	b.n	80046cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004622:	897b      	ldrh	r3, [r7, #10]
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	4929      	ldr	r1, [pc, #164]	@ (80046d8 <I2C_MasterRequestRead+0x198>)
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f8a9 	bl	800478a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e044      	b.n	80046cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004642:	2300      	movs	r3, #0
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004666:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f831 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00d      	beq.n	800469c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800468e:	d103      	bne.n	8004698 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004696:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e017      	b.n	80046cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800469c:	897b      	ldrh	r3, [r7, #10]
 800469e:	11db      	asrs	r3, r3, #7
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	f003 0306 	and.w	r3, r3, #6
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	f063 030e 	orn	r3, r3, #14
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	4907      	ldr	r1, [pc, #28]	@ (80046d8 <I2C_MasterRequestRead+0x198>)
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f865 	bl	800478a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	00010008 	.word	0x00010008
 80046d8:	00010002 	.word	0x00010002

080046dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	4613      	mov	r3, r2
 80046ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ec:	e025      	b.n	800473a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d021      	beq.n	800473a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f6:	f7fe fe95 	bl	8003424 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d116      	bne.n	800473a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	f043 0220 	orr.w	r2, r3, #32
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e023      	b.n	8004782 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d10d      	bne.n	8004760 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	43da      	mvns	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4013      	ands	r3, r2
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	bf0c      	ite	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	2300      	movne	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	e00c      	b.n	800477a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	43da      	mvns	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4013      	ands	r3, r2
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	bf0c      	ite	eq
 8004772:	2301      	moveq	r3, #1
 8004774:	2300      	movne	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	429a      	cmp	r2, r3
 800477e:	d0b6      	beq.n	80046ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	607a      	str	r2, [r7, #4]
 8004796:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004798:	e051      	b.n	800483e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a8:	d123      	bne.n	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	f043 0204 	orr.w	r2, r3, #4
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e046      	b.n	8004880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d021      	beq.n	800483e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fa:	f7fe fe13 	bl	8003424 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d302      	bcc.n	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d116      	bne.n	800483e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482a:	f043 0220 	orr.w	r2, r3, #32
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e020      	b.n	8004880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	d10c      	bne.n	8004862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	43da      	mvns	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4013      	ands	r3, r2
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	bf14      	ite	ne
 800485a:	2301      	movne	r3, #1
 800485c:	2300      	moveq	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	e00b      	b.n	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	43da      	mvns	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4013      	ands	r3, r2
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	bf14      	ite	ne
 8004874:	2301      	movne	r3, #1
 8004876:	2300      	moveq	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d18d      	bne.n	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004894:	e02d      	b.n	80048f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 f8ce 	bl	8004a38 <I2C_IsAcknowledgeFailed>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e02d      	b.n	8004902 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ac:	d021      	beq.n	80048f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ae:	f7fe fdb9 	bl	8003424 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d302      	bcc.n	80048c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d116      	bne.n	80048f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	f043 0220 	orr.w	r2, r3, #32
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e007      	b.n	8004902 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fc:	2b80      	cmp	r3, #128	@ 0x80
 80048fe:	d1ca      	bne.n	8004896 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004916:	e02d      	b.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f88d 	bl	8004a38 <I2C_IsAcknowledgeFailed>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e02d      	b.n	8004984 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d021      	beq.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004930:	f7fe fd78 	bl	8003424 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	429a      	cmp	r2, r3
 800493e:	d302      	bcc.n	8004946 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d116      	bne.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e007      	b.n	8004984 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b04      	cmp	r3, #4
 8004980:	d1ca      	bne.n	8004918 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004998:	e042      	b.n	8004a20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d119      	bne.n	80049dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0210 	mvn.w	r2, #16
 80049b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e029      	b.n	8004a30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049dc:	f7fe fd22 	bl	8003424 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d302      	bcc.n	80049f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d116      	bne.n	8004a20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0c:	f043 0220 	orr.w	r2, r3, #32
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e007      	b.n	8004a30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2a:	2b40      	cmp	r3, #64	@ 0x40
 8004a2c:	d1b5      	bne.n	800499a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4e:	d11b      	bne.n	8004a88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a74:	f043 0204 	orr.w	r2, r3, #4
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004a9e:	4b06      	ldr	r3, [pc, #24]	@ (8004ab8 <HAL_PWR_EnableBkUpAccess+0x20>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004aa4:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <HAL_PWR_EnableBkUpAccess+0x24>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004aaa:	687b      	ldr	r3, [r7, #4]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	420e0020 	.word	0x420e0020
 8004abc:	40007000 	.word	0x40007000

08004ac0 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8004ac6:	4b06      	ldr	r3, [pc, #24]	@ (8004ae0 <HAL_PWR_DisableBkUpAccess+0x20>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004acc:	4b05      	ldr	r3, [pc, #20]	@ (8004ae4 <HAL_PWR_DisableBkUpAccess+0x24>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004ad2:	687b      	ldr	r3, [r7, #4]
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	420e0020 	.word	0x420e0020
 8004ae4:	40007000 	.word	0x40007000

08004ae8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e267      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d075      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b06:	4b88      	ldr	r3, [pc, #544]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d00c      	beq.n	8004b2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b12:	4b85      	ldr	r3, [pc, #532]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d112      	bne.n	8004b44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b1e:	4b82      	ldr	r3, [pc, #520]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b2a:	d10b      	bne.n	8004b44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d05b      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x108>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d157      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e242      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b4c:	d106      	bne.n	8004b5c <HAL_RCC_OscConfig+0x74>
 8004b4e:	4b76      	ldr	r3, [pc, #472]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a75      	ldr	r2, [pc, #468]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e01d      	b.n	8004b98 <HAL_RCC_OscConfig+0xb0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCC_OscConfig+0x98>
 8004b66:	4b70      	ldr	r3, [pc, #448]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a6f      	ldr	r2, [pc, #444]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	4b6d      	ldr	r3, [pc, #436]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a6c      	ldr	r2, [pc, #432]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e00b      	b.n	8004b98 <HAL_RCC_OscConfig+0xb0>
 8004b80:	4b69      	ldr	r3, [pc, #420]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a68      	ldr	r2, [pc, #416]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	4b66      	ldr	r3, [pc, #408]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a65      	ldr	r2, [pc, #404]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004b92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d013      	beq.n	8004bc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba0:	f7fe fc40 	bl	8003424 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba8:	f7fe fc3c 	bl	8003424 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b64      	cmp	r3, #100	@ 0x64
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e207      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bba:	4b5b      	ldr	r3, [pc, #364]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCC_OscConfig+0xc0>
 8004bc6:	e014      	b.n	8004bf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc8:	f7fe fc2c 	bl	8003424 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd0:	f7fe fc28 	bl	8003424 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	@ 0x64
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e1f3      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be2:	4b51      	ldr	r3, [pc, #324]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0xe8>
 8004bee:	e000      	b.n	8004bf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d063      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 030c 	and.w	r3, r3, #12
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00b      	beq.n	8004c22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c0a:	4b47      	ldr	r3, [pc, #284]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d11c      	bne.n	8004c50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c16:	4b44      	ldr	r3, [pc, #272]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d116      	bne.n	8004c50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c22:	4b41      	ldr	r3, [pc, #260]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d005      	beq.n	8004c3a <HAL_RCC_OscConfig+0x152>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d001      	beq.n	8004c3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e1c7      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4937      	ldr	r1, [pc, #220]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c4e:	e03a      	b.n	8004cc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d020      	beq.n	8004c9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c58:	4b34      	ldr	r3, [pc, #208]	@ (8004d2c <HAL_RCC_OscConfig+0x244>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5e:	f7fe fbe1 	bl	8003424 <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c66:	f7fe fbdd 	bl	8003424 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e1a8      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c78:	4b2b      	ldr	r3, [pc, #172]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c84:	4b28      	ldr	r3, [pc, #160]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4925      	ldr	r1, [pc, #148]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	600b      	str	r3, [r1, #0]
 8004c98:	e015      	b.n	8004cc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c9a:	4b24      	ldr	r3, [pc, #144]	@ (8004d2c <HAL_RCC_OscConfig+0x244>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fe fbc0 	bl	8003424 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ca8:	f7fe fbbc 	bl	8003424 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e187      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cba:	4b1b      	ldr	r3, [pc, #108]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d036      	beq.n	8004d40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d016      	beq.n	8004d08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cda:	4b15      	ldr	r3, [pc, #84]	@ (8004d30 <HAL_RCC_OscConfig+0x248>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce0:	f7fe fba0 	bl	8003424 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce8:	f7fe fb9c 	bl	8003424 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e167      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004d28 <HAL_RCC_OscConfig+0x240>)
 8004cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f0      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x200>
 8004d06:	e01b      	b.n	8004d40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d08:	4b09      	ldr	r3, [pc, #36]	@ (8004d30 <HAL_RCC_OscConfig+0x248>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0e:	f7fe fb89 	bl	8003424 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d14:	e00e      	b.n	8004d34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d16:	f7fe fb85 	bl	8003424 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d907      	bls.n	8004d34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e150      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	42470000 	.word	0x42470000
 8004d30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d34:	4b88      	ldr	r3, [pc, #544]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004d36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1ea      	bne.n	8004d16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8097 	beq.w	8004e7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d52:	4b81      	ldr	r3, [pc, #516]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10f      	bne.n	8004d7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	4b7d      	ldr	r3, [pc, #500]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d66:	4a7c      	ldr	r2, [pc, #496]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d6e:	4b7a      	ldr	r3, [pc, #488]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d76:	60bb      	str	r3, [r7, #8]
 8004d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7e:	4b77      	ldr	r3, [pc, #476]	@ (8004f5c <HAL_RCC_OscConfig+0x474>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d118      	bne.n	8004dbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d8a:	4b74      	ldr	r3, [pc, #464]	@ (8004f5c <HAL_RCC_OscConfig+0x474>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a73      	ldr	r2, [pc, #460]	@ (8004f5c <HAL_RCC_OscConfig+0x474>)
 8004d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d96:	f7fe fb45 	bl	8003424 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d9e:	f7fe fb41 	bl	8003424 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e10c      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db0:	4b6a      	ldr	r3, [pc, #424]	@ (8004f5c <HAL_RCC_OscConfig+0x474>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f0      	beq.n	8004d9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d106      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x2ea>
 8004dc4:	4b64      	ldr	r3, [pc, #400]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc8:	4a63      	ldr	r2, [pc, #396]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd0:	e01c      	b.n	8004e0c <HAL_RCC_OscConfig+0x324>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b05      	cmp	r3, #5
 8004dd8:	d10c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x30c>
 8004dda:	4b5f      	ldr	r3, [pc, #380]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dde:	4a5e      	ldr	r2, [pc, #376]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004de0:	f043 0304 	orr.w	r3, r3, #4
 8004de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de6:	4b5c      	ldr	r3, [pc, #368]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dea:	4a5b      	ldr	r2, [pc, #364]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004df2:	e00b      	b.n	8004e0c <HAL_RCC_OscConfig+0x324>
 8004df4:	4b58      	ldr	r3, [pc, #352]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df8:	4a57      	ldr	r2, [pc, #348]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004dfa:	f023 0301 	bic.w	r3, r3, #1
 8004dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e00:	4b55      	ldr	r3, [pc, #340]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e04:	4a54      	ldr	r2, [pc, #336]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004e06:	f023 0304 	bic.w	r3, r3, #4
 8004e0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d015      	beq.n	8004e40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e14:	f7fe fb06 	bl	8003424 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e1a:	e00a      	b.n	8004e32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e1c:	f7fe fb02 	bl	8003424 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e0cb      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e32:	4b49      	ldr	r3, [pc, #292]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0ee      	beq.n	8004e1c <HAL_RCC_OscConfig+0x334>
 8004e3e:	e014      	b.n	8004e6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e40:	f7fe faf0 	bl	8003424 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e46:	e00a      	b.n	8004e5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e48:	f7fe faec 	bl	8003424 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e0b5      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1ee      	bne.n	8004e48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e6a:	7dfb      	ldrb	r3, [r7, #23]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d105      	bne.n	8004e7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e70:	4b39      	ldr	r3, [pc, #228]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	4a38      	ldr	r2, [pc, #224]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004e76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80a1 	beq.w	8004fc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e86:	4b34      	ldr	r3, [pc, #208]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d05c      	beq.n	8004f4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d141      	bne.n	8004f1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9a:	4b31      	ldr	r3, [pc, #196]	@ (8004f60 <HAL_RCC_OscConfig+0x478>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7fe fac0 	bl	8003424 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea8:	f7fe fabc 	bl	8003424 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e087      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eba:	4b27      	ldr	r3, [pc, #156]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69da      	ldr	r2, [r3, #28]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed4:	019b      	lsls	r3, r3, #6
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	085b      	lsrs	r3, r3, #1
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	041b      	lsls	r3, r3, #16
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee8:	061b      	lsls	r3, r3, #24
 8004eea:	491b      	ldr	r1, [pc, #108]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f60 <HAL_RCC_OscConfig+0x478>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef6:	f7fe fa95 	bl	8003424 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004efe:	f7fe fa91 	bl	8003424 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e05c      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f10:	4b11      	ldr	r3, [pc, #68]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x416>
 8004f1c:	e054      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1e:	4b10      	ldr	r3, [pc, #64]	@ (8004f60 <HAL_RCC_OscConfig+0x478>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f24:	f7fe fa7e 	bl	8003424 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7fe fa7a 	bl	8003424 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e045      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3e:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <HAL_RCC_OscConfig+0x470>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x444>
 8004f4a:	e03d      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d107      	bne.n	8004f64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e038      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	40007000 	.word	0x40007000
 8004f60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f64:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd4 <HAL_RCC_OscConfig+0x4ec>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d028      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d121      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d11a      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f94:	4013      	ands	r3, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d111      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	3b01      	subs	r3, #1
 8004fae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d107      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40023800 	.word	0x40023800

08004fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e0cc      	b.n	8005186 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fec:	4b68      	ldr	r3, [pc, #416]	@ (8005190 <HAL_RCC_ClockConfig+0x1b8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d90c      	bls.n	8005014 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffa:	4b65      	ldr	r3, [pc, #404]	@ (8005190 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005002:	4b63      	ldr	r3, [pc, #396]	@ (8005190 <HAL_RCC_ClockConfig+0x1b8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d001      	beq.n	8005014 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e0b8      	b.n	8005186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d020      	beq.n	8005062 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800502c:	4b59      	ldr	r3, [pc, #356]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	4a58      	ldr	r2, [pc, #352]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005036:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005044:	4b53      	ldr	r3, [pc, #332]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	4a52      	ldr	r2, [pc, #328]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800504e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005050:	4b50      	ldr	r3, [pc, #320]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	494d      	ldr	r1, [pc, #308]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	4313      	orrs	r3, r2
 8005060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d044      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d107      	bne.n	8005086 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005076:	4b47      	ldr	r3, [pc, #284]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d119      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e07f      	b.n	8005186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d003      	beq.n	8005096 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005092:	2b03      	cmp	r3, #3
 8005094:	d107      	bne.n	80050a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005096:	4b3f      	ldr	r3, [pc, #252]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d109      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e06f      	b.n	8005186 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e067      	b.n	8005186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050b6:	4b37      	ldr	r3, [pc, #220]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f023 0203 	bic.w	r2, r3, #3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	4934      	ldr	r1, [pc, #208]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050c8:	f7fe f9ac 	bl	8003424 <HAL_GetTick>
 80050cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ce:	e00a      	b.n	80050e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d0:	f7fe f9a8 	bl	8003424 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050de:	4293      	cmp	r3, r2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e04f      	b.n	8005186 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 020c 	and.w	r2, r3, #12
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d1eb      	bne.n	80050d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050f8:	4b25      	ldr	r3, [pc, #148]	@ (8005190 <HAL_RCC_ClockConfig+0x1b8>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d20c      	bcs.n	8005120 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005106:	4b22      	ldr	r3, [pc, #136]	@ (8005190 <HAL_RCC_ClockConfig+0x1b8>)
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800510e:	4b20      	ldr	r3, [pc, #128]	@ (8005190 <HAL_RCC_ClockConfig+0x1b8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d001      	beq.n	8005120 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e032      	b.n	8005186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d008      	beq.n	800513e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800512c:	4b19      	ldr	r3, [pc, #100]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4916      	ldr	r1, [pc, #88]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d009      	beq.n	800515e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800514a:	4b12      	ldr	r3, [pc, #72]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	490e      	ldr	r1, [pc, #56]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	4313      	orrs	r3, r2
 800515c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800515e:	f000 f821 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8005162:	4602      	mov	r2, r0
 8005164:	4b0b      	ldr	r3, [pc, #44]	@ (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	490a      	ldr	r1, [pc, #40]	@ (8005198 <HAL_RCC_ClockConfig+0x1c0>)
 8005170:	5ccb      	ldrb	r3, [r1, r3]
 8005172:	fa22 f303 	lsr.w	r3, r2, r3
 8005176:	4a09      	ldr	r2, [pc, #36]	@ (800519c <HAL_RCC_ClockConfig+0x1c4>)
 8005178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800517a:	4b09      	ldr	r3, [pc, #36]	@ (80051a0 <HAL_RCC_ClockConfig+0x1c8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f7fe f90c 	bl	800339c <HAL_InitTick>

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40023c00 	.word	0x40023c00
 8005194:	40023800 	.word	0x40023800
 8005198:	0800b350 	.word	0x0800b350
 800519c:	20000004 	.word	0x20000004
 80051a0:	20000008 	.word	0x20000008

080051a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a8:	b090      	sub	sp, #64	@ 0x40
 80051aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80051b0:	2300      	movs	r3, #0
 80051b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051b4:	2300      	movs	r3, #0
 80051b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051bc:	4b59      	ldr	r3, [pc, #356]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x180>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 030c 	and.w	r3, r3, #12
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d00d      	beq.n	80051e4 <HAL_RCC_GetSysClockFreq+0x40>
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	f200 80a1 	bhi.w	8005310 <HAL_RCC_GetSysClockFreq+0x16c>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <HAL_RCC_GetSysClockFreq+0x34>
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d003      	beq.n	80051de <HAL_RCC_GetSysClockFreq+0x3a>
 80051d6:	e09b      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051d8:	4b53      	ldr	r3, [pc, #332]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x184>)
 80051da:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80051dc:	e09b      	b.n	8005316 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051de:	4b53      	ldr	r3, [pc, #332]	@ (800532c <HAL_RCC_GetSysClockFreq+0x188>)
 80051e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051e2:	e098      	b.n	8005316 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051e4:	4b4f      	ldr	r3, [pc, #316]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x180>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ee:	4b4d      	ldr	r3, [pc, #308]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x180>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d028      	beq.n	800524c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x180>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	099b      	lsrs	r3, r3, #6
 8005200:	2200      	movs	r2, #0
 8005202:	623b      	str	r3, [r7, #32]
 8005204:	627a      	str	r2, [r7, #36]	@ 0x24
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800520c:	2100      	movs	r1, #0
 800520e:	4b47      	ldr	r3, [pc, #284]	@ (800532c <HAL_RCC_GetSysClockFreq+0x188>)
 8005210:	fb03 f201 	mul.w	r2, r3, r1
 8005214:	2300      	movs	r3, #0
 8005216:	fb00 f303 	mul.w	r3, r0, r3
 800521a:	4413      	add	r3, r2
 800521c:	4a43      	ldr	r2, [pc, #268]	@ (800532c <HAL_RCC_GetSysClockFreq+0x188>)
 800521e:	fba0 1202 	umull	r1, r2, r0, r2
 8005222:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005224:	460a      	mov	r2, r1
 8005226:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005228:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800522a:	4413      	add	r3, r2
 800522c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800522e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005230:	2200      	movs	r2, #0
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	61fa      	str	r2, [r7, #28]
 8005236:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800523a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800523e:	f7fb fcb5 	bl	8000bac <__aeabi_uldivmod>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4613      	mov	r3, r2
 8005248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800524a:	e053      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800524c:	4b35      	ldr	r3, [pc, #212]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x180>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	099b      	lsrs	r3, r3, #6
 8005252:	2200      	movs	r2, #0
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	617a      	str	r2, [r7, #20]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800525e:	f04f 0b00 	mov.w	fp, #0
 8005262:	4652      	mov	r2, sl
 8005264:	465b      	mov	r3, fp
 8005266:	f04f 0000 	mov.w	r0, #0
 800526a:	f04f 0100 	mov.w	r1, #0
 800526e:	0159      	lsls	r1, r3, #5
 8005270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005274:	0150      	lsls	r0, r2, #5
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	ebb2 080a 	subs.w	r8, r2, sl
 800527e:	eb63 090b 	sbc.w	r9, r3, fp
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	f04f 0300 	mov.w	r3, #0
 800528a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800528e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005292:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005296:	ebb2 0408 	subs.w	r4, r2, r8
 800529a:	eb63 0509 	sbc.w	r5, r3, r9
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	00eb      	lsls	r3, r5, #3
 80052a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ac:	00e2      	lsls	r2, r4, #3
 80052ae:	4614      	mov	r4, r2
 80052b0:	461d      	mov	r5, r3
 80052b2:	eb14 030a 	adds.w	r3, r4, sl
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	eb45 030b 	adc.w	r3, r5, fp
 80052bc:	607b      	str	r3, [r7, #4]
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052ca:	4629      	mov	r1, r5
 80052cc:	028b      	lsls	r3, r1, #10
 80052ce:	4621      	mov	r1, r4
 80052d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052d4:	4621      	mov	r1, r4
 80052d6:	028a      	lsls	r2, r1, #10
 80052d8:	4610      	mov	r0, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052de:	2200      	movs	r2, #0
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	60fa      	str	r2, [r7, #12]
 80052e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052e8:	f7fb fc60 	bl	8000bac <__aeabi_uldivmod>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4613      	mov	r3, r2
 80052f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x180>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	0c1b      	lsrs	r3, r3, #16
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	3301      	adds	r3, #1
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005304:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005308:	fbb2 f3f3 	udiv	r3, r2, r3
 800530c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800530e:	e002      	b.n	8005316 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005310:	4b05      	ldr	r3, [pc, #20]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x184>)
 8005312:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005318:	4618      	mov	r0, r3
 800531a:	3740      	adds	r7, #64	@ 0x40
 800531c:	46bd      	mov	sp, r7
 800531e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005322:	bf00      	nop
 8005324:	40023800 	.word	0x40023800
 8005328:	00f42400 	.word	0x00f42400
 800532c:	017d7840 	.word	0x017d7840

08005330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005334:	4b03      	ldr	r3, [pc, #12]	@ (8005344 <HAL_RCC_GetHCLKFreq+0x14>)
 8005336:	681b      	ldr	r3, [r3, #0]
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000004 	.word	0x20000004

08005348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800534c:	f7ff fff0 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 8005350:	4602      	mov	r2, r0
 8005352:	4b05      	ldr	r3, [pc, #20]	@ (8005368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	0a9b      	lsrs	r3, r3, #10
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	4903      	ldr	r1, [pc, #12]	@ (800536c <HAL_RCC_GetPCLK1Freq+0x24>)
 800535e:	5ccb      	ldrb	r3, [r1, r3]
 8005360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005364:	4618      	mov	r0, r3
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40023800 	.word	0x40023800
 800536c:	0800b360 	.word	0x0800b360

08005370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005374:	f7ff ffdc 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 8005378:	4602      	mov	r2, r0
 800537a:	4b05      	ldr	r3, [pc, #20]	@ (8005390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	0b5b      	lsrs	r3, r3, #13
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	4903      	ldr	r1, [pc, #12]	@ (8005394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005386:	5ccb      	ldrb	r3, [r1, r3]
 8005388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800538c:	4618      	mov	r0, r3
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40023800 	.word	0x40023800
 8005394:	0800b360 	.word	0x0800b360

08005398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e041      	b.n	800542e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fd fada 	bl	8002978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3304      	adds	r3, #4
 80053d4:	4619      	mov	r1, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	f000 fe6c 	bl	80060b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e041      	b.n	80054cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d106      	bne.n	8005462 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f839 	bl	80054d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2202      	movs	r2, #2
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3304      	adds	r3, #4
 8005472:	4619      	mov	r1, r3
 8005474:	4610      	mov	r0, r2
 8005476:	f000 fe1d 	bl	80060b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d109      	bne.n	800550c <HAL_TIM_PWM_Start+0x24>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b01      	cmp	r3, #1
 8005502:	bf14      	ite	ne
 8005504:	2301      	movne	r3, #1
 8005506:	2300      	moveq	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	e022      	b.n	8005552 <HAL_TIM_PWM_Start+0x6a>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b04      	cmp	r3, #4
 8005510:	d109      	bne.n	8005526 <HAL_TIM_PWM_Start+0x3e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b01      	cmp	r3, #1
 800551c:	bf14      	ite	ne
 800551e:	2301      	movne	r3, #1
 8005520:	2300      	moveq	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	e015      	b.n	8005552 <HAL_TIM_PWM_Start+0x6a>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b08      	cmp	r3, #8
 800552a:	d109      	bne.n	8005540 <HAL_TIM_PWM_Start+0x58>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	bf14      	ite	ne
 8005538:	2301      	movne	r3, #1
 800553a:	2300      	moveq	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e008      	b.n	8005552 <HAL_TIM_PWM_Start+0x6a>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b01      	cmp	r3, #1
 800554a:	bf14      	ite	ne
 800554c:	2301      	movne	r3, #1
 800554e:	2300      	moveq	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e07c      	b.n	8005654 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d104      	bne.n	800556a <HAL_TIM_PWM_Start+0x82>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005568:	e013      	b.n	8005592 <HAL_TIM_PWM_Start+0xaa>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b04      	cmp	r3, #4
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Start+0x92>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005578:	e00b      	b.n	8005592 <HAL_TIM_PWM_Start+0xaa>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b08      	cmp	r3, #8
 800557e:	d104      	bne.n	800558a <HAL_TIM_PWM_Start+0xa2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005588:	e003      	b.n	8005592 <HAL_TIM_PWM_Start+0xaa>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2201      	movs	r2, #1
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f001 f99e 	bl	80068dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a2d      	ldr	r2, [pc, #180]	@ (800565c <HAL_TIM_PWM_Start+0x174>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d004      	beq.n	80055b4 <HAL_TIM_PWM_Start+0xcc>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005660 <HAL_TIM_PWM_Start+0x178>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d101      	bne.n	80055b8 <HAL_TIM_PWM_Start+0xd0>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <HAL_TIM_PWM_Start+0xd2>
 80055b8:	2300      	movs	r3, #0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a22      	ldr	r2, [pc, #136]	@ (800565c <HAL_TIM_PWM_Start+0x174>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d022      	beq.n	800561e <HAL_TIM_PWM_Start+0x136>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e0:	d01d      	beq.n	800561e <HAL_TIM_PWM_Start+0x136>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005664 <HAL_TIM_PWM_Start+0x17c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d018      	beq.n	800561e <HAL_TIM_PWM_Start+0x136>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005668 <HAL_TIM_PWM_Start+0x180>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d013      	beq.n	800561e <HAL_TIM_PWM_Start+0x136>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a1c      	ldr	r2, [pc, #112]	@ (800566c <HAL_TIM_PWM_Start+0x184>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00e      	beq.n	800561e <HAL_TIM_PWM_Start+0x136>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a16      	ldr	r2, [pc, #88]	@ (8005660 <HAL_TIM_PWM_Start+0x178>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d009      	beq.n	800561e <HAL_TIM_PWM_Start+0x136>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a18      	ldr	r2, [pc, #96]	@ (8005670 <HAL_TIM_PWM_Start+0x188>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d004      	beq.n	800561e <HAL_TIM_PWM_Start+0x136>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a16      	ldr	r2, [pc, #88]	@ (8005674 <HAL_TIM_PWM_Start+0x18c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d111      	bne.n	8005642 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b06      	cmp	r3, #6
 800562e:	d010      	beq.n	8005652 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005640:	e007      	b.n	8005652 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0201 	orr.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40010000 	.word	0x40010000
 8005660:	40010400 	.word	0x40010400
 8005664:	40000400 	.word	0x40000400
 8005668:	40000800 	.word	0x40000800
 800566c:	40000c00 	.word	0x40000c00
 8005670:	40014000 	.word	0x40014000
 8005674:	40001800 	.word	0x40001800

08005678 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e041      	b.n	800570e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fd fa7a 	bl	8002b98 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3304      	adds	r3, #4
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f000 fcfc 	bl	80060b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b086      	sub	sp, #24
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e097      	b.n	800585a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fd f990 	bl	8002a64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6812      	ldr	r2, [r2, #0]
 8005756:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800575a:	f023 0307 	bic.w	r3, r3, #7
 800575e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	4619      	mov	r1, r3
 800576a:	4610      	mov	r0, r2
 800576c:	f000 fca2 	bl	80060b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005798:	f023 0303 	bic.w	r3, r3, #3
 800579c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	4313      	orrs	r3, r2
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80057b6:	f023 030c 	bic.w	r3, r3, #12
 80057ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	021b      	lsls	r3, r3, #8
 80057d2:	4313      	orrs	r3, r2
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	011a      	lsls	r2, r3, #4
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	031b      	lsls	r3, r3, #12
 80057e6:	4313      	orrs	r3, r2
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80057f4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80057fc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	4313      	orrs	r3, r2
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b084      	sub	sp, #16
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005872:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800587a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005882:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800588a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d110      	bne.n	80058b4 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d102      	bne.n	800589e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005898:	7b7b      	ldrb	r3, [r7, #13]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d001      	beq.n	80058a2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e069      	b.n	8005976 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2202      	movs	r2, #2
 80058a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058b2:	e031      	b.n	8005918 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d110      	bne.n	80058dc <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058ba:	7bbb      	ldrb	r3, [r7, #14]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d102      	bne.n	80058c6 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058c0:	7b3b      	ldrb	r3, [r7, #12]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d001      	beq.n	80058ca <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e055      	b.n	8005976 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2202      	movs	r2, #2
 80058ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058da:	e01d      	b.n	8005918 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d108      	bne.n	80058f4 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058e2:	7bbb      	ldrb	r3, [r7, #14]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d105      	bne.n	80058f4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058e8:	7b7b      	ldrb	r3, [r7, #13]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d102      	bne.n	80058f4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058ee:	7b3b      	ldrb	r3, [r7, #12]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d001      	beq.n	80058f8 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e03e      	b.n	8005976 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_TIM_Encoder_Start+0xc4>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b04      	cmp	r3, #4
 8005922:	d008      	beq.n	8005936 <HAL_TIM_Encoder_Start+0xd4>
 8005924:	e00f      	b.n	8005946 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2201      	movs	r2, #1
 800592c:	2100      	movs	r1, #0
 800592e:	4618      	mov	r0, r3
 8005930:	f000 ffd4 	bl	80068dc <TIM_CCxChannelCmd>
      break;
 8005934:	e016      	b.n	8005964 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2201      	movs	r2, #1
 800593c:	2104      	movs	r1, #4
 800593e:	4618      	mov	r0, r3
 8005940:	f000 ffcc 	bl	80068dc <TIM_CCxChannelCmd>
      break;
 8005944:	e00e      	b.n	8005964 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2201      	movs	r2, #1
 800594c:	2100      	movs	r1, #0
 800594e:	4618      	mov	r0, r3
 8005950:	f000 ffc4 	bl	80068dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2201      	movs	r2, #1
 800595a:	2104      	movs	r1, #4
 800595c:	4618      	mov	r0, r3
 800595e:	f000 ffbd 	bl	80068dc <TIM_CCxChannelCmd>
      break;
 8005962:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b02      	cmp	r3, #2
 8005992:	d122      	bne.n	80059da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d11b      	bne.n	80059da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f06f 0202 	mvn.w	r2, #2
 80059aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f003 0303 	and.w	r3, r3, #3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7fb fee9 	bl	8001798 <HAL_TIM_IC_CaptureCallback>
 80059c6:	e005      	b.n	80059d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fb55 	bl	8006078 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fb5c 	bl	800608c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d122      	bne.n	8005a2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d11b      	bne.n	8005a2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f06f 0204 	mvn.w	r2, #4
 80059fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7fb febf 	bl	8001798 <HAL_TIM_IC_CaptureCallback>
 8005a1a:	e005      	b.n	8005a28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fb2b 	bl	8006078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fb32 	bl	800608c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d122      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d11b      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f06f 0208 	mvn.w	r2, #8
 8005a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2204      	movs	r2, #4
 8005a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7fb fe95 	bl	8001798 <HAL_TIM_IC_CaptureCallback>
 8005a6e:	e005      	b.n	8005a7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fb01 	bl	8006078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fb08 	bl	800608c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0310 	and.w	r3, r3, #16
 8005a8c:	2b10      	cmp	r3, #16
 8005a8e:	d122      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b10      	cmp	r3, #16
 8005a9c:	d11b      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f06f 0210 	mvn.w	r2, #16
 8005aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2208      	movs	r2, #8
 8005aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7fb fe6b 	bl	8001798 <HAL_TIM_IC_CaptureCallback>
 8005ac2:	e005      	b.n	8005ad0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fad7 	bl	8006078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fade 	bl	800608c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d10e      	bne.n	8005b02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d107      	bne.n	8005b02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f06f 0201 	mvn.w	r2, #1
 8005afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fab1 	bl	8006064 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0c:	2b80      	cmp	r3, #128	@ 0x80
 8005b0e:	d10e      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1a:	2b80      	cmp	r3, #128	@ 0x80
 8005b1c:	d107      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 ffd5 	bl	8006ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b38:	2b40      	cmp	r3, #64	@ 0x40
 8005b3a:	d10e      	bne.n	8005b5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b46:	2b40      	cmp	r3, #64	@ 0x40
 8005b48:	d107      	bne.n	8005b5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 faa3 	bl	80060a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d10e      	bne.n	8005b86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d107      	bne.n	8005b86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f06f 0220 	mvn.w	r2, #32
 8005b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 ff9f 	bl	8006ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b86:	bf00      	nop
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b086      	sub	sp, #24
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_TIM_IC_ConfigChannel+0x1e>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e088      	b.n	8005cbe <HAL_TIM_IC_ConfigChannel+0x130>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d11b      	bne.n	8005bf2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	6819      	ldr	r1, [r3, #0]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f000 fcc3 	bl	8006554 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	699a      	ldr	r2, [r3, #24]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 020c 	bic.w	r2, r2, #12
 8005bdc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6999      	ldr	r1, [r3, #24]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	619a      	str	r2, [r3, #24]
 8005bf0:	e060      	b.n	8005cb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d11c      	bne.n	8005c32 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	6819      	ldr	r1, [r3, #0]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f000 fd47 	bl	800669a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c1a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6999      	ldr	r1, [r3, #24]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	021a      	lsls	r2, r3, #8
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	619a      	str	r2, [r3, #24]
 8005c30:	e040      	b.n	8005cb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d11b      	bne.n	8005c70 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	6819      	ldr	r1, [r3, #0]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f000 fd94 	bl	8006774 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69da      	ldr	r2, [r3, #28]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 020c 	bic.w	r2, r2, #12
 8005c5a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	69d9      	ldr	r1, [r3, #28]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	61da      	str	r2, [r3, #28]
 8005c6e:	e021      	b.n	8005cb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b0c      	cmp	r3, #12
 8005c74:	d11c      	bne.n	8005cb0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	6819      	ldr	r1, [r3, #0]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f000 fdb1 	bl	80067ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c98:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69d9      	ldr	r1, [r3, #28]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	021a      	lsls	r2, r3, #8
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	61da      	str	r2, [r3, #28]
 8005cae:	e001      	b.n	8005cb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d101      	bne.n	8005ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	e0ae      	b.n	8005e44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b0c      	cmp	r3, #12
 8005cf2:	f200 809f 	bhi.w	8005e34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005d31 	.word	0x08005d31
 8005d00:	08005e35 	.word	0x08005e35
 8005d04:	08005e35 	.word	0x08005e35
 8005d08:	08005e35 	.word	0x08005e35
 8005d0c:	08005d71 	.word	0x08005d71
 8005d10:	08005e35 	.word	0x08005e35
 8005d14:	08005e35 	.word	0x08005e35
 8005d18:	08005e35 	.word	0x08005e35
 8005d1c:	08005db3 	.word	0x08005db3
 8005d20:	08005e35 	.word	0x08005e35
 8005d24:	08005e35 	.word	0x08005e35
 8005d28:	08005e35 	.word	0x08005e35
 8005d2c:	08005df3 	.word	0x08005df3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fa5c 	bl	80061f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0208 	orr.w	r2, r2, #8
 8005d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699a      	ldr	r2, [r3, #24]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0204 	bic.w	r2, r2, #4
 8005d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6999      	ldr	r1, [r3, #24]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	619a      	str	r2, [r3, #24]
      break;
 8005d6e:	e064      	b.n	8005e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 faac 	bl	80062d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6999      	ldr	r1, [r3, #24]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	021a      	lsls	r2, r3, #8
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	619a      	str	r2, [r3, #24]
      break;
 8005db0:	e043      	b.n	8005e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68b9      	ldr	r1, [r7, #8]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fb01 	bl	80063c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0208 	orr.w	r2, r2, #8
 8005dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69da      	ldr	r2, [r3, #28]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0204 	bic.w	r2, r2, #4
 8005ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69d9      	ldr	r1, [r3, #28]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	61da      	str	r2, [r3, #28]
      break;
 8005df0:	e023      	b.n	8005e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fb55 	bl	80064a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69d9      	ldr	r1, [r3, #28]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	021a      	lsls	r2, r3, #8
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	61da      	str	r2, [r3, #28]
      break;
 8005e32:	e002      	b.n	8005e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	75fb      	strb	r3, [r7, #23]
      break;
 8005e38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_TIM_ConfigClockSource+0x1c>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e0b4      	b.n	8005fd2 <HAL_TIM_ConfigClockSource+0x186>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ea0:	d03e      	beq.n	8005f20 <HAL_TIM_ConfigClockSource+0xd4>
 8005ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ea6:	f200 8087 	bhi.w	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eae:	f000 8086 	beq.w	8005fbe <HAL_TIM_ConfigClockSource+0x172>
 8005eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb6:	d87f      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb8:	2b70      	cmp	r3, #112	@ 0x70
 8005eba:	d01a      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0xa6>
 8005ebc:	2b70      	cmp	r3, #112	@ 0x70
 8005ebe:	d87b      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec0:	2b60      	cmp	r3, #96	@ 0x60
 8005ec2:	d050      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0x11a>
 8005ec4:	2b60      	cmp	r3, #96	@ 0x60
 8005ec6:	d877      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec8:	2b50      	cmp	r3, #80	@ 0x50
 8005eca:	d03c      	beq.n	8005f46 <HAL_TIM_ConfigClockSource+0xfa>
 8005ecc:	2b50      	cmp	r3, #80	@ 0x50
 8005ece:	d873      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed0:	2b40      	cmp	r3, #64	@ 0x40
 8005ed2:	d058      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0x13a>
 8005ed4:	2b40      	cmp	r3, #64	@ 0x40
 8005ed6:	d86f      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed8:	2b30      	cmp	r3, #48	@ 0x30
 8005eda:	d064      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8005edc:	2b30      	cmp	r3, #48	@ 0x30
 8005ede:	d86b      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee0:	2b20      	cmp	r3, #32
 8005ee2:	d060      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	d867      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d05c      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8005eec:	2b10      	cmp	r3, #16
 8005eee:	d05a      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8005ef0:	e062      	b.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6818      	ldr	r0, [r3, #0]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6899      	ldr	r1, [r3, #8]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f000 fccb 	bl	800689c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	609a      	str	r2, [r3, #8]
      break;
 8005f1e:	e04f      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	6899      	ldr	r1, [r3, #8]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f000 fcb4 	bl	800689c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f42:	609a      	str	r2, [r3, #8]
      break;
 8005f44:	e03c      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	6859      	ldr	r1, [r3, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	461a      	mov	r2, r3
 8005f54:	f000 fb72 	bl	800663c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2150      	movs	r1, #80	@ 0x50
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fc81 	bl	8006866 <TIM_ITRx_SetConfig>
      break;
 8005f64:	e02c      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	6859      	ldr	r1, [r3, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	461a      	mov	r2, r3
 8005f74:	f000 fbce 	bl	8006714 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2160      	movs	r1, #96	@ 0x60
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 fc71 	bl	8006866 <TIM_ITRx_SetConfig>
      break;
 8005f84:	e01c      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	6859      	ldr	r1, [r3, #4]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	461a      	mov	r2, r3
 8005f94:	f000 fb52 	bl	800663c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2140      	movs	r1, #64	@ 0x40
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fc61 	bl	8006866 <TIM_ITRx_SetConfig>
      break;
 8005fa4:	e00c      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	f000 fc58 	bl	8006866 <TIM_ITRx_SetConfig>
      break;
 8005fb6:	e003      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	73fb      	strb	r3, [r7, #15]
      break;
 8005fbc:	e000      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b0c      	cmp	r3, #12
 8005fee:	d831      	bhi.n	8006054 <HAL_TIM_ReadCapturedValue+0x78>
 8005ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff6:	bf00      	nop
 8005ff8:	0800602d 	.word	0x0800602d
 8005ffc:	08006055 	.word	0x08006055
 8006000:	08006055 	.word	0x08006055
 8006004:	08006055 	.word	0x08006055
 8006008:	08006037 	.word	0x08006037
 800600c:	08006055 	.word	0x08006055
 8006010:	08006055 	.word	0x08006055
 8006014:	08006055 	.word	0x08006055
 8006018:	08006041 	.word	0x08006041
 800601c:	08006055 	.word	0x08006055
 8006020:	08006055 	.word	0x08006055
 8006024:	08006055 	.word	0x08006055
 8006028:	0800604b 	.word	0x0800604b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006032:	60fb      	str	r3, [r7, #12]

      break;
 8006034:	e00f      	b.n	8006056 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603c:	60fb      	str	r3, [r7, #12]

      break;
 800603e:	e00a      	b.n	8006056 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006046:	60fb      	str	r3, [r7, #12]

      break;
 8006048:	e005      	b.n	8006056 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006050:	60fb      	str	r3, [r7, #12]

      break;
 8006052:	e000      	b.n	8006056 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006054:	bf00      	nop
  }

  return tmpreg;
 8006056:	68fb      	ldr	r3, [r7, #12]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a40      	ldr	r2, [pc, #256]	@ (80061c8 <TIM_Base_SetConfig+0x114>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <TIM_Base_SetConfig+0x40>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060d2:	d00f      	beq.n	80060f4 <TIM_Base_SetConfig+0x40>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a3d      	ldr	r2, [pc, #244]	@ (80061cc <TIM_Base_SetConfig+0x118>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00b      	beq.n	80060f4 <TIM_Base_SetConfig+0x40>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a3c      	ldr	r2, [pc, #240]	@ (80061d0 <TIM_Base_SetConfig+0x11c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d007      	beq.n	80060f4 <TIM_Base_SetConfig+0x40>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a3b      	ldr	r2, [pc, #236]	@ (80061d4 <TIM_Base_SetConfig+0x120>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d003      	beq.n	80060f4 <TIM_Base_SetConfig+0x40>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a3a      	ldr	r2, [pc, #232]	@ (80061d8 <TIM_Base_SetConfig+0x124>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d108      	bne.n	8006106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a2f      	ldr	r2, [pc, #188]	@ (80061c8 <TIM_Base_SetConfig+0x114>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d02b      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006114:	d027      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a2c      	ldr	r2, [pc, #176]	@ (80061cc <TIM_Base_SetConfig+0x118>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d023      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a2b      	ldr	r2, [pc, #172]	@ (80061d0 <TIM_Base_SetConfig+0x11c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d01f      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a2a      	ldr	r2, [pc, #168]	@ (80061d4 <TIM_Base_SetConfig+0x120>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d01b      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a29      	ldr	r2, [pc, #164]	@ (80061d8 <TIM_Base_SetConfig+0x124>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d017      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a28      	ldr	r2, [pc, #160]	@ (80061dc <TIM_Base_SetConfig+0x128>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d013      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a27      	ldr	r2, [pc, #156]	@ (80061e0 <TIM_Base_SetConfig+0x12c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00f      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a26      	ldr	r2, [pc, #152]	@ (80061e4 <TIM_Base_SetConfig+0x130>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00b      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a25      	ldr	r2, [pc, #148]	@ (80061e8 <TIM_Base_SetConfig+0x134>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d007      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a24      	ldr	r2, [pc, #144]	@ (80061ec <TIM_Base_SetConfig+0x138>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d003      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a23      	ldr	r2, [pc, #140]	@ (80061f0 <TIM_Base_SetConfig+0x13c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d108      	bne.n	8006178 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800616c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a0a      	ldr	r2, [pc, #40]	@ (80061c8 <TIM_Base_SetConfig+0x114>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_Base_SetConfig+0xf8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a0c      	ldr	r2, [pc, #48]	@ (80061d8 <TIM_Base_SetConfig+0x124>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d103      	bne.n	80061b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	691a      	ldr	r2, [r3, #16]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	615a      	str	r2, [r3, #20]
}
 80061ba:	bf00      	nop
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40010000 	.word	0x40010000
 80061cc:	40000400 	.word	0x40000400
 80061d0:	40000800 	.word	0x40000800
 80061d4:	40000c00 	.word	0x40000c00
 80061d8:	40010400 	.word	0x40010400
 80061dc:	40014000 	.word	0x40014000
 80061e0:	40014400 	.word	0x40014400
 80061e4:	40014800 	.word	0x40014800
 80061e8:	40001800 	.word	0x40001800
 80061ec:	40001c00 	.word	0x40001c00
 80061f0:	40002000 	.word	0x40002000

080061f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f023 0201 	bic.w	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 0303 	bic.w	r3, r3, #3
 800622a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f023 0302 	bic.w	r3, r3, #2
 800623c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	4313      	orrs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a20      	ldr	r2, [pc, #128]	@ (80062cc <TIM_OC1_SetConfig+0xd8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_OC1_SetConfig+0x64>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a1f      	ldr	r2, [pc, #124]	@ (80062d0 <TIM_OC1_SetConfig+0xdc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d10c      	bne.n	8006272 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f023 0308 	bic.w	r3, r3, #8
 800625e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f023 0304 	bic.w	r3, r3, #4
 8006270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a15      	ldr	r2, [pc, #84]	@ (80062cc <TIM_OC1_SetConfig+0xd8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_OC1_SetConfig+0x8e>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a14      	ldr	r2, [pc, #80]	@ (80062d0 <TIM_OC1_SetConfig+0xdc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d111      	bne.n	80062a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	621a      	str	r2, [r3, #32]
}
 80062c0:	bf00      	nop
 80062c2:	371c      	adds	r7, #28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40010400 	.word	0x40010400

080062d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f023 0210 	bic.w	r2, r3, #16
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800630a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	021b      	lsls	r3, r3, #8
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f023 0320 	bic.w	r3, r3, #32
 800631e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	011b      	lsls	r3, r3, #4
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a22      	ldr	r2, [pc, #136]	@ (80063b8 <TIM_OC2_SetConfig+0xe4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_OC2_SetConfig+0x68>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a21      	ldr	r2, [pc, #132]	@ (80063bc <TIM_OC2_SetConfig+0xe8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d10d      	bne.n	8006358 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	4313      	orrs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a17      	ldr	r2, [pc, #92]	@ (80063b8 <TIM_OC2_SetConfig+0xe4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d003      	beq.n	8006368 <TIM_OC2_SetConfig+0x94>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a16      	ldr	r2, [pc, #88]	@ (80063bc <TIM_OC2_SetConfig+0xe8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d113      	bne.n	8006390 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800636e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	4313      	orrs	r3, r2
 8006382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40010000 	.word	0x40010000
 80063bc:	40010400 	.word	0x40010400

080063c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 0303 	bic.w	r3, r3, #3
 80063f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	021b      	lsls	r3, r3, #8
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a21      	ldr	r2, [pc, #132]	@ (80064a0 <TIM_OC3_SetConfig+0xe0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d003      	beq.n	8006426 <TIM_OC3_SetConfig+0x66>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a20      	ldr	r2, [pc, #128]	@ (80064a4 <TIM_OC3_SetConfig+0xe4>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d10d      	bne.n	8006442 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800642c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	021b      	lsls	r3, r3, #8
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	4313      	orrs	r3, r2
 8006438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a16      	ldr	r2, [pc, #88]	@ (80064a0 <TIM_OC3_SetConfig+0xe0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d003      	beq.n	8006452 <TIM_OC3_SetConfig+0x92>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a15      	ldr	r2, [pc, #84]	@ (80064a4 <TIM_OC3_SetConfig+0xe4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d113      	bne.n	800647a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	621a      	str	r2, [r3, #32]
}
 8006494:	bf00      	nop
 8006496:	371c      	adds	r7, #28
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	40010000 	.word	0x40010000
 80064a4:	40010400 	.word	0x40010400

080064a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	021b      	lsls	r3, r3, #8
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	031b      	lsls	r3, r3, #12
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a12      	ldr	r2, [pc, #72]	@ (800654c <TIM_OC4_SetConfig+0xa4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_OC4_SetConfig+0x68>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a11      	ldr	r2, [pc, #68]	@ (8006550 <TIM_OC4_SetConfig+0xa8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d109      	bne.n	8006524 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006516:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	019b      	lsls	r3, r3, #6
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40010000 	.word	0x40010000
 8006550:	40010400 	.word	0x40010400

08006554 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	f023 0201 	bic.w	r2, r3, #1
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4a28      	ldr	r2, [pc, #160]	@ (8006620 <TIM_TI1_SetConfig+0xcc>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d01b      	beq.n	80065ba <TIM_TI1_SetConfig+0x66>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006588:	d017      	beq.n	80065ba <TIM_TI1_SetConfig+0x66>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4a25      	ldr	r2, [pc, #148]	@ (8006624 <TIM_TI1_SetConfig+0xd0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d013      	beq.n	80065ba <TIM_TI1_SetConfig+0x66>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4a24      	ldr	r2, [pc, #144]	@ (8006628 <TIM_TI1_SetConfig+0xd4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00f      	beq.n	80065ba <TIM_TI1_SetConfig+0x66>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4a23      	ldr	r2, [pc, #140]	@ (800662c <TIM_TI1_SetConfig+0xd8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00b      	beq.n	80065ba <TIM_TI1_SetConfig+0x66>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4a22      	ldr	r2, [pc, #136]	@ (8006630 <TIM_TI1_SetConfig+0xdc>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d007      	beq.n	80065ba <TIM_TI1_SetConfig+0x66>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4a21      	ldr	r2, [pc, #132]	@ (8006634 <TIM_TI1_SetConfig+0xe0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d003      	beq.n	80065ba <TIM_TI1_SetConfig+0x66>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4a20      	ldr	r2, [pc, #128]	@ (8006638 <TIM_TI1_SetConfig+0xe4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d101      	bne.n	80065be <TIM_TI1_SetConfig+0x6a>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <TIM_TI1_SetConfig+0x6c>
 80065be:	2300      	movs	r3, #0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d008      	beq.n	80065d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 0303 	bic.w	r3, r3, #3
 80065ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	e003      	b.n	80065de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f043 0301 	orr.w	r3, r3, #1
 80065dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f023 030a 	bic.w	r3, r3, #10
 80065f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f003 030a 	and.w	r3, r3, #10
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40010000 	.word	0x40010000
 8006624:	40000400 	.word	0x40000400
 8006628:	40000800 	.word	0x40000800
 800662c:	40000c00 	.word	0x40000c00
 8006630:	40010400 	.word	0x40010400
 8006634:	40014000 	.word	0x40014000
 8006638:	40001800 	.word	0x40001800

0800663c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f023 0201 	bic.w	r2, r3, #1
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f023 030a 	bic.w	r3, r3, #10
 8006678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	621a      	str	r2, [r3, #32]
}
 800668e:	bf00      	nop
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800669a:	b480      	push	{r7}
 800669c:	b087      	sub	sp, #28
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	60b9      	str	r1, [r7, #8]
 80066a4:	607a      	str	r2, [r7, #4]
 80066a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	f023 0210 	bic.w	r2, r3, #16
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	021b      	lsls	r3, r3, #8
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	031b      	lsls	r3, r3, #12
 80066de:	b29b      	uxth	r3, r3
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	621a      	str	r2, [r3, #32]
}
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f023 0210 	bic.w	r2, r3, #16
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800673e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	031b      	lsls	r3, r3, #12
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006750:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	621a      	str	r2, [r3, #32]
}
 8006768:	bf00      	nop
 800676a:	371c      	adds	r7, #28
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f023 0303 	bic.w	r3, r3, #3
 80067a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80067c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	021b      	lsls	r3, r3, #8
 80067ca:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	621a      	str	r2, [r3, #32]
}
 80067e0:	bf00      	nop
 80067e2:	371c      	adds	r7, #28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006818:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	021b      	lsls	r3, r3, #8
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800682a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	031b      	lsls	r3, r3, #12
 8006830:	b29b      	uxth	r3, r3
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800683e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	031b      	lsls	r3, r3, #12
 8006844:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	621a      	str	r2, [r3, #32]
}
 800685a:	bf00      	nop
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800687c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	f043 0307 	orr.w	r3, r3, #7
 8006888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	609a      	str	r2, [r3, #8]
}
 8006890:	bf00      	nop
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	021a      	lsls	r2, r3, #8
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	431a      	orrs	r2, r3
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	609a      	str	r2, [r3, #8]
}
 80068d0:	bf00      	nop
 80068d2:	371c      	adds	r7, #28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f003 031f 	and.w	r3, r3, #31
 80068ee:	2201      	movs	r2, #1
 80068f0:	fa02 f303 	lsl.w	r3, r2, r3
 80068f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1a      	ldr	r2, [r3, #32]
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	43db      	mvns	r3, r3
 80068fe:	401a      	ands	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a1a      	ldr	r2, [r3, #32]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f003 031f 	and.w	r3, r3, #31
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	fa01 f303 	lsl.w	r3, r1, r3
 8006914:	431a      	orrs	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	621a      	str	r2, [r3, #32]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006938:	2b01      	cmp	r3, #1
 800693a:	d101      	bne.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800693c:	2302      	movs	r3, #2
 800693e:	e05a      	b.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a21      	ldr	r2, [pc, #132]	@ (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d022      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800698c:	d01d      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1d      	ldr	r2, [pc, #116]	@ (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d018      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a1b      	ldr	r2, [pc, #108]	@ (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d013      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00e      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a18      	ldr	r2, [pc, #96]	@ (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d009      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a17      	ldr	r2, [pc, #92]	@ (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d004      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a15      	ldr	r2, [pc, #84]	@ (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d10c      	bne.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40010000 	.word	0x40010000
 8006a08:	40000400 	.word	0x40000400
 8006a0c:	40000800 	.word	0x40000800
 8006a10:	40000c00 	.word	0x40000c00
 8006a14:	40010400 	.word	0x40010400
 8006a18:	40014000 	.word	0x40014000
 8006a1c:	40001800 	.word	0x40001800

08006a20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e03d      	b.n	8006ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e03f      	b.n	8006b7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fc f8ca 	bl	8002cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2224      	movs	r2, #36	@ 0x24
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fddf 	bl	80076f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	691a      	ldr	r2, [r3, #16]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695a      	ldr	r2, [r3, #20]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b08a      	sub	sp, #40	@ 0x28
 8006b8a:	af02      	add	r7, sp, #8
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	603b      	str	r3, [r7, #0]
 8006b92:	4613      	mov	r3, r2
 8006b94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	d17c      	bne.n	8006ca0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <HAL_UART_Transmit+0x2c>
 8006bac:	88fb      	ldrh	r3, [r7, #6]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e075      	b.n	8006ca2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d101      	bne.n	8006bc4 <HAL_UART_Transmit+0x3e>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e06e      	b.n	8006ca2 <HAL_UART_Transmit+0x11c>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2221      	movs	r2, #33	@ 0x21
 8006bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bda:	f7fc fc23 	bl	8003424 <HAL_GetTick>
 8006bde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	88fa      	ldrh	r2, [r7, #6]
 8006be4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	88fa      	ldrh	r2, [r7, #6]
 8006bea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bf4:	d108      	bne.n	8006c08 <HAL_UART_Transmit+0x82>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d104      	bne.n	8006c08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	61bb      	str	r3, [r7, #24]
 8006c06:	e003      	b.n	8006c10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8006c18:	e02a      	b.n	8006c70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2200      	movs	r2, #0
 8006c22:	2180      	movs	r1, #128	@ 0x80
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 fb1f 	bl	8007268 <UART_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e036      	b.n	8006ca2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10b      	bne.n	8006c52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	3302      	adds	r3, #2
 8006c4e:	61bb      	str	r3, [r7, #24]
 8006c50:	e007      	b.n	8006c62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	781a      	ldrb	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1cf      	bne.n	8006c1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2200      	movs	r2, #0
 8006c82:	2140      	movs	r1, #64	@ 0x40
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 faef 	bl	8007268 <UART_WaitOnFlagUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e006      	b.n	8006ca2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	e000      	b.n	8006ca2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ca0:	2302      	movs	r3, #2
  }
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b20      	cmp	r3, #32
 8006cc2:	d11d      	bne.n	8006d00 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <HAL_UART_Receive_IT+0x26>
 8006cca:	88fb      	ldrh	r3, [r7, #6]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e016      	b.n	8006d02 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_UART_Receive_IT+0x38>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e00f      	b.n	8006d02 <HAL_UART_Receive_IT+0x58>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006cf0:	88fb      	ldrh	r3, [r7, #6]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	68b9      	ldr	r1, [r7, #8]
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 fb24 	bl	8007344 <UART_Start_Receive_IT>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	e000      	b.n	8006d02 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006d00:	2302      	movs	r3, #2
  }
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b0ba      	sub	sp, #232	@ 0xe8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d42:	f003 030f 	and.w	r3, r3, #15
 8006d46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10f      	bne.n	8006d72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d009      	beq.n	8006d72 <HAL_UART_IRQHandler+0x66>
 8006d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d62:	f003 0320 	and.w	r3, r3, #32
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fc07 	bl	800757e <UART_Receive_IT>
      return;
 8006d70:	e256      	b.n	8007220 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 80de 	beq.w	8006f38 <HAL_UART_IRQHandler+0x22c>
 8006d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d106      	bne.n	8006d96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 80d1 	beq.w	8006f38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00b      	beq.n	8006dba <HAL_UART_IRQHandler+0xae>
 8006da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d005      	beq.n	8006dba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db2:	f043 0201 	orr.w	r2, r3, #1
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dbe:	f003 0304 	and.w	r3, r3, #4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00b      	beq.n	8006dde <HAL_UART_IRQHandler+0xd2>
 8006dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d005      	beq.n	8006dde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd6:	f043 0202 	orr.w	r2, r3, #2
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00b      	beq.n	8006e02 <HAL_UART_IRQHandler+0xf6>
 8006dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfa:	f043 0204 	orr.w	r2, r3, #4
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d011      	beq.n	8006e32 <HAL_UART_IRQHandler+0x126>
 8006e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d105      	bne.n	8006e26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2a:	f043 0208 	orr.w	r2, r3, #8
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 81ed 	beq.w	8007216 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d008      	beq.n	8006e5a <HAL_UART_IRQHandler+0x14e>
 8006e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e4c:	f003 0320 	and.w	r3, r3, #32
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fb92 	bl	800757e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e64:	2b40      	cmp	r3, #64	@ 0x40
 8006e66:	bf0c      	ite	eq
 8006e68:	2301      	moveq	r3, #1
 8006e6a:	2300      	movne	r3, #0
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e76:	f003 0308 	and.w	r3, r3, #8
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d103      	bne.n	8006e86 <HAL_UART_IRQHandler+0x17a>
 8006e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d04f      	beq.n	8006f26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fa9a 	bl	80073c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e96:	2b40      	cmp	r3, #64	@ 0x40
 8006e98:	d141      	bne.n	8006f1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3314      	adds	r3, #20
 8006ea0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006eb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3314      	adds	r3, #20
 8006ec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ec6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006eca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1d9      	bne.n	8006e9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d013      	beq.n	8006f16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef2:	4a7d      	ldr	r2, [pc, #500]	@ (80070e8 <HAL_UART_IRQHandler+0x3dc>)
 8006ef4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fc fc43 	bl	8003786 <HAL_DMA_Abort_IT>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d016      	beq.n	8006f34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f10:	4610      	mov	r0, r2
 8006f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f14:	e00e      	b.n	8006f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f990 	bl	800723c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1c:	e00a      	b.n	8006f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f98c 	bl	800723c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f24:	e006      	b.n	8006f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f988 	bl	800723c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006f32:	e170      	b.n	8007216 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f34:	bf00      	nop
    return;
 8006f36:	e16e      	b.n	8007216 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	f040 814a 	bne.w	80071d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f46:	f003 0310 	and.w	r3, r3, #16
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 8143 	beq.w	80071d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f54:	f003 0310 	and.w	r3, r3, #16
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 813c 	beq.w	80071d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60bb      	str	r3, [r7, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	60bb      	str	r3, [r7, #8]
 8006f72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f7e:	2b40      	cmp	r3, #64	@ 0x40
 8006f80:	f040 80b4 	bne.w	80070ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8140 	beq.w	800721a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	f080 8139 	bcs.w	800721a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fba:	f000 8088 	beq.w	80070ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	330c      	adds	r3, #12
 8006fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006fea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ff6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007002:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1d9      	bne.n	8006fbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3314      	adds	r3, #20
 8007010:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007012:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007014:	e853 3f00 	ldrex	r3, [r3]
 8007018:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800701a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3314      	adds	r3, #20
 800702a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800702e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007032:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007034:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007036:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007040:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e1      	bne.n	800700a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3314      	adds	r3, #20
 800704c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007058:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800705c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3314      	adds	r3, #20
 8007066:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800706a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800706c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007070:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007078:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e3      	bne.n	8007046 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2220      	movs	r2, #32
 8007082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	330c      	adds	r3, #12
 8007092:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007096:	e853 3f00 	ldrex	r3, [r3]
 800709a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800709c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800709e:	f023 0310 	bic.w	r3, r3, #16
 80070a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	330c      	adds	r3, #12
 80070ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80070b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80070b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80070be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e3      	bne.n	800708c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fc faec 	bl	80036a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	b29b      	uxth	r3, r3
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f8b6 	bl	8007250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070e4:	e099      	b.n	800721a <HAL_UART_IRQHandler+0x50e>
 80070e6:	bf00      	nop
 80070e8:	08007487 	.word	0x08007487
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007100:	b29b      	uxth	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 808b 	beq.w	800721e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007108:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 8086 	beq.w	800721e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	330c      	adds	r3, #12
 8007118:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007124:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007128:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	330c      	adds	r3, #12
 8007132:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007136:	647a      	str	r2, [r7, #68]	@ 0x44
 8007138:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800713c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e3      	bne.n	8007112 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3314      	adds	r3, #20
 8007150:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	623b      	str	r3, [r7, #32]
   return(result);
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	f023 0301 	bic.w	r3, r3, #1
 8007160:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3314      	adds	r3, #20
 800716a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800716e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007170:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e3      	bne.n	800714a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	330c      	adds	r3, #12
 8007196:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	e853 3f00 	ldrex	r3, [r3]
 800719e:	60fb      	str	r3, [r7, #12]
   return(result);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0310 	bic.w	r3, r3, #16
 80071a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	330c      	adds	r3, #12
 80071b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80071b4:	61fa      	str	r2, [r7, #28]
 80071b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	69b9      	ldr	r1, [r7, #24]
 80071ba:	69fa      	ldr	r2, [r7, #28]
 80071bc:	e841 2300 	strex	r3, r2, [r1]
 80071c0:	617b      	str	r3, [r7, #20]
   return(result);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e3      	bne.n	8007190 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f83e 	bl	8007250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071d4:	e023      	b.n	800721e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d009      	beq.n	80071f6 <HAL_UART_IRQHandler+0x4ea>
 80071e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f95d 	bl	80074ae <UART_Transmit_IT>
    return;
 80071f4:	e014      	b.n	8007220 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00e      	beq.n	8007220 <HAL_UART_IRQHandler+0x514>
 8007202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d008      	beq.n	8007220 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f99d 	bl	800754e <UART_EndTransmit_IT>
    return;
 8007214:	e004      	b.n	8007220 <HAL_UART_IRQHandler+0x514>
    return;
 8007216:	bf00      	nop
 8007218:	e002      	b.n	8007220 <HAL_UART_IRQHandler+0x514>
      return;
 800721a:	bf00      	nop
 800721c:	e000      	b.n	8007220 <HAL_UART_IRQHandler+0x514>
      return;
 800721e:	bf00      	nop
  }
}
 8007220:	37e8      	adds	r7, #232	@ 0xe8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop

08007228 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b090      	sub	sp, #64	@ 0x40
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	4613      	mov	r3, r2
 8007276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007278:	e050      	b.n	800731c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800727a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d04c      	beq.n	800731c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007284:	2b00      	cmp	r3, #0
 8007286:	d007      	beq.n	8007298 <UART_WaitOnFlagUntilTimeout+0x30>
 8007288:	f7fc f8cc 	bl	8003424 <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007294:	429a      	cmp	r2, r3
 8007296:	d241      	bcs.n	800731c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	330c      	adds	r3, #12
 800729e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a2:	e853 3f00 	ldrex	r3, [r3]
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072aa:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80072ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	330c      	adds	r3, #12
 80072b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072b8:	637a      	str	r2, [r7, #52]	@ 0x34
 80072ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072c0:	e841 2300 	strex	r3, r2, [r1]
 80072c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80072c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e5      	bne.n	8007298 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3314      	adds	r3, #20
 80072d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	613b      	str	r3, [r7, #16]
   return(result);
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f023 0301 	bic.w	r3, r3, #1
 80072e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3314      	adds	r3, #20
 80072ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072ec:	623a      	str	r2, [r7, #32]
 80072ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	69f9      	ldr	r1, [r7, #28]
 80072f2:	6a3a      	ldr	r2, [r7, #32]
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e5      	bne.n	80072cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2220      	movs	r2, #32
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e00f      	b.n	800733c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	4013      	ands	r3, r2
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	429a      	cmp	r2, r3
 800732a:	bf0c      	ite	eq
 800732c:	2301      	moveq	r3, #1
 800732e:	2300      	movne	r3, #0
 8007330:	b2db      	uxtb	r3, r3
 8007332:	461a      	mov	r2, r3
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	429a      	cmp	r2, r3
 8007338:	d09f      	beq.n	800727a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3740      	adds	r7, #64	@ 0x40
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	4613      	mov	r3, r2
 8007350:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	88fa      	ldrh	r2, [r7, #6]
 800735c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	88fa      	ldrh	r2, [r7, #6]
 8007362:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2222      	movs	r2, #34	@ 0x22
 800736e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d007      	beq.n	8007392 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007390:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	695a      	ldr	r2, [r3, #20]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0201 	orr.w	r2, r2, #1
 80073a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68da      	ldr	r2, [r3, #12]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0220 	orr.w	r2, r2, #32
 80073b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b095      	sub	sp, #84	@ 0x54
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	330c      	adds	r3, #12
 80073e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80073ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073f0:	e841 2300 	strex	r3, r2, [r1]
 80073f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1e5      	bne.n	80073c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	3314      	adds	r3, #20
 8007402:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	61fb      	str	r3, [r7, #28]
   return(result);
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	f023 0301 	bic.w	r3, r3, #1
 8007412:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3314      	adds	r3, #20
 800741a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800741c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800741e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007424:	e841 2300 	strex	r3, r2, [r1]
 8007428:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800742a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1e5      	bne.n	80073fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007434:	2b01      	cmp	r3, #1
 8007436:	d119      	bne.n	800746c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	330c      	adds	r3, #12
 800743e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	e853 3f00 	ldrex	r3, [r3]
 8007446:	60bb      	str	r3, [r7, #8]
   return(result);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	f023 0310 	bic.w	r3, r3, #16
 800744e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	330c      	adds	r3, #12
 8007456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007458:	61ba      	str	r2, [r7, #24]
 800745a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	6979      	ldr	r1, [r7, #20]
 800745e:	69ba      	ldr	r2, [r7, #24]
 8007460:	e841 2300 	strex	r3, r2, [r1]
 8007464:	613b      	str	r3, [r7, #16]
   return(result);
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1e5      	bne.n	8007438 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800747a:	bf00      	nop
 800747c:	3754      	adds	r7, #84	@ 0x54
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007492:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f7ff fecb 	bl	800723c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074a6:	bf00      	nop
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b085      	sub	sp, #20
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b21      	cmp	r3, #33	@ 0x21
 80074c0:	d13e      	bne.n	8007540 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074ca:	d114      	bne.n	80074f6 <UART_Transmit_IT+0x48>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d110      	bne.n	80074f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	1c9a      	adds	r2, r3, #2
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	621a      	str	r2, [r3, #32]
 80074f4:	e008      	b.n	8007508 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	1c59      	adds	r1, r3, #1
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	6211      	str	r1, [r2, #32]
 8007500:	781a      	ldrb	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800750c:	b29b      	uxth	r3, r3
 800750e:	3b01      	subs	r3, #1
 8007510:	b29b      	uxth	r3, r3
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	4619      	mov	r1, r3
 8007516:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10f      	bne.n	800753c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68da      	ldr	r2, [r3, #12]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800752a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800753a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	e000      	b.n	8007542 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007540:	2302      	movs	r3, #2
  }
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b082      	sub	sp, #8
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68da      	ldr	r2, [r3, #12]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007564:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff fe5a 	bl	8007228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b08c      	sub	sp, #48	@ 0x30
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b22      	cmp	r3, #34	@ 0x22
 8007590:	f040 80ab 	bne.w	80076ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800759c:	d117      	bne.n	80075ce <UART_Receive_IT+0x50>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d113      	bne.n	80075ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075bc:	b29a      	uxth	r2, r3
 80075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c6:	1c9a      	adds	r2, r3, #2
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80075cc:	e026      	b.n	800761c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80075d4:	2300      	movs	r3, #0
 80075d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075e0:	d007      	beq.n	80075f2 <UART_Receive_IT+0x74>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10a      	bne.n	8007600 <UART_Receive_IT+0x82>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d106      	bne.n	8007600 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fc:	701a      	strb	r2, [r3, #0]
 80075fe:	e008      	b.n	8007612 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	b2db      	uxtb	r3, r3
 8007608:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800760c:	b2da      	uxtb	r2, r3
 800760e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007610:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	b29b      	uxth	r3, r3
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	4619      	mov	r1, r3
 800762a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800762c:	2b00      	cmp	r3, #0
 800762e:	d15a      	bne.n	80076e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0220 	bic.w	r2, r2, #32
 800763e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800764e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	695a      	ldr	r2, [r3, #20]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0201 	bic.w	r2, r2, #1
 800765e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766c:	2b01      	cmp	r3, #1
 800766e:	d135      	bne.n	80076dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	330c      	adds	r3, #12
 800767c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	e853 3f00 	ldrex	r3, [r3]
 8007684:	613b      	str	r3, [r7, #16]
   return(result);
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f023 0310 	bic.w	r3, r3, #16
 800768c:	627b      	str	r3, [r7, #36]	@ 0x24
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	330c      	adds	r3, #12
 8007694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007696:	623a      	str	r2, [r7, #32]
 8007698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	69f9      	ldr	r1, [r7, #28]
 800769c:	6a3a      	ldr	r2, [r7, #32]
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e5      	bne.n	8007676 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0310 	and.w	r3, r3, #16
 80076b4:	2b10      	cmp	r3, #16
 80076b6:	d10a      	bne.n	80076ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff fdbb 	bl	8007250 <HAL_UARTEx_RxEventCallback>
 80076da:	e002      	b.n	80076e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7fa f845 	bl	800176c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	e002      	b.n	80076ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	e000      	b.n	80076ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80076ea:	2302      	movs	r3, #2
  }
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3730      	adds	r7, #48	@ 0x30
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076f8:	b0c0      	sub	sp, #256	@ 0x100
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800770c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007710:	68d9      	ldr	r1, [r3, #12]
 8007712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	ea40 0301 	orr.w	r3, r0, r1
 800771c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800771e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	431a      	orrs	r2, r3
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	431a      	orrs	r2, r3
 8007734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	4313      	orrs	r3, r2
 800773c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800774c:	f021 010c 	bic.w	r1, r1, #12
 8007750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800775a:	430b      	orrs	r3, r1
 800775c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800775e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800776a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776e:	6999      	ldr	r1, [r3, #24]
 8007770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	ea40 0301 	orr.w	r3, r0, r1
 800777a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800777c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	4b8f      	ldr	r3, [pc, #572]	@ (80079c0 <UART_SetConfig+0x2cc>)
 8007784:	429a      	cmp	r2, r3
 8007786:	d005      	beq.n	8007794 <UART_SetConfig+0xa0>
 8007788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	4b8d      	ldr	r3, [pc, #564]	@ (80079c4 <UART_SetConfig+0x2d0>)
 8007790:	429a      	cmp	r2, r3
 8007792:	d104      	bne.n	800779e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007794:	f7fd fdec 	bl	8005370 <HAL_RCC_GetPCLK2Freq>
 8007798:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800779c:	e003      	b.n	80077a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800779e:	f7fd fdd3 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 80077a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077b0:	f040 810c 	bne.w	80079cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077b8:	2200      	movs	r2, #0
 80077ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80077c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80077c6:	4622      	mov	r2, r4
 80077c8:	462b      	mov	r3, r5
 80077ca:	1891      	adds	r1, r2, r2
 80077cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80077ce:	415b      	adcs	r3, r3
 80077d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80077d6:	4621      	mov	r1, r4
 80077d8:	eb12 0801 	adds.w	r8, r2, r1
 80077dc:	4629      	mov	r1, r5
 80077de:	eb43 0901 	adc.w	r9, r3, r1
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	f04f 0300 	mov.w	r3, #0
 80077ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077f6:	4690      	mov	r8, r2
 80077f8:	4699      	mov	r9, r3
 80077fa:	4623      	mov	r3, r4
 80077fc:	eb18 0303 	adds.w	r3, r8, r3
 8007800:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007804:	462b      	mov	r3, r5
 8007806:	eb49 0303 	adc.w	r3, r9, r3
 800780a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800780e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800781a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800781e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007822:	460b      	mov	r3, r1
 8007824:	18db      	adds	r3, r3, r3
 8007826:	653b      	str	r3, [r7, #80]	@ 0x50
 8007828:	4613      	mov	r3, r2
 800782a:	eb42 0303 	adc.w	r3, r2, r3
 800782e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007830:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007834:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007838:	f7f9 f9b8 	bl	8000bac <__aeabi_uldivmod>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4b61      	ldr	r3, [pc, #388]	@ (80079c8 <UART_SetConfig+0x2d4>)
 8007842:	fba3 2302 	umull	r2, r3, r3, r2
 8007846:	095b      	lsrs	r3, r3, #5
 8007848:	011c      	lsls	r4, r3, #4
 800784a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800784e:	2200      	movs	r2, #0
 8007850:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007854:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007858:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800785c:	4642      	mov	r2, r8
 800785e:	464b      	mov	r3, r9
 8007860:	1891      	adds	r1, r2, r2
 8007862:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007864:	415b      	adcs	r3, r3
 8007866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007868:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800786c:	4641      	mov	r1, r8
 800786e:	eb12 0a01 	adds.w	sl, r2, r1
 8007872:	4649      	mov	r1, r9
 8007874:	eb43 0b01 	adc.w	fp, r3, r1
 8007878:	f04f 0200 	mov.w	r2, #0
 800787c:	f04f 0300 	mov.w	r3, #0
 8007880:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007884:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800788c:	4692      	mov	sl, r2
 800788e:	469b      	mov	fp, r3
 8007890:	4643      	mov	r3, r8
 8007892:	eb1a 0303 	adds.w	r3, sl, r3
 8007896:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800789a:	464b      	mov	r3, r9
 800789c:	eb4b 0303 	adc.w	r3, fp, r3
 80078a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80078a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80078b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078b8:	460b      	mov	r3, r1
 80078ba:	18db      	adds	r3, r3, r3
 80078bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80078be:	4613      	mov	r3, r2
 80078c0:	eb42 0303 	adc.w	r3, r2, r3
 80078c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80078c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80078ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80078ce:	f7f9 f96d 	bl	8000bac <__aeabi_uldivmod>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4611      	mov	r1, r2
 80078d8:	4b3b      	ldr	r3, [pc, #236]	@ (80079c8 <UART_SetConfig+0x2d4>)
 80078da:	fba3 2301 	umull	r2, r3, r3, r1
 80078de:	095b      	lsrs	r3, r3, #5
 80078e0:	2264      	movs	r2, #100	@ 0x64
 80078e2:	fb02 f303 	mul.w	r3, r2, r3
 80078e6:	1acb      	subs	r3, r1, r3
 80078e8:	00db      	lsls	r3, r3, #3
 80078ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80078ee:	4b36      	ldr	r3, [pc, #216]	@ (80079c8 <UART_SetConfig+0x2d4>)
 80078f0:	fba3 2302 	umull	r2, r3, r3, r2
 80078f4:	095b      	lsrs	r3, r3, #5
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80078fc:	441c      	add	r4, r3
 80078fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007902:	2200      	movs	r2, #0
 8007904:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007908:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800790c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007910:	4642      	mov	r2, r8
 8007912:	464b      	mov	r3, r9
 8007914:	1891      	adds	r1, r2, r2
 8007916:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007918:	415b      	adcs	r3, r3
 800791a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800791c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007920:	4641      	mov	r1, r8
 8007922:	1851      	adds	r1, r2, r1
 8007924:	6339      	str	r1, [r7, #48]	@ 0x30
 8007926:	4649      	mov	r1, r9
 8007928:	414b      	adcs	r3, r1
 800792a:	637b      	str	r3, [r7, #52]	@ 0x34
 800792c:	f04f 0200 	mov.w	r2, #0
 8007930:	f04f 0300 	mov.w	r3, #0
 8007934:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007938:	4659      	mov	r1, fp
 800793a:	00cb      	lsls	r3, r1, #3
 800793c:	4651      	mov	r1, sl
 800793e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007942:	4651      	mov	r1, sl
 8007944:	00ca      	lsls	r2, r1, #3
 8007946:	4610      	mov	r0, r2
 8007948:	4619      	mov	r1, r3
 800794a:	4603      	mov	r3, r0
 800794c:	4642      	mov	r2, r8
 800794e:	189b      	adds	r3, r3, r2
 8007950:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007954:	464b      	mov	r3, r9
 8007956:	460a      	mov	r2, r1
 8007958:	eb42 0303 	adc.w	r3, r2, r3
 800795c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800796c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007974:	460b      	mov	r3, r1
 8007976:	18db      	adds	r3, r3, r3
 8007978:	62bb      	str	r3, [r7, #40]	@ 0x28
 800797a:	4613      	mov	r3, r2
 800797c:	eb42 0303 	adc.w	r3, r2, r3
 8007980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007986:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800798a:	f7f9 f90f 	bl	8000bac <__aeabi_uldivmod>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4b0d      	ldr	r3, [pc, #52]	@ (80079c8 <UART_SetConfig+0x2d4>)
 8007994:	fba3 1302 	umull	r1, r3, r3, r2
 8007998:	095b      	lsrs	r3, r3, #5
 800799a:	2164      	movs	r1, #100	@ 0x64
 800799c:	fb01 f303 	mul.w	r3, r1, r3
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	3332      	adds	r3, #50	@ 0x32
 80079a6:	4a08      	ldr	r2, [pc, #32]	@ (80079c8 <UART_SetConfig+0x2d4>)
 80079a8:	fba2 2303 	umull	r2, r3, r2, r3
 80079ac:	095b      	lsrs	r3, r3, #5
 80079ae:	f003 0207 	and.w	r2, r3, #7
 80079b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4422      	add	r2, r4
 80079ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079bc:	e106      	b.n	8007bcc <UART_SetConfig+0x4d8>
 80079be:	bf00      	nop
 80079c0:	40011000 	.word	0x40011000
 80079c4:	40011400 	.word	0x40011400
 80079c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079d0:	2200      	movs	r2, #0
 80079d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80079da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80079de:	4642      	mov	r2, r8
 80079e0:	464b      	mov	r3, r9
 80079e2:	1891      	adds	r1, r2, r2
 80079e4:	6239      	str	r1, [r7, #32]
 80079e6:	415b      	adcs	r3, r3
 80079e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80079ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079ee:	4641      	mov	r1, r8
 80079f0:	1854      	adds	r4, r2, r1
 80079f2:	4649      	mov	r1, r9
 80079f4:	eb43 0501 	adc.w	r5, r3, r1
 80079f8:	f04f 0200 	mov.w	r2, #0
 80079fc:	f04f 0300 	mov.w	r3, #0
 8007a00:	00eb      	lsls	r3, r5, #3
 8007a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a06:	00e2      	lsls	r2, r4, #3
 8007a08:	4614      	mov	r4, r2
 8007a0a:	461d      	mov	r5, r3
 8007a0c:	4643      	mov	r3, r8
 8007a0e:	18e3      	adds	r3, r4, r3
 8007a10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a14:	464b      	mov	r3, r9
 8007a16:	eb45 0303 	adc.w	r3, r5, r3
 8007a1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a2e:	f04f 0200 	mov.w	r2, #0
 8007a32:	f04f 0300 	mov.w	r3, #0
 8007a36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	008b      	lsls	r3, r1, #2
 8007a3e:	4621      	mov	r1, r4
 8007a40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a44:	4621      	mov	r1, r4
 8007a46:	008a      	lsls	r2, r1, #2
 8007a48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a4c:	f7f9 f8ae 	bl	8000bac <__aeabi_uldivmod>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4b60      	ldr	r3, [pc, #384]	@ (8007bd8 <UART_SetConfig+0x4e4>)
 8007a56:	fba3 2302 	umull	r2, r3, r3, r2
 8007a5a:	095b      	lsrs	r3, r3, #5
 8007a5c:	011c      	lsls	r4, r3, #4
 8007a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a70:	4642      	mov	r2, r8
 8007a72:	464b      	mov	r3, r9
 8007a74:	1891      	adds	r1, r2, r2
 8007a76:	61b9      	str	r1, [r7, #24]
 8007a78:	415b      	adcs	r3, r3
 8007a7a:	61fb      	str	r3, [r7, #28]
 8007a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a80:	4641      	mov	r1, r8
 8007a82:	1851      	adds	r1, r2, r1
 8007a84:	6139      	str	r1, [r7, #16]
 8007a86:	4649      	mov	r1, r9
 8007a88:	414b      	adcs	r3, r1
 8007a8a:	617b      	str	r3, [r7, #20]
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a98:	4659      	mov	r1, fp
 8007a9a:	00cb      	lsls	r3, r1, #3
 8007a9c:	4651      	mov	r1, sl
 8007a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007aa2:	4651      	mov	r1, sl
 8007aa4:	00ca      	lsls	r2, r1, #3
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4603      	mov	r3, r0
 8007aac:	4642      	mov	r2, r8
 8007aae:	189b      	adds	r3, r3, r2
 8007ab0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ab4:	464b      	mov	r3, r9
 8007ab6:	460a      	mov	r2, r1
 8007ab8:	eb42 0303 	adc.w	r3, r2, r3
 8007abc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007aca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007acc:	f04f 0200 	mov.w	r2, #0
 8007ad0:	f04f 0300 	mov.w	r3, #0
 8007ad4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ad8:	4649      	mov	r1, r9
 8007ada:	008b      	lsls	r3, r1, #2
 8007adc:	4641      	mov	r1, r8
 8007ade:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ae2:	4641      	mov	r1, r8
 8007ae4:	008a      	lsls	r2, r1, #2
 8007ae6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007aea:	f7f9 f85f 	bl	8000bac <__aeabi_uldivmod>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4611      	mov	r1, r2
 8007af4:	4b38      	ldr	r3, [pc, #224]	@ (8007bd8 <UART_SetConfig+0x4e4>)
 8007af6:	fba3 2301 	umull	r2, r3, r3, r1
 8007afa:	095b      	lsrs	r3, r3, #5
 8007afc:	2264      	movs	r2, #100	@ 0x64
 8007afe:	fb02 f303 	mul.w	r3, r2, r3
 8007b02:	1acb      	subs	r3, r1, r3
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	3332      	adds	r3, #50	@ 0x32
 8007b08:	4a33      	ldr	r2, [pc, #204]	@ (8007bd8 <UART_SetConfig+0x4e4>)
 8007b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0e:	095b      	lsrs	r3, r3, #5
 8007b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b14:	441c      	add	r4, r3
 8007b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b24:	4642      	mov	r2, r8
 8007b26:	464b      	mov	r3, r9
 8007b28:	1891      	adds	r1, r2, r2
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	415b      	adcs	r3, r3
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b34:	4641      	mov	r1, r8
 8007b36:	1851      	adds	r1, r2, r1
 8007b38:	6039      	str	r1, [r7, #0]
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	414b      	adcs	r3, r1
 8007b3e:	607b      	str	r3, [r7, #4]
 8007b40:	f04f 0200 	mov.w	r2, #0
 8007b44:	f04f 0300 	mov.w	r3, #0
 8007b48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b4c:	4659      	mov	r1, fp
 8007b4e:	00cb      	lsls	r3, r1, #3
 8007b50:	4651      	mov	r1, sl
 8007b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b56:	4651      	mov	r1, sl
 8007b58:	00ca      	lsls	r2, r1, #3
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4642      	mov	r2, r8
 8007b62:	189b      	adds	r3, r3, r2
 8007b64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b66:	464b      	mov	r3, r9
 8007b68:	460a      	mov	r2, r1
 8007b6a:	eb42 0303 	adc.w	r3, r2, r3
 8007b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b7c:	f04f 0200 	mov.w	r2, #0
 8007b80:	f04f 0300 	mov.w	r3, #0
 8007b84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b88:	4649      	mov	r1, r9
 8007b8a:	008b      	lsls	r3, r1, #2
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b92:	4641      	mov	r1, r8
 8007b94:	008a      	lsls	r2, r1, #2
 8007b96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b9a:	f7f9 f807 	bl	8000bac <__aeabi_uldivmod>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd8 <UART_SetConfig+0x4e4>)
 8007ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ba8:	095b      	lsrs	r3, r3, #5
 8007baa:	2164      	movs	r1, #100	@ 0x64
 8007bac:	fb01 f303 	mul.w	r3, r1, r3
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	011b      	lsls	r3, r3, #4
 8007bb4:	3332      	adds	r3, #50	@ 0x32
 8007bb6:	4a08      	ldr	r2, [pc, #32]	@ (8007bd8 <UART_SetConfig+0x4e4>)
 8007bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bbc:	095b      	lsrs	r3, r3, #5
 8007bbe:	f003 020f 	and.w	r2, r3, #15
 8007bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4422      	add	r2, r4
 8007bca:	609a      	str	r2, [r3, #8]
}
 8007bcc:	bf00      	nop
 8007bce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bd8:	51eb851f 	.word	0x51eb851f

08007bdc <__NVIC_SetPriority>:
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	6039      	str	r1, [r7, #0]
 8007be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	db0a      	blt.n	8007c06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	490c      	ldr	r1, [pc, #48]	@ (8007c28 <__NVIC_SetPriority+0x4c>)
 8007bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bfa:	0112      	lsls	r2, r2, #4
 8007bfc:	b2d2      	uxtb	r2, r2
 8007bfe:	440b      	add	r3, r1
 8007c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007c04:	e00a      	b.n	8007c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	4908      	ldr	r1, [pc, #32]	@ (8007c2c <__NVIC_SetPriority+0x50>)
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	f003 030f 	and.w	r3, r3, #15
 8007c12:	3b04      	subs	r3, #4
 8007c14:	0112      	lsls	r2, r2, #4
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	440b      	add	r3, r1
 8007c1a:	761a      	strb	r2, [r3, #24]
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	e000e100 	.word	0xe000e100
 8007c2c:	e000ed00 	.word	0xe000ed00

08007c30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c30:	b580      	push	{r7, lr}
 8007c32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007c34:	2100      	movs	r1, #0
 8007c36:	f06f 0004 	mvn.w	r0, #4
 8007c3a:	f7ff ffcf 	bl	8007bdc <__NVIC_SetPriority>
#endif
}
 8007c3e:	bf00      	nop
 8007c40:	bd80      	pop	{r7, pc}
	...

08007c44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c4a:	f3ef 8305 	mrs	r3, IPSR
 8007c4e:	603b      	str	r3, [r7, #0]
  return(result);
 8007c50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007c56:	f06f 0305 	mvn.w	r3, #5
 8007c5a:	607b      	str	r3, [r7, #4]
 8007c5c:	e00c      	b.n	8007c78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c88 <osKernelInitialize+0x44>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d105      	bne.n	8007c72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c66:	4b08      	ldr	r3, [pc, #32]	@ (8007c88 <osKernelInitialize+0x44>)
 8007c68:	2201      	movs	r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	607b      	str	r3, [r7, #4]
 8007c70:	e002      	b.n	8007c78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007c72:	f04f 33ff 	mov.w	r3, #4294967295
 8007c76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c78:	687b      	ldr	r3, [r7, #4]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	20000710 	.word	0x20000710

08007c8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c92:	f3ef 8305 	mrs	r3, IPSR
 8007c96:	603b      	str	r3, [r7, #0]
  return(result);
 8007c98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007c9e:	f06f 0305 	mvn.w	r3, #5
 8007ca2:	607b      	str	r3, [r7, #4]
 8007ca4:	e010      	b.n	8007cc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd4 <osKernelStart+0x48>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d109      	bne.n	8007cc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007cae:	f7ff ffbf 	bl	8007c30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007cb2:	4b08      	ldr	r3, [pc, #32]	@ (8007cd4 <osKernelStart+0x48>)
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007cb8:	f001 f892 	bl	8008de0 <vTaskStartScheduler>
      stat = osOK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	607b      	str	r3, [r7, #4]
 8007cc0:	e002      	b.n	8007cc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007cc8:	687b      	ldr	r3, [r7, #4]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	20000710 	.word	0x20000710

08007cd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b08e      	sub	sp, #56	@ 0x38
 8007cdc:	af04      	add	r7, sp, #16
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ce8:	f3ef 8305 	mrs	r3, IPSR
 8007cec:	617b      	str	r3, [r7, #20]
  return(result);
 8007cee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d17e      	bne.n	8007df2 <osThreadNew+0x11a>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d07b      	beq.n	8007df2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007cfa:	2380      	movs	r3, #128	@ 0x80
 8007cfc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007cfe:	2318      	movs	r3, #24
 8007d00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d02:	2300      	movs	r3, #0
 8007d04:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007d06:	f04f 33ff 	mov.w	r3, #4294967295
 8007d0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d045      	beq.n	8007d9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <osThreadNew+0x48>
        name = attr->name;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d008      	beq.n	8007d46 <osThreadNew+0x6e>
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	2b38      	cmp	r3, #56	@ 0x38
 8007d38:	d805      	bhi.n	8007d46 <osThreadNew+0x6e>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <osThreadNew+0x72>
        return (NULL);
 8007d46:	2300      	movs	r3, #0
 8007d48:	e054      	b.n	8007df4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	089b      	lsrs	r3, r3, #2
 8007d58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00e      	beq.n	8007d80 <osThreadNew+0xa8>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	2ba7      	cmp	r3, #167	@ 0xa7
 8007d68:	d90a      	bls.n	8007d80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d006      	beq.n	8007d80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <osThreadNew+0xa8>
        mem = 1;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	61bb      	str	r3, [r7, #24]
 8007d7e:	e010      	b.n	8007da2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10c      	bne.n	8007da2 <osThreadNew+0xca>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d108      	bne.n	8007da2 <osThreadNew+0xca>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d104      	bne.n	8007da2 <osThreadNew+0xca>
          mem = 0;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	61bb      	str	r3, [r7, #24]
 8007d9c:	e001      	b.n	8007da2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d110      	bne.n	8007dca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007db0:	9202      	str	r2, [sp, #8]
 8007db2:	9301      	str	r3, [sp, #4]
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	6a3a      	ldr	r2, [r7, #32]
 8007dbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f000 fe1a 	bl	80089f8 <xTaskCreateStatic>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	613b      	str	r3, [r7, #16]
 8007dc8:	e013      	b.n	8007df2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d110      	bne.n	8007df2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	f107 0310 	add.w	r3, r7, #16
 8007dd8:	9301      	str	r3, [sp, #4]
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 fe68 	bl	8008ab8 <xTaskCreate>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d001      	beq.n	8007df2 <osThreadNew+0x11a>
            hTask = NULL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007df2:	693b      	ldr	r3, [r7, #16]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3728      	adds	r7, #40	@ 0x28
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e04:	f3ef 8305 	mrs	r3, IPSR
 8007e08:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <osDelay+0x1c>
    stat = osErrorISR;
 8007e10:	f06f 0305 	mvn.w	r3, #5
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	e007      	b.n	8007e28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 ffa6 	bl	8008d74 <vTaskDelay>
    }
  }

  return (stat);
 8007e28:	68fb      	ldr	r3, [r7, #12]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4a07      	ldr	r2, [pc, #28]	@ (8007e60 <vApplicationGetIdleTaskMemory+0x2c>)
 8007e44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	4a06      	ldr	r2, [pc, #24]	@ (8007e64 <vApplicationGetIdleTaskMemory+0x30>)
 8007e4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2280      	movs	r2, #128	@ 0x80
 8007e50:	601a      	str	r2, [r3, #0]
}
 8007e52:	bf00      	nop
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	20000714 	.word	0x20000714
 8007e64:	200007bc 	.word	0x200007bc

08007e68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4a07      	ldr	r2, [pc, #28]	@ (8007e94 <vApplicationGetTimerTaskMemory+0x2c>)
 8007e78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	4a06      	ldr	r2, [pc, #24]	@ (8007e98 <vApplicationGetTimerTaskMemory+0x30>)
 8007e7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e86:	601a      	str	r2, [r3, #0]
}
 8007e88:	bf00      	nop
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	200009bc 	.word	0x200009bc
 8007e98:	20000a64 	.word	0x20000a64

08007e9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f103 0208 	add.w	r2, r3, #8
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f103 0208 	add.w	r2, r3, #8
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f103 0208 	add.w	r2, r3, #8
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b085      	sub	sp, #20
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	1c5a      	adds	r2, r3, #1
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	601a      	str	r2, [r3, #0]
}
 8007f32:	bf00      	nop
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b085      	sub	sp, #20
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f54:	d103      	bne.n	8007f5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	e00c      	b.n	8007f78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3308      	adds	r3, #8
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	e002      	b.n	8007f6c <vListInsert+0x2e>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d2f6      	bcs.n	8007f66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	601a      	str	r2, [r3, #0]
}
 8007fa4:	bf00      	nop
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6892      	ldr	r2, [r2, #8]
 8007fc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	6852      	ldr	r2, [r2, #4]
 8007fd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d103      	bne.n	8007fe4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	1e5a      	subs	r2, r3, #1
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10b      	bne.n	8008030 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800802a:	bf00      	nop
 800802c:	bf00      	nop
 800802e:	e7fd      	b.n	800802c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008030:	f002 f8aa 	bl	800a188 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800803c:	68f9      	ldr	r1, [r7, #12]
 800803e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008040:	fb01 f303 	mul.w	r3, r1, r3
 8008044:	441a      	add	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008060:	3b01      	subs	r3, #1
 8008062:	68f9      	ldr	r1, [r7, #12]
 8008064:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008066:	fb01 f303 	mul.w	r3, r1, r3
 800806a:	441a      	add	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	22ff      	movs	r2, #255	@ 0xff
 8008074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	22ff      	movs	r2, #255	@ 0xff
 800807c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d114      	bne.n	80080b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d01a      	beq.n	80080c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3310      	adds	r3, #16
 8008092:	4618      	mov	r0, r3
 8008094:	f001 f942 	bl	800931c <xTaskRemoveFromEventList>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d012      	beq.n	80080c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800809e:	4b0d      	ldr	r3, [pc, #52]	@ (80080d4 <xQueueGenericReset+0xd0>)
 80080a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	e009      	b.n	80080c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	3310      	adds	r3, #16
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7ff fef1 	bl	8007e9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	3324      	adds	r3, #36	@ 0x24
 80080be:	4618      	mov	r0, r3
 80080c0:	f7ff feec 	bl	8007e9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80080c4:	f002 f892 	bl	800a1ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80080c8:	2301      	movs	r3, #1
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	e000ed04 	.word	0xe000ed04

080080d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08e      	sub	sp, #56	@ 0x38
 80080dc:	af02      	add	r7, sp, #8
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10b      	bne.n	8008104 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80080fe:	bf00      	nop
 8008100:	bf00      	nop
 8008102:	e7fd      	b.n	8008100 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10b      	bne.n	8008122 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	e7fd      	b.n	800811e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d002      	beq.n	800812e <xQueueGenericCreateStatic+0x56>
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <xQueueGenericCreateStatic+0x5a>
 800812e:	2301      	movs	r3, #1
 8008130:	e000      	b.n	8008134 <xQueueGenericCreateStatic+0x5c>
 8008132:	2300      	movs	r3, #0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10b      	bne.n	8008150 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	623b      	str	r3, [r7, #32]
}
 800814a:	bf00      	nop
 800814c:	bf00      	nop
 800814e:	e7fd      	b.n	800814c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d102      	bne.n	800815c <xQueueGenericCreateStatic+0x84>
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <xQueueGenericCreateStatic+0x88>
 800815c:	2301      	movs	r3, #1
 800815e:	e000      	b.n	8008162 <xQueueGenericCreateStatic+0x8a>
 8008160:	2300      	movs	r3, #0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10b      	bne.n	800817e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	61fb      	str	r3, [r7, #28]
}
 8008178:	bf00      	nop
 800817a:	bf00      	nop
 800817c:	e7fd      	b.n	800817a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800817e:	2350      	movs	r3, #80	@ 0x50
 8008180:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b50      	cmp	r3, #80	@ 0x50
 8008186:	d00b      	beq.n	80081a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	61bb      	str	r3, [r7, #24]
}
 800819a:	bf00      	nop
 800819c:	bf00      	nop
 800819e:	e7fd      	b.n	800819c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80081a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80081a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00d      	beq.n	80081c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80081b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	4613      	mov	r3, r2
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	68b9      	ldr	r1, [r7, #8]
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 f805 	bl	80081d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3730      	adds	r7, #48	@ 0x30
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	607a      	str	r2, [r7, #4]
 80081de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d103      	bne.n	80081ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	69ba      	ldr	r2, [r7, #24]
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	e002      	b.n	80081f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008200:	2101      	movs	r1, #1
 8008202:	69b8      	ldr	r0, [r7, #24]
 8008204:	f7ff fefe 	bl	8008004 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	78fa      	ldrb	r2, [r7, #3]
 800820c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08e      	sub	sp, #56	@ 0x38
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008226:	2300      	movs	r3, #0
 8008228:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800822e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10b      	bne.n	800824c <xQueueGenericSend+0x34>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008246:	bf00      	nop
 8008248:	bf00      	nop
 800824a:	e7fd      	b.n	8008248 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d103      	bne.n	800825a <xQueueGenericSend+0x42>
 8008252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <xQueueGenericSend+0x46>
 800825a:	2301      	movs	r3, #1
 800825c:	e000      	b.n	8008260 <xQueueGenericSend+0x48>
 800825e:	2300      	movs	r3, #0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10b      	bne.n	800827c <xQueueGenericSend+0x64>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008276:	bf00      	nop
 8008278:	bf00      	nop
 800827a:	e7fd      	b.n	8008278 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2b02      	cmp	r3, #2
 8008280:	d103      	bne.n	800828a <xQueueGenericSend+0x72>
 8008282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008286:	2b01      	cmp	r3, #1
 8008288:	d101      	bne.n	800828e <xQueueGenericSend+0x76>
 800828a:	2301      	movs	r3, #1
 800828c:	e000      	b.n	8008290 <xQueueGenericSend+0x78>
 800828e:	2300      	movs	r3, #0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10b      	bne.n	80082ac <xQueueGenericSend+0x94>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	623b      	str	r3, [r7, #32]
}
 80082a6:	bf00      	nop
 80082a8:	bf00      	nop
 80082aa:	e7fd      	b.n	80082a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082ac:	f001 f9fc 	bl	80096a8 <xTaskGetSchedulerState>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d102      	bne.n	80082bc <xQueueGenericSend+0xa4>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <xQueueGenericSend+0xa8>
 80082bc:	2301      	movs	r3, #1
 80082be:	e000      	b.n	80082c2 <xQueueGenericSend+0xaa>
 80082c0:	2300      	movs	r3, #0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10b      	bne.n	80082de <xQueueGenericSend+0xc6>
	__asm volatile
 80082c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	61fb      	str	r3, [r7, #28]
}
 80082d8:	bf00      	nop
 80082da:	bf00      	nop
 80082dc:	e7fd      	b.n	80082da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082de:	f001 ff53 	bl	800a188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d302      	bcc.n	80082f4 <xQueueGenericSend+0xdc>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d129      	bne.n	8008348 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	68b9      	ldr	r1, [r7, #8]
 80082f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082fa:	f000 fa0f 	bl	800871c <prvCopyDataToQueue>
 80082fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008304:	2b00      	cmp	r3, #0
 8008306:	d010      	beq.n	800832a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830a:	3324      	adds	r3, #36	@ 0x24
 800830c:	4618      	mov	r0, r3
 800830e:	f001 f805 	bl	800931c <xTaskRemoveFromEventList>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d013      	beq.n	8008340 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008318:	4b3f      	ldr	r3, [pc, #252]	@ (8008418 <xQueueGenericSend+0x200>)
 800831a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	e00a      	b.n	8008340 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800832a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832c:	2b00      	cmp	r3, #0
 800832e:	d007      	beq.n	8008340 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008330:	4b39      	ldr	r3, [pc, #228]	@ (8008418 <xQueueGenericSend+0x200>)
 8008332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008340:	f001 ff54 	bl	800a1ec <vPortExitCritical>
				return pdPASS;
 8008344:	2301      	movs	r3, #1
 8008346:	e063      	b.n	8008410 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d103      	bne.n	8008356 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800834e:	f001 ff4d 	bl	800a1ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008352:	2300      	movs	r3, #0
 8008354:	e05c      	b.n	8008410 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008358:	2b00      	cmp	r3, #0
 800835a:	d106      	bne.n	800836a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800835c:	f107 0314 	add.w	r3, r7, #20
 8008360:	4618      	mov	r0, r3
 8008362:	f001 f83f 	bl	80093e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008366:	2301      	movs	r3, #1
 8008368:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800836a:	f001 ff3f 	bl	800a1ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800836e:	f000 fda7 	bl	8008ec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008372:	f001 ff09 	bl	800a188 <vPortEnterCritical>
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800837c:	b25b      	sxtb	r3, r3
 800837e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008382:	d103      	bne.n	800838c <xQueueGenericSend+0x174>
 8008384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800838c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008392:	b25b      	sxtb	r3, r3
 8008394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008398:	d103      	bne.n	80083a2 <xQueueGenericSend+0x18a>
 800839a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083a2:	f001 ff23 	bl	800a1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083a6:	1d3a      	adds	r2, r7, #4
 80083a8:	f107 0314 	add.w	r3, r7, #20
 80083ac:	4611      	mov	r1, r2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 f82e 	bl	8009410 <xTaskCheckForTimeOut>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d124      	bne.n	8008404 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80083ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083bc:	f000 faa6 	bl	800890c <prvIsQueueFull>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d018      	beq.n	80083f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80083c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c8:	3310      	adds	r3, #16
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	4611      	mov	r1, r2
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 ff52 	bl	8009278 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80083d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083d6:	f000 fa31 	bl	800883c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80083da:	f000 fd7f 	bl	8008edc <xTaskResumeAll>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f47f af7c 	bne.w	80082de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80083e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008418 <xQueueGenericSend+0x200>)
 80083e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	e772      	b.n	80082de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083fa:	f000 fa1f 	bl	800883c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083fe:	f000 fd6d 	bl	8008edc <xTaskResumeAll>
 8008402:	e76c      	b.n	80082de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008406:	f000 fa19 	bl	800883c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800840a:	f000 fd67 	bl	8008edc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800840e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008410:	4618      	mov	r0, r3
 8008412:	3738      	adds	r7, #56	@ 0x38
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	e000ed04 	.word	0xe000ed04

0800841c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b090      	sub	sp, #64	@ 0x40
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800842e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10b      	bne.n	800844c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008446:	bf00      	nop
 8008448:	bf00      	nop
 800844a:	e7fd      	b.n	8008448 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d103      	bne.n	800845a <xQueueGenericSendFromISR+0x3e>
 8008452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <xQueueGenericSendFromISR+0x42>
 800845a:	2301      	movs	r3, #1
 800845c:	e000      	b.n	8008460 <xQueueGenericSendFromISR+0x44>
 800845e:	2300      	movs	r3, #0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10b      	bne.n	800847c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008476:	bf00      	nop
 8008478:	bf00      	nop
 800847a:	e7fd      	b.n	8008478 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2b02      	cmp	r3, #2
 8008480:	d103      	bne.n	800848a <xQueueGenericSendFromISR+0x6e>
 8008482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008486:	2b01      	cmp	r3, #1
 8008488:	d101      	bne.n	800848e <xQueueGenericSendFromISR+0x72>
 800848a:	2301      	movs	r3, #1
 800848c:	e000      	b.n	8008490 <xQueueGenericSendFromISR+0x74>
 800848e:	2300      	movs	r3, #0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10b      	bne.n	80084ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	623b      	str	r3, [r7, #32]
}
 80084a6:	bf00      	nop
 80084a8:	bf00      	nop
 80084aa:	e7fd      	b.n	80084a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084ac:	f001 ff4c 	bl	800a348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80084b0:	f3ef 8211 	mrs	r2, BASEPRI
 80084b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	61fa      	str	r2, [r7, #28]
 80084c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80084c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d302      	bcc.n	80084de <xQueueGenericSendFromISR+0xc2>
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d12f      	bne.n	800853e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	68b9      	ldr	r1, [r7, #8]
 80084f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80084f4:	f000 f912 	bl	800871c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80084fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008500:	d112      	bne.n	8008528 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008506:	2b00      	cmp	r3, #0
 8008508:	d016      	beq.n	8008538 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800850a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850c:	3324      	adds	r3, #36	@ 0x24
 800850e:	4618      	mov	r0, r3
 8008510:	f000 ff04 	bl	800931c <xTaskRemoveFromEventList>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00e      	beq.n	8008538 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00b      	beq.n	8008538 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	e007      	b.n	8008538 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008528:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800852c:	3301      	adds	r3, #1
 800852e:	b2db      	uxtb	r3, r3
 8008530:	b25a      	sxtb	r2, r3
 8008532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008538:	2301      	movs	r3, #1
 800853a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800853c:	e001      	b.n	8008542 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800853e:	2300      	movs	r3, #0
 8008540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008544:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800854c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800854e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008550:	4618      	mov	r0, r3
 8008552:	3740      	adds	r7, #64	@ 0x40
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08c      	sub	sp, #48	@ 0x30
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008564:	2300      	movs	r3, #0
 8008566:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800856c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10b      	bne.n	800858a <xQueueReceive+0x32>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	623b      	str	r3, [r7, #32]
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop
 8008588:	e7fd      	b.n	8008586 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d103      	bne.n	8008598 <xQueueReceive+0x40>
 8008590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <xQueueReceive+0x44>
 8008598:	2301      	movs	r3, #1
 800859a:	e000      	b.n	800859e <xQueueReceive+0x46>
 800859c:	2300      	movs	r3, #0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10b      	bne.n	80085ba <xQueueReceive+0x62>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	61fb      	str	r3, [r7, #28]
}
 80085b4:	bf00      	nop
 80085b6:	bf00      	nop
 80085b8:	e7fd      	b.n	80085b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085ba:	f001 f875 	bl	80096a8 <xTaskGetSchedulerState>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d102      	bne.n	80085ca <xQueueReceive+0x72>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <xQueueReceive+0x76>
 80085ca:	2301      	movs	r3, #1
 80085cc:	e000      	b.n	80085d0 <xQueueReceive+0x78>
 80085ce:	2300      	movs	r3, #0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10b      	bne.n	80085ec <xQueueReceive+0x94>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	61bb      	str	r3, [r7, #24]
}
 80085e6:	bf00      	nop
 80085e8:	bf00      	nop
 80085ea:	e7fd      	b.n	80085e8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085ec:	f001 fdcc 	bl	800a188 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d01f      	beq.n	800863c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085fc:	68b9      	ldr	r1, [r7, #8]
 80085fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008600:	f000 f8f6 	bl	80087f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008606:	1e5a      	subs	r2, r3, #1
 8008608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800860c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00f      	beq.n	8008634 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008616:	3310      	adds	r3, #16
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fe7f 	bl	800931c <xTaskRemoveFromEventList>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d007      	beq.n	8008634 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008624:	4b3c      	ldr	r3, [pc, #240]	@ (8008718 <xQueueReceive+0x1c0>)
 8008626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800862a:	601a      	str	r2, [r3, #0]
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008634:	f001 fdda 	bl	800a1ec <vPortExitCritical>
				return pdPASS;
 8008638:	2301      	movs	r3, #1
 800863a:	e069      	b.n	8008710 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d103      	bne.n	800864a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008642:	f001 fdd3 	bl	800a1ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008646:	2300      	movs	r3, #0
 8008648:	e062      	b.n	8008710 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800864a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864c:	2b00      	cmp	r3, #0
 800864e:	d106      	bne.n	800865e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008650:	f107 0310 	add.w	r3, r7, #16
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fec5 	bl	80093e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800865a:	2301      	movs	r3, #1
 800865c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800865e:	f001 fdc5 	bl	800a1ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008662:	f000 fc2d 	bl	8008ec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008666:	f001 fd8f 	bl	800a188 <vPortEnterCritical>
 800866a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008670:	b25b      	sxtb	r3, r3
 8008672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008676:	d103      	bne.n	8008680 <xQueueReceive+0x128>
 8008678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008682:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008686:	b25b      	sxtb	r3, r3
 8008688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868c:	d103      	bne.n	8008696 <xQueueReceive+0x13e>
 800868e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008690:	2200      	movs	r2, #0
 8008692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008696:	f001 fda9 	bl	800a1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800869a:	1d3a      	adds	r2, r7, #4
 800869c:	f107 0310 	add.w	r3, r7, #16
 80086a0:	4611      	mov	r1, r2
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 feb4 	bl	8009410 <xTaskCheckForTimeOut>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d123      	bne.n	80086f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086b0:	f000 f916 	bl	80088e0 <prvIsQueueEmpty>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d017      	beq.n	80086ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086bc:	3324      	adds	r3, #36	@ 0x24
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	4611      	mov	r1, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 fdd8 	bl	8009278 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086ca:	f000 f8b7 	bl	800883c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086ce:	f000 fc05 	bl	8008edc <xTaskResumeAll>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d189      	bne.n	80085ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80086d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008718 <xQueueReceive+0x1c0>)
 80086da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	e780      	b.n	80085ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80086ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086ec:	f000 f8a6 	bl	800883c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086f0:	f000 fbf4 	bl	8008edc <xTaskResumeAll>
 80086f4:	e77a      	b.n	80085ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80086f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086f8:	f000 f8a0 	bl	800883c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086fc:	f000 fbee 	bl	8008edc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008700:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008702:	f000 f8ed 	bl	80088e0 <prvIsQueueEmpty>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	f43f af6f 	beq.w	80085ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800870e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008710:	4618      	mov	r0, r3
 8008712:	3730      	adds	r7, #48	@ 0x30
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	e000ed04 	.word	0xe000ed04

0800871c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008728:	2300      	movs	r3, #0
 800872a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008730:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10d      	bne.n	8008756 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d14d      	bne.n	80087de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	4618      	mov	r0, r3
 8008748:	f000 ffcc 	bl	80096e4 <xTaskPriorityDisinherit>
 800874c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	609a      	str	r2, [r3, #8]
 8008754:	e043      	b.n	80087de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d119      	bne.n	8008790 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6858      	ldr	r0, [r3, #4]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008764:	461a      	mov	r2, r3
 8008766:	68b9      	ldr	r1, [r7, #8]
 8008768:	f002 f8c8 	bl	800a8fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008774:	441a      	add	r2, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	429a      	cmp	r2, r3
 8008784:	d32b      	bcc.n	80087de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	605a      	str	r2, [r3, #4]
 800878e:	e026      	b.n	80087de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	68d8      	ldr	r0, [r3, #12]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008798:	461a      	mov	r2, r3
 800879a:	68b9      	ldr	r1, [r7, #8]
 800879c:	f002 f8ae 	bl	800a8fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	68da      	ldr	r2, [r3, #12]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a8:	425b      	negs	r3, r3
 80087aa:	441a      	add	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	68da      	ldr	r2, [r3, #12]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d207      	bcs.n	80087cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	689a      	ldr	r2, [r3, #8]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c4:	425b      	negs	r3, r3
 80087c6:	441a      	add	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d105      	bne.n	80087de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d002      	beq.n	80087de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	3b01      	subs	r3, #1
 80087dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80087e6:	697b      	ldr	r3, [r7, #20]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d018      	beq.n	8008834 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68da      	ldr	r2, [r3, #12]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800880a:	441a      	add	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	68da      	ldr	r2, [r3, #12]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	429a      	cmp	r2, r3
 800881a:	d303      	bcc.n	8008824 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	68d9      	ldr	r1, [r3, #12]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882c:	461a      	mov	r2, r3
 800882e:	6838      	ldr	r0, [r7, #0]
 8008830:	f002 f864 	bl	800a8fc <memcpy>
	}
}
 8008834:	bf00      	nop
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008844:	f001 fca0 	bl	800a188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800884e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008850:	e011      	b.n	8008876 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008856:	2b00      	cmp	r3, #0
 8008858:	d012      	beq.n	8008880 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	3324      	adds	r3, #36	@ 0x24
 800885e:	4618      	mov	r0, r3
 8008860:	f000 fd5c 	bl	800931c <xTaskRemoveFromEventList>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800886a:	f000 fe35 	bl	80094d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	3b01      	subs	r3, #1
 8008872:	b2db      	uxtb	r3, r3
 8008874:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800887a:	2b00      	cmp	r3, #0
 800887c:	dce9      	bgt.n	8008852 <prvUnlockQueue+0x16>
 800887e:	e000      	b.n	8008882 <prvUnlockQueue+0x46>
					break;
 8008880:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	22ff      	movs	r2, #255	@ 0xff
 8008886:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800888a:	f001 fcaf 	bl	800a1ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800888e:	f001 fc7b 	bl	800a188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008898:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800889a:	e011      	b.n	80088c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d012      	beq.n	80088ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3310      	adds	r3, #16
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 fd37 	bl	800931c <xTaskRemoveFromEventList>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d001      	beq.n	80088b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80088b4:	f000 fe10 	bl	80094d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80088b8:	7bbb      	ldrb	r3, [r7, #14]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	dce9      	bgt.n	800889c <prvUnlockQueue+0x60>
 80088c8:	e000      	b.n	80088cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80088ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	22ff      	movs	r2, #255	@ 0xff
 80088d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80088d4:	f001 fc8a 	bl	800a1ec <vPortExitCritical>
}
 80088d8:	bf00      	nop
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088e8:	f001 fc4e 	bl	800a188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d102      	bne.n	80088fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80088f4:	2301      	movs	r3, #1
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	e001      	b.n	80088fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80088fa:	2300      	movs	r3, #0
 80088fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088fe:	f001 fc75 	bl	800a1ec <vPortExitCritical>

	return xReturn;
 8008902:	68fb      	ldr	r3, [r7, #12]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008914:	f001 fc38 	bl	800a188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008920:	429a      	cmp	r2, r3
 8008922:	d102      	bne.n	800892a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008924:	2301      	movs	r3, #1
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	e001      	b.n	800892e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800892a:	2300      	movs	r3, #0
 800892c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800892e:	f001 fc5d 	bl	800a1ec <vPortExitCritical>

	return xReturn;
 8008932:	68fb      	ldr	r3, [r7, #12]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008946:	2300      	movs	r3, #0
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	e014      	b.n	8008976 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800894c:	4a0f      	ldr	r2, [pc, #60]	@ (800898c <vQueueAddToRegistry+0x50>)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10b      	bne.n	8008970 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008958:	490c      	ldr	r1, [pc, #48]	@ (800898c <vQueueAddToRegistry+0x50>)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	683a      	ldr	r2, [r7, #0]
 800895e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008962:	4a0a      	ldr	r2, [pc, #40]	@ (800898c <vQueueAddToRegistry+0x50>)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	4413      	add	r3, r2
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800896e:	e006      	b.n	800897e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	3301      	adds	r3, #1
 8008974:	60fb      	str	r3, [r7, #12]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2b07      	cmp	r3, #7
 800897a:	d9e7      	bls.n	800894c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800897c:	bf00      	nop
 800897e:	bf00      	nop
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	20000e64 	.word	0x20000e64

08008990 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089a0:	f001 fbf2 	bl	800a188 <vPortEnterCritical>
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089aa:	b25b      	sxtb	r3, r3
 80089ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b0:	d103      	bne.n	80089ba <vQueueWaitForMessageRestricted+0x2a>
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089c0:	b25b      	sxtb	r3, r3
 80089c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c6:	d103      	bne.n	80089d0 <vQueueWaitForMessageRestricted+0x40>
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089d0:	f001 fc0c 	bl	800a1ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d106      	bne.n	80089ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	3324      	adds	r3, #36	@ 0x24
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	68b9      	ldr	r1, [r7, #8]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 fc6d 	bl	80092c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80089ea:	6978      	ldr	r0, [r7, #20]
 80089ec:	f7ff ff26 	bl	800883c <prvUnlockQueue>
	}
 80089f0:	bf00      	nop
 80089f2:	3718      	adds	r7, #24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08e      	sub	sp, #56	@ 0x38
 80089fc:	af04      	add	r7, sp, #16
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10b      	bne.n	8008a24 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	623b      	str	r3, [r7, #32]
}
 8008a1e:	bf00      	nop
 8008a20:	bf00      	nop
 8008a22:	e7fd      	b.n	8008a20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10b      	bne.n	8008a42 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	61fb      	str	r3, [r7, #28]
}
 8008a3c:	bf00      	nop
 8008a3e:	bf00      	nop
 8008a40:	e7fd      	b.n	8008a3e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a42:	23a8      	movs	r3, #168	@ 0xa8
 8008a44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	2ba8      	cmp	r3, #168	@ 0xa8
 8008a4a:	d00b      	beq.n	8008a64 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	61bb      	str	r3, [r7, #24]
}
 8008a5e:	bf00      	nop
 8008a60:	bf00      	nop
 8008a62:	e7fd      	b.n	8008a60 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d01e      	beq.n	8008aaa <xTaskCreateStatic+0xb2>
 8008a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d01b      	beq.n	8008aaa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a84:	2300      	movs	r3, #0
 8008a86:	9303      	str	r3, [sp, #12]
 8008a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8a:	9302      	str	r3, [sp, #8]
 8008a8c:	f107 0314 	add.w	r3, r7, #20
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	68b9      	ldr	r1, [r7, #8]
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 f851 	bl	8008b44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008aa2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008aa4:	f000 f8f6 	bl	8008c94 <prvAddNewTaskToReadyList>
 8008aa8:	e001      	b.n	8008aae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008aae:	697b      	ldr	r3, [r7, #20]
	}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3728      	adds	r7, #40	@ 0x28
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b08c      	sub	sp, #48	@ 0x30
 8008abc:	af04      	add	r7, sp, #16
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	603b      	str	r3, [r7, #0]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ac8:	88fb      	ldrh	r3, [r7, #6]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f001 fc7d 	bl	800a3cc <pvPortMalloc>
 8008ad2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00e      	beq.n	8008af8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ada:	20a8      	movs	r0, #168	@ 0xa8
 8008adc:	f001 fc76 	bl	800a3cc <pvPortMalloc>
 8008ae0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d003      	beq.n	8008af0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	631a      	str	r2, [r3, #48]	@ 0x30
 8008aee:	e005      	b.n	8008afc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008af0:	6978      	ldr	r0, [r7, #20]
 8008af2:	f001 fd39 	bl	800a568 <vPortFree>
 8008af6:	e001      	b.n	8008afc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008af8:	2300      	movs	r3, #0
 8008afa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d017      	beq.n	8008b32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b0a:	88fa      	ldrh	r2, [r7, #6]
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9303      	str	r3, [sp, #12]
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	9302      	str	r3, [sp, #8]
 8008b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b16:	9301      	str	r3, [sp, #4]
 8008b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	68b9      	ldr	r1, [r7, #8]
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 f80f 	bl	8008b44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b26:	69f8      	ldr	r0, [r7, #28]
 8008b28:	f000 f8b4 	bl	8008c94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	61bb      	str	r3, [r7, #24]
 8008b30:	e002      	b.n	8008b38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b32:	f04f 33ff 	mov.w	r3, #4294967295
 8008b36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b38:	69bb      	ldr	r3, [r7, #24]
	}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3720      	adds	r7, #32
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
 8008b50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	21a5      	movs	r1, #165	@ 0xa5
 8008b5e:	f001 fe43 	bl	800a7e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	f023 0307 	bic.w	r3, r3, #7
 8008b7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	f003 0307 	and.w	r3, r3, #7
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00b      	beq.n	8008b9e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	617b      	str	r3, [r7, #20]
}
 8008b98:	bf00      	nop
 8008b9a:	bf00      	nop
 8008b9c:	e7fd      	b.n	8008b9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d01f      	beq.n	8008be4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	61fb      	str	r3, [r7, #28]
 8008ba8:	e012      	b.n	8008bd0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	4413      	add	r3, r2
 8008bb0:	7819      	ldrb	r1, [r3, #0]
 8008bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	3334      	adds	r3, #52	@ 0x34
 8008bba:	460a      	mov	r2, r1
 8008bbc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d006      	beq.n	8008bd8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	61fb      	str	r3, [r7, #28]
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	2b0f      	cmp	r3, #15
 8008bd4:	d9e9      	bls.n	8008baa <prvInitialiseNewTask+0x66>
 8008bd6:	e000      	b.n	8008bda <prvInitialiseNewTask+0x96>
			{
				break;
 8008bd8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008be2:	e003      	b.n	8008bec <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bee:	2b37      	cmp	r3, #55	@ 0x37
 8008bf0:	d901      	bls.n	8008bf6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008bf2:	2337      	movs	r3, #55	@ 0x37
 8008bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c00:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c04:	2200      	movs	r2, #0
 8008c06:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7ff f965 	bl	8007edc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c14:	3318      	adds	r3, #24
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7ff f960 	bl	8007edc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c30:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	2200      	movs	r2, #0
 8008c36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c44:	3354      	adds	r3, #84	@ 0x54
 8008c46:	224c      	movs	r2, #76	@ 0x4c
 8008c48:	2100      	movs	r1, #0
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f001 fdcc 	bl	800a7e8 <memset>
 8008c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c52:	4a0d      	ldr	r2, [pc, #52]	@ (8008c88 <prvInitialiseNewTask+0x144>)
 8008c54:	659a      	str	r2, [r3, #88]	@ 0x58
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c58:	4a0c      	ldr	r2, [pc, #48]	@ (8008c8c <prvInitialiseNewTask+0x148>)
 8008c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8008c90 <prvInitialiseNewTask+0x14c>)
 8008c60:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	68f9      	ldr	r1, [r7, #12]
 8008c66:	69b8      	ldr	r0, [r7, #24]
 8008c68:	f001 f95a 	bl	8009f20 <pxPortInitialiseStack>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d002      	beq.n	8008c7e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c7e:	bf00      	nop
 8008c80:	3720      	adds	r7, #32
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	200050f8 	.word	0x200050f8
 8008c8c:	20005160 	.word	0x20005160
 8008c90:	200051c8 	.word	0x200051c8

08008c94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c9c:	f001 fa74 	bl	800a188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8008d58 <prvAddNewTaskToReadyList+0xc4>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8008d58 <prvAddNewTaskToReadyList+0xc4>)
 8008ca8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008caa:	4b2c      	ldr	r3, [pc, #176]	@ (8008d5c <prvAddNewTaskToReadyList+0xc8>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d109      	bne.n	8008cc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8008d5c <prvAddNewTaskToReadyList+0xc8>)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cb8:	4b27      	ldr	r3, [pc, #156]	@ (8008d58 <prvAddNewTaskToReadyList+0xc4>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d110      	bne.n	8008ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cc0:	f000 fc2e 	bl	8009520 <prvInitialiseTaskLists>
 8008cc4:	e00d      	b.n	8008ce2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cc6:	4b26      	ldr	r3, [pc, #152]	@ (8008d60 <prvAddNewTaskToReadyList+0xcc>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d109      	bne.n	8008ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cce:	4b23      	ldr	r3, [pc, #140]	@ (8008d5c <prvAddNewTaskToReadyList+0xc8>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d802      	bhi.n	8008ce2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8008d5c <prvAddNewTaskToReadyList+0xc8>)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ce2:	4b20      	ldr	r3, [pc, #128]	@ (8008d64 <prvAddNewTaskToReadyList+0xd0>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8008d64 <prvAddNewTaskToReadyList+0xd0>)
 8008cea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008cec:	4b1d      	ldr	r3, [pc, #116]	@ (8008d64 <prvAddNewTaskToReadyList+0xd0>)
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8008d68 <prvAddNewTaskToReadyList+0xd4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d903      	bls.n	8008d08 <prvAddNewTaskToReadyList+0x74>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d04:	4a18      	ldr	r2, [pc, #96]	@ (8008d68 <prvAddNewTaskToReadyList+0xd4>)
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4a15      	ldr	r2, [pc, #84]	@ (8008d6c <prvAddNewTaskToReadyList+0xd8>)
 8008d16:	441a      	add	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	f7ff f8e9 	bl	8007ef6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d24:	f001 fa62 	bl	800a1ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d28:	4b0d      	ldr	r3, [pc, #52]	@ (8008d60 <prvAddNewTaskToReadyList+0xcc>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00e      	beq.n	8008d4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d30:	4b0a      	ldr	r3, [pc, #40]	@ (8008d5c <prvAddNewTaskToReadyList+0xc8>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d207      	bcs.n	8008d4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8008d70 <prvAddNewTaskToReadyList+0xdc>)
 8008d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d44:	601a      	str	r2, [r3, #0]
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d4e:	bf00      	nop
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20001378 	.word	0x20001378
 8008d5c:	20000ea4 	.word	0x20000ea4
 8008d60:	20001384 	.word	0x20001384
 8008d64:	20001394 	.word	0x20001394
 8008d68:	20001380 	.word	0x20001380
 8008d6c:	20000ea8 	.word	0x20000ea8
 8008d70:	e000ed04 	.word	0xe000ed04

08008d74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d018      	beq.n	8008db8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d86:	4b14      	ldr	r3, [pc, #80]	@ (8008dd8 <vTaskDelay+0x64>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00b      	beq.n	8008da6 <vTaskDelay+0x32>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	60bb      	str	r3, [r7, #8]
}
 8008da0:	bf00      	nop
 8008da2:	bf00      	nop
 8008da4:	e7fd      	b.n	8008da2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008da6:	f000 f88b 	bl	8008ec0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008daa:	2100      	movs	r1, #0
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fd09 	bl	80097c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008db2:	f000 f893 	bl	8008edc <xTaskResumeAll>
 8008db6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d107      	bne.n	8008dce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008dbe:	4b07      	ldr	r3, [pc, #28]	@ (8008ddc <vTaskDelay+0x68>)
 8008dc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008dce:	bf00      	nop
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	200013a0 	.word	0x200013a0
 8008ddc:	e000ed04 	.word	0xe000ed04

08008de0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08a      	sub	sp, #40	@ 0x28
 8008de4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008dee:	463a      	mov	r2, r7
 8008df0:	1d39      	adds	r1, r7, #4
 8008df2:	f107 0308 	add.w	r3, r7, #8
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff f81c 	bl	8007e34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	9202      	str	r2, [sp, #8]
 8008e04:	9301      	str	r3, [sp, #4]
 8008e06:	2300      	movs	r3, #0
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	460a      	mov	r2, r1
 8008e0e:	4924      	ldr	r1, [pc, #144]	@ (8008ea0 <vTaskStartScheduler+0xc0>)
 8008e10:	4824      	ldr	r0, [pc, #144]	@ (8008ea4 <vTaskStartScheduler+0xc4>)
 8008e12:	f7ff fdf1 	bl	80089f8 <xTaskCreateStatic>
 8008e16:	4603      	mov	r3, r0
 8008e18:	4a23      	ldr	r2, [pc, #140]	@ (8008ea8 <vTaskStartScheduler+0xc8>)
 8008e1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e1c:	4b22      	ldr	r3, [pc, #136]	@ (8008ea8 <vTaskStartScheduler+0xc8>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e24:	2301      	movs	r3, #1
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	e001      	b.n	8008e2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d102      	bne.n	8008e3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e34:	f000 fd1a 	bl	800986c <xTimerCreateTimerTask>
 8008e38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d11b      	bne.n	8008e78 <vTaskStartScheduler+0x98>
	__asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	613b      	str	r3, [r7, #16]
}
 8008e52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e54:	4b15      	ldr	r3, [pc, #84]	@ (8008eac <vTaskStartScheduler+0xcc>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3354      	adds	r3, #84	@ 0x54
 8008e5a:	4a15      	ldr	r2, [pc, #84]	@ (8008eb0 <vTaskStartScheduler+0xd0>)
 8008e5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e5e:	4b15      	ldr	r3, [pc, #84]	@ (8008eb4 <vTaskStartScheduler+0xd4>)
 8008e60:	f04f 32ff 	mov.w	r2, #4294967295
 8008e64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e66:	4b14      	ldr	r3, [pc, #80]	@ (8008eb8 <vTaskStartScheduler+0xd8>)
 8008e68:	2201      	movs	r2, #1
 8008e6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e6c:	4b13      	ldr	r3, [pc, #76]	@ (8008ebc <vTaskStartScheduler+0xdc>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e72:	f001 f8e5 	bl	800a040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e76:	e00f      	b.n	8008e98 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7e:	d10b      	bne.n	8008e98 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	60fb      	str	r3, [r7, #12]
}
 8008e92:	bf00      	nop
 8008e94:	bf00      	nop
 8008e96:	e7fd      	b.n	8008e94 <vTaskStartScheduler+0xb4>
}
 8008e98:	bf00      	nop
 8008e9a:	3718      	adds	r7, #24
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	0800b23c 	.word	0x0800b23c
 8008ea4:	080094f1 	.word	0x080094f1
 8008ea8:	2000139c 	.word	0x2000139c
 8008eac:	20000ea4 	.word	0x20000ea4
 8008eb0:	20000014 	.word	0x20000014
 8008eb4:	20001398 	.word	0x20001398
 8008eb8:	20001384 	.word	0x20001384
 8008ebc:	2000137c 	.word	0x2000137c

08008ec0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ec4:	4b04      	ldr	r3, [pc, #16]	@ (8008ed8 <vTaskSuspendAll+0x18>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	4a03      	ldr	r2, [pc, #12]	@ (8008ed8 <vTaskSuspendAll+0x18>)
 8008ecc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ece:	bf00      	nop
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr
 8008ed8:	200013a0 	.word	0x200013a0

08008edc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008eea:	4b42      	ldr	r3, [pc, #264]	@ (8008ff4 <xTaskResumeAll+0x118>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10b      	bne.n	8008f0a <xTaskResumeAll+0x2e>
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	603b      	str	r3, [r7, #0]
}
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop
 8008f08:	e7fd      	b.n	8008f06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f0a:	f001 f93d 	bl	800a188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f0e:	4b39      	ldr	r3, [pc, #228]	@ (8008ff4 <xTaskResumeAll+0x118>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	4a37      	ldr	r2, [pc, #220]	@ (8008ff4 <xTaskResumeAll+0x118>)
 8008f16:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f18:	4b36      	ldr	r3, [pc, #216]	@ (8008ff4 <xTaskResumeAll+0x118>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d162      	bne.n	8008fe6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f20:	4b35      	ldr	r3, [pc, #212]	@ (8008ff8 <xTaskResumeAll+0x11c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d05e      	beq.n	8008fe6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f28:	e02f      	b.n	8008f8a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f2a:	4b34      	ldr	r3, [pc, #208]	@ (8008ffc <xTaskResumeAll+0x120>)
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3318      	adds	r3, #24
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff f83a 	bl	8007fb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	3304      	adds	r3, #4
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7ff f835 	bl	8007fb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8009000 <xTaskResumeAll+0x124>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d903      	bls.n	8008f5a <xTaskResumeAll+0x7e>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f56:	4a2a      	ldr	r2, [pc, #168]	@ (8009000 <xTaskResumeAll+0x124>)
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f5e:	4613      	mov	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4a27      	ldr	r2, [pc, #156]	@ (8009004 <xTaskResumeAll+0x128>)
 8008f68:	441a      	add	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	4619      	mov	r1, r3
 8008f70:	4610      	mov	r0, r2
 8008f72:	f7fe ffc0 	bl	8007ef6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f7a:	4b23      	ldr	r3, [pc, #140]	@ (8009008 <xTaskResumeAll+0x12c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d302      	bcc.n	8008f8a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008f84:	4b21      	ldr	r3, [pc, #132]	@ (800900c <xTaskResumeAll+0x130>)
 8008f86:	2201      	movs	r2, #1
 8008f88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8008ffc <xTaskResumeAll+0x120>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1cb      	bne.n	8008f2a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d001      	beq.n	8008f9c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f98:	f000 fb66 	bl	8009668 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8009010 <xTaskResumeAll+0x134>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d010      	beq.n	8008fca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fa8:	f000 f846 	bl	8009038 <xTaskIncrementTick>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008fb2:	4b16      	ldr	r3, [pc, #88]	@ (800900c <xTaskResumeAll+0x130>)
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1f1      	bne.n	8008fa8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008fc4:	4b12      	ldr	r3, [pc, #72]	@ (8009010 <xTaskResumeAll+0x134>)
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008fca:	4b10      	ldr	r3, [pc, #64]	@ (800900c <xTaskResumeAll+0x130>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d009      	beq.n	8008fe6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8009014 <xTaskResumeAll+0x138>)
 8008fd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fe6:	f001 f901 	bl	800a1ec <vPortExitCritical>

	return xAlreadyYielded;
 8008fea:	68bb      	ldr	r3, [r7, #8]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	200013a0 	.word	0x200013a0
 8008ff8:	20001378 	.word	0x20001378
 8008ffc:	20001338 	.word	0x20001338
 8009000:	20001380 	.word	0x20001380
 8009004:	20000ea8 	.word	0x20000ea8
 8009008:	20000ea4 	.word	0x20000ea4
 800900c:	2000138c 	.word	0x2000138c
 8009010:	20001388 	.word	0x20001388
 8009014:	e000ed04 	.word	0xe000ed04

08009018 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800901e:	4b05      	ldr	r3, [pc, #20]	@ (8009034 <xTaskGetTickCount+0x1c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009024:	687b      	ldr	r3, [r7, #4]
}
 8009026:	4618      	mov	r0, r3
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	2000137c 	.word	0x2000137c

08009038 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800903e:	2300      	movs	r3, #0
 8009040:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009042:	4b4f      	ldr	r3, [pc, #316]	@ (8009180 <xTaskIncrementTick+0x148>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	f040 8090 	bne.w	800916c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800904c:	4b4d      	ldr	r3, [pc, #308]	@ (8009184 <xTaskIncrementTick+0x14c>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3301      	adds	r3, #1
 8009052:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009054:	4a4b      	ldr	r2, [pc, #300]	@ (8009184 <xTaskIncrementTick+0x14c>)
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d121      	bne.n	80090a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009060:	4b49      	ldr	r3, [pc, #292]	@ (8009188 <xTaskIncrementTick+0x150>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00b      	beq.n	8009082 <xTaskIncrementTick+0x4a>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	603b      	str	r3, [r7, #0]
}
 800907c:	bf00      	nop
 800907e:	bf00      	nop
 8009080:	e7fd      	b.n	800907e <xTaskIncrementTick+0x46>
 8009082:	4b41      	ldr	r3, [pc, #260]	@ (8009188 <xTaskIncrementTick+0x150>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	4b40      	ldr	r3, [pc, #256]	@ (800918c <xTaskIncrementTick+0x154>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a3e      	ldr	r2, [pc, #248]	@ (8009188 <xTaskIncrementTick+0x150>)
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	4a3e      	ldr	r2, [pc, #248]	@ (800918c <xTaskIncrementTick+0x154>)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	4b3e      	ldr	r3, [pc, #248]	@ (8009190 <xTaskIncrementTick+0x158>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3301      	adds	r3, #1
 800909c:	4a3c      	ldr	r2, [pc, #240]	@ (8009190 <xTaskIncrementTick+0x158>)
 800909e:	6013      	str	r3, [r2, #0]
 80090a0:	f000 fae2 	bl	8009668 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090a4:	4b3b      	ldr	r3, [pc, #236]	@ (8009194 <xTaskIncrementTick+0x15c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d349      	bcc.n	8009142 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ae:	4b36      	ldr	r3, [pc, #216]	@ (8009188 <xTaskIncrementTick+0x150>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d104      	bne.n	80090c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b8:	4b36      	ldr	r3, [pc, #216]	@ (8009194 <xTaskIncrementTick+0x15c>)
 80090ba:	f04f 32ff 	mov.w	r2, #4294967295
 80090be:	601a      	str	r2, [r3, #0]
					break;
 80090c0:	e03f      	b.n	8009142 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090c2:	4b31      	ldr	r3, [pc, #196]	@ (8009188 <xTaskIncrementTick+0x150>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d203      	bcs.n	80090e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090da:	4a2e      	ldr	r2, [pc, #184]	@ (8009194 <xTaskIncrementTick+0x15c>)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090e0:	e02f      	b.n	8009142 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	3304      	adds	r3, #4
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fe ff62 	bl	8007fb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d004      	beq.n	80090fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	3318      	adds	r3, #24
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fe ff59 	bl	8007fb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009102:	4b25      	ldr	r3, [pc, #148]	@ (8009198 <xTaskIncrementTick+0x160>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d903      	bls.n	8009112 <xTaskIncrementTick+0xda>
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910e:	4a22      	ldr	r2, [pc, #136]	@ (8009198 <xTaskIncrementTick+0x160>)
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4a1f      	ldr	r2, [pc, #124]	@ (800919c <xTaskIncrementTick+0x164>)
 8009120:	441a      	add	r2, r3
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	3304      	adds	r3, #4
 8009126:	4619      	mov	r1, r3
 8009128:	4610      	mov	r0, r2
 800912a:	f7fe fee4 	bl	8007ef6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009132:	4b1b      	ldr	r3, [pc, #108]	@ (80091a0 <xTaskIncrementTick+0x168>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009138:	429a      	cmp	r2, r3
 800913a:	d3b8      	bcc.n	80090ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800913c:	2301      	movs	r3, #1
 800913e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009140:	e7b5      	b.n	80090ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009142:	4b17      	ldr	r3, [pc, #92]	@ (80091a0 <xTaskIncrementTick+0x168>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009148:	4914      	ldr	r1, [pc, #80]	@ (800919c <xTaskIncrementTick+0x164>)
 800914a:	4613      	mov	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	440b      	add	r3, r1
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d901      	bls.n	800915e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800915a:	2301      	movs	r3, #1
 800915c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800915e:	4b11      	ldr	r3, [pc, #68]	@ (80091a4 <xTaskIncrementTick+0x16c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d007      	beq.n	8009176 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009166:	2301      	movs	r3, #1
 8009168:	617b      	str	r3, [r7, #20]
 800916a:	e004      	b.n	8009176 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800916c:	4b0e      	ldr	r3, [pc, #56]	@ (80091a8 <xTaskIncrementTick+0x170>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3301      	adds	r3, #1
 8009172:	4a0d      	ldr	r2, [pc, #52]	@ (80091a8 <xTaskIncrementTick+0x170>)
 8009174:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009176:	697b      	ldr	r3, [r7, #20]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	200013a0 	.word	0x200013a0
 8009184:	2000137c 	.word	0x2000137c
 8009188:	20001330 	.word	0x20001330
 800918c:	20001334 	.word	0x20001334
 8009190:	20001390 	.word	0x20001390
 8009194:	20001398 	.word	0x20001398
 8009198:	20001380 	.word	0x20001380
 800919c:	20000ea8 	.word	0x20000ea8
 80091a0:	20000ea4 	.word	0x20000ea4
 80091a4:	2000138c 	.word	0x2000138c
 80091a8:	20001388 	.word	0x20001388

080091ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091b2:	4b2b      	ldr	r3, [pc, #172]	@ (8009260 <vTaskSwitchContext+0xb4>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091ba:	4b2a      	ldr	r3, [pc, #168]	@ (8009264 <vTaskSwitchContext+0xb8>)
 80091bc:	2201      	movs	r2, #1
 80091be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091c0:	e047      	b.n	8009252 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80091c2:	4b28      	ldr	r3, [pc, #160]	@ (8009264 <vTaskSwitchContext+0xb8>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c8:	4b27      	ldr	r3, [pc, #156]	@ (8009268 <vTaskSwitchContext+0xbc>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	60fb      	str	r3, [r7, #12]
 80091ce:	e011      	b.n	80091f4 <vTaskSwitchContext+0x48>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10b      	bne.n	80091ee <vTaskSwitchContext+0x42>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	607b      	str	r3, [r7, #4]
}
 80091e8:	bf00      	nop
 80091ea:	bf00      	nop
 80091ec:	e7fd      	b.n	80091ea <vTaskSwitchContext+0x3e>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3b01      	subs	r3, #1
 80091f2:	60fb      	str	r3, [r7, #12]
 80091f4:	491d      	ldr	r1, [pc, #116]	@ (800926c <vTaskSwitchContext+0xc0>)
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	4613      	mov	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	440b      	add	r3, r1
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d0e3      	beq.n	80091d0 <vTaskSwitchContext+0x24>
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	4613      	mov	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4a16      	ldr	r2, [pc, #88]	@ (800926c <vTaskSwitchContext+0xc0>)
 8009214:	4413      	add	r3, r2
 8009216:	60bb      	str	r3, [r7, #8]
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	605a      	str	r2, [r3, #4]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	3308      	adds	r3, #8
 800922a:	429a      	cmp	r2, r3
 800922c:	d104      	bne.n	8009238 <vTaskSwitchContext+0x8c>
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	605a      	str	r2, [r3, #4]
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	4a0c      	ldr	r2, [pc, #48]	@ (8009270 <vTaskSwitchContext+0xc4>)
 8009240:	6013      	str	r3, [r2, #0]
 8009242:	4a09      	ldr	r2, [pc, #36]	@ (8009268 <vTaskSwitchContext+0xbc>)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009248:	4b09      	ldr	r3, [pc, #36]	@ (8009270 <vTaskSwitchContext+0xc4>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3354      	adds	r3, #84	@ 0x54
 800924e:	4a09      	ldr	r2, [pc, #36]	@ (8009274 <vTaskSwitchContext+0xc8>)
 8009250:	6013      	str	r3, [r2, #0]
}
 8009252:	bf00      	nop
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	200013a0 	.word	0x200013a0
 8009264:	2000138c 	.word	0x2000138c
 8009268:	20001380 	.word	0x20001380
 800926c:	20000ea8 	.word	0x20000ea8
 8009270:	20000ea4 	.word	0x20000ea4
 8009274:	20000014 	.word	0x20000014

08009278 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10b      	bne.n	80092a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	60fb      	str	r3, [r7, #12]
}
 800929a:	bf00      	nop
 800929c:	bf00      	nop
 800929e:	e7fd      	b.n	800929c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092a0:	4b07      	ldr	r3, [pc, #28]	@ (80092c0 <vTaskPlaceOnEventList+0x48>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3318      	adds	r3, #24
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7fe fe48 	bl	8007f3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092ae:	2101      	movs	r1, #1
 80092b0:	6838      	ldr	r0, [r7, #0]
 80092b2:	f000 fa87 	bl	80097c4 <prvAddCurrentTaskToDelayedList>
}
 80092b6:	bf00      	nop
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20000ea4 	.word	0x20000ea4

080092c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10b      	bne.n	80092ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	617b      	str	r3, [r7, #20]
}
 80092e8:	bf00      	nop
 80092ea:	bf00      	nop
 80092ec:	e7fd      	b.n	80092ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009318 <vTaskPlaceOnEventListRestricted+0x54>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3318      	adds	r3, #24
 80092f4:	4619      	mov	r1, r3
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f7fe fdfd 	bl	8007ef6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d002      	beq.n	8009308 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009302:	f04f 33ff 	mov.w	r3, #4294967295
 8009306:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009308:	6879      	ldr	r1, [r7, #4]
 800930a:	68b8      	ldr	r0, [r7, #8]
 800930c:	f000 fa5a 	bl	80097c4 <prvAddCurrentTaskToDelayedList>
	}
 8009310:	bf00      	nop
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	20000ea4 	.word	0x20000ea4

0800931c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10b      	bne.n	800934a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	60fb      	str	r3, [r7, #12]
}
 8009344:	bf00      	nop
 8009346:	bf00      	nop
 8009348:	e7fd      	b.n	8009346 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	3318      	adds	r3, #24
 800934e:	4618      	mov	r0, r3
 8009350:	f7fe fe2e 	bl	8007fb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009354:	4b1d      	ldr	r3, [pc, #116]	@ (80093cc <xTaskRemoveFromEventList+0xb0>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d11d      	bne.n	8009398 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	3304      	adds	r3, #4
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe fe25 	bl	8007fb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800936a:	4b19      	ldr	r3, [pc, #100]	@ (80093d0 <xTaskRemoveFromEventList+0xb4>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	429a      	cmp	r2, r3
 8009370:	d903      	bls.n	800937a <xTaskRemoveFromEventList+0x5e>
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009376:	4a16      	ldr	r2, [pc, #88]	@ (80093d0 <xTaskRemoveFromEventList+0xb4>)
 8009378:	6013      	str	r3, [r2, #0]
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800937e:	4613      	mov	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4a13      	ldr	r2, [pc, #76]	@ (80093d4 <xTaskRemoveFromEventList+0xb8>)
 8009388:	441a      	add	r2, r3
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	3304      	adds	r3, #4
 800938e:	4619      	mov	r1, r3
 8009390:	4610      	mov	r0, r2
 8009392:	f7fe fdb0 	bl	8007ef6 <vListInsertEnd>
 8009396:	e005      	b.n	80093a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	3318      	adds	r3, #24
 800939c:	4619      	mov	r1, r3
 800939e:	480e      	ldr	r0, [pc, #56]	@ (80093d8 <xTaskRemoveFromEventList+0xbc>)
 80093a0:	f7fe fda9 	bl	8007ef6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093a8:	4b0c      	ldr	r3, [pc, #48]	@ (80093dc <xTaskRemoveFromEventList+0xc0>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d905      	bls.n	80093be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093b2:	2301      	movs	r3, #1
 80093b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093b6:	4b0a      	ldr	r3, [pc, #40]	@ (80093e0 <xTaskRemoveFromEventList+0xc4>)
 80093b8:	2201      	movs	r2, #1
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	e001      	b.n	80093c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80093be:	2300      	movs	r3, #0
 80093c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093c2:	697b      	ldr	r3, [r7, #20]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	200013a0 	.word	0x200013a0
 80093d0:	20001380 	.word	0x20001380
 80093d4:	20000ea8 	.word	0x20000ea8
 80093d8:	20001338 	.word	0x20001338
 80093dc:	20000ea4 	.word	0x20000ea4
 80093e0:	2000138c 	.word	0x2000138c

080093e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093ec:	4b06      	ldr	r3, [pc, #24]	@ (8009408 <vTaskInternalSetTimeOutState+0x24>)
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093f4:	4b05      	ldr	r3, [pc, #20]	@ (800940c <vTaskInternalSetTimeOutState+0x28>)
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	605a      	str	r2, [r3, #4]
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	20001390 	.word	0x20001390
 800940c:	2000137c 	.word	0x2000137c

08009410 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10b      	bne.n	8009438 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	613b      	str	r3, [r7, #16]
}
 8009432:	bf00      	nop
 8009434:	bf00      	nop
 8009436:	e7fd      	b.n	8009434 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10b      	bne.n	8009456 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	60fb      	str	r3, [r7, #12]
}
 8009450:	bf00      	nop
 8009452:	bf00      	nop
 8009454:	e7fd      	b.n	8009452 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009456:	f000 fe97 	bl	800a188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800945a:	4b1d      	ldr	r3, [pc, #116]	@ (80094d0 <xTaskCheckForTimeOut+0xc0>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	69ba      	ldr	r2, [r7, #24]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009472:	d102      	bne.n	800947a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009474:	2300      	movs	r3, #0
 8009476:	61fb      	str	r3, [r7, #28]
 8009478:	e023      	b.n	80094c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	4b15      	ldr	r3, [pc, #84]	@ (80094d4 <xTaskCheckForTimeOut+0xc4>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	429a      	cmp	r2, r3
 8009484:	d007      	beq.n	8009496 <xTaskCheckForTimeOut+0x86>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	69ba      	ldr	r2, [r7, #24]
 800948c:	429a      	cmp	r2, r3
 800948e:	d302      	bcc.n	8009496 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009490:	2301      	movs	r3, #1
 8009492:	61fb      	str	r3, [r7, #28]
 8009494:	e015      	b.n	80094c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	429a      	cmp	r2, r3
 800949e:	d20b      	bcs.n	80094b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	1ad2      	subs	r2, r2, r3
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff ff99 	bl	80093e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094b2:	2300      	movs	r3, #0
 80094b4:	61fb      	str	r3, [r7, #28]
 80094b6:	e004      	b.n	80094c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2200      	movs	r2, #0
 80094bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094be:	2301      	movs	r3, #1
 80094c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094c2:	f000 fe93 	bl	800a1ec <vPortExitCritical>

	return xReturn;
 80094c6:	69fb      	ldr	r3, [r7, #28]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3720      	adds	r7, #32
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	2000137c 	.word	0x2000137c
 80094d4:	20001390 	.word	0x20001390

080094d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094d8:	b480      	push	{r7}
 80094da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094dc:	4b03      	ldr	r3, [pc, #12]	@ (80094ec <vTaskMissedYield+0x14>)
 80094de:	2201      	movs	r2, #1
 80094e0:	601a      	str	r2, [r3, #0]
}
 80094e2:	bf00      	nop
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	2000138c 	.word	0x2000138c

080094f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094f8:	f000 f852 	bl	80095a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094fc:	4b06      	ldr	r3, [pc, #24]	@ (8009518 <prvIdleTask+0x28>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d9f9      	bls.n	80094f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009504:	4b05      	ldr	r3, [pc, #20]	@ (800951c <prvIdleTask+0x2c>)
 8009506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009514:	e7f0      	b.n	80094f8 <prvIdleTask+0x8>
 8009516:	bf00      	nop
 8009518:	20000ea8 	.word	0x20000ea8
 800951c:	e000ed04 	.word	0xe000ed04

08009520 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009526:	2300      	movs	r3, #0
 8009528:	607b      	str	r3, [r7, #4]
 800952a:	e00c      	b.n	8009546 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4a12      	ldr	r2, [pc, #72]	@ (8009580 <prvInitialiseTaskLists+0x60>)
 8009538:	4413      	add	r3, r2
 800953a:	4618      	mov	r0, r3
 800953c:	f7fe fcae 	bl	8007e9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	3301      	adds	r3, #1
 8009544:	607b      	str	r3, [r7, #4]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b37      	cmp	r3, #55	@ 0x37
 800954a:	d9ef      	bls.n	800952c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800954c:	480d      	ldr	r0, [pc, #52]	@ (8009584 <prvInitialiseTaskLists+0x64>)
 800954e:	f7fe fca5 	bl	8007e9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009552:	480d      	ldr	r0, [pc, #52]	@ (8009588 <prvInitialiseTaskLists+0x68>)
 8009554:	f7fe fca2 	bl	8007e9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009558:	480c      	ldr	r0, [pc, #48]	@ (800958c <prvInitialiseTaskLists+0x6c>)
 800955a:	f7fe fc9f 	bl	8007e9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800955e:	480c      	ldr	r0, [pc, #48]	@ (8009590 <prvInitialiseTaskLists+0x70>)
 8009560:	f7fe fc9c 	bl	8007e9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009564:	480b      	ldr	r0, [pc, #44]	@ (8009594 <prvInitialiseTaskLists+0x74>)
 8009566:	f7fe fc99 	bl	8007e9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800956a:	4b0b      	ldr	r3, [pc, #44]	@ (8009598 <prvInitialiseTaskLists+0x78>)
 800956c:	4a05      	ldr	r2, [pc, #20]	@ (8009584 <prvInitialiseTaskLists+0x64>)
 800956e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009570:	4b0a      	ldr	r3, [pc, #40]	@ (800959c <prvInitialiseTaskLists+0x7c>)
 8009572:	4a05      	ldr	r2, [pc, #20]	@ (8009588 <prvInitialiseTaskLists+0x68>)
 8009574:	601a      	str	r2, [r3, #0]
}
 8009576:	bf00      	nop
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	20000ea8 	.word	0x20000ea8
 8009584:	20001308 	.word	0x20001308
 8009588:	2000131c 	.word	0x2000131c
 800958c:	20001338 	.word	0x20001338
 8009590:	2000134c 	.word	0x2000134c
 8009594:	20001364 	.word	0x20001364
 8009598:	20001330 	.word	0x20001330
 800959c:	20001334 	.word	0x20001334

080095a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095a6:	e019      	b.n	80095dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80095a8:	f000 fdee 	bl	800a188 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ac:	4b10      	ldr	r3, [pc, #64]	@ (80095f0 <prvCheckTasksWaitingTermination+0x50>)
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3304      	adds	r3, #4
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fe fcf9 	bl	8007fb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095be:	4b0d      	ldr	r3, [pc, #52]	@ (80095f4 <prvCheckTasksWaitingTermination+0x54>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	4a0b      	ldr	r2, [pc, #44]	@ (80095f4 <prvCheckTasksWaitingTermination+0x54>)
 80095c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095c8:	4b0b      	ldr	r3, [pc, #44]	@ (80095f8 <prvCheckTasksWaitingTermination+0x58>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	4a0a      	ldr	r2, [pc, #40]	@ (80095f8 <prvCheckTasksWaitingTermination+0x58>)
 80095d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095d2:	f000 fe0b 	bl	800a1ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f810 	bl	80095fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095dc:	4b06      	ldr	r3, [pc, #24]	@ (80095f8 <prvCheckTasksWaitingTermination+0x58>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e1      	bne.n	80095a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	2000134c 	.word	0x2000134c
 80095f4:	20001378 	.word	0x20001378
 80095f8:	20001360 	.word	0x20001360

080095fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3354      	adds	r3, #84	@ 0x54
 8009608:	4618      	mov	r0, r3
 800960a:	f001 f8f5 	bl	800a7f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009614:	2b00      	cmp	r3, #0
 8009616:	d108      	bne.n	800962a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800961c:	4618      	mov	r0, r3
 800961e:	f000 ffa3 	bl	800a568 <vPortFree>
				vPortFree( pxTCB );
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 ffa0 	bl	800a568 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009628:	e019      	b.n	800965e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009630:	2b01      	cmp	r3, #1
 8009632:	d103      	bne.n	800963c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 ff97 	bl	800a568 <vPortFree>
	}
 800963a:	e010      	b.n	800965e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009642:	2b02      	cmp	r3, #2
 8009644:	d00b      	beq.n	800965e <prvDeleteTCB+0x62>
	__asm volatile
 8009646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	60fb      	str	r3, [r7, #12]
}
 8009658:	bf00      	nop
 800965a:	bf00      	nop
 800965c:	e7fd      	b.n	800965a <prvDeleteTCB+0x5e>
	}
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
	...

08009668 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800966e:	4b0c      	ldr	r3, [pc, #48]	@ (80096a0 <prvResetNextTaskUnblockTime+0x38>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d104      	bne.n	8009682 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009678:	4b0a      	ldr	r3, [pc, #40]	@ (80096a4 <prvResetNextTaskUnblockTime+0x3c>)
 800967a:	f04f 32ff 	mov.w	r2, #4294967295
 800967e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009680:	e008      	b.n	8009694 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009682:	4b07      	ldr	r3, [pc, #28]	@ (80096a0 <prvResetNextTaskUnblockTime+0x38>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	4a04      	ldr	r2, [pc, #16]	@ (80096a4 <prvResetNextTaskUnblockTime+0x3c>)
 8009692:	6013      	str	r3, [r2, #0]
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	20001330 	.word	0x20001330
 80096a4:	20001398 	.word	0x20001398

080096a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096ae:	4b0b      	ldr	r3, [pc, #44]	@ (80096dc <xTaskGetSchedulerState+0x34>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d102      	bne.n	80096bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096b6:	2301      	movs	r3, #1
 80096b8:	607b      	str	r3, [r7, #4]
 80096ba:	e008      	b.n	80096ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096bc:	4b08      	ldr	r3, [pc, #32]	@ (80096e0 <xTaskGetSchedulerState+0x38>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d102      	bne.n	80096ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096c4:	2302      	movs	r3, #2
 80096c6:	607b      	str	r3, [r7, #4]
 80096c8:	e001      	b.n	80096ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096ca:	2300      	movs	r3, #0
 80096cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096ce:	687b      	ldr	r3, [r7, #4]
	}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	20001384 	.word	0x20001384
 80096e0:	200013a0 	.word	0x200013a0

080096e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096f0:	2300      	movs	r3, #0
 80096f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d058      	beq.n	80097ac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096fa:	4b2f      	ldr	r3, [pc, #188]	@ (80097b8 <xTaskPriorityDisinherit+0xd4>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	429a      	cmp	r2, r3
 8009702:	d00b      	beq.n	800971c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	60fb      	str	r3, [r7, #12]
}
 8009716:	bf00      	nop
 8009718:	bf00      	nop
 800971a:	e7fd      	b.n	8009718 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10b      	bne.n	800973c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	60bb      	str	r3, [r7, #8]
}
 8009736:	bf00      	nop
 8009738:	bf00      	nop
 800973a:	e7fd      	b.n	8009738 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009740:	1e5a      	subs	r2, r3, #1
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800974e:	429a      	cmp	r2, r3
 8009750:	d02c      	beq.n	80097ac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009756:	2b00      	cmp	r3, #0
 8009758:	d128      	bne.n	80097ac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	3304      	adds	r3, #4
 800975e:	4618      	mov	r0, r3
 8009760:	f7fe fc26 	bl	8007fb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009770:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800977c:	4b0f      	ldr	r3, [pc, #60]	@ (80097bc <xTaskPriorityDisinherit+0xd8>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	429a      	cmp	r2, r3
 8009782:	d903      	bls.n	800978c <xTaskPriorityDisinherit+0xa8>
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009788:	4a0c      	ldr	r2, [pc, #48]	@ (80097bc <xTaskPriorityDisinherit+0xd8>)
 800978a:	6013      	str	r3, [r2, #0]
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009790:	4613      	mov	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4413      	add	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4a09      	ldr	r2, [pc, #36]	@ (80097c0 <xTaskPriorityDisinherit+0xdc>)
 800979a:	441a      	add	r2, r3
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	3304      	adds	r3, #4
 80097a0:	4619      	mov	r1, r3
 80097a2:	4610      	mov	r0, r2
 80097a4:	f7fe fba7 	bl	8007ef6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80097a8:	2301      	movs	r3, #1
 80097aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097ac:	697b      	ldr	r3, [r7, #20]
	}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3718      	adds	r7, #24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	20000ea4 	.word	0x20000ea4
 80097bc:	20001380 	.word	0x20001380
 80097c0:	20000ea8 	.word	0x20000ea8

080097c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097ce:	4b21      	ldr	r3, [pc, #132]	@ (8009854 <prvAddCurrentTaskToDelayedList+0x90>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097d4:	4b20      	ldr	r3, [pc, #128]	@ (8009858 <prvAddCurrentTaskToDelayedList+0x94>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3304      	adds	r3, #4
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fe fbe8 	bl	8007fb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e6:	d10a      	bne.n	80097fe <prvAddCurrentTaskToDelayedList+0x3a>
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d007      	beq.n	80097fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009858 <prvAddCurrentTaskToDelayedList+0x94>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3304      	adds	r3, #4
 80097f4:	4619      	mov	r1, r3
 80097f6:	4819      	ldr	r0, [pc, #100]	@ (800985c <prvAddCurrentTaskToDelayedList+0x98>)
 80097f8:	f7fe fb7d 	bl	8007ef6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097fc:	e026      	b.n	800984c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4413      	add	r3, r2
 8009804:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009806:	4b14      	ldr	r3, [pc, #80]	@ (8009858 <prvAddCurrentTaskToDelayedList+0x94>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	429a      	cmp	r2, r3
 8009814:	d209      	bcs.n	800982a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009816:	4b12      	ldr	r3, [pc, #72]	@ (8009860 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	4b0f      	ldr	r3, [pc, #60]	@ (8009858 <prvAddCurrentTaskToDelayedList+0x94>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3304      	adds	r3, #4
 8009820:	4619      	mov	r1, r3
 8009822:	4610      	mov	r0, r2
 8009824:	f7fe fb8b 	bl	8007f3e <vListInsert>
}
 8009828:	e010      	b.n	800984c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800982a:	4b0e      	ldr	r3, [pc, #56]	@ (8009864 <prvAddCurrentTaskToDelayedList+0xa0>)
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	4b0a      	ldr	r3, [pc, #40]	@ (8009858 <prvAddCurrentTaskToDelayedList+0x94>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3304      	adds	r3, #4
 8009834:	4619      	mov	r1, r3
 8009836:	4610      	mov	r0, r2
 8009838:	f7fe fb81 	bl	8007f3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800983c:	4b0a      	ldr	r3, [pc, #40]	@ (8009868 <prvAddCurrentTaskToDelayedList+0xa4>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	429a      	cmp	r2, r3
 8009844:	d202      	bcs.n	800984c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009846:	4a08      	ldr	r2, [pc, #32]	@ (8009868 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	6013      	str	r3, [r2, #0]
}
 800984c:	bf00      	nop
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	2000137c 	.word	0x2000137c
 8009858:	20000ea4 	.word	0x20000ea4
 800985c:	20001364 	.word	0x20001364
 8009860:	20001334 	.word	0x20001334
 8009864:	20001330 	.word	0x20001330
 8009868:	20001398 	.word	0x20001398

0800986c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b08a      	sub	sp, #40	@ 0x28
 8009870:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009872:	2300      	movs	r3, #0
 8009874:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009876:	f000 fb13 	bl	8009ea0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800987a:	4b1d      	ldr	r3, [pc, #116]	@ (80098f0 <xTimerCreateTimerTask+0x84>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d021      	beq.n	80098c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009882:	2300      	movs	r3, #0
 8009884:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009886:	2300      	movs	r3, #0
 8009888:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800988a:	1d3a      	adds	r2, r7, #4
 800988c:	f107 0108 	add.w	r1, r7, #8
 8009890:	f107 030c 	add.w	r3, r7, #12
 8009894:	4618      	mov	r0, r3
 8009896:	f7fe fae7 	bl	8007e68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800989a:	6879      	ldr	r1, [r7, #4]
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	9202      	str	r2, [sp, #8]
 80098a2:	9301      	str	r3, [sp, #4]
 80098a4:	2302      	movs	r3, #2
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	2300      	movs	r3, #0
 80098aa:	460a      	mov	r2, r1
 80098ac:	4911      	ldr	r1, [pc, #68]	@ (80098f4 <xTimerCreateTimerTask+0x88>)
 80098ae:	4812      	ldr	r0, [pc, #72]	@ (80098f8 <xTimerCreateTimerTask+0x8c>)
 80098b0:	f7ff f8a2 	bl	80089f8 <xTaskCreateStatic>
 80098b4:	4603      	mov	r3, r0
 80098b6:	4a11      	ldr	r2, [pc, #68]	@ (80098fc <xTimerCreateTimerTask+0x90>)
 80098b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80098ba:	4b10      	ldr	r3, [pc, #64]	@ (80098fc <xTimerCreateTimerTask+0x90>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098c2:	2301      	movs	r3, #1
 80098c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10b      	bne.n	80098e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80098cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d0:	f383 8811 	msr	BASEPRI, r3
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	613b      	str	r3, [r7, #16]
}
 80098de:	bf00      	nop
 80098e0:	bf00      	nop
 80098e2:	e7fd      	b.n	80098e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098e4:	697b      	ldr	r3, [r7, #20]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3718      	adds	r7, #24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	200013d4 	.word	0x200013d4
 80098f4:	0800b244 	.word	0x0800b244
 80098f8:	08009a39 	.word	0x08009a39
 80098fc:	200013d8 	.word	0x200013d8

08009900 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b08a      	sub	sp, #40	@ 0x28
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800990e:	2300      	movs	r3, #0
 8009910:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10b      	bne.n	8009930 <xTimerGenericCommand+0x30>
	__asm volatile
 8009918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	623b      	str	r3, [r7, #32]
}
 800992a:	bf00      	nop
 800992c:	bf00      	nop
 800992e:	e7fd      	b.n	800992c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009930:	4b19      	ldr	r3, [pc, #100]	@ (8009998 <xTimerGenericCommand+0x98>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d02a      	beq.n	800998e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	2b05      	cmp	r3, #5
 8009948:	dc18      	bgt.n	800997c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800994a:	f7ff fead 	bl	80096a8 <xTaskGetSchedulerState>
 800994e:	4603      	mov	r3, r0
 8009950:	2b02      	cmp	r3, #2
 8009952:	d109      	bne.n	8009968 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009954:	4b10      	ldr	r3, [pc, #64]	@ (8009998 <xTimerGenericCommand+0x98>)
 8009956:	6818      	ldr	r0, [r3, #0]
 8009958:	f107 0110 	add.w	r1, r7, #16
 800995c:	2300      	movs	r3, #0
 800995e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009960:	f7fe fc5a 	bl	8008218 <xQueueGenericSend>
 8009964:	6278      	str	r0, [r7, #36]	@ 0x24
 8009966:	e012      	b.n	800998e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009968:	4b0b      	ldr	r3, [pc, #44]	@ (8009998 <xTimerGenericCommand+0x98>)
 800996a:	6818      	ldr	r0, [r3, #0]
 800996c:	f107 0110 	add.w	r1, r7, #16
 8009970:	2300      	movs	r3, #0
 8009972:	2200      	movs	r2, #0
 8009974:	f7fe fc50 	bl	8008218 <xQueueGenericSend>
 8009978:	6278      	str	r0, [r7, #36]	@ 0x24
 800997a:	e008      	b.n	800998e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800997c:	4b06      	ldr	r3, [pc, #24]	@ (8009998 <xTimerGenericCommand+0x98>)
 800997e:	6818      	ldr	r0, [r3, #0]
 8009980:	f107 0110 	add.w	r1, r7, #16
 8009984:	2300      	movs	r3, #0
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	f7fe fd48 	bl	800841c <xQueueGenericSendFromISR>
 800998c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800998e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009990:	4618      	mov	r0, r3
 8009992:	3728      	adds	r7, #40	@ 0x28
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	200013d4 	.word	0x200013d4

0800999c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b088      	sub	sp, #32
 80099a0:	af02      	add	r7, sp, #8
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099a6:	4b23      	ldr	r3, [pc, #140]	@ (8009a34 <prvProcessExpiredTimer+0x98>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	3304      	adds	r3, #4
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fe fafb 	bl	8007fb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d023      	beq.n	8009a10 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	699a      	ldr	r2, [r3, #24]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	18d1      	adds	r1, r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	6978      	ldr	r0, [r7, #20]
 80099d6:	f000 f8d5 	bl	8009b84 <prvInsertTimerInActiveList>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d020      	beq.n	8009a22 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099e0:	2300      	movs	r3, #0
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	2300      	movs	r3, #0
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	2100      	movs	r1, #0
 80099ea:	6978      	ldr	r0, [r7, #20]
 80099ec:	f7ff ff88 	bl	8009900 <xTimerGenericCommand>
 80099f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d114      	bne.n	8009a22 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80099f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	60fb      	str	r3, [r7, #12]
}
 8009a0a:	bf00      	nop
 8009a0c:	bf00      	nop
 8009a0e:	e7fd      	b.n	8009a0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a16:	f023 0301 	bic.w	r3, r3, #1
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	6978      	ldr	r0, [r7, #20]
 8009a28:	4798      	blx	r3
}
 8009a2a:	bf00      	nop
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	200013cc 	.word	0x200013cc

08009a38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a40:	f107 0308 	add.w	r3, r7, #8
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 f859 	bl	8009afc <prvGetNextExpireTime>
 8009a4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	4619      	mov	r1, r3
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f000 f805 	bl	8009a60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a56:	f000 f8d7 	bl	8009c08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a5a:	bf00      	nop
 8009a5c:	e7f0      	b.n	8009a40 <prvTimerTask+0x8>
	...

08009a60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a6a:	f7ff fa29 	bl	8008ec0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a6e:	f107 0308 	add.w	r3, r7, #8
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 f866 	bl	8009b44 <prvSampleTimeNow>
 8009a78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d130      	bne.n	8009ae2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10a      	bne.n	8009a9c <prvProcessTimerOrBlockTask+0x3c>
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d806      	bhi.n	8009a9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a8e:	f7ff fa25 	bl	8008edc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a92:	68f9      	ldr	r1, [r7, #12]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f7ff ff81 	bl	800999c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a9a:	e024      	b.n	8009ae6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d008      	beq.n	8009ab4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009aa2:	4b13      	ldr	r3, [pc, #76]	@ (8009af0 <prvProcessTimerOrBlockTask+0x90>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d101      	bne.n	8009ab0 <prvProcessTimerOrBlockTask+0x50>
 8009aac:	2301      	movs	r3, #1
 8009aae:	e000      	b.n	8009ab2 <prvProcessTimerOrBlockTask+0x52>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8009af4 <prvProcessTimerOrBlockTask+0x94>)
 8009ab6:	6818      	ldr	r0, [r3, #0]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	1ad3      	subs	r3, r2, r3
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	f7fe ff65 	bl	8008990 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ac6:	f7ff fa09 	bl	8008edc <xTaskResumeAll>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10a      	bne.n	8009ae6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ad0:	4b09      	ldr	r3, [pc, #36]	@ (8009af8 <prvProcessTimerOrBlockTask+0x98>)
 8009ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	f3bf 8f6f 	isb	sy
}
 8009ae0:	e001      	b.n	8009ae6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009ae2:	f7ff f9fb 	bl	8008edc <xTaskResumeAll>
}
 8009ae6:	bf00      	nop
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	200013d0 	.word	0x200013d0
 8009af4:	200013d4 	.word	0x200013d4
 8009af8:	e000ed04 	.word	0xe000ed04

08009afc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b04:	4b0e      	ldr	r3, [pc, #56]	@ (8009b40 <prvGetNextExpireTime+0x44>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d101      	bne.n	8009b12 <prvGetNextExpireTime+0x16>
 8009b0e:	2201      	movs	r2, #1
 8009b10:	e000      	b.n	8009b14 <prvGetNextExpireTime+0x18>
 8009b12:	2200      	movs	r2, #0
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d105      	bne.n	8009b2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b20:	4b07      	ldr	r3, [pc, #28]	@ (8009b40 <prvGetNextExpireTime+0x44>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	60fb      	str	r3, [r7, #12]
 8009b2a:	e001      	b.n	8009b30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b30:	68fb      	ldr	r3, [r7, #12]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	200013cc 	.word	0x200013cc

08009b44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b4c:	f7ff fa64 	bl	8009018 <xTaskGetTickCount>
 8009b50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b52:	4b0b      	ldr	r3, [pc, #44]	@ (8009b80 <prvSampleTimeNow+0x3c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d205      	bcs.n	8009b68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b5c:	f000 f93a 	bl	8009dd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	e002      	b.n	8009b6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b6e:	4a04      	ldr	r2, [pc, #16]	@ (8009b80 <prvSampleTimeNow+0x3c>)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b74:	68fb      	ldr	r3, [r7, #12]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	200013dc 	.word	0x200013dc

08009b84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
 8009b90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b92:	2300      	movs	r3, #0
 8009b94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d812      	bhi.n	8009bd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	1ad2      	subs	r2, r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d302      	bcc.n	8009bbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	617b      	str	r3, [r7, #20]
 8009bbc:	e01b      	b.n	8009bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009bbe:	4b10      	ldr	r3, [pc, #64]	@ (8009c00 <prvInsertTimerInActiveList+0x7c>)
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	4610      	mov	r0, r2
 8009bca:	f7fe f9b8 	bl	8007f3e <vListInsert>
 8009bce:	e012      	b.n	8009bf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d206      	bcs.n	8009be6 <prvInsertTimerInActiveList+0x62>
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d302      	bcc.n	8009be6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009be0:	2301      	movs	r3, #1
 8009be2:	617b      	str	r3, [r7, #20]
 8009be4:	e007      	b.n	8009bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009be6:	4b07      	ldr	r3, [pc, #28]	@ (8009c04 <prvInsertTimerInActiveList+0x80>)
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3304      	adds	r3, #4
 8009bee:	4619      	mov	r1, r3
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	f7fe f9a4 	bl	8007f3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009bf6:	697b      	ldr	r3, [r7, #20]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	200013d0 	.word	0x200013d0
 8009c04:	200013cc 	.word	0x200013cc

08009c08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b08e      	sub	sp, #56	@ 0x38
 8009c0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c0e:	e0ce      	b.n	8009dae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	da19      	bge.n	8009c4a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c16:	1d3b      	adds	r3, r7, #4
 8009c18:	3304      	adds	r3, #4
 8009c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10b      	bne.n	8009c3a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	61fb      	str	r3, [r7, #28]
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop
 8009c38:	e7fd      	b.n	8009c36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c40:	6850      	ldr	r0, [r2, #4]
 8009c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c44:	6892      	ldr	r2, [r2, #8]
 8009c46:	4611      	mov	r1, r2
 8009c48:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f2c0 80ae 	blt.w	8009dae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d004      	beq.n	8009c68 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c60:	3304      	adds	r3, #4
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fe f9a4 	bl	8007fb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c68:	463b      	mov	r3, r7
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7ff ff6a 	bl	8009b44 <prvSampleTimeNow>
 8009c70:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b09      	cmp	r3, #9
 8009c76:	f200 8097 	bhi.w	8009da8 <prvProcessReceivedCommands+0x1a0>
 8009c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c80 <prvProcessReceivedCommands+0x78>)
 8009c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c80:	08009ca9 	.word	0x08009ca9
 8009c84:	08009ca9 	.word	0x08009ca9
 8009c88:	08009ca9 	.word	0x08009ca9
 8009c8c:	08009d1f 	.word	0x08009d1f
 8009c90:	08009d33 	.word	0x08009d33
 8009c94:	08009d7f 	.word	0x08009d7f
 8009c98:	08009ca9 	.word	0x08009ca9
 8009c9c:	08009ca9 	.word	0x08009ca9
 8009ca0:	08009d1f 	.word	0x08009d1f
 8009ca4:	08009d33 	.word	0x08009d33
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009caa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cae:	f043 0301 	orr.w	r3, r3, #1
 8009cb2:	b2da      	uxtb	r2, r3
 8009cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	18d1      	adds	r1, r2, r3
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cc8:	f7ff ff5c 	bl	8009b84 <prvInsertTimerInActiveList>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d06c      	beq.n	8009dac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd4:	6a1b      	ldr	r3, [r3, #32]
 8009cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ce0:	f003 0304 	and.w	r3, r3, #4
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d061      	beq.n	8009dac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cec:	699b      	ldr	r3, [r3, #24]
 8009cee:	441a      	add	r2, r3
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cfa:	f7ff fe01 	bl	8009900 <xTimerGenericCommand>
 8009cfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d152      	bne.n	8009dac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	61bb      	str	r3, [r7, #24]
}
 8009d18:	bf00      	nop
 8009d1a:	bf00      	nop
 8009d1c:	e7fd      	b.n	8009d1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d24:	f023 0301 	bic.w	r3, r3, #1
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009d30:	e03d      	b.n	8009dae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d38:	f043 0301 	orr.w	r3, r3, #1
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10b      	bne.n	8009d6a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	617b      	str	r3, [r7, #20]
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop
 8009d68:	e7fd      	b.n	8009d66 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6c:	699a      	ldr	r2, [r3, #24]
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d70:	18d1      	adds	r1, r2, r3
 8009d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d78:	f7ff ff04 	bl	8009b84 <prvInsertTimerInActiveList>
					break;
 8009d7c:	e017      	b.n	8009dae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d84:	f003 0302 	and.w	r3, r3, #2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d103      	bne.n	8009d94 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d8e:	f000 fbeb 	bl	800a568 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d92:	e00c      	b.n	8009dae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d9a:	f023 0301 	bic.w	r3, r3, #1
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009da6:	e002      	b.n	8009dae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009da8:	bf00      	nop
 8009daa:	e000      	b.n	8009dae <prvProcessReceivedCommands+0x1a6>
					break;
 8009dac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009dae:	4b08      	ldr	r3, [pc, #32]	@ (8009dd0 <prvProcessReceivedCommands+0x1c8>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	1d39      	adds	r1, r7, #4
 8009db4:	2200      	movs	r2, #0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fe fbce 	bl	8008558 <xQueueReceive>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f47f af26 	bne.w	8009c10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop
 8009dc8:	3730      	adds	r7, #48	@ 0x30
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	200013d4 	.word	0x200013d4

08009dd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b088      	sub	sp, #32
 8009dd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dda:	e049      	b.n	8009e70 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8009e98 <prvSwitchTimerLists+0xc4>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009de6:	4b2c      	ldr	r3, [pc, #176]	@ (8009e98 <prvSwitchTimerLists+0xc4>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	3304      	adds	r3, #4
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fe f8db 	bl	8007fb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e08:	f003 0304 	and.w	r3, r3, #4
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d02f      	beq.n	8009e70 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	4413      	add	r3, r2
 8009e18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d90e      	bls.n	8009e40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8009e98 <prvSwitchTimerLists+0xc4>)
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	3304      	adds	r3, #4
 8009e36:	4619      	mov	r1, r3
 8009e38:	4610      	mov	r0, r2
 8009e3a:	f7fe f880 	bl	8007f3e <vListInsert>
 8009e3e:	e017      	b.n	8009e70 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e40:	2300      	movs	r3, #0
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	2300      	movs	r3, #0
 8009e46:	693a      	ldr	r2, [r7, #16]
 8009e48:	2100      	movs	r1, #0
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f7ff fd58 	bl	8009900 <xTimerGenericCommand>
 8009e50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10b      	bne.n	8009e70 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	603b      	str	r3, [r7, #0]
}
 8009e6a:	bf00      	nop
 8009e6c:	bf00      	nop
 8009e6e:	e7fd      	b.n	8009e6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e70:	4b09      	ldr	r3, [pc, #36]	@ (8009e98 <prvSwitchTimerLists+0xc4>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1b0      	bne.n	8009ddc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e7a:	4b07      	ldr	r3, [pc, #28]	@ (8009e98 <prvSwitchTimerLists+0xc4>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e80:	4b06      	ldr	r3, [pc, #24]	@ (8009e9c <prvSwitchTimerLists+0xc8>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a04      	ldr	r2, [pc, #16]	@ (8009e98 <prvSwitchTimerLists+0xc4>)
 8009e86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e88:	4a04      	ldr	r2, [pc, #16]	@ (8009e9c <prvSwitchTimerLists+0xc8>)
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	6013      	str	r3, [r2, #0]
}
 8009e8e:	bf00      	nop
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	200013cc 	.word	0x200013cc
 8009e9c:	200013d0 	.word	0x200013d0

08009ea0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ea6:	f000 f96f 	bl	800a188 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009eaa:	4b15      	ldr	r3, [pc, #84]	@ (8009f00 <prvCheckForValidListAndQueue+0x60>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d120      	bne.n	8009ef4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009eb2:	4814      	ldr	r0, [pc, #80]	@ (8009f04 <prvCheckForValidListAndQueue+0x64>)
 8009eb4:	f7fd fff2 	bl	8007e9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009eb8:	4813      	ldr	r0, [pc, #76]	@ (8009f08 <prvCheckForValidListAndQueue+0x68>)
 8009eba:	f7fd ffef 	bl	8007e9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ebe:	4b13      	ldr	r3, [pc, #76]	@ (8009f0c <prvCheckForValidListAndQueue+0x6c>)
 8009ec0:	4a10      	ldr	r2, [pc, #64]	@ (8009f04 <prvCheckForValidListAndQueue+0x64>)
 8009ec2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ec4:	4b12      	ldr	r3, [pc, #72]	@ (8009f10 <prvCheckForValidListAndQueue+0x70>)
 8009ec6:	4a10      	ldr	r2, [pc, #64]	@ (8009f08 <prvCheckForValidListAndQueue+0x68>)
 8009ec8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009eca:	2300      	movs	r3, #0
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	4b11      	ldr	r3, [pc, #68]	@ (8009f14 <prvCheckForValidListAndQueue+0x74>)
 8009ed0:	4a11      	ldr	r2, [pc, #68]	@ (8009f18 <prvCheckForValidListAndQueue+0x78>)
 8009ed2:	2110      	movs	r1, #16
 8009ed4:	200a      	movs	r0, #10
 8009ed6:	f7fe f8ff 	bl	80080d8 <xQueueGenericCreateStatic>
 8009eda:	4603      	mov	r3, r0
 8009edc:	4a08      	ldr	r2, [pc, #32]	@ (8009f00 <prvCheckForValidListAndQueue+0x60>)
 8009ede:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ee0:	4b07      	ldr	r3, [pc, #28]	@ (8009f00 <prvCheckForValidListAndQueue+0x60>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d005      	beq.n	8009ef4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ee8:	4b05      	ldr	r3, [pc, #20]	@ (8009f00 <prvCheckForValidListAndQueue+0x60>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	490b      	ldr	r1, [pc, #44]	@ (8009f1c <prvCheckForValidListAndQueue+0x7c>)
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fe fd24 	bl	800893c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ef4:	f000 f97a 	bl	800a1ec <vPortExitCritical>
}
 8009ef8:	bf00      	nop
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	200013d4 	.word	0x200013d4
 8009f04:	200013a4 	.word	0x200013a4
 8009f08:	200013b8 	.word	0x200013b8
 8009f0c:	200013cc 	.word	0x200013cc
 8009f10:	200013d0 	.word	0x200013d0
 8009f14:	20001480 	.word	0x20001480
 8009f18:	200013e0 	.word	0x200013e0
 8009f1c:	0800b24c 	.word	0x0800b24c

08009f20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	3b04      	subs	r3, #4
 8009f30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3b04      	subs	r3, #4
 8009f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	f023 0201 	bic.w	r2, r3, #1
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3b04      	subs	r3, #4
 8009f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f50:	4a0c      	ldr	r2, [pc, #48]	@ (8009f84 <pxPortInitialiseStack+0x64>)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3b14      	subs	r3, #20
 8009f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	3b04      	subs	r3, #4
 8009f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f06f 0202 	mvn.w	r2, #2
 8009f6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3b20      	subs	r3, #32
 8009f74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f76:	68fb      	ldr	r3, [r7, #12]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	08009f89 	.word	0x08009f89

08009f88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f92:	4b13      	ldr	r3, [pc, #76]	@ (8009fe0 <prvTaskExitError+0x58>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f9a:	d00b      	beq.n	8009fb4 <prvTaskExitError+0x2c>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	60fb      	str	r3, [r7, #12]
}
 8009fae:	bf00      	nop
 8009fb0:	bf00      	nop
 8009fb2:	e7fd      	b.n	8009fb0 <prvTaskExitError+0x28>
	__asm volatile
 8009fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	60bb      	str	r3, [r7, #8]
}
 8009fc6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009fc8:	bf00      	nop
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d0fc      	beq.n	8009fca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009fd0:	bf00      	nop
 8009fd2:	bf00      	nop
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	20000010 	.word	0x20000010
	...

08009ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ff0:	4b07      	ldr	r3, [pc, #28]	@ (800a010 <pxCurrentTCBConst2>)
 8009ff2:	6819      	ldr	r1, [r3, #0]
 8009ff4:	6808      	ldr	r0, [r1, #0]
 8009ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffa:	f380 8809 	msr	PSP, r0
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f04f 0000 	mov.w	r0, #0
 800a006:	f380 8811 	msr	BASEPRI, r0
 800a00a:	4770      	bx	lr
 800a00c:	f3af 8000 	nop.w

0800a010 <pxCurrentTCBConst2>:
 800a010:	20000ea4 	.word	0x20000ea4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop

0800a018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a018:	4808      	ldr	r0, [pc, #32]	@ (800a03c <prvPortStartFirstTask+0x24>)
 800a01a:	6800      	ldr	r0, [r0, #0]
 800a01c:	6800      	ldr	r0, [r0, #0]
 800a01e:	f380 8808 	msr	MSP, r0
 800a022:	f04f 0000 	mov.w	r0, #0
 800a026:	f380 8814 	msr	CONTROL, r0
 800a02a:	b662      	cpsie	i
 800a02c:	b661      	cpsie	f
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	f3bf 8f6f 	isb	sy
 800a036:	df00      	svc	0
 800a038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a03a:	bf00      	nop
 800a03c:	e000ed08 	.word	0xe000ed08

0800a040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a046:	4b47      	ldr	r3, [pc, #284]	@ (800a164 <xPortStartScheduler+0x124>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a47      	ldr	r2, [pc, #284]	@ (800a168 <xPortStartScheduler+0x128>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d10b      	bne.n	800a068 <xPortStartScheduler+0x28>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	613b      	str	r3, [r7, #16]
}
 800a062:	bf00      	nop
 800a064:	bf00      	nop
 800a066:	e7fd      	b.n	800a064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a068:	4b3e      	ldr	r3, [pc, #248]	@ (800a164 <xPortStartScheduler+0x124>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a3f      	ldr	r2, [pc, #252]	@ (800a16c <xPortStartScheduler+0x12c>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d10b      	bne.n	800a08a <xPortStartScheduler+0x4a>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	60fb      	str	r3, [r7, #12]
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop
 800a088:	e7fd      	b.n	800a086 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a08a:	4b39      	ldr	r3, [pc, #228]	@ (800a170 <xPortStartScheduler+0x130>)
 800a08c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	b2db      	uxtb	r3, r3
 800a094:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	22ff      	movs	r2, #255	@ 0xff
 800a09a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0a4:	78fb      	ldrb	r3, [r7, #3]
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a0ac:	b2da      	uxtb	r2, r3
 800a0ae:	4b31      	ldr	r3, [pc, #196]	@ (800a174 <xPortStartScheduler+0x134>)
 800a0b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a0b2:	4b31      	ldr	r3, [pc, #196]	@ (800a178 <xPortStartScheduler+0x138>)
 800a0b4:	2207      	movs	r2, #7
 800a0b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0b8:	e009      	b.n	800a0ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a0ba:	4b2f      	ldr	r3, [pc, #188]	@ (800a178 <xPortStartScheduler+0x138>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	4a2d      	ldr	r2, [pc, #180]	@ (800a178 <xPortStartScheduler+0x138>)
 800a0c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0c4:	78fb      	ldrb	r3, [r7, #3]
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	005b      	lsls	r3, r3, #1
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0ce:	78fb      	ldrb	r3, [r7, #3]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0d6:	2b80      	cmp	r3, #128	@ 0x80
 800a0d8:	d0ef      	beq.n	800a0ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0da:	4b27      	ldr	r3, [pc, #156]	@ (800a178 <xPortStartScheduler+0x138>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f1c3 0307 	rsb	r3, r3, #7
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d00b      	beq.n	800a0fe <xPortStartScheduler+0xbe>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	60bb      	str	r3, [r7, #8]
}
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	e7fd      	b.n	800a0fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0fe:	4b1e      	ldr	r3, [pc, #120]	@ (800a178 <xPortStartScheduler+0x138>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	021b      	lsls	r3, r3, #8
 800a104:	4a1c      	ldr	r2, [pc, #112]	@ (800a178 <xPortStartScheduler+0x138>)
 800a106:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a108:	4b1b      	ldr	r3, [pc, #108]	@ (800a178 <xPortStartScheduler+0x138>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a110:	4a19      	ldr	r2, [pc, #100]	@ (800a178 <xPortStartScheduler+0x138>)
 800a112:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	b2da      	uxtb	r2, r3
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a11c:	4b17      	ldr	r3, [pc, #92]	@ (800a17c <xPortStartScheduler+0x13c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a16      	ldr	r2, [pc, #88]	@ (800a17c <xPortStartScheduler+0x13c>)
 800a122:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a126:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a128:	4b14      	ldr	r3, [pc, #80]	@ (800a17c <xPortStartScheduler+0x13c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a13      	ldr	r2, [pc, #76]	@ (800a17c <xPortStartScheduler+0x13c>)
 800a12e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a132:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a134:	f000 f8da 	bl	800a2ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a138:	4b11      	ldr	r3, [pc, #68]	@ (800a180 <xPortStartScheduler+0x140>)
 800a13a:	2200      	movs	r2, #0
 800a13c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a13e:	f000 f8f9 	bl	800a334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a142:	4b10      	ldr	r3, [pc, #64]	@ (800a184 <xPortStartScheduler+0x144>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a0f      	ldr	r2, [pc, #60]	@ (800a184 <xPortStartScheduler+0x144>)
 800a148:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a14c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a14e:	f7ff ff63 	bl	800a018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a152:	f7ff f82b 	bl	80091ac <vTaskSwitchContext>
	prvTaskExitError();
 800a156:	f7ff ff17 	bl	8009f88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	e000ed00 	.word	0xe000ed00
 800a168:	410fc271 	.word	0x410fc271
 800a16c:	410fc270 	.word	0x410fc270
 800a170:	e000e400 	.word	0xe000e400
 800a174:	200014d0 	.word	0x200014d0
 800a178:	200014d4 	.word	0x200014d4
 800a17c:	e000ed20 	.word	0xe000ed20
 800a180:	20000010 	.word	0x20000010
 800a184:	e000ef34 	.word	0xe000ef34

0800a188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	607b      	str	r3, [r7, #4]
}
 800a1a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1a2:	4b10      	ldr	r3, [pc, #64]	@ (800a1e4 <vPortEnterCritical+0x5c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	4a0e      	ldr	r2, [pc, #56]	@ (800a1e4 <vPortEnterCritical+0x5c>)
 800a1aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e4 <vPortEnterCritical+0x5c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d110      	bne.n	800a1d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e8 <vPortEnterCritical+0x60>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00b      	beq.n	800a1d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	603b      	str	r3, [r7, #0]
}
 800a1d0:	bf00      	nop
 800a1d2:	bf00      	nop
 800a1d4:	e7fd      	b.n	800a1d2 <vPortEnterCritical+0x4a>
	}
}
 800a1d6:	bf00      	nop
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	20000010 	.word	0x20000010
 800a1e8:	e000ed04 	.word	0xe000ed04

0800a1ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1f2:	4b12      	ldr	r3, [pc, #72]	@ (800a23c <vPortExitCritical+0x50>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10b      	bne.n	800a212 <vPortExitCritical+0x26>
	__asm volatile
 800a1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	607b      	str	r3, [r7, #4]
}
 800a20c:	bf00      	nop
 800a20e:	bf00      	nop
 800a210:	e7fd      	b.n	800a20e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a212:	4b0a      	ldr	r3, [pc, #40]	@ (800a23c <vPortExitCritical+0x50>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	3b01      	subs	r3, #1
 800a218:	4a08      	ldr	r2, [pc, #32]	@ (800a23c <vPortExitCritical+0x50>)
 800a21a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a21c:	4b07      	ldr	r3, [pc, #28]	@ (800a23c <vPortExitCritical+0x50>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d105      	bne.n	800a230 <vPortExitCritical+0x44>
 800a224:	2300      	movs	r3, #0
 800a226:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	f383 8811 	msr	BASEPRI, r3
}
 800a22e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	20000010 	.word	0x20000010

0800a240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a240:	f3ef 8009 	mrs	r0, PSP
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	4b15      	ldr	r3, [pc, #84]	@ (800a2a0 <pxCurrentTCBConst>)
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	f01e 0f10 	tst.w	lr, #16
 800a250:	bf08      	it	eq
 800a252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25a:	6010      	str	r0, [r2, #0]
 800a25c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a260:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a264:	f380 8811 	msr	BASEPRI, r0
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f7fe ff9c 	bl	80091ac <vTaskSwitchContext>
 800a274:	f04f 0000 	mov.w	r0, #0
 800a278:	f380 8811 	msr	BASEPRI, r0
 800a27c:	bc09      	pop	{r0, r3}
 800a27e:	6819      	ldr	r1, [r3, #0]
 800a280:	6808      	ldr	r0, [r1, #0]
 800a282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a286:	f01e 0f10 	tst.w	lr, #16
 800a28a:	bf08      	it	eq
 800a28c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a290:	f380 8809 	msr	PSP, r0
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	f3af 8000 	nop.w

0800a2a0 <pxCurrentTCBConst>:
 800a2a0:	20000ea4 	.word	0x20000ea4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop

0800a2a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	607b      	str	r3, [r7, #4]
}
 800a2c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2c2:	f7fe feb9 	bl	8009038 <xTaskIncrementTick>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d003      	beq.n	800a2d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2cc:	4b06      	ldr	r3, [pc, #24]	@ (800a2e8 <xPortSysTickHandler+0x40>)
 800a2ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2d2:	601a      	str	r2, [r3, #0]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	f383 8811 	msr	BASEPRI, r3
}
 800a2de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2e0:	bf00      	nop
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	e000ed04 	.word	0xe000ed04

0800a2ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2f0:	4b0b      	ldr	r3, [pc, #44]	@ (800a320 <vPortSetupTimerInterrupt+0x34>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a324 <vPortSetupTimerInterrupt+0x38>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a328 <vPortSetupTimerInterrupt+0x3c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a0a      	ldr	r2, [pc, #40]	@ (800a32c <vPortSetupTimerInterrupt+0x40>)
 800a302:	fba2 2303 	umull	r2, r3, r2, r3
 800a306:	099b      	lsrs	r3, r3, #6
 800a308:	4a09      	ldr	r2, [pc, #36]	@ (800a330 <vPortSetupTimerInterrupt+0x44>)
 800a30a:	3b01      	subs	r3, #1
 800a30c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a30e:	4b04      	ldr	r3, [pc, #16]	@ (800a320 <vPortSetupTimerInterrupt+0x34>)
 800a310:	2207      	movs	r2, #7
 800a312:	601a      	str	r2, [r3, #0]
}
 800a314:	bf00      	nop
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	e000e010 	.word	0xe000e010
 800a324:	e000e018 	.word	0xe000e018
 800a328:	20000004 	.word	0x20000004
 800a32c:	10624dd3 	.word	0x10624dd3
 800a330:	e000e014 	.word	0xe000e014

0800a334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a334:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a344 <vPortEnableVFP+0x10>
 800a338:	6801      	ldr	r1, [r0, #0]
 800a33a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a33e:	6001      	str	r1, [r0, #0]
 800a340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a342:	bf00      	nop
 800a344:	e000ed88 	.word	0xe000ed88

0800a348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a34e:	f3ef 8305 	mrs	r3, IPSR
 800a352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2b0f      	cmp	r3, #15
 800a358:	d915      	bls.n	800a386 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a35a:	4a18      	ldr	r2, [pc, #96]	@ (800a3bc <vPortValidateInterruptPriority+0x74>)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4413      	add	r3, r2
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a364:	4b16      	ldr	r3, [pc, #88]	@ (800a3c0 <vPortValidateInterruptPriority+0x78>)
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	7afa      	ldrb	r2, [r7, #11]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d20b      	bcs.n	800a386 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	607b      	str	r3, [r7, #4]
}
 800a380:	bf00      	nop
 800a382:	bf00      	nop
 800a384:	e7fd      	b.n	800a382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a386:	4b0f      	ldr	r3, [pc, #60]	@ (800a3c4 <vPortValidateInterruptPriority+0x7c>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a38e:	4b0e      	ldr	r3, [pc, #56]	@ (800a3c8 <vPortValidateInterruptPriority+0x80>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	d90b      	bls.n	800a3ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	603b      	str	r3, [r7, #0]
}
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
 800a3ac:	e7fd      	b.n	800a3aa <vPortValidateInterruptPriority+0x62>
	}
 800a3ae:	bf00      	nop
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	e000e3f0 	.word	0xe000e3f0
 800a3c0:	200014d0 	.word	0x200014d0
 800a3c4:	e000ed0c 	.word	0xe000ed0c
 800a3c8:	200014d4 	.word	0x200014d4

0800a3cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b08a      	sub	sp, #40	@ 0x28
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3d8:	f7fe fd72 	bl	8008ec0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3dc:	4b5c      	ldr	r3, [pc, #368]	@ (800a550 <pvPortMalloc+0x184>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3e4:	f000 f924 	bl	800a630 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3e8:	4b5a      	ldr	r3, [pc, #360]	@ (800a554 <pvPortMalloc+0x188>)
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f040 8095 	bne.w	800a520 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d01e      	beq.n	800a43a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a3fc:	2208      	movs	r2, #8
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4413      	add	r3, r2
 800a402:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f003 0307 	and.w	r3, r3, #7
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d015      	beq.n	800a43a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f023 0307 	bic.w	r3, r3, #7
 800a414:	3308      	adds	r3, #8
 800a416:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f003 0307 	and.w	r3, r3, #7
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00b      	beq.n	800a43a <pvPortMalloc+0x6e>
	__asm volatile
 800a422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	617b      	str	r3, [r7, #20]
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop
 800a438:	e7fd      	b.n	800a436 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d06f      	beq.n	800a520 <pvPortMalloc+0x154>
 800a440:	4b45      	ldr	r3, [pc, #276]	@ (800a558 <pvPortMalloc+0x18c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	429a      	cmp	r2, r3
 800a448:	d86a      	bhi.n	800a520 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a44a:	4b44      	ldr	r3, [pc, #272]	@ (800a55c <pvPortMalloc+0x190>)
 800a44c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a44e:	4b43      	ldr	r3, [pc, #268]	@ (800a55c <pvPortMalloc+0x190>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a454:	e004      	b.n	800a460 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	429a      	cmp	r2, r3
 800a468:	d903      	bls.n	800a472 <pvPortMalloc+0xa6>
 800a46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1f1      	bne.n	800a456 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a472:	4b37      	ldr	r3, [pc, #220]	@ (800a550 <pvPortMalloc+0x184>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a478:	429a      	cmp	r2, r3
 800a47a:	d051      	beq.n	800a520 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2208      	movs	r2, #8
 800a482:	4413      	add	r3, r2
 800a484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	1ad2      	subs	r2, r2, r3
 800a496:	2308      	movs	r3, #8
 800a498:	005b      	lsls	r3, r3, #1
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d920      	bls.n	800a4e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a49e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	f003 0307 	and.w	r3, r3, #7
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00b      	beq.n	800a4c8 <pvPortMalloc+0xfc>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	613b      	str	r3, [r7, #16]
}
 800a4c2:	bf00      	nop
 800a4c4:	bf00      	nop
 800a4c6:	e7fd      	b.n	800a4c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	1ad2      	subs	r2, r2, r3
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4da:	69b8      	ldr	r0, [r7, #24]
 800a4dc:	f000 f90a 	bl	800a6f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a558 <pvPortMalloc+0x18c>)
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	4a1b      	ldr	r2, [pc, #108]	@ (800a558 <pvPortMalloc+0x18c>)
 800a4ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4ee:	4b1a      	ldr	r3, [pc, #104]	@ (800a558 <pvPortMalloc+0x18c>)
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a560 <pvPortMalloc+0x194>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d203      	bcs.n	800a502 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4fa:	4b17      	ldr	r3, [pc, #92]	@ (800a558 <pvPortMalloc+0x18c>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a18      	ldr	r2, [pc, #96]	@ (800a560 <pvPortMalloc+0x194>)
 800a500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	4b13      	ldr	r3, [pc, #76]	@ (800a554 <pvPortMalloc+0x188>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	431a      	orrs	r2, r3
 800a50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a512:	2200      	movs	r2, #0
 800a514:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a516:	4b13      	ldr	r3, [pc, #76]	@ (800a564 <pvPortMalloc+0x198>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	3301      	adds	r3, #1
 800a51c:	4a11      	ldr	r2, [pc, #68]	@ (800a564 <pvPortMalloc+0x198>)
 800a51e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a520:	f7fe fcdc 	bl	8008edc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	f003 0307 	and.w	r3, r3, #7
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00b      	beq.n	800a546 <pvPortMalloc+0x17a>
	__asm volatile
 800a52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	60fb      	str	r3, [r7, #12]
}
 800a540:	bf00      	nop
 800a542:	bf00      	nop
 800a544:	e7fd      	b.n	800a542 <pvPortMalloc+0x176>
	return pvReturn;
 800a546:	69fb      	ldr	r3, [r7, #28]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3728      	adds	r7, #40	@ 0x28
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	200050e0 	.word	0x200050e0
 800a554:	200050f4 	.word	0x200050f4
 800a558:	200050e4 	.word	0x200050e4
 800a55c:	200050d8 	.word	0x200050d8
 800a560:	200050e8 	.word	0x200050e8
 800a564:	200050ec 	.word	0x200050ec

0800a568 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b086      	sub	sp, #24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d04f      	beq.n	800a61a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a57a:	2308      	movs	r3, #8
 800a57c:	425b      	negs	r3, r3
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	4413      	add	r3, r2
 800a582:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	4b25      	ldr	r3, [pc, #148]	@ (800a624 <vPortFree+0xbc>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4013      	ands	r3, r2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d10b      	bne.n	800a5ae <vPortFree+0x46>
	__asm volatile
 800a596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59a:	f383 8811 	msr	BASEPRI, r3
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	f3bf 8f4f 	dsb	sy
 800a5a6:	60fb      	str	r3, [r7, #12]
}
 800a5a8:	bf00      	nop
 800a5aa:	bf00      	nop
 800a5ac:	e7fd      	b.n	800a5aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00b      	beq.n	800a5ce <vPortFree+0x66>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ba:	f383 8811 	msr	BASEPRI, r3
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f3bf 8f4f 	dsb	sy
 800a5c6:	60bb      	str	r3, [r7, #8]
}
 800a5c8:	bf00      	nop
 800a5ca:	bf00      	nop
 800a5cc:	e7fd      	b.n	800a5ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	4b14      	ldr	r3, [pc, #80]	@ (800a624 <vPortFree+0xbc>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d01e      	beq.n	800a61a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d11a      	bne.n	800a61a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a624 <vPortFree+0xbc>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	43db      	mvns	r3, r3
 800a5ee:	401a      	ands	r2, r3
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5f4:	f7fe fc64 	bl	8008ec0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a628 <vPortFree+0xc0>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4413      	add	r3, r2
 800a602:	4a09      	ldr	r2, [pc, #36]	@ (800a628 <vPortFree+0xc0>)
 800a604:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a606:	6938      	ldr	r0, [r7, #16]
 800a608:	f000 f874 	bl	800a6f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a60c:	4b07      	ldr	r3, [pc, #28]	@ (800a62c <vPortFree+0xc4>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3301      	adds	r3, #1
 800a612:	4a06      	ldr	r2, [pc, #24]	@ (800a62c <vPortFree+0xc4>)
 800a614:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a616:	f7fe fc61 	bl	8008edc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a61a:	bf00      	nop
 800a61c:	3718      	adds	r7, #24
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	200050f4 	.word	0x200050f4
 800a628:	200050e4 	.word	0x200050e4
 800a62c:	200050f0 	.word	0x200050f0

0800a630 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a636:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a63a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a63c:	4b27      	ldr	r3, [pc, #156]	@ (800a6dc <prvHeapInit+0xac>)
 800a63e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f003 0307 	and.w	r3, r3, #7
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00c      	beq.n	800a664 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	3307      	adds	r3, #7
 800a64e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f023 0307 	bic.w	r3, r3, #7
 800a656:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	4a1f      	ldr	r2, [pc, #124]	@ (800a6dc <prvHeapInit+0xac>)
 800a660:	4413      	add	r3, r2
 800a662:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a668:	4a1d      	ldr	r2, [pc, #116]	@ (800a6e0 <prvHeapInit+0xb0>)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a66e:	4b1c      	ldr	r3, [pc, #112]	@ (800a6e0 <prvHeapInit+0xb0>)
 800a670:	2200      	movs	r2, #0
 800a672:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	4413      	add	r3, r2
 800a67a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a67c:	2208      	movs	r2, #8
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	1a9b      	subs	r3, r3, r2
 800a682:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f023 0307 	bic.w	r3, r3, #7
 800a68a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	4a15      	ldr	r2, [pc, #84]	@ (800a6e4 <prvHeapInit+0xb4>)
 800a690:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a692:	4b14      	ldr	r3, [pc, #80]	@ (800a6e4 <prvHeapInit+0xb4>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2200      	movs	r2, #0
 800a698:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a69a:	4b12      	ldr	r3, [pc, #72]	@ (800a6e4 <prvHeapInit+0xb4>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	1ad2      	subs	r2, r2, r3
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a6e4 <prvHeapInit+0xb4>)
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	4a0a      	ldr	r2, [pc, #40]	@ (800a6e8 <prvHeapInit+0xb8>)
 800a6be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	4a09      	ldr	r2, [pc, #36]	@ (800a6ec <prvHeapInit+0xbc>)
 800a6c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6c8:	4b09      	ldr	r3, [pc, #36]	@ (800a6f0 <prvHeapInit+0xc0>)
 800a6ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a6ce:	601a      	str	r2, [r3, #0]
}
 800a6d0:	bf00      	nop
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	200014d8 	.word	0x200014d8
 800a6e0:	200050d8 	.word	0x200050d8
 800a6e4:	200050e0 	.word	0x200050e0
 800a6e8:	200050e8 	.word	0x200050e8
 800a6ec:	200050e4 	.word	0x200050e4
 800a6f0:	200050f4 	.word	0x200050f4

0800a6f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6fc:	4b28      	ldr	r3, [pc, #160]	@ (800a7a0 <prvInsertBlockIntoFreeList+0xac>)
 800a6fe:	60fb      	str	r3, [r7, #12]
 800a700:	e002      	b.n	800a708 <prvInsertBlockIntoFreeList+0x14>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	60fb      	str	r3, [r7, #12]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d8f7      	bhi.n	800a702 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	4413      	add	r3, r2
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	429a      	cmp	r2, r3
 800a722:	d108      	bne.n	800a736 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	441a      	add	r2, r3
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	441a      	add	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	d118      	bne.n	800a77c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	4b15      	ldr	r3, [pc, #84]	@ (800a7a4 <prvInsertBlockIntoFreeList+0xb0>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	429a      	cmp	r2, r3
 800a754:	d00d      	beq.n	800a772 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685a      	ldr	r2, [r3, #4]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	441a      	add	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	e008      	b.n	800a784 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a772:	4b0c      	ldr	r3, [pc, #48]	@ (800a7a4 <prvInsertBlockIntoFreeList+0xb0>)
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	e003      	b.n	800a784 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d002      	beq.n	800a792 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a792:	bf00      	nop
 800a794:	3714      	adds	r7, #20
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	200050d8 	.word	0x200050d8
 800a7a4:	200050e0 	.word	0x200050e0

0800a7a8 <siprintf>:
 800a7a8:	b40e      	push	{r1, r2, r3}
 800a7aa:	b500      	push	{lr}
 800a7ac:	b09c      	sub	sp, #112	@ 0x70
 800a7ae:	ab1d      	add	r3, sp, #116	@ 0x74
 800a7b0:	9002      	str	r0, [sp, #8]
 800a7b2:	9006      	str	r0, [sp, #24]
 800a7b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a7b8:	4809      	ldr	r0, [pc, #36]	@ (800a7e0 <siprintf+0x38>)
 800a7ba:	9107      	str	r1, [sp, #28]
 800a7bc:	9104      	str	r1, [sp, #16]
 800a7be:	4909      	ldr	r1, [pc, #36]	@ (800a7e4 <siprintf+0x3c>)
 800a7c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7c4:	9105      	str	r1, [sp, #20]
 800a7c6:	6800      	ldr	r0, [r0, #0]
 800a7c8:	9301      	str	r3, [sp, #4]
 800a7ca:	a902      	add	r1, sp, #8
 800a7cc:	f000 f9f8 	bl	800abc0 <_svfiprintf_r>
 800a7d0:	9b02      	ldr	r3, [sp, #8]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	701a      	strb	r2, [r3, #0]
 800a7d6:	b01c      	add	sp, #112	@ 0x70
 800a7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7dc:	b003      	add	sp, #12
 800a7de:	4770      	bx	lr
 800a7e0:	20000014 	.word	0x20000014
 800a7e4:	ffff0208 	.word	0xffff0208

0800a7e8 <memset>:
 800a7e8:	4402      	add	r2, r0
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d100      	bne.n	800a7f2 <memset+0xa>
 800a7f0:	4770      	bx	lr
 800a7f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7f6:	e7f9      	b.n	800a7ec <memset+0x4>

0800a7f8 <_reclaim_reent>:
 800a7f8:	4b29      	ldr	r3, [pc, #164]	@ (800a8a0 <_reclaim_reent+0xa8>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4283      	cmp	r3, r0
 800a7fe:	b570      	push	{r4, r5, r6, lr}
 800a800:	4604      	mov	r4, r0
 800a802:	d04b      	beq.n	800a89c <_reclaim_reent+0xa4>
 800a804:	69c3      	ldr	r3, [r0, #28]
 800a806:	b1ab      	cbz	r3, 800a834 <_reclaim_reent+0x3c>
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	b16b      	cbz	r3, 800a828 <_reclaim_reent+0x30>
 800a80c:	2500      	movs	r5, #0
 800a80e:	69e3      	ldr	r3, [r4, #28]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	5959      	ldr	r1, [r3, r5]
 800a814:	2900      	cmp	r1, #0
 800a816:	d13b      	bne.n	800a890 <_reclaim_reent+0x98>
 800a818:	3504      	adds	r5, #4
 800a81a:	2d80      	cmp	r5, #128	@ 0x80
 800a81c:	d1f7      	bne.n	800a80e <_reclaim_reent+0x16>
 800a81e:	69e3      	ldr	r3, [r4, #28]
 800a820:	4620      	mov	r0, r4
 800a822:	68d9      	ldr	r1, [r3, #12]
 800a824:	f000 f878 	bl	800a918 <_free_r>
 800a828:	69e3      	ldr	r3, [r4, #28]
 800a82a:	6819      	ldr	r1, [r3, #0]
 800a82c:	b111      	cbz	r1, 800a834 <_reclaim_reent+0x3c>
 800a82e:	4620      	mov	r0, r4
 800a830:	f000 f872 	bl	800a918 <_free_r>
 800a834:	6961      	ldr	r1, [r4, #20]
 800a836:	b111      	cbz	r1, 800a83e <_reclaim_reent+0x46>
 800a838:	4620      	mov	r0, r4
 800a83a:	f000 f86d 	bl	800a918 <_free_r>
 800a83e:	69e1      	ldr	r1, [r4, #28]
 800a840:	b111      	cbz	r1, 800a848 <_reclaim_reent+0x50>
 800a842:	4620      	mov	r0, r4
 800a844:	f000 f868 	bl	800a918 <_free_r>
 800a848:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a84a:	b111      	cbz	r1, 800a852 <_reclaim_reent+0x5a>
 800a84c:	4620      	mov	r0, r4
 800a84e:	f000 f863 	bl	800a918 <_free_r>
 800a852:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a854:	b111      	cbz	r1, 800a85c <_reclaim_reent+0x64>
 800a856:	4620      	mov	r0, r4
 800a858:	f000 f85e 	bl	800a918 <_free_r>
 800a85c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a85e:	b111      	cbz	r1, 800a866 <_reclaim_reent+0x6e>
 800a860:	4620      	mov	r0, r4
 800a862:	f000 f859 	bl	800a918 <_free_r>
 800a866:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a868:	b111      	cbz	r1, 800a870 <_reclaim_reent+0x78>
 800a86a:	4620      	mov	r0, r4
 800a86c:	f000 f854 	bl	800a918 <_free_r>
 800a870:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a872:	b111      	cbz	r1, 800a87a <_reclaim_reent+0x82>
 800a874:	4620      	mov	r0, r4
 800a876:	f000 f84f 	bl	800a918 <_free_r>
 800a87a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a87c:	b111      	cbz	r1, 800a884 <_reclaim_reent+0x8c>
 800a87e:	4620      	mov	r0, r4
 800a880:	f000 f84a 	bl	800a918 <_free_r>
 800a884:	6a23      	ldr	r3, [r4, #32]
 800a886:	b14b      	cbz	r3, 800a89c <_reclaim_reent+0xa4>
 800a888:	4620      	mov	r0, r4
 800a88a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a88e:	4718      	bx	r3
 800a890:	680e      	ldr	r6, [r1, #0]
 800a892:	4620      	mov	r0, r4
 800a894:	f000 f840 	bl	800a918 <_free_r>
 800a898:	4631      	mov	r1, r6
 800a89a:	e7bb      	b.n	800a814 <_reclaim_reent+0x1c>
 800a89c:	bd70      	pop	{r4, r5, r6, pc}
 800a89e:	bf00      	nop
 800a8a0:	20000014 	.word	0x20000014

0800a8a4 <__errno>:
 800a8a4:	4b01      	ldr	r3, [pc, #4]	@ (800a8ac <__errno+0x8>)
 800a8a6:	6818      	ldr	r0, [r3, #0]
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	20000014 	.word	0x20000014

0800a8b0 <__libc_init_array>:
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	4d0d      	ldr	r5, [pc, #52]	@ (800a8e8 <__libc_init_array+0x38>)
 800a8b4:	4c0d      	ldr	r4, [pc, #52]	@ (800a8ec <__libc_init_array+0x3c>)
 800a8b6:	1b64      	subs	r4, r4, r5
 800a8b8:	10a4      	asrs	r4, r4, #2
 800a8ba:	2600      	movs	r6, #0
 800a8bc:	42a6      	cmp	r6, r4
 800a8be:	d109      	bne.n	800a8d4 <__libc_init_array+0x24>
 800a8c0:	4d0b      	ldr	r5, [pc, #44]	@ (800a8f0 <__libc_init_array+0x40>)
 800a8c2:	4c0c      	ldr	r4, [pc, #48]	@ (800a8f4 <__libc_init_array+0x44>)
 800a8c4:	f000 fc66 	bl	800b194 <_init>
 800a8c8:	1b64      	subs	r4, r4, r5
 800a8ca:	10a4      	asrs	r4, r4, #2
 800a8cc:	2600      	movs	r6, #0
 800a8ce:	42a6      	cmp	r6, r4
 800a8d0:	d105      	bne.n	800a8de <__libc_init_array+0x2e>
 800a8d2:	bd70      	pop	{r4, r5, r6, pc}
 800a8d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8d8:	4798      	blx	r3
 800a8da:	3601      	adds	r6, #1
 800a8dc:	e7ee      	b.n	800a8bc <__libc_init_array+0xc>
 800a8de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8e2:	4798      	blx	r3
 800a8e4:	3601      	adds	r6, #1
 800a8e6:	e7f2      	b.n	800a8ce <__libc_init_array+0x1e>
 800a8e8:	0800be08 	.word	0x0800be08
 800a8ec:	0800be08 	.word	0x0800be08
 800a8f0:	0800be08 	.word	0x0800be08
 800a8f4:	0800be0c 	.word	0x0800be0c

0800a8f8 <__retarget_lock_acquire_recursive>:
 800a8f8:	4770      	bx	lr

0800a8fa <__retarget_lock_release_recursive>:
 800a8fa:	4770      	bx	lr

0800a8fc <memcpy>:
 800a8fc:	440a      	add	r2, r1
 800a8fe:	4291      	cmp	r1, r2
 800a900:	f100 33ff 	add.w	r3, r0, #4294967295
 800a904:	d100      	bne.n	800a908 <memcpy+0xc>
 800a906:	4770      	bx	lr
 800a908:	b510      	push	{r4, lr}
 800a90a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a90e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a912:	4291      	cmp	r1, r2
 800a914:	d1f9      	bne.n	800a90a <memcpy+0xe>
 800a916:	bd10      	pop	{r4, pc}

0800a918 <_free_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	4605      	mov	r5, r0
 800a91c:	2900      	cmp	r1, #0
 800a91e:	d041      	beq.n	800a9a4 <_free_r+0x8c>
 800a920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a924:	1f0c      	subs	r4, r1, #4
 800a926:	2b00      	cmp	r3, #0
 800a928:	bfb8      	it	lt
 800a92a:	18e4      	addlt	r4, r4, r3
 800a92c:	f000 f8e0 	bl	800aaf0 <__malloc_lock>
 800a930:	4a1d      	ldr	r2, [pc, #116]	@ (800a9a8 <_free_r+0x90>)
 800a932:	6813      	ldr	r3, [r2, #0]
 800a934:	b933      	cbnz	r3, 800a944 <_free_r+0x2c>
 800a936:	6063      	str	r3, [r4, #4]
 800a938:	6014      	str	r4, [r2, #0]
 800a93a:	4628      	mov	r0, r5
 800a93c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a940:	f000 b8dc 	b.w	800aafc <__malloc_unlock>
 800a944:	42a3      	cmp	r3, r4
 800a946:	d908      	bls.n	800a95a <_free_r+0x42>
 800a948:	6820      	ldr	r0, [r4, #0]
 800a94a:	1821      	adds	r1, r4, r0
 800a94c:	428b      	cmp	r3, r1
 800a94e:	bf01      	itttt	eq
 800a950:	6819      	ldreq	r1, [r3, #0]
 800a952:	685b      	ldreq	r3, [r3, #4]
 800a954:	1809      	addeq	r1, r1, r0
 800a956:	6021      	streq	r1, [r4, #0]
 800a958:	e7ed      	b.n	800a936 <_free_r+0x1e>
 800a95a:	461a      	mov	r2, r3
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	b10b      	cbz	r3, 800a964 <_free_r+0x4c>
 800a960:	42a3      	cmp	r3, r4
 800a962:	d9fa      	bls.n	800a95a <_free_r+0x42>
 800a964:	6811      	ldr	r1, [r2, #0]
 800a966:	1850      	adds	r0, r2, r1
 800a968:	42a0      	cmp	r0, r4
 800a96a:	d10b      	bne.n	800a984 <_free_r+0x6c>
 800a96c:	6820      	ldr	r0, [r4, #0]
 800a96e:	4401      	add	r1, r0
 800a970:	1850      	adds	r0, r2, r1
 800a972:	4283      	cmp	r3, r0
 800a974:	6011      	str	r1, [r2, #0]
 800a976:	d1e0      	bne.n	800a93a <_free_r+0x22>
 800a978:	6818      	ldr	r0, [r3, #0]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	6053      	str	r3, [r2, #4]
 800a97e:	4408      	add	r0, r1
 800a980:	6010      	str	r0, [r2, #0]
 800a982:	e7da      	b.n	800a93a <_free_r+0x22>
 800a984:	d902      	bls.n	800a98c <_free_r+0x74>
 800a986:	230c      	movs	r3, #12
 800a988:	602b      	str	r3, [r5, #0]
 800a98a:	e7d6      	b.n	800a93a <_free_r+0x22>
 800a98c:	6820      	ldr	r0, [r4, #0]
 800a98e:	1821      	adds	r1, r4, r0
 800a990:	428b      	cmp	r3, r1
 800a992:	bf04      	itt	eq
 800a994:	6819      	ldreq	r1, [r3, #0]
 800a996:	685b      	ldreq	r3, [r3, #4]
 800a998:	6063      	str	r3, [r4, #4]
 800a99a:	bf04      	itt	eq
 800a99c:	1809      	addeq	r1, r1, r0
 800a99e:	6021      	streq	r1, [r4, #0]
 800a9a0:	6054      	str	r4, [r2, #4]
 800a9a2:	e7ca      	b.n	800a93a <_free_r+0x22>
 800a9a4:	bd38      	pop	{r3, r4, r5, pc}
 800a9a6:	bf00      	nop
 800a9a8:	2000523c 	.word	0x2000523c

0800a9ac <sbrk_aligned>:
 800a9ac:	b570      	push	{r4, r5, r6, lr}
 800a9ae:	4e0f      	ldr	r6, [pc, #60]	@ (800a9ec <sbrk_aligned+0x40>)
 800a9b0:	460c      	mov	r4, r1
 800a9b2:	6831      	ldr	r1, [r6, #0]
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	b911      	cbnz	r1, 800a9be <sbrk_aligned+0x12>
 800a9b8:	f000 fba6 	bl	800b108 <_sbrk_r>
 800a9bc:	6030      	str	r0, [r6, #0]
 800a9be:	4621      	mov	r1, r4
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	f000 fba1 	bl	800b108 <_sbrk_r>
 800a9c6:	1c43      	adds	r3, r0, #1
 800a9c8:	d103      	bne.n	800a9d2 <sbrk_aligned+0x26>
 800a9ca:	f04f 34ff 	mov.w	r4, #4294967295
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	bd70      	pop	{r4, r5, r6, pc}
 800a9d2:	1cc4      	adds	r4, r0, #3
 800a9d4:	f024 0403 	bic.w	r4, r4, #3
 800a9d8:	42a0      	cmp	r0, r4
 800a9da:	d0f8      	beq.n	800a9ce <sbrk_aligned+0x22>
 800a9dc:	1a21      	subs	r1, r4, r0
 800a9de:	4628      	mov	r0, r5
 800a9e0:	f000 fb92 	bl	800b108 <_sbrk_r>
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	d1f2      	bne.n	800a9ce <sbrk_aligned+0x22>
 800a9e8:	e7ef      	b.n	800a9ca <sbrk_aligned+0x1e>
 800a9ea:	bf00      	nop
 800a9ec:	20005238 	.word	0x20005238

0800a9f0 <_malloc_r>:
 800a9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9f4:	1ccd      	adds	r5, r1, #3
 800a9f6:	f025 0503 	bic.w	r5, r5, #3
 800a9fa:	3508      	adds	r5, #8
 800a9fc:	2d0c      	cmp	r5, #12
 800a9fe:	bf38      	it	cc
 800aa00:	250c      	movcc	r5, #12
 800aa02:	2d00      	cmp	r5, #0
 800aa04:	4606      	mov	r6, r0
 800aa06:	db01      	blt.n	800aa0c <_malloc_r+0x1c>
 800aa08:	42a9      	cmp	r1, r5
 800aa0a:	d904      	bls.n	800aa16 <_malloc_r+0x26>
 800aa0c:	230c      	movs	r3, #12
 800aa0e:	6033      	str	r3, [r6, #0]
 800aa10:	2000      	movs	r0, #0
 800aa12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aaec <_malloc_r+0xfc>
 800aa1a:	f000 f869 	bl	800aaf0 <__malloc_lock>
 800aa1e:	f8d8 3000 	ldr.w	r3, [r8]
 800aa22:	461c      	mov	r4, r3
 800aa24:	bb44      	cbnz	r4, 800aa78 <_malloc_r+0x88>
 800aa26:	4629      	mov	r1, r5
 800aa28:	4630      	mov	r0, r6
 800aa2a:	f7ff ffbf 	bl	800a9ac <sbrk_aligned>
 800aa2e:	1c43      	adds	r3, r0, #1
 800aa30:	4604      	mov	r4, r0
 800aa32:	d158      	bne.n	800aae6 <_malloc_r+0xf6>
 800aa34:	f8d8 4000 	ldr.w	r4, [r8]
 800aa38:	4627      	mov	r7, r4
 800aa3a:	2f00      	cmp	r7, #0
 800aa3c:	d143      	bne.n	800aac6 <_malloc_r+0xd6>
 800aa3e:	2c00      	cmp	r4, #0
 800aa40:	d04b      	beq.n	800aada <_malloc_r+0xea>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	4639      	mov	r1, r7
 800aa46:	4630      	mov	r0, r6
 800aa48:	eb04 0903 	add.w	r9, r4, r3
 800aa4c:	f000 fb5c 	bl	800b108 <_sbrk_r>
 800aa50:	4581      	cmp	r9, r0
 800aa52:	d142      	bne.n	800aada <_malloc_r+0xea>
 800aa54:	6821      	ldr	r1, [r4, #0]
 800aa56:	1a6d      	subs	r5, r5, r1
 800aa58:	4629      	mov	r1, r5
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	f7ff ffa6 	bl	800a9ac <sbrk_aligned>
 800aa60:	3001      	adds	r0, #1
 800aa62:	d03a      	beq.n	800aada <_malloc_r+0xea>
 800aa64:	6823      	ldr	r3, [r4, #0]
 800aa66:	442b      	add	r3, r5
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	f8d8 3000 	ldr.w	r3, [r8]
 800aa6e:	685a      	ldr	r2, [r3, #4]
 800aa70:	bb62      	cbnz	r2, 800aacc <_malloc_r+0xdc>
 800aa72:	f8c8 7000 	str.w	r7, [r8]
 800aa76:	e00f      	b.n	800aa98 <_malloc_r+0xa8>
 800aa78:	6822      	ldr	r2, [r4, #0]
 800aa7a:	1b52      	subs	r2, r2, r5
 800aa7c:	d420      	bmi.n	800aac0 <_malloc_r+0xd0>
 800aa7e:	2a0b      	cmp	r2, #11
 800aa80:	d917      	bls.n	800aab2 <_malloc_r+0xc2>
 800aa82:	1961      	adds	r1, r4, r5
 800aa84:	42a3      	cmp	r3, r4
 800aa86:	6025      	str	r5, [r4, #0]
 800aa88:	bf18      	it	ne
 800aa8a:	6059      	strne	r1, [r3, #4]
 800aa8c:	6863      	ldr	r3, [r4, #4]
 800aa8e:	bf08      	it	eq
 800aa90:	f8c8 1000 	streq.w	r1, [r8]
 800aa94:	5162      	str	r2, [r4, r5]
 800aa96:	604b      	str	r3, [r1, #4]
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f000 f82f 	bl	800aafc <__malloc_unlock>
 800aa9e:	f104 000b 	add.w	r0, r4, #11
 800aaa2:	1d23      	adds	r3, r4, #4
 800aaa4:	f020 0007 	bic.w	r0, r0, #7
 800aaa8:	1ac2      	subs	r2, r0, r3
 800aaaa:	bf1c      	itt	ne
 800aaac:	1a1b      	subne	r3, r3, r0
 800aaae:	50a3      	strne	r3, [r4, r2]
 800aab0:	e7af      	b.n	800aa12 <_malloc_r+0x22>
 800aab2:	6862      	ldr	r2, [r4, #4]
 800aab4:	42a3      	cmp	r3, r4
 800aab6:	bf0c      	ite	eq
 800aab8:	f8c8 2000 	streq.w	r2, [r8]
 800aabc:	605a      	strne	r2, [r3, #4]
 800aabe:	e7eb      	b.n	800aa98 <_malloc_r+0xa8>
 800aac0:	4623      	mov	r3, r4
 800aac2:	6864      	ldr	r4, [r4, #4]
 800aac4:	e7ae      	b.n	800aa24 <_malloc_r+0x34>
 800aac6:	463c      	mov	r4, r7
 800aac8:	687f      	ldr	r7, [r7, #4]
 800aaca:	e7b6      	b.n	800aa3a <_malloc_r+0x4a>
 800aacc:	461a      	mov	r2, r3
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	42a3      	cmp	r3, r4
 800aad2:	d1fb      	bne.n	800aacc <_malloc_r+0xdc>
 800aad4:	2300      	movs	r3, #0
 800aad6:	6053      	str	r3, [r2, #4]
 800aad8:	e7de      	b.n	800aa98 <_malloc_r+0xa8>
 800aada:	230c      	movs	r3, #12
 800aadc:	6033      	str	r3, [r6, #0]
 800aade:	4630      	mov	r0, r6
 800aae0:	f000 f80c 	bl	800aafc <__malloc_unlock>
 800aae4:	e794      	b.n	800aa10 <_malloc_r+0x20>
 800aae6:	6005      	str	r5, [r0, #0]
 800aae8:	e7d6      	b.n	800aa98 <_malloc_r+0xa8>
 800aaea:	bf00      	nop
 800aaec:	2000523c 	.word	0x2000523c

0800aaf0 <__malloc_lock>:
 800aaf0:	4801      	ldr	r0, [pc, #4]	@ (800aaf8 <__malloc_lock+0x8>)
 800aaf2:	f7ff bf01 	b.w	800a8f8 <__retarget_lock_acquire_recursive>
 800aaf6:	bf00      	nop
 800aaf8:	20005234 	.word	0x20005234

0800aafc <__malloc_unlock>:
 800aafc:	4801      	ldr	r0, [pc, #4]	@ (800ab04 <__malloc_unlock+0x8>)
 800aafe:	f7ff befc 	b.w	800a8fa <__retarget_lock_release_recursive>
 800ab02:	bf00      	nop
 800ab04:	20005234 	.word	0x20005234

0800ab08 <__ssputs_r>:
 800ab08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab0c:	688e      	ldr	r6, [r1, #8]
 800ab0e:	461f      	mov	r7, r3
 800ab10:	42be      	cmp	r6, r7
 800ab12:	680b      	ldr	r3, [r1, #0]
 800ab14:	4682      	mov	sl, r0
 800ab16:	460c      	mov	r4, r1
 800ab18:	4690      	mov	r8, r2
 800ab1a:	d82d      	bhi.n	800ab78 <__ssputs_r+0x70>
 800ab1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab24:	d026      	beq.n	800ab74 <__ssputs_r+0x6c>
 800ab26:	6965      	ldr	r5, [r4, #20]
 800ab28:	6909      	ldr	r1, [r1, #16]
 800ab2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab2e:	eba3 0901 	sub.w	r9, r3, r1
 800ab32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab36:	1c7b      	adds	r3, r7, #1
 800ab38:	444b      	add	r3, r9
 800ab3a:	106d      	asrs	r5, r5, #1
 800ab3c:	429d      	cmp	r5, r3
 800ab3e:	bf38      	it	cc
 800ab40:	461d      	movcc	r5, r3
 800ab42:	0553      	lsls	r3, r2, #21
 800ab44:	d527      	bpl.n	800ab96 <__ssputs_r+0x8e>
 800ab46:	4629      	mov	r1, r5
 800ab48:	f7ff ff52 	bl	800a9f0 <_malloc_r>
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	b360      	cbz	r0, 800abaa <__ssputs_r+0xa2>
 800ab50:	6921      	ldr	r1, [r4, #16]
 800ab52:	464a      	mov	r2, r9
 800ab54:	f7ff fed2 	bl	800a8fc <memcpy>
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab62:	81a3      	strh	r3, [r4, #12]
 800ab64:	6126      	str	r6, [r4, #16]
 800ab66:	6165      	str	r5, [r4, #20]
 800ab68:	444e      	add	r6, r9
 800ab6a:	eba5 0509 	sub.w	r5, r5, r9
 800ab6e:	6026      	str	r6, [r4, #0]
 800ab70:	60a5      	str	r5, [r4, #8]
 800ab72:	463e      	mov	r6, r7
 800ab74:	42be      	cmp	r6, r7
 800ab76:	d900      	bls.n	800ab7a <__ssputs_r+0x72>
 800ab78:	463e      	mov	r6, r7
 800ab7a:	6820      	ldr	r0, [r4, #0]
 800ab7c:	4632      	mov	r2, r6
 800ab7e:	4641      	mov	r1, r8
 800ab80:	f000 faa8 	bl	800b0d4 <memmove>
 800ab84:	68a3      	ldr	r3, [r4, #8]
 800ab86:	1b9b      	subs	r3, r3, r6
 800ab88:	60a3      	str	r3, [r4, #8]
 800ab8a:	6823      	ldr	r3, [r4, #0]
 800ab8c:	4433      	add	r3, r6
 800ab8e:	6023      	str	r3, [r4, #0]
 800ab90:	2000      	movs	r0, #0
 800ab92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab96:	462a      	mov	r2, r5
 800ab98:	f000 fac6 	bl	800b128 <_realloc_r>
 800ab9c:	4606      	mov	r6, r0
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d1e0      	bne.n	800ab64 <__ssputs_r+0x5c>
 800aba2:	6921      	ldr	r1, [r4, #16]
 800aba4:	4650      	mov	r0, sl
 800aba6:	f7ff feb7 	bl	800a918 <_free_r>
 800abaa:	230c      	movs	r3, #12
 800abac:	f8ca 3000 	str.w	r3, [sl]
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abb6:	81a3      	strh	r3, [r4, #12]
 800abb8:	f04f 30ff 	mov.w	r0, #4294967295
 800abbc:	e7e9      	b.n	800ab92 <__ssputs_r+0x8a>
	...

0800abc0 <_svfiprintf_r>:
 800abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc4:	4698      	mov	r8, r3
 800abc6:	898b      	ldrh	r3, [r1, #12]
 800abc8:	061b      	lsls	r3, r3, #24
 800abca:	b09d      	sub	sp, #116	@ 0x74
 800abcc:	4607      	mov	r7, r0
 800abce:	460d      	mov	r5, r1
 800abd0:	4614      	mov	r4, r2
 800abd2:	d510      	bpl.n	800abf6 <_svfiprintf_r+0x36>
 800abd4:	690b      	ldr	r3, [r1, #16]
 800abd6:	b973      	cbnz	r3, 800abf6 <_svfiprintf_r+0x36>
 800abd8:	2140      	movs	r1, #64	@ 0x40
 800abda:	f7ff ff09 	bl	800a9f0 <_malloc_r>
 800abde:	6028      	str	r0, [r5, #0]
 800abe0:	6128      	str	r0, [r5, #16]
 800abe2:	b930      	cbnz	r0, 800abf2 <_svfiprintf_r+0x32>
 800abe4:	230c      	movs	r3, #12
 800abe6:	603b      	str	r3, [r7, #0]
 800abe8:	f04f 30ff 	mov.w	r0, #4294967295
 800abec:	b01d      	add	sp, #116	@ 0x74
 800abee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf2:	2340      	movs	r3, #64	@ 0x40
 800abf4:	616b      	str	r3, [r5, #20]
 800abf6:	2300      	movs	r3, #0
 800abf8:	9309      	str	r3, [sp, #36]	@ 0x24
 800abfa:	2320      	movs	r3, #32
 800abfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac00:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac04:	2330      	movs	r3, #48	@ 0x30
 800ac06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ada4 <_svfiprintf_r+0x1e4>
 800ac0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac0e:	f04f 0901 	mov.w	r9, #1
 800ac12:	4623      	mov	r3, r4
 800ac14:	469a      	mov	sl, r3
 800ac16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac1a:	b10a      	cbz	r2, 800ac20 <_svfiprintf_r+0x60>
 800ac1c:	2a25      	cmp	r2, #37	@ 0x25
 800ac1e:	d1f9      	bne.n	800ac14 <_svfiprintf_r+0x54>
 800ac20:	ebba 0b04 	subs.w	fp, sl, r4
 800ac24:	d00b      	beq.n	800ac3e <_svfiprintf_r+0x7e>
 800ac26:	465b      	mov	r3, fp
 800ac28:	4622      	mov	r2, r4
 800ac2a:	4629      	mov	r1, r5
 800ac2c:	4638      	mov	r0, r7
 800ac2e:	f7ff ff6b 	bl	800ab08 <__ssputs_r>
 800ac32:	3001      	adds	r0, #1
 800ac34:	f000 80a7 	beq.w	800ad86 <_svfiprintf_r+0x1c6>
 800ac38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac3a:	445a      	add	r2, fp
 800ac3c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f000 809f 	beq.w	800ad86 <_svfiprintf_r+0x1c6>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac52:	f10a 0a01 	add.w	sl, sl, #1
 800ac56:	9304      	str	r3, [sp, #16]
 800ac58:	9307      	str	r3, [sp, #28]
 800ac5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac5e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac60:	4654      	mov	r4, sl
 800ac62:	2205      	movs	r2, #5
 800ac64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac68:	484e      	ldr	r0, [pc, #312]	@ (800ada4 <_svfiprintf_r+0x1e4>)
 800ac6a:	f7f5 fab1 	bl	80001d0 <memchr>
 800ac6e:	9a04      	ldr	r2, [sp, #16]
 800ac70:	b9d8      	cbnz	r0, 800acaa <_svfiprintf_r+0xea>
 800ac72:	06d0      	lsls	r0, r2, #27
 800ac74:	bf44      	itt	mi
 800ac76:	2320      	movmi	r3, #32
 800ac78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac7c:	0711      	lsls	r1, r2, #28
 800ac7e:	bf44      	itt	mi
 800ac80:	232b      	movmi	r3, #43	@ 0x2b
 800ac82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac86:	f89a 3000 	ldrb.w	r3, [sl]
 800ac8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac8c:	d015      	beq.n	800acba <_svfiprintf_r+0xfa>
 800ac8e:	9a07      	ldr	r2, [sp, #28]
 800ac90:	4654      	mov	r4, sl
 800ac92:	2000      	movs	r0, #0
 800ac94:	f04f 0c0a 	mov.w	ip, #10
 800ac98:	4621      	mov	r1, r4
 800ac9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac9e:	3b30      	subs	r3, #48	@ 0x30
 800aca0:	2b09      	cmp	r3, #9
 800aca2:	d94b      	bls.n	800ad3c <_svfiprintf_r+0x17c>
 800aca4:	b1b0      	cbz	r0, 800acd4 <_svfiprintf_r+0x114>
 800aca6:	9207      	str	r2, [sp, #28]
 800aca8:	e014      	b.n	800acd4 <_svfiprintf_r+0x114>
 800acaa:	eba0 0308 	sub.w	r3, r0, r8
 800acae:	fa09 f303 	lsl.w	r3, r9, r3
 800acb2:	4313      	orrs	r3, r2
 800acb4:	9304      	str	r3, [sp, #16]
 800acb6:	46a2      	mov	sl, r4
 800acb8:	e7d2      	b.n	800ac60 <_svfiprintf_r+0xa0>
 800acba:	9b03      	ldr	r3, [sp, #12]
 800acbc:	1d19      	adds	r1, r3, #4
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	9103      	str	r1, [sp, #12]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	bfbb      	ittet	lt
 800acc6:	425b      	neglt	r3, r3
 800acc8:	f042 0202 	orrlt.w	r2, r2, #2
 800accc:	9307      	strge	r3, [sp, #28]
 800acce:	9307      	strlt	r3, [sp, #28]
 800acd0:	bfb8      	it	lt
 800acd2:	9204      	strlt	r2, [sp, #16]
 800acd4:	7823      	ldrb	r3, [r4, #0]
 800acd6:	2b2e      	cmp	r3, #46	@ 0x2e
 800acd8:	d10a      	bne.n	800acf0 <_svfiprintf_r+0x130>
 800acda:	7863      	ldrb	r3, [r4, #1]
 800acdc:	2b2a      	cmp	r3, #42	@ 0x2a
 800acde:	d132      	bne.n	800ad46 <_svfiprintf_r+0x186>
 800ace0:	9b03      	ldr	r3, [sp, #12]
 800ace2:	1d1a      	adds	r2, r3, #4
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	9203      	str	r2, [sp, #12]
 800ace8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acec:	3402      	adds	r4, #2
 800acee:	9305      	str	r3, [sp, #20]
 800acf0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800adb4 <_svfiprintf_r+0x1f4>
 800acf4:	7821      	ldrb	r1, [r4, #0]
 800acf6:	2203      	movs	r2, #3
 800acf8:	4650      	mov	r0, sl
 800acfa:	f7f5 fa69 	bl	80001d0 <memchr>
 800acfe:	b138      	cbz	r0, 800ad10 <_svfiprintf_r+0x150>
 800ad00:	9b04      	ldr	r3, [sp, #16]
 800ad02:	eba0 000a 	sub.w	r0, r0, sl
 800ad06:	2240      	movs	r2, #64	@ 0x40
 800ad08:	4082      	lsls	r2, r0
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	3401      	adds	r4, #1
 800ad0e:	9304      	str	r3, [sp, #16]
 800ad10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad14:	4824      	ldr	r0, [pc, #144]	@ (800ada8 <_svfiprintf_r+0x1e8>)
 800ad16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad1a:	2206      	movs	r2, #6
 800ad1c:	f7f5 fa58 	bl	80001d0 <memchr>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d036      	beq.n	800ad92 <_svfiprintf_r+0x1d2>
 800ad24:	4b21      	ldr	r3, [pc, #132]	@ (800adac <_svfiprintf_r+0x1ec>)
 800ad26:	bb1b      	cbnz	r3, 800ad70 <_svfiprintf_r+0x1b0>
 800ad28:	9b03      	ldr	r3, [sp, #12]
 800ad2a:	3307      	adds	r3, #7
 800ad2c:	f023 0307 	bic.w	r3, r3, #7
 800ad30:	3308      	adds	r3, #8
 800ad32:	9303      	str	r3, [sp, #12]
 800ad34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad36:	4433      	add	r3, r6
 800ad38:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad3a:	e76a      	b.n	800ac12 <_svfiprintf_r+0x52>
 800ad3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad40:	460c      	mov	r4, r1
 800ad42:	2001      	movs	r0, #1
 800ad44:	e7a8      	b.n	800ac98 <_svfiprintf_r+0xd8>
 800ad46:	2300      	movs	r3, #0
 800ad48:	3401      	adds	r4, #1
 800ad4a:	9305      	str	r3, [sp, #20]
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	f04f 0c0a 	mov.w	ip, #10
 800ad52:	4620      	mov	r0, r4
 800ad54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad58:	3a30      	subs	r2, #48	@ 0x30
 800ad5a:	2a09      	cmp	r2, #9
 800ad5c:	d903      	bls.n	800ad66 <_svfiprintf_r+0x1a6>
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d0c6      	beq.n	800acf0 <_svfiprintf_r+0x130>
 800ad62:	9105      	str	r1, [sp, #20]
 800ad64:	e7c4      	b.n	800acf0 <_svfiprintf_r+0x130>
 800ad66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e7f0      	b.n	800ad52 <_svfiprintf_r+0x192>
 800ad70:	ab03      	add	r3, sp, #12
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	462a      	mov	r2, r5
 800ad76:	4b0e      	ldr	r3, [pc, #56]	@ (800adb0 <_svfiprintf_r+0x1f0>)
 800ad78:	a904      	add	r1, sp, #16
 800ad7a:	4638      	mov	r0, r7
 800ad7c:	f3af 8000 	nop.w
 800ad80:	1c42      	adds	r2, r0, #1
 800ad82:	4606      	mov	r6, r0
 800ad84:	d1d6      	bne.n	800ad34 <_svfiprintf_r+0x174>
 800ad86:	89ab      	ldrh	r3, [r5, #12]
 800ad88:	065b      	lsls	r3, r3, #25
 800ad8a:	f53f af2d 	bmi.w	800abe8 <_svfiprintf_r+0x28>
 800ad8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad90:	e72c      	b.n	800abec <_svfiprintf_r+0x2c>
 800ad92:	ab03      	add	r3, sp, #12
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	462a      	mov	r2, r5
 800ad98:	4b05      	ldr	r3, [pc, #20]	@ (800adb0 <_svfiprintf_r+0x1f0>)
 800ad9a:	a904      	add	r1, sp, #16
 800ad9c:	4638      	mov	r0, r7
 800ad9e:	f000 f879 	bl	800ae94 <_printf_i>
 800ada2:	e7ed      	b.n	800ad80 <_svfiprintf_r+0x1c0>
 800ada4:	0800bdcc 	.word	0x0800bdcc
 800ada8:	0800bdd6 	.word	0x0800bdd6
 800adac:	00000000 	.word	0x00000000
 800adb0:	0800ab09 	.word	0x0800ab09
 800adb4:	0800bdd2 	.word	0x0800bdd2

0800adb8 <_printf_common>:
 800adb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adbc:	4616      	mov	r6, r2
 800adbe:	4698      	mov	r8, r3
 800adc0:	688a      	ldr	r2, [r1, #8]
 800adc2:	690b      	ldr	r3, [r1, #16]
 800adc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800adc8:	4293      	cmp	r3, r2
 800adca:	bfb8      	it	lt
 800adcc:	4613      	movlt	r3, r2
 800adce:	6033      	str	r3, [r6, #0]
 800add0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800add4:	4607      	mov	r7, r0
 800add6:	460c      	mov	r4, r1
 800add8:	b10a      	cbz	r2, 800adde <_printf_common+0x26>
 800adda:	3301      	adds	r3, #1
 800addc:	6033      	str	r3, [r6, #0]
 800adde:	6823      	ldr	r3, [r4, #0]
 800ade0:	0699      	lsls	r1, r3, #26
 800ade2:	bf42      	ittt	mi
 800ade4:	6833      	ldrmi	r3, [r6, #0]
 800ade6:	3302      	addmi	r3, #2
 800ade8:	6033      	strmi	r3, [r6, #0]
 800adea:	6825      	ldr	r5, [r4, #0]
 800adec:	f015 0506 	ands.w	r5, r5, #6
 800adf0:	d106      	bne.n	800ae00 <_printf_common+0x48>
 800adf2:	f104 0a19 	add.w	sl, r4, #25
 800adf6:	68e3      	ldr	r3, [r4, #12]
 800adf8:	6832      	ldr	r2, [r6, #0]
 800adfa:	1a9b      	subs	r3, r3, r2
 800adfc:	42ab      	cmp	r3, r5
 800adfe:	dc26      	bgt.n	800ae4e <_printf_common+0x96>
 800ae00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae04:	6822      	ldr	r2, [r4, #0]
 800ae06:	3b00      	subs	r3, #0
 800ae08:	bf18      	it	ne
 800ae0a:	2301      	movne	r3, #1
 800ae0c:	0692      	lsls	r2, r2, #26
 800ae0e:	d42b      	bmi.n	800ae68 <_printf_common+0xb0>
 800ae10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae14:	4641      	mov	r1, r8
 800ae16:	4638      	mov	r0, r7
 800ae18:	47c8      	blx	r9
 800ae1a:	3001      	adds	r0, #1
 800ae1c:	d01e      	beq.n	800ae5c <_printf_common+0xa4>
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	6922      	ldr	r2, [r4, #16]
 800ae22:	f003 0306 	and.w	r3, r3, #6
 800ae26:	2b04      	cmp	r3, #4
 800ae28:	bf02      	ittt	eq
 800ae2a:	68e5      	ldreq	r5, [r4, #12]
 800ae2c:	6833      	ldreq	r3, [r6, #0]
 800ae2e:	1aed      	subeq	r5, r5, r3
 800ae30:	68a3      	ldr	r3, [r4, #8]
 800ae32:	bf0c      	ite	eq
 800ae34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae38:	2500      	movne	r5, #0
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	bfc4      	itt	gt
 800ae3e:	1a9b      	subgt	r3, r3, r2
 800ae40:	18ed      	addgt	r5, r5, r3
 800ae42:	2600      	movs	r6, #0
 800ae44:	341a      	adds	r4, #26
 800ae46:	42b5      	cmp	r5, r6
 800ae48:	d11a      	bne.n	800ae80 <_printf_common+0xc8>
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	e008      	b.n	800ae60 <_printf_common+0xa8>
 800ae4e:	2301      	movs	r3, #1
 800ae50:	4652      	mov	r2, sl
 800ae52:	4641      	mov	r1, r8
 800ae54:	4638      	mov	r0, r7
 800ae56:	47c8      	blx	r9
 800ae58:	3001      	adds	r0, #1
 800ae5a:	d103      	bne.n	800ae64 <_printf_common+0xac>
 800ae5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae64:	3501      	adds	r5, #1
 800ae66:	e7c6      	b.n	800adf6 <_printf_common+0x3e>
 800ae68:	18e1      	adds	r1, r4, r3
 800ae6a:	1c5a      	adds	r2, r3, #1
 800ae6c:	2030      	movs	r0, #48	@ 0x30
 800ae6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae72:	4422      	add	r2, r4
 800ae74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae7c:	3302      	adds	r3, #2
 800ae7e:	e7c7      	b.n	800ae10 <_printf_common+0x58>
 800ae80:	2301      	movs	r3, #1
 800ae82:	4622      	mov	r2, r4
 800ae84:	4641      	mov	r1, r8
 800ae86:	4638      	mov	r0, r7
 800ae88:	47c8      	blx	r9
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	d0e6      	beq.n	800ae5c <_printf_common+0xa4>
 800ae8e:	3601      	adds	r6, #1
 800ae90:	e7d9      	b.n	800ae46 <_printf_common+0x8e>
	...

0800ae94 <_printf_i>:
 800ae94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae98:	7e0f      	ldrb	r7, [r1, #24]
 800ae9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae9c:	2f78      	cmp	r7, #120	@ 0x78
 800ae9e:	4691      	mov	r9, r2
 800aea0:	4680      	mov	r8, r0
 800aea2:	460c      	mov	r4, r1
 800aea4:	469a      	mov	sl, r3
 800aea6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aeaa:	d807      	bhi.n	800aebc <_printf_i+0x28>
 800aeac:	2f62      	cmp	r7, #98	@ 0x62
 800aeae:	d80a      	bhi.n	800aec6 <_printf_i+0x32>
 800aeb0:	2f00      	cmp	r7, #0
 800aeb2:	f000 80d2 	beq.w	800b05a <_printf_i+0x1c6>
 800aeb6:	2f58      	cmp	r7, #88	@ 0x58
 800aeb8:	f000 80b9 	beq.w	800b02e <_printf_i+0x19a>
 800aebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aec0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aec4:	e03a      	b.n	800af3c <_printf_i+0xa8>
 800aec6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aeca:	2b15      	cmp	r3, #21
 800aecc:	d8f6      	bhi.n	800aebc <_printf_i+0x28>
 800aece:	a101      	add	r1, pc, #4	@ (adr r1, 800aed4 <_printf_i+0x40>)
 800aed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aed4:	0800af2d 	.word	0x0800af2d
 800aed8:	0800af41 	.word	0x0800af41
 800aedc:	0800aebd 	.word	0x0800aebd
 800aee0:	0800aebd 	.word	0x0800aebd
 800aee4:	0800aebd 	.word	0x0800aebd
 800aee8:	0800aebd 	.word	0x0800aebd
 800aeec:	0800af41 	.word	0x0800af41
 800aef0:	0800aebd 	.word	0x0800aebd
 800aef4:	0800aebd 	.word	0x0800aebd
 800aef8:	0800aebd 	.word	0x0800aebd
 800aefc:	0800aebd 	.word	0x0800aebd
 800af00:	0800b041 	.word	0x0800b041
 800af04:	0800af6b 	.word	0x0800af6b
 800af08:	0800affb 	.word	0x0800affb
 800af0c:	0800aebd 	.word	0x0800aebd
 800af10:	0800aebd 	.word	0x0800aebd
 800af14:	0800b063 	.word	0x0800b063
 800af18:	0800aebd 	.word	0x0800aebd
 800af1c:	0800af6b 	.word	0x0800af6b
 800af20:	0800aebd 	.word	0x0800aebd
 800af24:	0800aebd 	.word	0x0800aebd
 800af28:	0800b003 	.word	0x0800b003
 800af2c:	6833      	ldr	r3, [r6, #0]
 800af2e:	1d1a      	adds	r2, r3, #4
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	6032      	str	r2, [r6, #0]
 800af34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af3c:	2301      	movs	r3, #1
 800af3e:	e09d      	b.n	800b07c <_printf_i+0x1e8>
 800af40:	6833      	ldr	r3, [r6, #0]
 800af42:	6820      	ldr	r0, [r4, #0]
 800af44:	1d19      	adds	r1, r3, #4
 800af46:	6031      	str	r1, [r6, #0]
 800af48:	0606      	lsls	r6, r0, #24
 800af4a:	d501      	bpl.n	800af50 <_printf_i+0xbc>
 800af4c:	681d      	ldr	r5, [r3, #0]
 800af4e:	e003      	b.n	800af58 <_printf_i+0xc4>
 800af50:	0645      	lsls	r5, r0, #25
 800af52:	d5fb      	bpl.n	800af4c <_printf_i+0xb8>
 800af54:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af58:	2d00      	cmp	r5, #0
 800af5a:	da03      	bge.n	800af64 <_printf_i+0xd0>
 800af5c:	232d      	movs	r3, #45	@ 0x2d
 800af5e:	426d      	negs	r5, r5
 800af60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af64:	4859      	ldr	r0, [pc, #356]	@ (800b0cc <_printf_i+0x238>)
 800af66:	230a      	movs	r3, #10
 800af68:	e011      	b.n	800af8e <_printf_i+0xfa>
 800af6a:	6821      	ldr	r1, [r4, #0]
 800af6c:	6833      	ldr	r3, [r6, #0]
 800af6e:	0608      	lsls	r0, r1, #24
 800af70:	f853 5b04 	ldr.w	r5, [r3], #4
 800af74:	d402      	bmi.n	800af7c <_printf_i+0xe8>
 800af76:	0649      	lsls	r1, r1, #25
 800af78:	bf48      	it	mi
 800af7a:	b2ad      	uxthmi	r5, r5
 800af7c:	2f6f      	cmp	r7, #111	@ 0x6f
 800af7e:	4853      	ldr	r0, [pc, #332]	@ (800b0cc <_printf_i+0x238>)
 800af80:	6033      	str	r3, [r6, #0]
 800af82:	bf14      	ite	ne
 800af84:	230a      	movne	r3, #10
 800af86:	2308      	moveq	r3, #8
 800af88:	2100      	movs	r1, #0
 800af8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af8e:	6866      	ldr	r6, [r4, #4]
 800af90:	60a6      	str	r6, [r4, #8]
 800af92:	2e00      	cmp	r6, #0
 800af94:	bfa2      	ittt	ge
 800af96:	6821      	ldrge	r1, [r4, #0]
 800af98:	f021 0104 	bicge.w	r1, r1, #4
 800af9c:	6021      	strge	r1, [r4, #0]
 800af9e:	b90d      	cbnz	r5, 800afa4 <_printf_i+0x110>
 800afa0:	2e00      	cmp	r6, #0
 800afa2:	d04b      	beq.n	800b03c <_printf_i+0x1a8>
 800afa4:	4616      	mov	r6, r2
 800afa6:	fbb5 f1f3 	udiv	r1, r5, r3
 800afaa:	fb03 5711 	mls	r7, r3, r1, r5
 800afae:	5dc7      	ldrb	r7, [r0, r7]
 800afb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800afb4:	462f      	mov	r7, r5
 800afb6:	42bb      	cmp	r3, r7
 800afb8:	460d      	mov	r5, r1
 800afba:	d9f4      	bls.n	800afa6 <_printf_i+0x112>
 800afbc:	2b08      	cmp	r3, #8
 800afbe:	d10b      	bne.n	800afd8 <_printf_i+0x144>
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	07df      	lsls	r7, r3, #31
 800afc4:	d508      	bpl.n	800afd8 <_printf_i+0x144>
 800afc6:	6923      	ldr	r3, [r4, #16]
 800afc8:	6861      	ldr	r1, [r4, #4]
 800afca:	4299      	cmp	r1, r3
 800afcc:	bfde      	ittt	le
 800afce:	2330      	movle	r3, #48	@ 0x30
 800afd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800afd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800afd8:	1b92      	subs	r2, r2, r6
 800afda:	6122      	str	r2, [r4, #16]
 800afdc:	f8cd a000 	str.w	sl, [sp]
 800afe0:	464b      	mov	r3, r9
 800afe2:	aa03      	add	r2, sp, #12
 800afe4:	4621      	mov	r1, r4
 800afe6:	4640      	mov	r0, r8
 800afe8:	f7ff fee6 	bl	800adb8 <_printf_common>
 800afec:	3001      	adds	r0, #1
 800afee:	d14a      	bne.n	800b086 <_printf_i+0x1f2>
 800aff0:	f04f 30ff 	mov.w	r0, #4294967295
 800aff4:	b004      	add	sp, #16
 800aff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800affa:	6823      	ldr	r3, [r4, #0]
 800affc:	f043 0320 	orr.w	r3, r3, #32
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	4833      	ldr	r0, [pc, #204]	@ (800b0d0 <_printf_i+0x23c>)
 800b004:	2778      	movs	r7, #120	@ 0x78
 800b006:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b00a:	6823      	ldr	r3, [r4, #0]
 800b00c:	6831      	ldr	r1, [r6, #0]
 800b00e:	061f      	lsls	r7, r3, #24
 800b010:	f851 5b04 	ldr.w	r5, [r1], #4
 800b014:	d402      	bmi.n	800b01c <_printf_i+0x188>
 800b016:	065f      	lsls	r7, r3, #25
 800b018:	bf48      	it	mi
 800b01a:	b2ad      	uxthmi	r5, r5
 800b01c:	6031      	str	r1, [r6, #0]
 800b01e:	07d9      	lsls	r1, r3, #31
 800b020:	bf44      	itt	mi
 800b022:	f043 0320 	orrmi.w	r3, r3, #32
 800b026:	6023      	strmi	r3, [r4, #0]
 800b028:	b11d      	cbz	r5, 800b032 <_printf_i+0x19e>
 800b02a:	2310      	movs	r3, #16
 800b02c:	e7ac      	b.n	800af88 <_printf_i+0xf4>
 800b02e:	4827      	ldr	r0, [pc, #156]	@ (800b0cc <_printf_i+0x238>)
 800b030:	e7e9      	b.n	800b006 <_printf_i+0x172>
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	f023 0320 	bic.w	r3, r3, #32
 800b038:	6023      	str	r3, [r4, #0]
 800b03a:	e7f6      	b.n	800b02a <_printf_i+0x196>
 800b03c:	4616      	mov	r6, r2
 800b03e:	e7bd      	b.n	800afbc <_printf_i+0x128>
 800b040:	6833      	ldr	r3, [r6, #0]
 800b042:	6825      	ldr	r5, [r4, #0]
 800b044:	6961      	ldr	r1, [r4, #20]
 800b046:	1d18      	adds	r0, r3, #4
 800b048:	6030      	str	r0, [r6, #0]
 800b04a:	062e      	lsls	r6, r5, #24
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	d501      	bpl.n	800b054 <_printf_i+0x1c0>
 800b050:	6019      	str	r1, [r3, #0]
 800b052:	e002      	b.n	800b05a <_printf_i+0x1c6>
 800b054:	0668      	lsls	r0, r5, #25
 800b056:	d5fb      	bpl.n	800b050 <_printf_i+0x1bc>
 800b058:	8019      	strh	r1, [r3, #0]
 800b05a:	2300      	movs	r3, #0
 800b05c:	6123      	str	r3, [r4, #16]
 800b05e:	4616      	mov	r6, r2
 800b060:	e7bc      	b.n	800afdc <_printf_i+0x148>
 800b062:	6833      	ldr	r3, [r6, #0]
 800b064:	1d1a      	adds	r2, r3, #4
 800b066:	6032      	str	r2, [r6, #0]
 800b068:	681e      	ldr	r6, [r3, #0]
 800b06a:	6862      	ldr	r2, [r4, #4]
 800b06c:	2100      	movs	r1, #0
 800b06e:	4630      	mov	r0, r6
 800b070:	f7f5 f8ae 	bl	80001d0 <memchr>
 800b074:	b108      	cbz	r0, 800b07a <_printf_i+0x1e6>
 800b076:	1b80      	subs	r0, r0, r6
 800b078:	6060      	str	r0, [r4, #4]
 800b07a:	6863      	ldr	r3, [r4, #4]
 800b07c:	6123      	str	r3, [r4, #16]
 800b07e:	2300      	movs	r3, #0
 800b080:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b084:	e7aa      	b.n	800afdc <_printf_i+0x148>
 800b086:	6923      	ldr	r3, [r4, #16]
 800b088:	4632      	mov	r2, r6
 800b08a:	4649      	mov	r1, r9
 800b08c:	4640      	mov	r0, r8
 800b08e:	47d0      	blx	sl
 800b090:	3001      	adds	r0, #1
 800b092:	d0ad      	beq.n	800aff0 <_printf_i+0x15c>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	079b      	lsls	r3, r3, #30
 800b098:	d413      	bmi.n	800b0c2 <_printf_i+0x22e>
 800b09a:	68e0      	ldr	r0, [r4, #12]
 800b09c:	9b03      	ldr	r3, [sp, #12]
 800b09e:	4298      	cmp	r0, r3
 800b0a0:	bfb8      	it	lt
 800b0a2:	4618      	movlt	r0, r3
 800b0a4:	e7a6      	b.n	800aff4 <_printf_i+0x160>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	4632      	mov	r2, r6
 800b0aa:	4649      	mov	r1, r9
 800b0ac:	4640      	mov	r0, r8
 800b0ae:	47d0      	blx	sl
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	d09d      	beq.n	800aff0 <_printf_i+0x15c>
 800b0b4:	3501      	adds	r5, #1
 800b0b6:	68e3      	ldr	r3, [r4, #12]
 800b0b8:	9903      	ldr	r1, [sp, #12]
 800b0ba:	1a5b      	subs	r3, r3, r1
 800b0bc:	42ab      	cmp	r3, r5
 800b0be:	dcf2      	bgt.n	800b0a6 <_printf_i+0x212>
 800b0c0:	e7eb      	b.n	800b09a <_printf_i+0x206>
 800b0c2:	2500      	movs	r5, #0
 800b0c4:	f104 0619 	add.w	r6, r4, #25
 800b0c8:	e7f5      	b.n	800b0b6 <_printf_i+0x222>
 800b0ca:	bf00      	nop
 800b0cc:	0800bddd 	.word	0x0800bddd
 800b0d0:	0800bdee 	.word	0x0800bdee

0800b0d4 <memmove>:
 800b0d4:	4288      	cmp	r0, r1
 800b0d6:	b510      	push	{r4, lr}
 800b0d8:	eb01 0402 	add.w	r4, r1, r2
 800b0dc:	d902      	bls.n	800b0e4 <memmove+0x10>
 800b0de:	4284      	cmp	r4, r0
 800b0e0:	4623      	mov	r3, r4
 800b0e2:	d807      	bhi.n	800b0f4 <memmove+0x20>
 800b0e4:	1e43      	subs	r3, r0, #1
 800b0e6:	42a1      	cmp	r1, r4
 800b0e8:	d008      	beq.n	800b0fc <memmove+0x28>
 800b0ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0f2:	e7f8      	b.n	800b0e6 <memmove+0x12>
 800b0f4:	4402      	add	r2, r0
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	428a      	cmp	r2, r1
 800b0fa:	d100      	bne.n	800b0fe <memmove+0x2a>
 800b0fc:	bd10      	pop	{r4, pc}
 800b0fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b106:	e7f7      	b.n	800b0f8 <memmove+0x24>

0800b108 <_sbrk_r>:
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	4d06      	ldr	r5, [pc, #24]	@ (800b124 <_sbrk_r+0x1c>)
 800b10c:	2300      	movs	r3, #0
 800b10e:	4604      	mov	r4, r0
 800b110:	4608      	mov	r0, r1
 800b112:	602b      	str	r3, [r5, #0]
 800b114:	f7f7 fe7c 	bl	8002e10 <_sbrk>
 800b118:	1c43      	adds	r3, r0, #1
 800b11a:	d102      	bne.n	800b122 <_sbrk_r+0x1a>
 800b11c:	682b      	ldr	r3, [r5, #0]
 800b11e:	b103      	cbz	r3, 800b122 <_sbrk_r+0x1a>
 800b120:	6023      	str	r3, [r4, #0]
 800b122:	bd38      	pop	{r3, r4, r5, pc}
 800b124:	20005230 	.word	0x20005230

0800b128 <_realloc_r>:
 800b128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b12c:	4680      	mov	r8, r0
 800b12e:	4615      	mov	r5, r2
 800b130:	460c      	mov	r4, r1
 800b132:	b921      	cbnz	r1, 800b13e <_realloc_r+0x16>
 800b134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b138:	4611      	mov	r1, r2
 800b13a:	f7ff bc59 	b.w	800a9f0 <_malloc_r>
 800b13e:	b92a      	cbnz	r2, 800b14c <_realloc_r+0x24>
 800b140:	f7ff fbea 	bl	800a918 <_free_r>
 800b144:	2400      	movs	r4, #0
 800b146:	4620      	mov	r0, r4
 800b148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b14c:	f000 f81a 	bl	800b184 <_malloc_usable_size_r>
 800b150:	4285      	cmp	r5, r0
 800b152:	4606      	mov	r6, r0
 800b154:	d802      	bhi.n	800b15c <_realloc_r+0x34>
 800b156:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b15a:	d8f4      	bhi.n	800b146 <_realloc_r+0x1e>
 800b15c:	4629      	mov	r1, r5
 800b15e:	4640      	mov	r0, r8
 800b160:	f7ff fc46 	bl	800a9f0 <_malloc_r>
 800b164:	4607      	mov	r7, r0
 800b166:	2800      	cmp	r0, #0
 800b168:	d0ec      	beq.n	800b144 <_realloc_r+0x1c>
 800b16a:	42b5      	cmp	r5, r6
 800b16c:	462a      	mov	r2, r5
 800b16e:	4621      	mov	r1, r4
 800b170:	bf28      	it	cs
 800b172:	4632      	movcs	r2, r6
 800b174:	f7ff fbc2 	bl	800a8fc <memcpy>
 800b178:	4621      	mov	r1, r4
 800b17a:	4640      	mov	r0, r8
 800b17c:	f7ff fbcc 	bl	800a918 <_free_r>
 800b180:	463c      	mov	r4, r7
 800b182:	e7e0      	b.n	800b146 <_realloc_r+0x1e>

0800b184 <_malloc_usable_size_r>:
 800b184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b188:	1f18      	subs	r0, r3, #4
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	bfbc      	itt	lt
 800b18e:	580b      	ldrlt	r3, [r1, r0]
 800b190:	18c0      	addlt	r0, r0, r3
 800b192:	4770      	bx	lr

0800b194 <_init>:
 800b194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b196:	bf00      	nop
 800b198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b19a:	bc08      	pop	{r3}
 800b19c:	469e      	mov	lr, r3
 800b19e:	4770      	bx	lr

0800b1a0 <_fini>:
 800b1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a2:	bf00      	nop
 800b1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1a6:	bc08      	pop	{r3}
 800b1a8:	469e      	mov	lr, r3
 800b1aa:	4770      	bx	lr
