
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afe8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  0800b178  0800b178  0001b178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be00  0800be00  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800be00  0800be00  0001be00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be08  0800be08  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be08  0800be08  0001be08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be0c  0800be0c  0001be0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800be10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          000051d4  20000068  20000068  00020068  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000523c  2000523c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c4cb  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003974  00000000  00000000  0003c5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001900  00000000  00000000  0003ff18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013a2  00000000  00000000  00041818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003d09  00000000  00000000  00042bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c901  00000000  00000000  000468c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d84b3  00000000  00000000  000631c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007184  00000000  00000000  0013b678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  001427fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b160 	.word	0x0800b160

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800b160 	.word	0x0800b160

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b970 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	460d      	mov	r5, r1
 8000be4:	4604      	mov	r4, r0
 8000be6:	460f      	mov	r7, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14a      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4694      	mov	ip, r2
 8000bf0:	d965      	bls.n	8000cbe <__udivmoddi4+0xe2>
 8000bf2:	fab2 f382 	clz	r3, r2
 8000bf6:	b143      	cbz	r3, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	f1c3 0220 	rsb	r2, r3, #32
 8000c00:	409f      	lsls	r7, r3
 8000c02:	fa20 f202 	lsr.w	r2, r0, r2
 8000c06:	4317      	orrs	r7, r2
 8000c08:	409c      	lsls	r4, r3
 8000c0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0e:	fa1f f58c 	uxth.w	r5, ip
 8000c12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c16:	0c22      	lsrs	r2, r4, #16
 8000c18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c20:	fb01 f005 	mul.w	r0, r1, r5
 8000c24:	4290      	cmp	r0, r2
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x62>
 8000c28:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c30:	f080 811c 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c34:	4290      	cmp	r0, r2
 8000c36:	f240 8119 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c3a:	3902      	subs	r1, #2
 8000c3c:	4462      	add	r2, ip
 8000c3e:	1a12      	subs	r2, r2, r0
 8000c40:	b2a4      	uxth	r4, r4
 8000c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4e:	fb00 f505 	mul.w	r5, r0, r5
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x90>
 8000c56:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5e:	f080 8107 	bcs.w	8000e70 <__udivmoddi4+0x294>
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	f240 8104 	bls.w	8000e70 <__udivmoddi4+0x294>
 8000c68:	4464      	add	r4, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c70:	1b64      	subs	r4, r4, r5
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11e      	cbz	r6, 8000c7e <__udivmoddi4+0xa2>
 8000c76:	40dc      	lsrs	r4, r3
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0xbc>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80ed 	beq.w	8000e66 <__udivmoddi4+0x28a>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d149      	bne.n	8000d34 <__udivmoddi4+0x158>
 8000ca0:	42ab      	cmp	r3, r5
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xce>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2be>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb65 0203 	sbc.w	r2, r5, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4617      	mov	r7, r2
 8000cb4:	2e00      	cmp	r6, #0
 8000cb6:	d0e2      	beq.n	8000c7e <__udivmoddi4+0xa2>
 8000cb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cbc:	e7df      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xe6>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f382 	clz	r3, r2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x210>
 8000ccc:	1a8a      	subs	r2, r1, r2
 8000cce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd2:	fa1f fe8c 	uxth.w	lr, ip
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ce0:	0c22      	lsrs	r2, r4, #16
 8000ce2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce6:	fb0e f005 	mul.w	r0, lr, r5
 8000cea:	4290      	cmp	r0, r2
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cee:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	f200 80cb 	bhi.w	8000e94 <__udivmoddi4+0x2b8>
 8000cfe:	4645      	mov	r5, r8
 8000d00:	1a12      	subs	r2, r2, r0
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d08:	fb07 2210 	mls	r2, r7, r0, r2
 8000d0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d10:	fb0e fe00 	mul.w	lr, lr, r0
 8000d14:	45a6      	cmp	lr, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x14e>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x14c>
 8000d22:	45a6      	cmp	lr, r4
 8000d24:	f200 80bb 	bhi.w	8000e9e <__udivmoddi4+0x2c2>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	eba4 040e 	sub.w	r4, r4, lr
 8000d2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d32:	e79f      	b.n	8000c74 <__udivmoddi4+0x98>
 8000d34:	f1c1 0720 	rsb	r7, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d42:	fa05 f401 	lsl.w	r4, r5, r1
 8000d46:	fa20 f307 	lsr.w	r3, r0, r7
 8000d4a:	40fd      	lsrs	r5, r7
 8000d4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb08 f50e 	mul.w	r5, r8, lr
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d7c:	f080 8088 	bcs.w	8000e90 <__udivmoddi4+0x2b4>
 8000d80:	42a5      	cmp	r5, r4
 8000d82:	f240 8085 	bls.w	8000e90 <__udivmoddi4+0x2b4>
 8000d86:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8a:	4464      	add	r4, ip
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	b29d      	uxth	r5, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dac:	d26c      	bcs.n	8000e88 <__udivmoddi4+0x2ac>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	d96a      	bls.n	8000e88 <__udivmoddi4+0x2ac>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	4464      	add	r4, ip
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fba3 9502 	umull	r9, r5, r3, r2
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	46c8      	mov	r8, r9
 8000dc6:	46ae      	mov	lr, r5
 8000dc8:	d356      	bcc.n	8000e78 <__udivmoddi4+0x29c>
 8000dca:	d053      	beq.n	8000e74 <__udivmoddi4+0x298>
 8000dcc:	b156      	cbz	r6, 8000de4 <__udivmoddi4+0x208>
 8000dce:	ebb0 0208 	subs.w	r2, r0, r8
 8000dd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dda:	40ca      	lsrs	r2, r1
 8000ddc:	40cc      	lsrs	r4, r1
 8000dde:	4317      	orrs	r7, r2
 8000de0:	e9c6 7400 	strd	r7, r4, [r6]
 8000de4:	4618      	mov	r0, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dec:	f1c3 0120 	rsb	r1, r3, #32
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	fa20 f201 	lsr.w	r2, r0, r1
 8000df8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dfc:	409d      	lsls	r5, r3
 8000dfe:	432a      	orrs	r2, r5
 8000e00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e04:	fa1f fe8c 	uxth.w	lr, ip
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e16:	fb00 f50e 	mul.w	r5, r0, lr
 8000e1a:	428d      	cmp	r5, r1
 8000e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x258>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2a:	d22f      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e2c:	428d      	cmp	r5, r1
 8000e2e:	d92d      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	1b49      	subs	r1, r1, r5
 8000e36:	b292      	uxth	r2, r2
 8000e38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e44:	fb05 f10e 	mul.w	r1, r5, lr
 8000e48:	4291      	cmp	r1, r2
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x282>
 8000e4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e54:	d216      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000e56:	4291      	cmp	r1, r2
 8000e58:	d914      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000e5a:	3d02      	subs	r5, #2
 8000e5c:	4462      	add	r2, ip
 8000e5e:	1a52      	subs	r2, r2, r1
 8000e60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e64:	e738      	b.n	8000cd8 <__udivmoddi4+0xfc>
 8000e66:	4631      	mov	r1, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e708      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000e6c:	4639      	mov	r1, r7
 8000e6e:	e6e6      	b.n	8000c3e <__udivmoddi4+0x62>
 8000e70:	4610      	mov	r0, r2
 8000e72:	e6fb      	b.n	8000c6c <__udivmoddi4+0x90>
 8000e74:	4548      	cmp	r0, r9
 8000e76:	d2a9      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e78:	ebb9 0802 	subs.w	r8, r9, r2
 8000e7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e80:	3b01      	subs	r3, #1
 8000e82:	e7a3      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e84:	4645      	mov	r5, r8
 8000e86:	e7ea      	b.n	8000e5e <__udivmoddi4+0x282>
 8000e88:	462b      	mov	r3, r5
 8000e8a:	e794      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8c:	4640      	mov	r0, r8
 8000e8e:	e7d1      	b.n	8000e34 <__udivmoddi4+0x258>
 8000e90:	46d0      	mov	r8, sl
 8000e92:	e77b      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e94:	3d02      	subs	r5, #2
 8000e96:	4462      	add	r2, ip
 8000e98:	e732      	b.n	8000d00 <__udivmoddi4+0x124>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xd8>
 8000e9e:	4464      	add	r4, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e742      	b.n	8000d2a <__udivmoddi4+0x14e>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000eac:	f3bf 8f4f 	dsb	sy
}
 8000eb0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <__NVIC_SystemReset+0x24>)
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000eba:	4904      	ldr	r1, [pc, #16]	; (8000ecc <__NVIC_SystemReset+0x24>)
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_SystemReset+0x28>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ec2:	f3bf 8f4f 	dsb	sy
}
 8000ec6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <__NVIC_SystemReset+0x20>
 8000ecc:	e000ed00 	.word	0xe000ed00
 8000ed0:	05fa0004 	.word	0x05fa0004

08000ed4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ed8:	f002 fa58 	bl	800338c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000edc:	f000 f890 	bl	8001000 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ee0:	f000 fb88 	bl	80015f4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000ee4:	f000 f8ea 	bl	80010bc <MX_I2C1_Init>
	MX_TIM1_Init();
 8000ee8:	f000 f916 	bl	8001118 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000eec:	f000 f9b2 	bl	8001254 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000ef0:	f000 fa04 	bl	80012fc <MX_TIM3_Init>
	MX_TIM4_Init();
 8000ef4:	f000 fa56 	bl	80013a4 <MX_TIM4_Init>
	MX_TIM8_Init();
 8000ef8:	f000 faa8 	bl	800144c <MX_TIM8_Init>
	MX_USART3_UART_Init();
 8000efc:	f000 fb50 	bl	80015a0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 8000f00:	f002 f9b8 	bl	8003274 <OLED_Init>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 5);
 8000f04:	2205      	movs	r2, #5
 8000f06:	4924      	ldr	r1, [pc, #144]	; (8000f98 <main+0xc4>)
 8000f08:	4824      	ldr	r0, [pc, #144]	; (8000f9c <main+0xc8>)
 8000f0a:	f005 fee8 	bl	8006cde <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000f0e:	f006 feb3 	bl	8007c78 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000f12:	4a23      	ldr	r2, [pc, #140]	; (8000fa0 <main+0xcc>)
 8000f14:	2100      	movs	r1, #0
 8000f16:	4823      	ldr	r0, [pc, #140]	; (8000fa4 <main+0xd0>)
 8000f18:	f006 fef8 	bl	8007d0c <osThreadNew>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <main+0xd4>)
 8000f20:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of motorTask */
	motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000f22:	4a22      	ldr	r2, [pc, #136]	; (8000fac <main+0xd8>)
 8000f24:	2100      	movs	r1, #0
 8000f26:	4822      	ldr	r0, [pc, #136]	; (8000fb0 <main+0xdc>)
 8000f28:	f006 fef0 	bl	8007d0c <osThreadNew>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <main+0xe0>)
 8000f30:	6013      	str	r3, [r2, #0]

	/* creation of OLEDTask */
	OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000f32:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <main+0xe4>)
 8000f34:	2100      	movs	r1, #0
 8000f36:	4821      	ldr	r0, [pc, #132]	; (8000fbc <main+0xe8>)
 8000f38:	f006 fee8 	bl	8007d0c <osThreadNew>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <main+0xec>)
 8000f40:	6013      	str	r3, [r2, #0]

	/* creation of gyroTask */
	gyroTaskHandle = osThreadNew(StartGyroTask, NULL, &gyroTask_attributes);
 8000f42:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <main+0xf0>)
 8000f44:	2100      	movs	r1, #0
 8000f46:	4820      	ldr	r0, [pc, #128]	; (8000fc8 <main+0xf4>)
 8000f48:	f006 fee0 	bl	8007d0c <osThreadNew>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <main+0xf8>)
 8000f50:	6013      	str	r3, [r2, #0]

	/* creation of ultrasonicTask */
	ultrasonicTaskHandle = osThreadNew(StartUltrasonicTask, NULL,
 8000f52:	4a1f      	ldr	r2, [pc, #124]	; (8000fd0 <main+0xfc>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <main+0x100>)
 8000f58:	f006 fed8 	bl	8007d0c <osThreadNew>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <main+0x104>)
 8000f60:	6013      	str	r3, [r2, #0]
			&ultrasonicTask_attributes);

	/* creation of communicateTask */
	communicateTaskHandle = osThreadNew(StartCommunicateTask, NULL,
 8000f62:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <main+0x108>)
 8000f64:	2100      	movs	r1, #0
 8000f66:	481e      	ldr	r0, [pc, #120]	; (8000fe0 <main+0x10c>)
 8000f68:	f006 fed0 	bl	8007d0c <osThreadNew>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4a1d      	ldr	r2, [pc, #116]	; (8000fe4 <main+0x110>)
 8000f70:	6013      	str	r3, [r2, #0]
			&communicateTask_attributes);

	/* creation of encoderRTask */
	encoderRTaskHandle = osThreadNew(StartEncoderRTask, NULL,
 8000f72:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <main+0x114>)
 8000f74:	2100      	movs	r1, #0
 8000f76:	481d      	ldr	r0, [pc, #116]	; (8000fec <main+0x118>)
 8000f78:	f006 fec8 	bl	8007d0c <osThreadNew>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <main+0x11c>)
 8000f80:	6013      	str	r3, [r2, #0]
			&encoderRTask_attributes);

	/* creation of encoderLTask */
	encoderLTaskHandle = osThreadNew(StartEncoderLTask, NULL,
 8000f82:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <main+0x120>)
 8000f84:	2100      	movs	r1, #0
 8000f86:	481c      	ldr	r0, [pc, #112]	; (8000ff8 <main+0x124>)
 8000f88:	f006 fec0 	bl	8007d0c <osThreadNew>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <main+0x128>)
 8000f90:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000f92:	f006 fe95 	bl	8007cc0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000f96:	e7fe      	b.n	8000f96 <main+0xc2>
 8000f98:	200002a4 	.word	0x200002a4
 8000f9c:	20000240 	.word	0x20000240
 8000fa0:	0800b230 	.word	0x0800b230
 8000fa4:	08001e41 	.word	0x08001e41
 8000fa8:	20000284 	.word	0x20000284
 8000fac:	0800b254 	.word	0x0800b254
 8000fb0:	08001e61 	.word	0x08001e61
 8000fb4:	20000288 	.word	0x20000288
 8000fb8:	0800b278 	.word	0x0800b278
 8000fbc:	080022a9 	.word	0x080022a9
 8000fc0:	2000028c 	.word	0x2000028c
 8000fc4:	0800b29c 	.word	0x0800b29c
 8000fc8:	080023e9 	.word	0x080023e9
 8000fcc:	20000290 	.word	0x20000290
 8000fd0:	0800b2c0 	.word	0x0800b2c0
 8000fd4:	0800257d 	.word	0x0800257d
 8000fd8:	20000294 	.word	0x20000294
 8000fdc:	0800b2e4 	.word	0x0800b2e4
 8000fe0:	0800258d 	.word	0x0800258d
 8000fe4:	20000298 	.word	0x20000298
 8000fe8:	0800b308 	.word	0x0800b308
 8000fec:	080027a5 	.word	0x080027a5
 8000ff0:	2000029c 	.word	0x2000029c
 8000ff4:	0800b32c 	.word	0x0800b32c
 8000ff8:	0800282d 	.word	0x0800282d
 8000ffc:	200002a0 	.word	0x200002a0

08001000 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	; 0x50
 8001004:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001006:	f107 0320 	add.w	r3, r7, #32
 800100a:	2230      	movs	r2, #48	; 0x30
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f009 fbcc 	bl	800a7ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <SystemClock_Config+0xb4>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <SystemClock_Config+0xb4>)
 800102e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <SystemClock_Config+0xb4>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <SystemClock_Config+0xb8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <SystemClock_Config+0xb8>)
 800104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <SystemClock_Config+0xb8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105c:	2302      	movs	r3, #2
 800105e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001060:	2301      	movs	r3, #1
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001064:	2310      	movs	r3, #16
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001068:	2300      	movs	r3, #0
 800106a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800106c:	f107 0320 	add.w	r3, r7, #32
 8001070:	4618      	mov	r0, r3
 8001072:	f003 fd53 	bl	8004b1c <HAL_RCC_OscConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0x80>
		Error_Handler();
 800107c:	f001 fc1a 	bl	80028b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001080:	230f      	movs	r3, #15
 8001082:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f003 ffb6 	bl	800500c <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xaa>
		Error_Handler();
 80010a6:	f001 fc05 	bl	80028b4 <Error_Handler>
	}
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	; 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_I2C1_Init+0x50>)
 80010c2:	4a13      	ldr	r2, [pc, #76]	; (8001110 <MX_I2C1_Init+0x54>)
 80010c4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_I2C1_Init+0x50>)
 80010c8:	4a12      	ldr	r2, [pc, #72]	; (8001114 <MX_I2C1_Init+0x58>)
 80010ca:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_I2C1_Init+0x50>)
 80010da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010de:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <MX_I2C1_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_I2C1_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <MX_I2C1_Init+0x50>)
 80010fa:	f002 fd51 	bl	8003ba0 <HAL_I2C_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001104:	f001 fbd6 	bl	80028b4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000084 	.word	0x20000084
 8001110:	40005400 	.word	0x40005400
 8001114:	000186a0 	.word	0x000186a0

08001118 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b096      	sub	sp, #88	; 0x58
 800111c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800111e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800112c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
 8001146:	615a      	str	r2, [r3, #20]
 8001148:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2220      	movs	r2, #32
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f009 fb2b 	bl	800a7ac <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <MX_TIM1_Init+0x134>)
 8001158:	4a3d      	ldr	r2, [pc, #244]	; (8001250 <MX_TIM1_Init+0x138>)
 800115a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 800115c:	4b3b      	ldr	r3, [pc, #236]	; (800124c <MX_TIM1_Init+0x134>)
 800115e:	22a0      	movs	r2, #160	; 0xa0
 8001160:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001162:	4b3a      	ldr	r3, [pc, #232]	; (800124c <MX_TIM1_Init+0x134>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 8001168:	4b38      	ldr	r3, [pc, #224]	; (800124c <MX_TIM1_Init+0x134>)
 800116a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800116e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001170:	4b36      	ldr	r3, [pc, #216]	; (800124c <MX_TIM1_Init+0x134>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001176:	4b35      	ldr	r3, [pc, #212]	; (800124c <MX_TIM1_Init+0x134>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800117c:	4b33      	ldr	r3, [pc, #204]	; (800124c <MX_TIM1_Init+0x134>)
 800117e:	2280      	movs	r2, #128	; 0x80
 8001180:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001182:	4832      	ldr	r0, [pc, #200]	; (800124c <MX_TIM1_Init+0x134>)
 8001184:	f004 f922 	bl	80053cc <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM1_Init+0x7a>
		Error_Handler();
 800118e:	f001 fb91 	bl	80028b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001198:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800119c:	4619      	mov	r1, r3
 800119e:	482b      	ldr	r0, [pc, #172]	; (800124c <MX_TIM1_Init+0x134>)
 80011a0:	f004 fe6e 	bl	8005e80 <HAL_TIM_ConfigClockSource>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM1_Init+0x96>
		Error_Handler();
 80011aa:	f001 fb83 	bl	80028b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80011ae:	4827      	ldr	r0, [pc, #156]	; (800124c <MX_TIM1_Init+0x134>)
 80011b0:	f004 f95b 	bl	800546a <HAL_TIM_PWM_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0xa6>
		Error_Handler();
 80011ba:	f001 fb7b 	bl	80028b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80011c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ca:	4619      	mov	r1, r3
 80011cc:	481f      	ldr	r0, [pc, #124]	; (800124c <MX_TIM1_Init+0x134>)
 80011ce:	f005 fbc5 	bl	800695c <HAL_TIMEx_MasterConfigSynchronization>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80011d8:	f001 fb6c 	bl	80028b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011dc:	2360      	movs	r3, #96	; 0x60
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	220c      	movs	r2, #12
 80011fa:	4619      	mov	r1, r3
 80011fc:	4813      	ldr	r0, [pc, #76]	; (800124c <MX_TIM1_Init+0x134>)
 80011fe:	f004 fd7d 	bl	8005cfc <HAL_TIM_PWM_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM1_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 8001208:	f001 fb54 	bl	80028b4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001224:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <MX_TIM1_Init+0x134>)
 8001230:	f005 fc10 	bl	8006a54 <HAL_TIMEx_ConfigBreakDeadTime>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0x126>
			!= HAL_OK) {
		Error_Handler();
 800123a:	f001 fb3b 	bl	80028b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800123e:	4803      	ldr	r0, [pc, #12]	; (800124c <MX_TIM1_Init+0x134>)
 8001240:	f001 fd1a 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 8001244:	bf00      	nop
 8001246:	3758      	adds	r7, #88	; 0x58
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200000d8 	.word	0x200000d8
 8001250:	40010000 	.word	0x40010000

08001254 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2224      	movs	r2, #36	; 0x24
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f009 faa2 	bl	800a7ac <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001270:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_TIM2_Init+0xa4>)
 8001272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001276:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_TIM2_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_TIM2_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_TIM2_Init+0xa4>)
 8001286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_TIM2_Init+0xa4>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_TIM2_Init+0xa4>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001298:	2303      	movs	r3, #3
 800129a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a0:	2301      	movs	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 80012a8:	230a      	movs	r3, #10
 80012aa:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b0:	2301      	movs	r3, #1
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 10;
 80012b8:	230a      	movs	r3, #10
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	4619      	mov	r1, r3
 80012c2:	480d      	ldr	r0, [pc, #52]	; (80012f8 <MX_TIM2_Init+0xa4>)
 80012c4:	f004 fa41 	bl	800574a <HAL_TIM_Encoder_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM2_Init+0x7e>
		Error_Handler();
 80012ce:	f001 faf1 	bl	80028b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_TIM2_Init+0xa4>)
 80012e0:	f005 fb3c 	bl	800695c <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80012ea:	f001 fae3 	bl	80028b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3730      	adds	r7, #48	; 0x30
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000120 	.word	0x20000120

080012fc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	; 0x30
 8001300:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2224      	movs	r2, #36	; 0x24
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f009 fa4e 	bl	800a7ac <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001318:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_TIM3_Init+0xa0>)
 800131a:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <MX_TIM3_Init+0xa4>)
 800131c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_TIM3_Init+0xa0>)
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_TIM3_Init+0xa0>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM3_Init+0xa0>)
 800132c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001330:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM3_Init+0xa0>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_TIM3_Init+0xa0>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800133e:	2303      	movs	r3, #3
 8001340:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001346:	2301      	movs	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 800134e:	230a      	movs	r3, #10
 8001350:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001356:	2301      	movs	r3, #1
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 10;
 800135e:	230a      	movs	r3, #10
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_TIM3_Init+0xa0>)
 800136a:	f004 f9ee 	bl	800574a <HAL_TIM_Encoder_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0x7c>
		Error_Handler();
 8001374:	f001 fa9e 	bl	80028b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_TIM3_Init+0xa0>)
 8001386:	f005 fae9 	bl	800695c <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001390:	f001 fa90 	bl	80028b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3730      	adds	r7, #48	; 0x30
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000168 	.word	0x20000168
 80013a0:	40000400 	.word	0x40000400

080013a4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80013b4:	463b      	mov	r3, r7
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80013c0:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_TIM4_Init+0xa0>)
 80013c2:	4a21      	ldr	r2, [pc, #132]	; (8001448 <MX_TIM4_Init+0xa4>)
 80013c4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 16 - 1;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_TIM4_Init+0xa0>)
 80013c8:	220f      	movs	r2, #15
 80013ca:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_TIM4_Init+0xa0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_TIM4_Init+0xa0>)
 80013d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d8:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_TIM4_Init+0xa0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_TIM4_Init+0xa0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK) {
 80013e6:	4817      	ldr	r0, [pc, #92]	; (8001444 <MX_TIM4_Init+0xa0>)
 80013e8:	f004 f960 	bl	80056ac <HAL_TIM_IC_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM4_Init+0x52>
		Error_Handler();
 80013f2:	f001 fa5f 	bl	80028b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	480f      	ldr	r0, [pc, #60]	; (8001444 <MX_TIM4_Init+0xa0>)
 8001406:	f005 faa9 	bl	800695c <HAL_TIMEx_MasterConfigSynchronization>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM4_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 8001410:	f001 fa50 	bl	80028b4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001414:	2300      	movs	r3, #0
 8001416:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001418:	2301      	movs	r3, #1
 800141a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <MX_TIM4_Init+0xa0>)
 800142c:	f004 fbc9 	bl	8005bc2 <HAL_TIM_IC_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM4_Init+0x96>
		Error_Handler();
 8001436:	f001 fa3d 	bl	80028b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001b0 	.word	0x200001b0
 8001448:	40000800 	.word	0x40000800

0800144c <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b096      	sub	sp, #88	; 0x58
 8001450:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001452:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001460:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2220      	movs	r2, #32
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f009 f991 	bl	800a7ac <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800148a:	4b43      	ldr	r3, [pc, #268]	; (8001598 <MX_TIM8_Init+0x14c>)
 800148c:	4a43      	ldr	r2, [pc, #268]	; (800159c <MX_TIM8_Init+0x150>)
 800148e:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001490:	4b41      	ldr	r3, [pc, #260]	; (8001598 <MX_TIM8_Init+0x14c>)
 8001492:	2200      	movs	r2, #0
 8001494:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b40      	ldr	r3, [pc, #256]	; (8001598 <MX_TIM8_Init+0x14c>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 800149c:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <MX_TIM8_Init+0x14c>)
 800149e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014a2:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a4:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <MX_TIM8_Init+0x14c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80014aa:	4b3b      	ldr	r3, [pc, #236]	; (8001598 <MX_TIM8_Init+0x14c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b0:	4b39      	ldr	r3, [pc, #228]	; (8001598 <MX_TIM8_Init+0x14c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 80014b6:	4838      	ldr	r0, [pc, #224]	; (8001598 <MX_TIM8_Init+0x14c>)
 80014b8:	f003 ff88 	bl	80053cc <HAL_TIM_Base_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM8_Init+0x7a>
		Error_Handler();
 80014c2:	f001 f9f7 	bl	80028b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ca:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 80014cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014d0:	4619      	mov	r1, r3
 80014d2:	4831      	ldr	r0, [pc, #196]	; (8001598 <MX_TIM8_Init+0x14c>)
 80014d4:	f004 fcd4 	bl	8005e80 <HAL_TIM_ConfigClockSource>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM8_Init+0x96>
		Error_Handler();
 80014de:	f001 f9e9 	bl	80028b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80014e2:	482d      	ldr	r0, [pc, #180]	; (8001598 <MX_TIM8_Init+0x14c>)
 80014e4:	f003 ffc1 	bl	800546a <HAL_TIM_PWM_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM8_Init+0xa6>
		Error_Handler();
 80014ee:	f001 f9e1 	bl	80028b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80014fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014fe:	4619      	mov	r1, r3
 8001500:	4825      	ldr	r0, [pc, #148]	; (8001598 <MX_TIM8_Init+0x14c>)
 8001502:	f005 fa2b 	bl	800695c <HAL_TIMEx_MasterConfigSynchronization>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 800150c:	f001 f9d2 	bl	80028b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001510:	2360      	movs	r3, #96	; 0x60
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800151c:	2300      	movs	r3, #0
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	2200      	movs	r2, #0
 8001532:	4619      	mov	r1, r3
 8001534:	4818      	ldr	r0, [pc, #96]	; (8001598 <MX_TIM8_Init+0x14c>)
 8001536:	f004 fbe1 	bl	8005cfc <HAL_TIM_PWM_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM8_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8001540:	f001 f9b8 	bl	80028b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 8001544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001548:	2204      	movs	r2, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4812      	ldr	r0, [pc, #72]	; (8001598 <MX_TIM8_Init+0x14c>)
 800154e:	f004 fbd5 	bl	8005cfc <HAL_TIM_PWM_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM8_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8001558:	f001 f9ac 	bl	80028b4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001574:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_TIM8_Init+0x14c>)
 8001580:	f005 fa68 	bl	8006a54 <HAL_TIMEx_ConfigBreakDeadTime>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM8_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 800158a:	f001 f993 	bl	80028b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3758      	adds	r7, #88	; 0x58
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200001f8 	.word	0x200001f8
 800159c:	40010400 	.word	0x40010400

080015a0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <MX_USART3_UART_Init+0x50>)
 80015a8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015d8:	f005 faa2 	bl	8006b20 <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80015e2:	f001 f967 	bl	80028b4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000240 	.word	0x20000240
 80015f0:	40004800 	.word	0x40004800

080015f4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08c      	sub	sp, #48	; 0x30
 80015f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	4b5b      	ldr	r3, [pc, #364]	; (800177c <MX_GPIO_Init+0x188>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a5a      	ldr	r2, [pc, #360]	; (800177c <MX_GPIO_Init+0x188>)
 8001614:	f043 0310 	orr.w	r3, r3, #16
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b58      	ldr	r3, [pc, #352]	; (800177c <MX_GPIO_Init+0x188>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	4b54      	ldr	r3, [pc, #336]	; (800177c <MX_GPIO_Init+0x188>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a53      	ldr	r2, [pc, #332]	; (800177c <MX_GPIO_Init+0x188>)
 8001630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b51      	ldr	r3, [pc, #324]	; (800177c <MX_GPIO_Init+0x188>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b4d      	ldr	r3, [pc, #308]	; (800177c <MX_GPIO_Init+0x188>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a4c      	ldr	r2, [pc, #304]	; (800177c <MX_GPIO_Init+0x188>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b4a      	ldr	r3, [pc, #296]	; (800177c <MX_GPIO_Init+0x188>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b46      	ldr	r3, [pc, #280]	; (800177c <MX_GPIO_Init+0x188>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a45      	ldr	r2, [pc, #276]	; (800177c <MX_GPIO_Init+0x188>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b43      	ldr	r3, [pc, #268]	; (800177c <MX_GPIO_Init+0x188>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <MX_GPIO_Init+0x188>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a3e      	ldr	r2, [pc, #248]	; (800177c <MX_GPIO_Init+0x188>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b3c      	ldr	r3, [pc, #240]	; (800177c <MX_GPIO_Init+0x188>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	4b38      	ldr	r3, [pc, #224]	; (800177c <MX_GPIO_Init+0x188>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a37      	ldr	r2, [pc, #220]	; (800177c <MX_GPIO_Init+0x188>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b35      	ldr	r3, [pc, #212]	; (800177c <MX_GPIO_Init+0x188>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80016b8:	4831      	ldr	r0, [pc, #196]	; (8001780 <MX_GPIO_Init+0x18c>)
 80016ba:	f002 fa3d 	bl	8003b38 <HAL_GPIO_WritePin>
	OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin,
 80016be:	2200      	movs	r2, #0
 80016c0:	213c      	movs	r1, #60	; 0x3c
 80016c2:	4830      	ldr	r0, [pc, #192]	; (8001784 <MX_GPIO_Init+0x190>)
 80016c4:	f002 fa38 	bl	8003b38 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ce:	482e      	ldr	r0, [pc, #184]	; (8001788 <MX_GPIO_Init+0x194>)
 80016d0:	f002 fa32 	bl	8003b38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016da:	482c      	ldr	r0, [pc, #176]	; (800178c <MX_GPIO_Init+0x198>)
 80016dc:	f002 fa2c 	bl	8003b38 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
	 LED3_Pin */
	GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin
 80016e0:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80016e4:	61fb      	str	r3, [r7, #28]
			| OLED_DC_Pin | LED3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	4821      	ldr	r0, [pc, #132]	; (8001780 <MX_GPIO_Init+0x18c>)
 80016fa:	f002 f881 	bl	8003800 <HAL_GPIO_Init>

	/*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
	GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin;
 80016fe:	233c      	movs	r3, #60	; 0x3c
 8001700:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	2301      	movs	r3, #1
 8001704:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170a:	2302      	movs	r3, #2
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	481b      	ldr	r0, [pc, #108]	; (8001784 <MX_GPIO_Init+0x190>)
 8001716:	f002 f873 	bl	8003800 <HAL_GPIO_Init>

	/*Configure GPIO pin : Buzzer_Pin */
	GPIO_InitStruct.Pin = Buzzer_Pin;
 800171a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	4815      	ldr	r0, [pc, #84]	; (8001788 <MX_GPIO_Init+0x194>)
 8001734:	f002 f864 	bl	8003800 <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_PB_Pin */
	GPIO_InitStruct.Pin = USER_PB_Pin;
 8001738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800173e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001742:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	480f      	ldr	r0, [pc, #60]	; (800178c <MX_GPIO_Init+0x198>)
 8001750:	f002 f856 	bl	8003800 <HAL_GPIO_Init>

	/*Configure GPIO pin : Trigger_Pin */
	GPIO_InitStruct.Pin = Trigger_Pin;
 8001754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001758:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	4807      	ldr	r0, [pc, #28]	; (800178c <MX_GPIO_Init+0x198>)
 800176e:	f002 f847 	bl	8003800 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001772:	bf00      	nop
 8001774:	3730      	adds	r7, #48	; 0x30
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	40021000 	.word	0x40021000
 8001784:	40020000 	.word	0x40020000
 8001788:	40020400 	.word	0x40020400
 800178c:	40020c00 	.word	0x40020c00

08001790 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// communication
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	/* to prevent unused argument(s) compilation warning */
	UNUSED(huart);
	HAL_UART_Receive_IT(&huart3, aRxBuffer, 5);
 8001798:	2205      	movs	r2, #5
 800179a:	4904      	ldr	r1, [pc, #16]	; (80017ac <HAL_UART_RxCpltCallback+0x1c>)
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <HAL_UART_RxCpltCallback+0x20>)
 800179e:	f005 fa9e 	bl	8006cde <HAL_UART_Receive_IT>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200002a4 	.word	0x200002a4
 80017b0:	20000240 	.word	0x20000240
 80017b4:	00000000 	.word	0x00000000

080017b8 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim4, 0);
	while (__HAL_TIM_GET_COUNTER (&htim4) < time)
		;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7f1b      	ldrb	r3, [r3, #28]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	f040 808a 	bne.w	80018de <HAL_TIM_IC_CaptureCallback+0x126>
		if (Is_First_Captured == 0) {
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d11b      	bne.n	800180a <HAL_TIM_IC_CaptureCallback+0x52>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017d2:	2100      	movs	r1, #0
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f004 fc1b 	bl	8006010 <HAL_TIM_ReadCapturedValue>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80017e0:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 020a 	bic.w	r2, r2, #10
 80017f6:	621a      	str	r2, [r3, #32]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6a1a      	ldr	r2, [r3, #32]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0202 	orr.w	r2, r2, #2
 8001806:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8001808:	e069      	b.n	80018de <HAL_TIM_IC_CaptureCallback+0x126>
		} else if (Is_First_Captured == 1) {
 800180a:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d165      	bne.n	80018de <HAL_TIM_IC_CaptureCallback+0x126>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001812:	2100      	movs	r1, #0
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f004 fbfb 	bl	8006010 <HAL_TIM_ReadCapturedValue>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001820:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 800182a:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	dd0a      	ble.n	800184c <HAL_TIM_IC_CaptureCallback+0x94>
				Difference = IC_Val2 - IC_Val1;
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	b29a      	uxth	r2, r3
 8001846:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001848:	801a      	strh	r2, [r3, #0]
 800184a:	e011      	b.n	8001870 <HAL_TIM_IC_CaptureCallback+0xb8>
			else if (IC_Val1 > IC_Val2) {
 800184c:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	dd0b      	ble.n	8001870 <HAL_TIM_IC_CaptureCallback+0xb8>
				Difference = (65535 - IC_Val1) + IC_Val2;
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	b29a      	uxth	r2, r3
 800185e:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	b29b      	uxth	r3, r3
 8001868:	3b01      	subs	r3, #1
 800186a:	b29a      	uxth	r2, r3
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_TIM_IC_CaptureCallback+0x144>)
 800186e:	801a      	strh	r2, [r3, #0]
			uDistance = Difference * .0343 / 2;
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe4d 	bl	8000514 <__aeabi_i2d>
 800187a:	a31b      	add	r3, pc, #108	; (adr r3, 80018e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f7fe feb2 	bl	80005e8 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001894:	f7fe ffd2 	bl	800083c <__aeabi_ddiv>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f7ff f964 	bl	8000b6c <__aeabi_d2uiz>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_TIM_IC_CaptureCallback+0x148>)
 80018aa:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0;
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6a1a      	ldr	r2, [r3, #32]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 020a 	bic.w	r2, r2, #10
 80018c0:	621a      	str	r2, [r3, #32]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6a12      	ldr	r2, [r2, #32]
 80018cc:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0202 	bic.w	r2, r2, #2
 80018dc:	60da      	str	r2, [r3, #12]
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	04816f00 	.word	0x04816f00
 80018ec:	3fa18fc5 	.word	0x3fa18fc5
 80018f0:	200002f4 	.word	0x200002f4
 80018f4:	200002f8 	.word	0x200002f8
 80018f8:	200002fc 	.word	0x200002fc
 80018fc:	20000300 	.word	0x20000300
 8001900:	20000302 	.word	0x20000302
 8001904:	200001b0 	.word	0x200001b0

08001908 <moveCarStraight>:
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
}

// movement
void moveCarStraight(double distance) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	ed87 0b00 	vstr	d0, [r7]
	distance = distance * 75;
 8001912:	a331      	add	r3, pc, #196	; (adr r3, 80019d8 <moveCarStraight+0xd0>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800191c:	f7fe fe64 	bl	80005e8 <__aeabi_dmul>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	e9c7 2300 	strd	r2, r3, [r7]
	pwmVal_servo = SERVOCENTER;
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <moveCarStraight+0xb0>)
 800192a:	2294      	movs	r2, #148	; 0x94
 800192c:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 800192e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001932:	f006 fa7d 	bl	8007e30 <osDelay>
	e_brake = 0;
 8001936:	4b21      	ldr	r3, [pc, #132]	; (80019bc <moveCarStraight+0xb4>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 800193c:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <moveCarStraight+0xb8>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
	rightEncoderVal = 75000;
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <moveCarStraight+0xbc>)
 8001944:	4a20      	ldr	r2, [pc, #128]	; (80019c8 <moveCarStraight+0xc0>)
 8001946:	601a      	str	r2, [r3, #0]
	leftEncoderVal = 75000;
 8001948:	4b20      	ldr	r3, [pc, #128]	; (80019cc <moveCarStraight+0xc4>)
 800194a:	4a1f      	ldr	r2, [pc, #124]	; (80019c8 <moveCarStraight+0xc0>)
 800194c:	601a      	str	r2, [r3, #0]
	rightTarget = 75000;
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <moveCarStraight+0xc8>)
 8001950:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <moveCarStraight+0xc0>)
 8001952:	601a      	str	r2, [r3, #0]
	leftTarget = 75000;
 8001954:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <moveCarStraight+0xcc>)
 8001956:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <moveCarStraight+0xc0>)
 8001958:	601a      	str	r2, [r3, #0]
	rightTarget += distance;
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <moveCarStraight+0xc8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fdd8 	bl	8000514 <__aeabi_i2d>
 8001964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001968:	f7fe fc88 	bl	800027c <__adddf3>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff f8d2 	bl	8000b1c <__aeabi_d2iz>
 8001978:	4603      	mov	r3, r0
 800197a:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <moveCarStraight+0xc8>)
 800197c:	6013      	str	r3, [r2, #0]
	leftTarget += distance;
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <moveCarStraight+0xcc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fdc6 	bl	8000514 <__aeabi_i2d>
 8001988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800198c:	f7fe fc76 	bl	800027c <__adddf3>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f7ff f8c0 	bl	8000b1c <__aeabi_d2iz>
 800199c:	4603      	mov	r3, r0
 800199e:	4a0d      	ldr	r2, [pc, #52]	; (80019d4 <moveCarStraight+0xcc>)
 80019a0:	6013      	str	r3, [r2, #0]
	while (finishCheck())
 80019a2:	bf00      	nop
 80019a4:	f000 f984 	bl	8001cb0 <finishCheck>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1fa      	bne.n	80019a4 <moveCarStraight+0x9c>
		;
//	if (stopped == 1) {
//		vTaskResume(ultrasonicTaskHandle);
//		stopped = 0;
//	}
}
 80019ae:	bf00      	nop
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000000 	.word	0x20000000
 80019bc:	200002bc 	.word	0x200002bc
 80019c0:	200002b8 	.word	0x200002b8
 80019c4:	200002c0 	.word	0x200002c0
 80019c8:	000124f8 	.word	0x000124f8
 80019cc:	200002c4 	.word	0x200002c4
 80019d0:	200002c8 	.word	0x200002c8
 80019d4:	200002cc 	.word	0x200002cc
 80019d8:	00000000 	.word	0x00000000
 80019dc:	4052c000 	.word	0x4052c000

080019e0 <moveCarRight>:
	e_brake = 1;
	pwmVal_servo = SERVOCENTER;
	osDelay(300);
}

void moveCarRight(double angle) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVORIGHT;
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <moveCarRight+0x54>)
 80019ec:	22e6      	movs	r2, #230	; 0xe6
 80019ee:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 80019f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019f4:	f006 fa1c 	bl	8007e30 <osDelay>
	e_brake = 0;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <moveCarRight+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <moveCarRight+0x5c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <moveCarRight+0x60>)
 8001a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a0e:	f7fe fc33 	bl	8000278 <__aeabi_dsub>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	490a      	ldr	r1, [pc, #40]	; (8001a40 <moveCarRight+0x60>)
 8001a18:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck())
 8001a1c:	bf00      	nop
 8001a1e:	f000 f947 	bl	8001cb0 <finishCheck>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1fa      	bne.n	8001a1e <moveCarRight+0x3e>
		;
//	if (stopped == 1) {
//		vTaskResume(ultrasonicTaskHandle);
//		stopped = 0;
//	}
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000000 	.word	0x20000000
 8001a38:	200002bc 	.word	0x200002bc
 8001a3c:	200002b8 	.word	0x200002b8
 8001a40:	200002d0 	.word	0x200002d0

08001a44 <moveCarLeft>:

void moveCarLeft(double angle) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVOLEFT;
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <moveCarLeft+0x54>)
 8001a50:	226a      	movs	r2, #106	; 0x6a
 8001a52:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 8001a54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a58:	f006 f9ea 	bl	8007e30 <osDelay>
	e_brake = 0;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <moveCarLeft+0x58>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <moveCarLeft+0x5c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <moveCarLeft+0x60>)
 8001a6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a72:	f7fe fc03 	bl	800027c <__adddf3>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	490a      	ldr	r1, [pc, #40]	; (8001aa4 <moveCarLeft+0x60>)
 8001a7c:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck())
 8001a80:	bf00      	nop
 8001a82:	f000 f915 	bl	8001cb0 <finishCheck>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1fa      	bne.n	8001a82 <moveCarLeft+0x3e>
		;
//	if (stopped == 1) {
//		vTaskResume(ultrasonicTaskHandle);
//		stopped = 0;
//	}
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	200002bc 	.word	0x200002bc
 8001aa0:	200002b8 	.word	0x200002b8
 8001aa4:	200002d0 	.word	0x200002d0

08001aa8 <PID_Control>:

// error correction
int PID_Control(int error, int right) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
	if (right) { //rightMotor
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d018      	beq.n	8001aea <PID_Control+0x42>
		if (error > 0) { //go forward
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	dd0a      	ble.n	8001ad4 <PID_Control+0x2c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2110      	movs	r1, #16
 8001ac2:	4835      	ldr	r0, [pc, #212]	; (8001b98 <PID_Control+0xf0>)
 8001ac4:	f002 f838 	bl	8003b38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2120      	movs	r1, #32
 8001acc:	4832      	ldr	r0, [pc, #200]	; (8001b98 <PID_Control+0xf0>)
 8001ace:	f002 f833 	bl	8003b38 <HAL_GPIO_WritePin>
 8001ad2:	e022      	b.n	8001b1a <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2110      	movs	r1, #16
 8001ad8:	482f      	ldr	r0, [pc, #188]	; (8001b98 <PID_Control+0xf0>)
 8001ada:	f002 f82d 	bl	8003b38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2120      	movs	r1, #32
 8001ae2:	482d      	ldr	r0, [pc, #180]	; (8001b98 <PID_Control+0xf0>)
 8001ae4:	f002 f828 	bl	8003b38 <HAL_GPIO_WritePin>
 8001ae8:	e017      	b.n	8001b1a <PID_Control+0x72>
		}
	} else { //leftMotor
		if (error > 0) { //go forward
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	dd0a      	ble.n	8001b06 <PID_Control+0x5e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001af0:	2201      	movs	r2, #1
 8001af2:	2108      	movs	r1, #8
 8001af4:	4828      	ldr	r0, [pc, #160]	; (8001b98 <PID_Control+0xf0>)
 8001af6:	f002 f81f 	bl	8003b38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2104      	movs	r1, #4
 8001afe:	4826      	ldr	r0, [pc, #152]	; (8001b98 <PID_Control+0xf0>)
 8001b00:	f002 f81a 	bl	8003b38 <HAL_GPIO_WritePin>
 8001b04:	e009      	b.n	8001b1a <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001b06:	2200      	movs	r2, #0
 8001b08:	2108      	movs	r1, #8
 8001b0a:	4823      	ldr	r0, [pc, #140]	; (8001b98 <PID_Control+0xf0>)
 8001b0c:	f002 f814 	bl	8003b38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	2104      	movs	r1, #4
 8001b14:	4820      	ldr	r0, [pc, #128]	; (8001b98 <PID_Control+0xf0>)
 8001b16:	f002 f80f 	bl	8003b38 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	bfb8      	it	lt
 8001b20:	425b      	neglt	r3, r3
 8001b22:	607b      	str	r3, [r7, #4]
	if (error > 2000) {
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b2a:	dd02      	ble.n	8001b32 <PID_Control+0x8a>
		return 3000;
 8001b2c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b30:	e02d      	b.n	8001b8e <PID_Control+0xe6>
	} else if (error > 500) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b38:	dd02      	ble.n	8001b40 <PID_Control+0x98>
		return 2000;
 8001b3a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b3e:	e026      	b.n	8001b8e <PID_Control+0xe6>
	} else if (error > 200) {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2bc8      	cmp	r3, #200	; 0xc8
 8001b44:	dd02      	ble.n	8001b4c <PID_Control+0xa4>
		return 1400;
 8001b46:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001b4a:	e020      	b.n	8001b8e <PID_Control+0xe6>
	} else if (error > 100) {
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	dd02      	ble.n	8001b58 <PID_Control+0xb0>
		return 1000;
 8001b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b56:	e01a      	b.n	8001b8e <PID_Control+0xe6>
	} else if (error > 2) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	dd07      	ble.n	8001b6e <PID_Control+0xc6>
		times_acceptable++;
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <PID_Control+0xf4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	3301      	adds	r3, #1
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <PID_Control+0xf4>)
 8001b66:	6013      	str	r3, [r2, #0]
		return 500;
 8001b68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b6c:	e00f      	b.n	8001b8e <PID_Control+0xe6>
	} else if (error >= 1) {
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	dd06      	ble.n	8001b82 <PID_Control+0xda>
		times_acceptable++;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <PID_Control+0xf4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	4a08      	ldr	r2, [pc, #32]	; (8001b9c <PID_Control+0xf4>)
 8001b7c:	6013      	str	r3, [r2, #0]
		return 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e005      	b.n	8001b8e <PID_Control+0xe6>
	} else {
		times_acceptable++;
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <PID_Control+0xf4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <PID_Control+0xf4>)
 8001b8a:	6013      	str	r3, [r2, #0]
		return 0;
 8001b8c:	2300      	movs	r3, #0
	}
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	200002b8 	.word	0x200002b8

08001ba0 <PID_Angle>:

int PID_Angle(double errord, int right) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	ed87 0b02 	vstr	d0, [r7, #8]
 8001baa:	6078      	str	r0, [r7, #4]
	int error = (int) (errord * 10);
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b3c      	ldr	r3, [pc, #240]	; (8001ca4 <PID_Angle+0x104>)
 8001bb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bb6:	f7fe fd17 	bl	80005e8 <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7fe ffab 	bl	8000b1c <__aeabi_d2iz>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	617b      	str	r3, [r7, #20]
	if (right) { //rightMotor
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d018      	beq.n	8001c02 <PID_Angle+0x62>
		if (error > 0) { //go forward
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	dd0a      	ble.n	8001bec <PID_Angle+0x4c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2110      	movs	r1, #16
 8001bda:	4833      	ldr	r0, [pc, #204]	; (8001ca8 <PID_Angle+0x108>)
 8001bdc:	f001 ffac 	bl	8003b38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2120      	movs	r1, #32
 8001be4:	4830      	ldr	r0, [pc, #192]	; (8001ca8 <PID_Angle+0x108>)
 8001be6:	f001 ffa7 	bl	8003b38 <HAL_GPIO_WritePin>
 8001bea:	e022      	b.n	8001c32 <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001bec:	2200      	movs	r2, #0
 8001bee:	2110      	movs	r1, #16
 8001bf0:	482d      	ldr	r0, [pc, #180]	; (8001ca8 <PID_Angle+0x108>)
 8001bf2:	f001 ffa1 	bl	8003b38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2120      	movs	r1, #32
 8001bfa:	482b      	ldr	r0, [pc, #172]	; (8001ca8 <PID_Angle+0x108>)
 8001bfc:	f001 ff9c 	bl	8003b38 <HAL_GPIO_WritePin>
 8001c00:	e017      	b.n	8001c32 <PID_Angle+0x92>
		}
	} else { //leftMotor
		if (error < 0) { //go forward
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	da0a      	bge.n	8001c1e <PID_Angle+0x7e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2108      	movs	r1, #8
 8001c0c:	4826      	ldr	r0, [pc, #152]	; (8001ca8 <PID_Angle+0x108>)
 8001c0e:	f001 ff93 	bl	8003b38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2104      	movs	r1, #4
 8001c16:	4824      	ldr	r0, [pc, #144]	; (8001ca8 <PID_Angle+0x108>)
 8001c18:	f001 ff8e 	bl	8003b38 <HAL_GPIO_WritePin>
 8001c1c:	e009      	b.n	8001c32 <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2108      	movs	r1, #8
 8001c22:	4821      	ldr	r0, [pc, #132]	; (8001ca8 <PID_Angle+0x108>)
 8001c24:	f001 ff88 	bl	8003b38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	481e      	ldr	r0, [pc, #120]	; (8001ca8 <PID_Angle+0x108>)
 8001c2e:	f001 ff83 	bl	8003b38 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bfb8      	it	lt
 8001c38:	425b      	neglt	r3, r3
 8001c3a:	617b      	str	r3, [r7, #20]
	if (error > 300) {
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c42:	dd02      	ble.n	8001c4a <PID_Angle+0xaa>
		return 3000;
 8001c44:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001c48:	e028      	b.n	8001c9c <PID_Angle+0xfc>
	} else if (error > 200) {
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2bc8      	cmp	r3, #200	; 0xc8
 8001c4e:	dd02      	ble.n	8001c56 <PID_Angle+0xb6>
		return 2000;
 8001c50:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c54:	e022      	b.n	8001c9c <PID_Angle+0xfc>
	} else if (error > 150) {
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b96      	cmp	r3, #150	; 0x96
 8001c5a:	dd02      	ble.n	8001c62 <PID_Angle+0xc2>
		return 1600;
 8001c5c:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001c60:	e01c      	b.n	8001c9c <PID_Angle+0xfc>
	} else if (error > 100) {
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b64      	cmp	r3, #100	; 0x64
 8001c66:	dd02      	ble.n	8001c6e <PID_Angle+0xce>
		return 1400;
 8001c68:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001c6c:	e016      	b.n	8001c9c <PID_Angle+0xfc>
	} else if (error > 10) {
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b0a      	cmp	r3, #10
 8001c72:	dd02      	ble.n	8001c7a <PID_Angle+0xda>
		return 1000;
 8001c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c78:	e010      	b.n	8001c9c <PID_Angle+0xfc>
	} else if (error >= 2) {
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	dd07      	ble.n	8001c90 <PID_Angle+0xf0>
		times_acceptable++;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <PID_Angle+0x10c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <PID_Angle+0x10c>)
 8001c88:	6013      	str	r3, [r2, #0]
		return 600;
 8001c8a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001c8e:	e005      	b.n	8001c9c <PID_Angle+0xfc>
	} else {
		times_acceptable++;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <PID_Angle+0x10c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <PID_Angle+0x10c>)
 8001c98:	6013      	str	r3, [r2, #0]
		return 0;
 8001c9a:	2300      	movs	r3, #0
	}
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40240000 	.word	0x40240000
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	200002b8 	.word	0x200002b8

08001cb0 <finishCheck>:

int finishCheck() {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
	if (times_acceptable > 20) {
 8001cb4:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <finishCheck+0x48>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b14      	cmp	r3, #20
 8001cba:	dd1a      	ble.n	8001cf2 <finishCheck+0x42>
		e_brake = 1;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <finishCheck+0x4c>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
		pwmVal_L = pwmVal_R = 0;
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <finishCheck+0x50>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	801a      	strh	r2, [r3, #0]
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <finishCheck+0x50>)
 8001cca:	881a      	ldrh	r2, [r3, #0]
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <finishCheck+0x54>)
 8001cce:	801a      	strh	r2, [r3, #0]
		leftTarget = leftEncoderVal;
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <finishCheck+0x58>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <finishCheck+0x5c>)
 8001cd6:	6013      	str	r3, [r2, #0]
		rightTarget = rightEncoderVal;
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <finishCheck+0x60>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	; (8001d14 <finishCheck+0x64>)
 8001cde:	6013      	str	r3, [r2, #0]
		times_acceptable = 0;
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <finishCheck+0x48>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
		osDelay(300);
 8001ce6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001cea:	f006 f8a1 	bl	8007e30 <osDelay>

		return 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <finishCheck+0x44>
	}
	return 1;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200002b8 	.word	0x200002b8
 8001cfc:	200002bc 	.word	0x200002bc
 8001d00:	200002b4 	.word	0x200002b4
 8001d04:	200002b6 	.word	0x200002b6
 8001d08:	200002c4 	.word	0x200002c4
 8001d0c:	200002cc 	.word	0x200002cc
 8001d10:	200002c0 	.word	0x200002c0
 8001d14:	200002c8 	.word	0x200002c8

08001d18 <readByte>:

// gyro
void readByte(uint8_t addr, uint8_t *data) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 8001d24:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <readByte+0x4c>)
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 1, 10);
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <readByte+0x50>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	b299      	uxth	r1, r3
 8001d34:	230a      	movs	r3, #10
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <readByte+0x4c>)
 8001d3c:	480b      	ldr	r0, [pc, #44]	; (8001d6c <readByte+0x54>)
 8001d3e:	f002 f873 	bl	8003e28 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress << 1, data, 2, 20);
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <readByte+0x50>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	2314      	movs	r3, #20
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2302      	movs	r3, #2
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	4805      	ldr	r0, [pc, #20]	; (8001d6c <readByte+0x54>)
 8001d56:	f002 f965 	bl	8004024 <HAL_I2C_Master_Receive>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200002e0 	.word	0x200002e0
 8001d68:	20000002 	.word	0x20000002
 8001d6c:	20000084 	.word	0x20000084

08001d70 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	4603      	mov	r3, r0
 8001d78:	460a      	mov	r2, r1
 8001d7a:	71fb      	strb	r3, [r7, #7]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 8001d80:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <writeByte+0x3c>)
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 8001d86:	4a09      	ldr	r2, [pc, #36]	; (8001dac <writeByte+0x3c>)
 8001d88:	79bb      	ldrb	r3, [r7, #6]
 8001d8a:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <writeByte+0x40>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	b299      	uxth	r1, r3
 8001d96:	2314      	movs	r3, #20
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	4a03      	ldr	r2, [pc, #12]	; (8001dac <writeByte+0x3c>)
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <writeByte+0x44>)
 8001da0:	f002 f842 	bl	8003e28 <HAL_I2C_Master_Transmit>
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200002e0 	.word	0x200002e0
 8001db0:	20000002 	.word	0x20000002
 8001db4:	20000084 	.word	0x20000084

08001db8 <gyroInit>:

void gyroInit() {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2006      	movs	r0, #6
 8001dc0:	f7ff ffd6 	bl	8001d70 <writeByte>
	osDelay(10);
 8001dc4:	200a      	movs	r0, #10
 8001dc6:	f006 f833 	bl	8007e30 <osDelay>
	writeByte(0x03, 0x80);
 8001dca:	2180      	movs	r1, #128	; 0x80
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f7ff ffcf 	bl	8001d70 <writeByte>
	osDelay(10);
 8001dd2:	200a      	movs	r0, #10
 8001dd4:	f006 f82c 	bl	8007e30 <osDelay>
	writeByte(0x07, 0x07);
 8001dd8:	2107      	movs	r1, #7
 8001dda:	2007      	movs	r0, #7
 8001ddc:	f7ff ffc8 	bl	8001d70 <writeByte>
	osDelay(10);
 8001de0:	200a      	movs	r0, #10
 8001de2:	f006 f825 	bl	8007e30 <osDelay>
	writeByte(0x06, 0x01);
 8001de6:	2101      	movs	r1, #1
 8001de8:	2006      	movs	r0, #6
 8001dea:	f7ff ffc1 	bl	8001d70 <writeByte>
	osDelay(10);
 8001dee:	200a      	movs	r0, #10
 8001df0:	f006 f81e 	bl	8007e30 <osDelay>
	writeByte(0x7F, 0x20);
 8001df4:	2120      	movs	r1, #32
 8001df6:	207f      	movs	r0, #127	; 0x7f
 8001df8:	f7ff ffba 	bl	8001d70 <writeByte>
	osDelay(10);
 8001dfc:	200a      	movs	r0, #10
 8001dfe:	f006 f817 	bl	8007e30 <osDelay>
	writeByte(0x01, 0x2F);
 8001e02:	212f      	movs	r1, #47	; 0x2f
 8001e04:	2001      	movs	r0, #1
 8001e06:	f7ff ffb3 	bl	8001d70 <writeByte>
	osDelay(10);
 8001e0a:	200a      	movs	r0, #10
 8001e0c:	f006 f810 	bl	8007e30 <osDelay>
	writeByte(0x0, 0x00);
 8001e10:	2100      	movs	r1, #0
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff ffac 	bl	8001d70 <writeByte>
	osDelay(10);
 8001e18:	200a      	movs	r0, #10
 8001e1a:	f006 f809 	bl	8007e30 <osDelay>
	writeByte(0x7F, 0x00);
 8001e1e:	2100      	movs	r1, #0
 8001e20:	207f      	movs	r0, #127	; 0x7f
 8001e22:	f7ff ffa5 	bl	8001d70 <writeByte>
	osDelay(10);
 8001e26:	200a      	movs	r0, #10
 8001e28:	f006 f802 	bl	8007e30 <osDelay>
	writeByte(0x07, 0x00);
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2007      	movs	r0, #7
 8001e30:	f7ff ff9e 	bl	8001d70 <writeByte>
	osDelay(10);
 8001e34:	200a      	movs	r0, #10
 8001e36:	f005 fffb 	bl	8007e30 <osDelay>
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4c:	4803      	ldr	r0, [pc, #12]	; (8001e5c <StartDefaultTask+0x1c>)
 8001e4e:	f001 fe8c 	bl	8003b6a <HAL_GPIO_TogglePin>
		osDelay(2000);
 8001e52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e56:	f005 ffeb 	bl	8007e30 <osDelay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001e5a:	e7f5      	b.n	8001e48 <StartDefaultTask+0x8>
 8001e5c:	40021000 	.word	0x40021000

08001e60 <StartMotorTask>:
 * @brief Function implementing the motorTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotorTask */
	pwmVal_R = 0;
 8001e68:	4bab      	ldr	r3, [pc, #684]	; (8002118 <StartMotorTask+0x2b8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	801a      	strh	r2, [r3, #0]
	pwmVal_L = 0;
 8001e6e:	4bab      	ldr	r3, [pc, #684]	; (800211c <StartMotorTask+0x2bc>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	801a      	strh	r2, [r3, #0]
	int straightCorrection = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001e78:	2100      	movs	r1, #0
 8001e7a:	48a9      	ldr	r0, [pc, #676]	; (8002120 <StartMotorTask+0x2c0>)
 8001e7c:	f003 fb4e 	bl	800551c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001e80:	2104      	movs	r1, #4
 8001e82:	48a7      	ldr	r0, [pc, #668]	; (8002120 <StartMotorTask+0x2c0>)
 8001e84:	f003 fb4a 	bl	800551c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001e88:	210c      	movs	r1, #12
 8001e8a:	48a6      	ldr	r0, [pc, #664]	; (8002124 <StartMotorTask+0x2c4>)
 8001e8c:	f003 fb46 	bl	800551c <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = SERVOCENTER; //Centre
 8001e90:	4ba4      	ldr	r3, [pc, #656]	; (8002124 <StartMotorTask+0x2c4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2294      	movs	r2, #148	; 0x94
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2110      	movs	r1, #16
 8001e9c:	48a2      	ldr	r0, [pc, #648]	; (8002128 <StartMotorTask+0x2c8>)
 8001e9e:	f001 fe4b 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2120      	movs	r1, #32
 8001ea6:	48a0      	ldr	r0, [pc, #640]	; (8002128 <StartMotorTask+0x2c8>)
 8001ea8:	f001 fe46 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001eac:	2201      	movs	r2, #1
 8001eae:	2108      	movs	r1, #8
 8001eb0:	489d      	ldr	r0, [pc, #628]	; (8002128 <StartMotorTask+0x2c8>)
 8001eb2:	f001 fe41 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2104      	movs	r1, #4
 8001eba:	489b      	ldr	r0, [pc, #620]	; (8002128 <StartMotorTask+0x2c8>)
 8001ebc:	f001 fe3c 	bl	8003b38 <HAL_GPIO_WritePin>
	osDelay(1000);
 8001ec0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ec4:	f005 ffb4 	bl	8007e30 <osDelay>

	/* Infinite loop */
	for (;;) {
		htim1.Instance->CCR4 = pwmVal_servo;
 8001ec8:	4b98      	ldr	r3, [pc, #608]	; (800212c <StartMotorTask+0x2cc>)
 8001eca:	881a      	ldrh	r2, [r3, #0]
 8001ecc:	4b95      	ldr	r3, [pc, #596]	; (8002124 <StartMotorTask+0x2c4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
		double error_angle = target_angle - total_angle;
 8001ed2:	4b97      	ldr	r3, [pc, #604]	; (8002130 <StartMotorTask+0x2d0>)
 8001ed4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed8:	4b96      	ldr	r3, [pc, #600]	; (8002134 <StartMotorTask+0x2d4>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe f9cb 	bl	8000278 <__aeabi_dsub>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if (pwmVal_servo < 127) { //106 //TURN LEFT
 8001eea:	4b90      	ldr	r3, [pc, #576]	; (800212c <StartMotorTask+0x2cc>)
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	2b7e      	cmp	r3, #126	; 0x7e
 8001ef0:	d84c      	bhi.n	8001f8c <StartMotorTask+0x12c>
			pwmVal_R = PID_Angle(error_angle, 1) * 1.072;  //right is master
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	ed97 0b02 	vldr	d0, [r7, #8]
 8001ef8:	f7ff fe52 	bl	8001ba0 <PID_Angle>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb08 	bl	8000514 <__aeabi_i2d>
 8001f04:	a380      	add	r3, pc, #512	; (adr r3, 8002108 <StartMotorTask+0x2a8>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe fb6d 	bl	80005e8 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7fe fe29 	bl	8000b6c <__aeabi_d2uiz>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	4b7e      	ldr	r3, [pc, #504]	; (8002118 <StartMotorTask+0x2b8>)
 8001f20:	801a      	strh	r2, [r3, #0]
			pwmVal_L = pwmVal_R * (0.59); //left is slave
 8001f22:	4b7d      	ldr	r3, [pc, #500]	; (8002118 <StartMotorTask+0x2b8>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe faf4 	bl	8000514 <__aeabi_i2d>
 8001f2c:	a378      	add	r3, pc, #480	; (adr r3, 8002110 <StartMotorTask+0x2b0>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	f7fe fb59 	bl	80005e8 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7fe fe15 	bl	8000b6c <__aeabi_d2uiz>
 8001f42:	4603      	mov	r3, r0
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	4b75      	ldr	r3, [pc, #468]	; (800211c <StartMotorTask+0x2bc>)
 8001f48:	801a      	strh	r2, [r3, #0]

			if (error_angle > 0) {
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f56:	f7fe fdd7 	bl	8000b08 <__aeabi_dcmpgt>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <StartMotorTask+0x116>
				//go forward
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- forward
 8001f60:	2201      	movs	r2, #1
 8001f62:	2108      	movs	r1, #8
 8001f64:	4870      	ldr	r0, [pc, #448]	; (8002128 <StartMotorTask+0x2c8>)
 8001f66:	f001 fde7 	bl	8003b38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	486e      	ldr	r0, [pc, #440]	; (8002128 <StartMotorTask+0x2c8>)
 8001f70:	f001 fde2 	bl	8003b38 <HAL_GPIO_WritePin>
 8001f74:	e14f      	b.n	8002216 <StartMotorTask+0x3b6>
			} else {
				//go backward
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001f76:	2200      	movs	r2, #0
 8001f78:	2108      	movs	r1, #8
 8001f7a:	486b      	ldr	r0, [pc, #428]	; (8002128 <StartMotorTask+0x2c8>)
 8001f7c:	f001 fddc 	bl	8003b38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001f80:	2201      	movs	r2, #1
 8001f82:	2104      	movs	r1, #4
 8001f84:	4868      	ldr	r0, [pc, #416]	; (8002128 <StartMotorTask+0x2c8>)
 8001f86:	f001 fdd7 	bl	8003b38 <HAL_GPIO_WritePin>
 8001f8a:	e144      	b.n	8002216 <StartMotorTask+0x3b6>
			}
		}

		else if (pwmVal_servo > 189) { //230 //TURN RIGHT
 8001f8c:	4b67      	ldr	r3, [pc, #412]	; (800212c <StartMotorTask+0x2cc>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	2bbd      	cmp	r3, #189	; 0xbd
 8001f92:	d93d      	bls.n	8002010 <StartMotorTask+0x1b0>
			pwmVal_L = PID_Angle(error_angle, 0);
 8001f94:	2000      	movs	r0, #0
 8001f96:	ed97 0b02 	vldr	d0, [r7, #8]
 8001f9a:	f7ff fe01 	bl	8001ba0 <PID_Angle>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	4b5e      	ldr	r3, [pc, #376]	; (800211c <StartMotorTask+0x2bc>)
 8001fa4:	801a      	strh	r2, [r3, #0]
			pwmVal_R = pwmVal_L * (0.59); //right is slave
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <StartMotorTask+0x2bc>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fab2 	bl	8000514 <__aeabi_i2d>
 8001fb0:	a357      	add	r3, pc, #348	; (adr r3, 8002110 <StartMotorTask+0x2b0>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	f7fe fb17 	bl	80005e8 <__aeabi_dmul>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7fe fdd3 	bl	8000b6c <__aeabi_d2uiz>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	4b53      	ldr	r3, [pc, #332]	; (8002118 <StartMotorTask+0x2b8>)
 8001fcc:	801a      	strh	r2, [r3, #0]

			if (error_angle < 0) {
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fda:	f7fe fd77 	bl	8000acc <__aeabi_dcmplt>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <StartMotorTask+0x19a>
				//go forward
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	2110      	movs	r1, #16
 8001fe8:	484f      	ldr	r0, [pc, #316]	; (8002128 <StartMotorTask+0x2c8>)
 8001fea:	f001 fda5 	bl	8003b38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2120      	movs	r1, #32
 8001ff2:	484d      	ldr	r0, [pc, #308]	; (8002128 <StartMotorTask+0x2c8>)
 8001ff4:	f001 fda0 	bl	8003b38 <HAL_GPIO_WritePin>
 8001ff8:	e10d      	b.n	8002216 <StartMotorTask+0x3b6>
			} else {
				//go backward
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2110      	movs	r1, #16
 8001ffe:	484a      	ldr	r0, [pc, #296]	; (8002128 <StartMotorTask+0x2c8>)
 8002000:	f001 fd9a 	bl	8003b38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002004:	2201      	movs	r2, #1
 8002006:	2120      	movs	r1, #32
 8002008:	4847      	ldr	r0, [pc, #284]	; (8002128 <StartMotorTask+0x2c8>)
 800200a:	f001 fd95 	bl	8003b38 <HAL_GPIO_WritePin>
 800200e:	e102      	b.n	8002216 <StartMotorTask+0x3b6>
			}
		}

		else {

			pwmVal_R = PID_Control(leftTarget - leftEncoderVal, 0) * 1.072;
 8002010:	4b49      	ldr	r3, [pc, #292]	; (8002138 <StartMotorTask+0x2d8>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b49      	ldr	r3, [pc, #292]	; (800213c <StartMotorTask+0x2dc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fd43 	bl	8001aa8 <PID_Control>
 8002022:	4603      	mov	r3, r0
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fa75 	bl	8000514 <__aeabi_i2d>
 800202a:	a337      	add	r3, pc, #220	; (adr r3, 8002108 <StartMotorTask+0x2a8>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe fada 	bl	80005e8 <__aeabi_dmul>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7fe fd96 	bl	8000b6c <__aeabi_d2uiz>
 8002040:	4603      	mov	r3, r0
 8002042:	b29a      	uxth	r2, r3
 8002044:	4b34      	ldr	r3, [pc, #208]	; (8002118 <StartMotorTask+0x2b8>)
 8002046:	801a      	strh	r2, [r3, #0]
			if (abs(leftTarget - leftEncoderVal)
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <StartMotorTask+0x2d8>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b3b      	ldr	r3, [pc, #236]	; (800213c <StartMotorTask+0x2dc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002056:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
					> abs(rightTarget - rightEncoderVal)) {
 800205a:	4b39      	ldr	r3, [pc, #228]	; (8002140 <StartMotorTask+0x2e0>)
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	4b39      	ldr	r3, [pc, #228]	; (8002144 <StartMotorTask+0x2e4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	1acb      	subs	r3, r1, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	bfb8      	it	lt
 8002068:	425b      	neglt	r3, r3
			if (abs(leftTarget - leftEncoderVal)
 800206a:	429a      	cmp	r2, r3
 800206c:	dd03      	ble.n	8002076 <StartMotorTask+0x216>
				straightCorrection++;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3301      	adds	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e002      	b.n	800207c <StartMotorTask+0x21c>
			} else {
				straightCorrection--;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3b01      	subs	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
			}
			if (abs(leftTarget - leftEncoderVal) < 100) {
 800207c:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <StartMotorTask+0x2d8>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b2e      	ldr	r3, [pc, #184]	; (800213c <StartMotorTask+0x2dc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800208a:	db08      	blt.n	800209e <StartMotorTask+0x23e>
 800208c:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <StartMotorTask+0x2d8>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <StartMotorTask+0x2dc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b63      	cmp	r3, #99	; 0x63
 8002098:	dc01      	bgt.n	800209e <StartMotorTask+0x23e>
				straightCorrection = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
			}
			pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)
 800209e:	4b28      	ldr	r3, [pc, #160]	; (8002140 <StartMotorTask+0x2e0>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b28      	ldr	r3, [pc, #160]	; (8002144 <StartMotorTask+0x2e4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2101      	movs	r1, #1
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fcfc 	bl	8001aa8 <PID_Control>
 80020b0:	4603      	mov	r3, r0
					+ straightCorrection;
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	b29a      	uxth	r2, r3
			pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <StartMotorTask+0x2bc>)
 80020be:	801a      	strh	r2, [r3, #0]

			if ((leftTarget - leftEncoderVal) < 0) {
 80020c0:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <StartMotorTask+0x2d8>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <StartMotorTask+0x2dc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	da64      	bge.n	8002198 <StartMotorTask+0x338>
				if (error_angle > 5) { // if turn left, 106. right 230. left +. right -.
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <StartMotorTask+0x2e8>)
 80020d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020d8:	f7fe fd16 	bl	8000b08 <__aeabi_dcmpgt>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <StartMotorTask+0x28a>
					pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <StartMotorTask+0x2cc>)
 80020e4:	22a7      	movs	r2, #167	; 0xa7
 80020e6:	801a      	strh	r2, [r3, #0]
 80020e8:	e095      	b.n	8002216 <StartMotorTask+0x3b6>
				} else if (error_angle < -5) {
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <StartMotorTask+0x2ec>)
 80020f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020f4:	f7fe fcea 	bl	8000acc <__aeabi_dcmplt>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d028      	beq.n	8002150 <StartMotorTask+0x2f0>
					pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <StartMotorTask+0x2cc>)
 8002100:	2281      	movs	r2, #129	; 0x81
 8002102:	801a      	strh	r2, [r3, #0]
 8002104:	e087      	b.n	8002216 <StartMotorTask+0x3b6>
 8002106:	bf00      	nop
 8002108:	78d4fdf4 	.word	0x78d4fdf4
 800210c:	3ff126e9 	.word	0x3ff126e9
 8002110:	ae147ae1 	.word	0xae147ae1
 8002114:	3fe2e147 	.word	0x3fe2e147
 8002118:	200002b4 	.word	0x200002b4
 800211c:	200002b6 	.word	0x200002b6
 8002120:	200001f8 	.word	0x200001f8
 8002124:	200000d8 	.word	0x200000d8
 8002128:	40020000 	.word	0x40020000
 800212c:	20000000 	.word	0x20000000
 8002130:	200002d0 	.word	0x200002d0
 8002134:	200002d8 	.word	0x200002d8
 8002138:	200002cc 	.word	0x200002cc
 800213c:	200002c4 	.word	0x200002c4
 8002140:	200002c8 	.word	0x200002c8
 8002144:	200002c0 	.word	0x200002c0
 8002148:	40140000 	.word	0x40140000
 800214c:	c0140000 	.word	0xc0140000
				} else {
					pwmVal_servo = ((19 * error_angle) / 5 + SERVOCENTER);
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	4b45      	ldr	r3, [pc, #276]	; (800226c <StartMotorTask+0x40c>)
 8002156:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800215a:	f7fe fa45 	bl	80005e8 <__aeabi_dmul>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	4b41      	ldr	r3, [pc, #260]	; (8002270 <StartMotorTask+0x410>)
 800216c:	f7fe fb66 	bl	800083c <__aeabi_ddiv>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <StartMotorTask+0x414>)
 800217e:	f7fe f87d 	bl	800027c <__adddf3>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	f7fe fcef 	bl	8000b6c <__aeabi_d2uiz>
 800218e:	4603      	mov	r3, r0
 8002190:	b29a      	uxth	r2, r3
 8002192:	4b39      	ldr	r3, [pc, #228]	; (8002278 <StartMotorTask+0x418>)
 8002194:	801a      	strh	r2, [r3, #0]
 8002196:	e03e      	b.n	8002216 <StartMotorTask+0x3b6>
				}

			} else {
				if (error_angle > 5) { // if turn left, 106. right 230. left +. right -.
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	4b34      	ldr	r3, [pc, #208]	; (8002270 <StartMotorTask+0x410>)
 800219e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021a2:	f7fe fcb1 	bl	8000b08 <__aeabi_dcmpgt>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <StartMotorTask+0x354>
					pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 80021ac:	4b32      	ldr	r3, [pc, #200]	; (8002278 <StartMotorTask+0x418>)
 80021ae:	2281      	movs	r2, #129	; 0x81
 80021b0:	801a      	strh	r2, [r3, #0]
 80021b2:	e030      	b.n	8002216 <StartMotorTask+0x3b6>
				} else if (error_angle < -5) {
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	4b30      	ldr	r3, [pc, #192]	; (800227c <StartMotorTask+0x41c>)
 80021ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021be:	f7fe fc85 	bl	8000acc <__aeabi_dcmplt>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <StartMotorTask+0x370>
					pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <StartMotorTask+0x418>)
 80021ca:	22a7      	movs	r2, #167	; 0xa7
 80021cc:	801a      	strh	r2, [r3, #0]
 80021ce:	e022      	b.n	8002216 <StartMotorTask+0x3b6>
				} else {
					pwmVal_servo = ((-19 * error_angle) / 5 + SERVOCENTER);
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	4b2a      	ldr	r3, [pc, #168]	; (8002280 <StartMotorTask+0x420>)
 80021d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021da:	f7fe fa05 	bl	80005e8 <__aeabi_dmul>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <StartMotorTask+0x410>)
 80021ec:	f7fe fb26 	bl	800083c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <StartMotorTask+0x414>)
 80021fe:	f7fe f83d 	bl	800027c <__adddf3>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	f7fe fcaf 	bl	8000b6c <__aeabi_d2uiz>
 800220e:	4603      	mov	r3, r0
 8002210:	b29a      	uxth	r2, r3
 8002212:	4b19      	ldr	r3, [pc, #100]	; (8002278 <StartMotorTask+0x418>)
 8002214:	801a      	strh	r2, [r3, #0]
			}

			//line correction equation is pwmVal = (19*error)/5 + SERVOCENTER
		}

		if (e_brake) {
 8002216:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <StartMotorTask+0x424>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00e      	beq.n	800223c <StartMotorTask+0x3dc>
			pwmVal_L = pwmVal_R = 0;
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <StartMotorTask+0x428>)
 8002220:	2200      	movs	r2, #0
 8002222:	801a      	strh	r2, [r3, #0]
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <StartMotorTask+0x428>)
 8002226:	881a      	ldrh	r2, [r3, #0]
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <StartMotorTask+0x42c>)
 800222a:	801a      	strh	r2, [r3, #0]
			leftTarget = leftEncoderVal;
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <StartMotorTask+0x430>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a18      	ldr	r2, [pc, #96]	; (8002294 <StartMotorTask+0x434>)
 8002232:	6013      	str	r3, [r2, #0]
			rightTarget = rightEncoderVal;
 8002234:	4b18      	ldr	r3, [pc, #96]	; (8002298 <StartMotorTask+0x438>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a18      	ldr	r2, [pc, #96]	; (800229c <StartMotorTask+0x43c>)
 800223a:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L);
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <StartMotorTask+0x42c>)
 800223e:	881a      	ldrh	r2, [r3, #0]
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <StartMotorTask+0x440>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_R);
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <StartMotorTask+0x428>)
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <StartMotorTask+0x440>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(1);
 8002250:	2001      	movs	r0, #1
 8002252:	f005 fded 	bl	8007e30 <osDelay>

		if (times_acceptable > 1000) {
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <StartMotorTask+0x444>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800225e:	f77f ae33 	ble.w	8001ec8 <StartMotorTask+0x68>
			times_acceptable = 1001;
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <StartMotorTask+0x444>)
 8002264:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8002268:	601a      	str	r2, [r3, #0]
	for (;;) {
 800226a:	e62d      	b.n	8001ec8 <StartMotorTask+0x68>
 800226c:	40330000 	.word	0x40330000
 8002270:	40140000 	.word	0x40140000
 8002274:	40628000 	.word	0x40628000
 8002278:	20000000 	.word	0x20000000
 800227c:	c0140000 	.word	0xc0140000
 8002280:	c0330000 	.word	0xc0330000
 8002284:	200002bc 	.word	0x200002bc
 8002288:	200002b4 	.word	0x200002b4
 800228c:	200002b6 	.word	0x200002b6
 8002290:	200002c4 	.word	0x200002c4
 8002294:	200002cc 	.word	0x200002cc
 8002298:	200002c0 	.word	0x200002c0
 800229c:	200002c8 	.word	0x200002c8
 80022a0:	200001f8 	.word	0x200001f8
 80022a4:	200002b8 	.word	0x200002b8

080022a8 <StartOLEDTask>:
 * @brief Function implementing the OLEDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument) {
 80022a8:	b5b0      	push	{r4, r5, r7, lr}
 80022aa:	b096      	sub	sp, #88	; 0x58
 80022ac:	af04      	add	r7, sp, #16
 80022ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartOLEDTask */
	uint8_t usVal[20] = { 0 };
 80022b0:	2300      	movs	r3, #0
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
 80022b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
	uint8_t gyroVal[20] = { 0 };
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	f107 0320 	add.w	r3, r7, #32
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
	uint8_t command[20] = { 0 };
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	f107 030c 	add.w	r3, r7, #12
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
	for (;;) {
		sprintf(usVal, "Distance: %d \0", (int) uDistance);
 80022e6:	4b39      	ldr	r3, [pc, #228]	; (80023cc <StartOLEDTask+0x124>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022f0:	4937      	ldr	r1, [pc, #220]	; (80023d0 <StartOLEDTask+0x128>)
 80022f2:	4618      	mov	r0, r3
 80022f4:	f008 fa3a 	bl	800a76c <siprintf>
		OLED_ShowString(0, 10, usVal);
 80022f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022fc:	461a      	mov	r2, r3
 80022fe:	210a      	movs	r1, #10
 8002300:	2000      	movs	r0, #0
 8002302:	f000 ff85 	bl	8003210 <OLED_ShowString>

		int decimals = abs((int) ((total_angle - (int) (total_angle)) * 1000));
 8002306:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <StartOLEDTask+0x12c>)
 8002308:	e9d3 4500 	ldrd	r4, r5, [r3]
 800230c:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <StartOLEDTask+0x12c>)
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	f7fe fc01 	bl	8000b1c <__aeabi_d2iz>
 800231a:	4603      	mov	r3, r0
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f8f9 	bl	8000514 <__aeabi_i2d>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4620      	mov	r0, r4
 8002328:	4629      	mov	r1, r5
 800232a:	f7fd ffa5 	bl	8000278 <__aeabi_dsub>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4610      	mov	r0, r2
 8002334:	4619      	mov	r1, r3
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <StartOLEDTask+0x130>)
 800233c:	f7fe f954 	bl	80005e8 <__aeabi_dmul>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f7fe fbe8 	bl	8000b1c <__aeabi_d2iz>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	bfb8      	it	lt
 8002352:	425b      	neglt	r3, r3
 8002354:	647b      	str	r3, [r7, #68]	; 0x44
		sprintf(gyroVal, "Gyro: %d.%d \0", (int) total_angle, decimals);
 8002356:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <StartOLEDTask+0x12c>)
 8002358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f7fe fbdc 	bl	8000b1c <__aeabi_d2iz>
 8002364:	4602      	mov	r2, r0
 8002366:	f107 001c 	add.w	r0, r7, #28
 800236a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236c:	491b      	ldr	r1, [pc, #108]	; (80023dc <StartOLEDTask+0x134>)
 800236e:	f008 f9fd 	bl	800a76c <siprintf>
		OLED_ShowString(0, 20, gyroVal);
 8002372:	f107 031c 	add.w	r3, r7, #28
 8002376:	461a      	mov	r2, r3
 8002378:	2114      	movs	r1, #20
 800237a:	2000      	movs	r0, #0
 800237c:	f000 ff48 	bl	8003210 <OLED_ShowString>

		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002380:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <StartOLEDTask+0x138>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461c      	mov	r4, r3
 8002386:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <StartOLEDTask+0x138>)
 8002388:	785b      	ldrb	r3, [r3, #1]
 800238a:	461d      	mov	r5, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <StartOLEDTask+0x138>)
 800238e:	789b      	ldrb	r3, [r3, #2]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002390:	461a      	mov	r2, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002392:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <StartOLEDTask+0x138>)
 8002394:	78db      	ldrb	r3, [r3, #3]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002396:	4619      	mov	r1, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <StartOLEDTask+0x138>)
 800239a:	791b      	ldrb	r3, [r3, #4]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 800239c:	f107 0008 	add.w	r0, r7, #8
 80023a0:	9302      	str	r3, [sp, #8]
 80023a2:	9101      	str	r1, [sp, #4]
 80023a4:	9200      	str	r2, [sp, #0]
 80023a6:	462b      	mov	r3, r5
 80023a8:	4622      	mov	r2, r4
 80023aa:	490e      	ldr	r1, [pc, #56]	; (80023e4 <StartOLEDTask+0x13c>)
 80023ac:	f008 f9de 	bl	800a76c <siprintf>
		OLED_ShowString(0, 30, command);
 80023b0:	f107 0308 	add.w	r3, r7, #8
 80023b4:	461a      	mov	r2, r3
 80023b6:	211e      	movs	r1, #30
 80023b8:	2000      	movs	r0, #0
 80023ba:	f000 ff29 	bl	8003210 <OLED_ShowString>

		OLED_Refresh_Gram();
 80023be:	f000 fdb3 	bl	8002f28 <OLED_Refresh_Gram>
		osDelay(100);
 80023c2:	2064      	movs	r0, #100	; 0x64
 80023c4:	f005 fd34 	bl	8007e30 <osDelay>
	for (;;) {
 80023c8:	e78d      	b.n	80022e6 <StartOLEDTask+0x3e>
 80023ca:	bf00      	nop
 80023cc:	20000302 	.word	0x20000302
 80023d0:	0800b1e8 	.word	0x0800b1e8
 80023d4:	200002d8 	.word	0x200002d8
 80023d8:	408f4000 	.word	0x408f4000
 80023dc:	0800b1f8 	.word	0x0800b1f8
 80023e0:	200002a4 	.word	0x200002a4
 80023e4:	0800b208 	.word	0x0800b208

080023e8 <StartGyroTask>:
 * @brief Function implementing the gyroTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument) {
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b08a      	sub	sp, #40	; 0x28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGyroTask */
	gyroInit();
 80023f0:	f7ff fce2 	bl	8001db8 <gyroInit>
	uint8_t val[2] = { 0, 0 };
 80023f4:	2300      	movs	r3, #0
 80023f6:	813b      	strh	r3, [r7, #8]

	int16_t angular_speed = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	817b      	strh	r3, [r7, #10]

	uint32_t tick = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
	double offset = 0;
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double trash = 0;
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int i = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
	while (i < 100) {
 800241c:	e048      	b.n	80024b0 <StartGyroTask+0xc8>
		osDelay(50);
 800241e:	2032      	movs	r0, #50	; 0x32
 8002420:	f005 fd06 	bl	8007e30 <osDelay>
		readByte(0x37, val);
 8002424:	f107 0308 	add.w	r3, r7, #8
 8002428:	4619      	mov	r1, r3
 800242a:	2037      	movs	r0, #55	; 0x37
 800242c:	f7ff fc74 	bl	8001d18 <readByte>
		angular_speed = (val[0] << 8) | val[1];
 8002430:	7a3b      	ldrb	r3, [r7, #8]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	b21a      	sxth	r2, r3
 8002436:	7a7b      	ldrb	r3, [r7, #9]
 8002438:	b21b      	sxth	r3, r3
 800243a:	4313      	orrs	r3, r2
 800243c:	817b      	strh	r3, [r7, #10]
		trash += (double) ((double) angular_speed)
 800243e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe f866 	bl	8000514 <__aeabi_i2d>
 8002448:	4604      	mov	r4, r0
 800244a:	460d      	mov	r5, r1
				* ((HAL_GetTick() - tick) / 16400.0);
 800244c:	f001 f804 	bl	8003458 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe f84c 	bl	80004f4 <__aeabi_ui2d>
 800245c:	a345      	add	r3, pc, #276	; (adr r3, 8002574 <StartGyroTask+0x18c>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	f7fe f9eb 	bl	800083c <__aeabi_ddiv>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4620      	mov	r0, r4
 800246c:	4629      	mov	r1, r5
 800246e:	f7fe f8bb 	bl	80005e8 <__aeabi_dmul>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
		trash += (double) ((double) angular_speed)
 8002476:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800247a:	f7fd feff 	bl	800027c <__adddf3>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	e9c7 2304 	strd	r2, r3, [r7, #16]
		offset += angular_speed;
 8002486:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe f842 	bl	8000514 <__aeabi_i2d>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002498:	f7fd fef0 	bl	800027c <__adddf3>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		tick = HAL_GetTick();
 80024a4:	f000 ffd8 	bl	8003458 <HAL_GetTick>
 80024a8:	6278      	str	r0, [r7, #36]	; 0x24
		i++;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3301      	adds	r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
	while (i < 100) {
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b63      	cmp	r3, #99	; 0x63
 80024b4:	ddb3      	ble.n	800241e <StartGyroTask+0x36>
	}
	offset = offset / i;
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f7fe f82c 	bl	8000514 <__aeabi_i2d>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024c4:	f7fe f9ba 	bl	800083c <__aeabi_ddiv>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	e9c7 2306 	strd	r2, r3, [r7, #24]

	tick = HAL_GetTick();
 80024d0:	f000 ffc2 	bl	8003458 <HAL_GetTick>
 80024d4:	6278      	str	r0, [r7, #36]	; 0x24
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 80024d6:	2064      	movs	r0, #100	; 0x64
 80024d8:	f005 fcaa 	bl	8007e30 <osDelay>
		readByte(0x37, val);
 80024dc:	f107 0308 	add.w	r3, r7, #8
 80024e0:	4619      	mov	r1, r3
 80024e2:	2037      	movs	r0, #55	; 0x37
 80024e4:	f7ff fc18 	bl	8001d18 <readByte>
		angular_speed = (val[0] << 8) | val[1];
 80024e8:	7a3b      	ldrb	r3, [r7, #8]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	7a7b      	ldrb	r3, [r7, #9]
 80024f0:	b21b      	sxth	r3, r3
 80024f2:	4313      	orrs	r3, r2
 80024f4:	817b      	strh	r3, [r7, #10]
		total_angle += (double) ((double) angular_speed - offset)
 80024f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe f80a 	bl	8000514 <__aeabi_i2d>
 8002500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002504:	f7fd feb8 	bl	8000278 <__aeabi_dsub>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4614      	mov	r4, r2
 800250e:	461d      	mov	r5, r3
				* ((HAL_GetTick() - tick) / 16400.0);
 8002510:	f000 ffa2 	bl	8003458 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	4618      	mov	r0, r3
 800251c:	f7fd ffea 	bl	80004f4 <__aeabi_ui2d>
 8002520:	a314      	add	r3, pc, #80	; (adr r3, 8002574 <StartGyroTask+0x18c>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fe f989 	bl	800083c <__aeabi_ddiv>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4620      	mov	r0, r4
 8002530:	4629      	mov	r1, r5
 8002532:	f7fe f859 	bl	80005e8 <__aeabi_dmul>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
		total_angle += (double) ((double) angular_speed - offset)
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <StartGyroTask+0x188>)
 8002540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002544:	f7fd fe9a 	bl	800027c <__adddf3>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4908      	ldr	r1, [pc, #32]	; (8002570 <StartGyroTask+0x188>)
 800254e:	e9c1 2300 	strd	r2, r3, [r1]
		i -= angular_speed;
 8002552:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	60fb      	str	r3, [r7, #12]
		tick = HAL_GetTick();
 800255c:	f000 ff7c 	bl	8003458 <HAL_GetTick>
 8002560:	6278      	str	r0, [r7, #36]	; 0x24
		i++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3301      	adds	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
		osDelay(100);
 8002568:	e7b5      	b.n	80024d6 <StartGyroTask+0xee>
 800256a:	bf00      	nop
 800256c:	f3af 8000 	nop.w
 8002570:	200002d8 	.word	0x200002d8
 8002574:	00000000 	.word	0x00000000
 8002578:	40d00400 	.word	0x40d00400

0800257c <StartUltrasonicTask>:
 * @brief Function implementing the ultrasonicTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUltrasonicTask */
void StartUltrasonicTask(void *argument) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
//			stopped = 1;
//			moveCarStop();
//			vTaskSuspend(ultrasonicTaskHandle);
//		}

		osDelay(100);
 8002584:	2064      	movs	r0, #100	; 0x64
 8002586:	f005 fc53 	bl	8007e30 <osDelay>
 800258a:	e7fb      	b.n	8002584 <StartUltrasonicTask+0x8>

0800258c <StartCommunicateTask>:
 * @brief Function implementing the communicateTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommunicateTask */
void StartCommunicateTask(void *argument) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCommunicateTask */
	char ack = 'A';
 8002594:	2341      	movs	r3, #65	; 0x41
 8002596:	73fb      	strb	r3, [r7, #15]

	aRxBuffer[0] = 'E';
 8002598:	4b7e      	ldr	r3, [pc, #504]	; (8002794 <StartCommunicateTask+0x208>)
 800259a:	2245      	movs	r2, #69	; 0x45
 800259c:	701a      	strb	r2, [r3, #0]
	aRxBuffer[1] = 'M';
 800259e:	4b7d      	ldr	r3, [pc, #500]	; (8002794 <StartCommunicateTask+0x208>)
 80025a0:	224d      	movs	r2, #77	; 0x4d
 80025a2:	705a      	strb	r2, [r3, #1]
	aRxBuffer[2] = 'P';
 80025a4:	4b7b      	ldr	r3, [pc, #492]	; (8002794 <StartCommunicateTask+0x208>)
 80025a6:	2250      	movs	r2, #80	; 0x50
 80025a8:	709a      	strb	r2, [r3, #2]
	aRxBuffer[3] = 'T';
 80025aa:	4b7a      	ldr	r3, [pc, #488]	; (8002794 <StartCommunicateTask+0x208>)
 80025ac:	2254      	movs	r2, #84	; 0x54
 80025ae:	70da      	strb	r2, [r3, #3]
	aRxBuffer[4] = 'Y';
 80025b0:	4b78      	ldr	r3, [pc, #480]	; (8002794 <StartCommunicateTask+0x208>)
 80025b2:	2259      	movs	r2, #89	; 0x59
 80025b4:	711a      	strb	r2, [r3, #4]

	/* Infinite loop */
	for (;;) {
		magnitude = 0;
 80025b6:	4b78      	ldr	r3, [pc, #480]	; (8002798 <StartCommunicateTask+0x20c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
		if ((aRxBuffer[0] == 'G' && aRxBuffer[1] == 'Y' && aRxBuffer[2] == 'R'
 80025bc:	4b75      	ldr	r3, [pc, #468]	; (8002794 <StartCommunicateTask+0x208>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b47      	cmp	r3, #71	; 0x47
 80025c2:	d10f      	bne.n	80025e4 <StartCommunicateTask+0x58>
 80025c4:	4b73      	ldr	r3, [pc, #460]	; (8002794 <StartCommunicateTask+0x208>)
 80025c6:	785b      	ldrb	r3, [r3, #1]
 80025c8:	2b59      	cmp	r3, #89	; 0x59
 80025ca:	d10b      	bne.n	80025e4 <StartCommunicateTask+0x58>
 80025cc:	4b71      	ldr	r3, [pc, #452]	; (8002794 <StartCommunicateTask+0x208>)
 80025ce:	789b      	ldrb	r3, [r3, #2]
 80025d0:	2b52      	cmp	r3, #82	; 0x52
 80025d2:	d107      	bne.n	80025e4 <StartCommunicateTask+0x58>
				&& aRxBuffer[3] == 'O' && aRxBuffer[4] == 'R')
 80025d4:	4b6f      	ldr	r3, [pc, #444]	; (8002794 <StartCommunicateTask+0x208>)
 80025d6:	78db      	ldrb	r3, [r3, #3]
 80025d8:	2b4f      	cmp	r3, #79	; 0x4f
 80025da:	d103      	bne.n	80025e4 <StartCommunicateTask+0x58>
 80025dc:	4b6d      	ldr	r3, [pc, #436]	; (8002794 <StartCommunicateTask+0x208>)
 80025de:	791b      	ldrb	r3, [r3, #4]
 80025e0:	2b52      	cmp	r3, #82	; 0x52
 80025e2:	d015      	beq.n	8002610 <StartCommunicateTask+0x84>
				|| (aRxBuffer[0] == 'S' || aRxBuffer[0] == 'R'
 80025e4:	4b6b      	ldr	r3, [pc, #428]	; (8002794 <StartCommunicateTask+0x208>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b53      	cmp	r3, #83	; 0x53
 80025ea:	d008      	beq.n	80025fe <StartCommunicateTask+0x72>
 80025ec:	4b69      	ldr	r3, [pc, #420]	; (8002794 <StartCommunicateTask+0x208>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b52      	cmp	r3, #82	; 0x52
 80025f2:	d004      	beq.n	80025fe <StartCommunicateTask+0x72>
						|| aRxBuffer[0] == 'L')
 80025f4:	4b67      	ldr	r3, [pc, #412]	; (8002794 <StartCommunicateTask+0x208>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b4c      	cmp	r3, #76	; 0x4c
 80025fa:	f040 80b4 	bne.w	8002766 <StartCommunicateTask+0x1da>
						&& (aRxBuffer[1] == 'F' || aRxBuffer[1] == 'B')
 80025fe:	4b65      	ldr	r3, [pc, #404]	; (8002794 <StartCommunicateTask+0x208>)
 8002600:	785b      	ldrb	r3, [r3, #1]
						&& (0 <= aRxBuffer[2] - '0' <= 9)
						&& (0 <= aRxBuffer[3] - '0' <= 9)
						&& (0 <= aRxBuffer[4] - '0' <= 9)) {
 8002602:	2b46      	cmp	r3, #70	; 0x46
 8002604:	d004      	beq.n	8002610 <StartCommunicateTask+0x84>
						&& (aRxBuffer[1] == 'F' || aRxBuffer[1] == 'B')
 8002606:	4b63      	ldr	r3, [pc, #396]	; (8002794 <StartCommunicateTask+0x208>)
 8002608:	785b      	ldrb	r3, [r3, #1]
 800260a:	2b42      	cmp	r3, #66	; 0x42
 800260c:	f040 80ab 	bne.w	8002766 <StartCommunicateTask+0x1da>

			magnitude = ((int) (aRxBuffer[2]) - 48) * 100
 8002610:	4b60      	ldr	r3, [pc, #384]	; (8002794 <StartCommunicateTask+0x208>)
 8002612:	789b      	ldrb	r3, [r3, #2]
 8002614:	3b30      	subs	r3, #48	; 0x30
 8002616:	2264      	movs	r2, #100	; 0x64
 8002618:	fb02 f103 	mul.w	r1, r2, r3
					+ ((int) (aRxBuffer[3]) - 48) * 10
 800261c:	4b5d      	ldr	r3, [pc, #372]	; (8002794 <StartCommunicateTask+0x208>)
 800261e:	78db      	ldrb	r3, [r3, #3]
 8002620:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	18ca      	adds	r2, r1, r3
					+ ((int) (aRxBuffer[4]) - 48);
 800262e:	4b59      	ldr	r3, [pc, #356]	; (8002794 <StartCommunicateTask+0x208>)
 8002630:	791b      	ldrb	r3, [r3, #4]
 8002632:	3b30      	subs	r3, #48	; 0x30
 8002634:	4413      	add	r3, r2
			magnitude = ((int) (aRxBuffer[2]) - 48) * 100
 8002636:	4a58      	ldr	r2, [pc, #352]	; (8002798 <StartCommunicateTask+0x20c>)
 8002638:	6013      	str	r3, [r2, #0]

			if (aRxBuffer[1] == 'B') {
 800263a:	4b56      	ldr	r3, [pc, #344]	; (8002794 <StartCommunicateTask+0x208>)
 800263c:	785b      	ldrb	r3, [r3, #1]
 800263e:	2b42      	cmp	r3, #66	; 0x42
 8002640:	d104      	bne.n	800264c <StartCommunicateTask+0xc0>
				magnitude *= -1;
 8002642:	4b55      	ldr	r3, [pc, #340]	; (8002798 <StartCommunicateTask+0x20c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	425b      	negs	r3, r3
 8002648:	4a53      	ldr	r2, [pc, #332]	; (8002798 <StartCommunicateTask+0x20c>)
 800264a:	6013      	str	r3, [r2, #0]
			}

			osDelay(300);
 800264c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002650:	f005 fbee 	bl	8007e30 <osDelay>
			switch (aRxBuffer[0]) {
 8002654:	4b4f      	ldr	r3, [pc, #316]	; (8002794 <StartCommunicateTask+0x208>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	3b47      	subs	r3, #71	; 0x47
 800265a:	2b0c      	cmp	r3, #12
 800265c:	f200 8083 	bhi.w	8002766 <StartCommunicateTask+0x1da>
 8002660:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <StartCommunicateTask+0xdc>)
 8002662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002666:	bf00      	nop
 8002668:	08002763 	.word	0x08002763
 800266c:	08002767 	.word	0x08002767
 8002670:	08002767 	.word	0x08002767
 8002674:	08002767 	.word	0x08002767
 8002678:	08002767 	.word	0x08002767
 800267c:	08002721 	.word	0x08002721
 8002680:	08002767 	.word	0x08002767
 8002684:	08002767 	.word	0x08002767
 8002688:	08002767 	.word	0x08002767
 800268c:	08002767 	.word	0x08002767
 8002690:	08002767 	.word	0x08002767
 8002694:	080026df 	.word	0x080026df
 8002698:	0800269d 	.word	0x0800269d
			case 'S':
				moveCarStraight(magnitude);
 800269c:	4b3e      	ldr	r3, [pc, #248]	; (8002798 <StartCommunicateTask+0x20c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd ff37 	bl	8000514 <__aeabi_i2d>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	ec43 2b10 	vmov	d0, r2, r3
 80026ae:	f7ff f92b 	bl	8001908 <moveCarStraight>
				flagDone = 1;
 80026b2:	4b3a      	ldr	r3, [pc, #232]	; (800279c <StartCommunicateTask+0x210>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 80026b8:	4b36      	ldr	r3, [pc, #216]	; (8002794 <StartCommunicateTask+0x208>)
 80026ba:	2244      	movs	r2, #68	; 0x44
 80026bc:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 80026be:	4b35      	ldr	r3, [pc, #212]	; (8002794 <StartCommunicateTask+0x208>)
 80026c0:	224f      	movs	r2, #79	; 0x4f
 80026c2:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 80026c4:	4b33      	ldr	r3, [pc, #204]	; (8002794 <StartCommunicateTask+0x208>)
 80026c6:	224e      	movs	r2, #78	; 0x4e
 80026c8:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 80026ca:	4b32      	ldr	r3, [pc, #200]	; (8002794 <StartCommunicateTask+0x208>)
 80026cc:	2245      	movs	r2, #69	; 0x45
 80026ce:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 80026d0:	4b30      	ldr	r3, [pc, #192]	; (8002794 <StartCommunicateTask+0x208>)
 80026d2:	2221      	movs	r2, #33	; 0x21
 80026d4:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 80026d6:	2064      	movs	r0, #100	; 0x64
 80026d8:	f005 fbaa 	bl	8007e30 <osDelay>
				break;
 80026dc:	e043      	b.n	8002766 <StartCommunicateTask+0x1da>
			case 'R':
				moveCarRight(magnitude);
 80026de:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <StartCommunicateTask+0x20c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fd ff16 	bl	8000514 <__aeabi_i2d>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	ec43 2b10 	vmov	d0, r2, r3
 80026f0:	f7ff f976 	bl	80019e0 <moveCarRight>
				flagDone = 1;
 80026f4:	4b29      	ldr	r3, [pc, #164]	; (800279c <StartCommunicateTask+0x210>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 80026fa:	4b26      	ldr	r3, [pc, #152]	; (8002794 <StartCommunicateTask+0x208>)
 80026fc:	2244      	movs	r2, #68	; 0x44
 80026fe:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <StartCommunicateTask+0x208>)
 8002702:	224f      	movs	r2, #79	; 0x4f
 8002704:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <StartCommunicateTask+0x208>)
 8002708:	224e      	movs	r2, #78	; 0x4e
 800270a:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <StartCommunicateTask+0x208>)
 800270e:	2245      	movs	r2, #69	; 0x45
 8002710:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <StartCommunicateTask+0x208>)
 8002714:	2221      	movs	r2, #33	; 0x21
 8002716:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 8002718:	2064      	movs	r0, #100	; 0x64
 800271a:	f005 fb89 	bl	8007e30 <osDelay>
				break;
 800271e:	e022      	b.n	8002766 <StartCommunicateTask+0x1da>
			case 'L':
				moveCarLeft(magnitude);
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <StartCommunicateTask+0x20c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd fef5 	bl	8000514 <__aeabi_i2d>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	ec43 2b10 	vmov	d0, r2, r3
 8002732:	f7ff f987 	bl	8001a44 <moveCarLeft>
				flagDone = 1;
 8002736:	4b19      	ldr	r3, [pc, #100]	; (800279c <StartCommunicateTask+0x210>)
 8002738:	2201      	movs	r2, #1
 800273a:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 800273c:	4b15      	ldr	r3, [pc, #84]	; (8002794 <StartCommunicateTask+0x208>)
 800273e:	2244      	movs	r2, #68	; 0x44
 8002740:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <StartCommunicateTask+0x208>)
 8002744:	224f      	movs	r2, #79	; 0x4f
 8002746:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <StartCommunicateTask+0x208>)
 800274a:	224e      	movs	r2, #78	; 0x4e
 800274c:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <StartCommunicateTask+0x208>)
 8002750:	2245      	movs	r2, #69	; 0x45
 8002752:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 8002754:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <StartCommunicateTask+0x208>)
 8002756:	2221      	movs	r2, #33	; 0x21
 8002758:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 800275a:	2064      	movs	r0, #100	; 0x64
 800275c:	f005 fb68 	bl	8007e30 <osDelay>
				break;
 8002760:	e001      	b.n	8002766 <StartCommunicateTask+0x1da>
			case 'G':
				NVIC_SystemReset();
 8002762:	f7fe fba1 	bl	8000ea8 <__NVIC_SystemReset>
				break;
			}
		}

		if (flagDone == 1) {
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <StartCommunicateTask+0x210>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d10e      	bne.n	800278c <StartCommunicateTask+0x200>
			osDelay(300);
 800276e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002772:	f005 fb5d 	bl	8007e30 <osDelay>
			HAL_UART_Transmit(&huart3, (uint8_t*) &ack, 1, 0xFFFF);
 8002776:	f107 010f 	add.w	r1, r7, #15
 800277a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800277e:	2201      	movs	r2, #1
 8002780:	4807      	ldr	r0, [pc, #28]	; (80027a0 <StartCommunicateTask+0x214>)
 8002782:	f004 fa1a 	bl	8006bba <HAL_UART_Transmit>
			flagDone = 0;
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <StartCommunicateTask+0x210>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
		}
		osDelay(100);
 800278c:	2064      	movs	r0, #100	; 0x64
 800278e:	f005 fb4f 	bl	8007e30 <osDelay>
		magnitude = 0;
 8002792:	e710      	b.n	80025b6 <StartCommunicateTask+0x2a>
 8002794:	200002a4 	.word	0x200002a4
 8002798:	200002b0 	.word	0x200002b0
 800279c:	200002ac 	.word	0x200002ac
 80027a0:	20000240 	.word	0x20000240

080027a4 <StartEncoderRTask>:
 * @brief Function implementing the encoderRTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderRTask */
void StartEncoderRTask(void *argument) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartEncoderRTask */
	/* Infinite loop */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80027ac:	213c      	movs	r1, #60	; 0x3c
 80027ae:	481d      	ldr	r0, [pc, #116]	; (8002824 <StartEncoderRTask+0x80>)
 80027b0:	f003 f871 	bl	8005896 <HAL_TIM_Encoder_Start>
	int cnt1;
	int dirR = 1;
 80027b4:	2301      	movs	r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 80027b8:	f000 fe4e 	bl	8003458 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 80027be:	f000 fe4b 	bl	8003458 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b0a      	cmp	r3, #10
 80027ca:	d9f8      	bls.n	80027be <StartEncoderRTask+0x1a>
			cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <StartEncoderRTask+0x80>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	60bb      	str	r3, [r7, #8]
			if (cnt1 > 32000) {
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80027da:	dd06      	ble.n	80027ea <StartEncoderRTask+0x46>
				dirR = 1;
 80027dc:	2301      	movs	r3, #1
 80027de:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt1);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	e004      	b.n	80027f4 <StartEncoderRTask+0x50>
			} else {
				dirR = -1;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	617b      	str	r3, [r7, #20]
				diff = cnt1;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	613b      	str	r3, [r7, #16]
			}

			if (dirR == 1) {
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d106      	bne.n	8002808 <StartEncoderRTask+0x64>
				rightEncoderVal -= diff;
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <StartEncoderRTask+0x84>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <StartEncoderRTask+0x84>)
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e005      	b.n	8002814 <StartEncoderRTask+0x70>
			} else {
				rightEncoderVal += diff;
 8002808:	4b07      	ldr	r3, [pc, #28]	; (8002828 <StartEncoderRTask+0x84>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4413      	add	r3, r2
 8002810:	4a05      	ldr	r2, [pc, #20]	; (8002828 <StartEncoderRTask+0x84>)
 8002812:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <StartEncoderRTask+0x80>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2200      	movs	r2, #0
 800281a:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 800281c:	f000 fe1c 	bl	8003458 <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - tick > 10L) {
 8002822:	e7cc      	b.n	80027be <StartEncoderRTask+0x1a>
 8002824:	20000168 	.word	0x20000168
 8002828:	200002c0 	.word	0x200002c0

0800282c <StartEncoderLTask>:
 * @brief Function implementing the encoderLTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderLTask */
void StartEncoderLTask(void *argument) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartEncoderLTask */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002834:	213c      	movs	r1, #60	; 0x3c
 8002836:	481d      	ldr	r0, [pc, #116]	; (80028ac <StartEncoderLTask+0x80>)
 8002838:	f003 f82d 	bl	8005896 <HAL_TIM_Encoder_Start>
	int cnt2;
	int dirL = 1;
 800283c:	2301      	movs	r3, #1
 800283e:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8002840:	f000 fe0a 	bl	8003458 <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 8002846:	f000 fe07 	bl	8003458 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b0a      	cmp	r3, #10
 8002852:	d9f8      	bls.n	8002846 <StartEncoderLTask+0x1a>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8002854:	4b15      	ldr	r3, [pc, #84]	; (80028ac <StartEncoderLTask+0x80>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	60bb      	str	r3, [r7, #8]

			if (cnt2 > 32000) {
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002862:	dd06      	ble.n	8002872 <StartEncoderLTask+0x46>
				dirL = 1;
 8002864:	2301      	movs	r3, #1
 8002866:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt2);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	e004      	b.n	800287c <StartEncoderLTask+0x50>
			} else {
				dirL = -1;
 8002872:	f04f 33ff 	mov.w	r3, #4294967295
 8002876:	617b      	str	r3, [r7, #20]
				diff = cnt2;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	613b      	str	r3, [r7, #16]
			}
			if (dirL == 1) {
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d106      	bne.n	8002890 <StartEncoderLTask+0x64>
				leftEncoderVal += diff;
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <StartEncoderLTask+0x84>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4413      	add	r3, r2
 800288a:	4a09      	ldr	r2, [pc, #36]	; (80028b0 <StartEncoderLTask+0x84>)
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e005      	b.n	800289c <StartEncoderLTask+0x70>
			} else {
				leftEncoderVal -= diff;
 8002890:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <StartEncoderLTask+0x84>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	4a05      	ldr	r2, [pc, #20]	; (80028b0 <StartEncoderLTask+0x84>)
 800289a:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <StartEncoderLTask+0x80>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2200      	movs	r2, #0
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 80028a4:	f000 fdd8 	bl	8003458 <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - tick > 10L) {
 80028aa:	e7cc      	b.n	8002846 <StartEncoderLTask+0x1a>
 80028ac:	20000120 	.word	0x20000120
 80028b0:	200002c4 	.word	0x200002c4

080028b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028b8:	b672      	cpsid	i
}
 80028ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80028bc:	e7fe      	b.n	80028bc <Error_Handler+0x8>
	...

080028c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	4b16      	ldr	r3, [pc, #88]	; (8002924 <HAL_MspInit+0x64>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4a15      	ldr	r2, [pc, #84]	; (8002924 <HAL_MspInit+0x64>)
 80028d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d4:	6453      	str	r3, [r2, #68]	; 0x44
 80028d6:	4b13      	ldr	r3, [pc, #76]	; (8002924 <HAL_MspInit+0x64>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	607b      	str	r3, [r7, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <HAL_MspInit+0x64>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a0e      	ldr	r2, [pc, #56]	; (8002924 <HAL_MspInit+0x64>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <HAL_MspInit+0x64>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	210f      	movs	r1, #15
 8002902:	f06f 0001 	mvn.w	r0, #1
 8002906:	f000 feb2 	bl	800366e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2105      	movs	r1, #5
 800290e:	2005      	movs	r0, #5
 8002910:	f000 fead 	bl	800366e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002914:	2005      	movs	r0, #5
 8002916:	f000 fec6 	bl	80036a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800

08002928 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a19      	ldr	r2, [pc, #100]	; (80029ac <HAL_I2C_MspInit+0x84>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d12c      	bne.n	80029a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <HAL_I2C_MspInit+0x88>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a17      	ldr	r2, [pc, #92]	; (80029b0 <HAL_I2C_MspInit+0x88>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <HAL_I2C_MspInit+0x88>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002966:	f44f 7340 	mov.w	r3, #768	; 0x300
 800296a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800296c:	2312      	movs	r3, #18
 800296e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002974:	2303      	movs	r3, #3
 8002976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002978:	2304      	movs	r3, #4
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	4619      	mov	r1, r3
 8002982:	480c      	ldr	r0, [pc, #48]	; (80029b4 <HAL_I2C_MspInit+0x8c>)
 8002984:	f000 ff3c 	bl	8003800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_I2C_MspInit+0x88>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <HAL_I2C_MspInit+0x88>)
 8002992:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002996:	6413      	str	r3, [r2, #64]	; 0x40
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_I2C_MspInit+0x88>)
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029a4:	bf00      	nop
 80029a6:	3728      	adds	r7, #40	; 0x28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40005400 	.word	0x40005400
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40020400 	.word	0x40020400

080029b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2f      	ldr	r2, [pc, #188]	; (8002a94 <HAL_TIM_Base_MspInit+0xdc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d11e      	bne.n	8002a18 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <HAL_TIM_Base_MspInit+0xe0>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	4a2d      	ldr	r2, [pc, #180]	; (8002a98 <HAL_TIM_Base_MspInit+0xe0>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ea:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_TIM_Base_MspInit+0xe0>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2100      	movs	r1, #0
 80029fa:	2018      	movs	r0, #24
 80029fc:	f000 fe37 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002a00:	2018      	movs	r0, #24
 8002a02:	f000 fe50 	bl	80036a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	2019      	movs	r0, #25
 8002a0c:	f000 fe2f 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a10:	2019      	movs	r0, #25
 8002a12:	f000 fe48 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002a16:	e038      	b.n	8002a8a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM8)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1f      	ldr	r2, [pc, #124]	; (8002a9c <HAL_TIM_Base_MspInit+0xe4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d133      	bne.n	8002a8a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <HAL_TIM_Base_MspInit+0xe0>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	4a1b      	ldr	r2, [pc, #108]	; (8002a98 <HAL_TIM_Base_MspInit+0xe0>)
 8002a2c:	f043 0302 	orr.w	r3, r3, #2
 8002a30:	6453      	str	r3, [r2, #68]	; 0x44
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_TIM_Base_MspInit+0xe0>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_TIM_Base_MspInit+0xe0>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <HAL_TIM_Base_MspInit+0xe0>)
 8002a48:	f043 0304 	orr.w	r3, r3, #4
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_TIM_Base_MspInit+0xe0>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002a5a:	23c0      	movs	r3, #192	; 0xc0
 8002a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	480a      	ldr	r0, [pc, #40]	; (8002aa0 <HAL_TIM_Base_MspInit+0xe8>)
 8002a76:	f000 fec3 	bl	8003800 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	202d      	movs	r0, #45	; 0x2d
 8002a80:	f000 fdf5 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002a84:	202d      	movs	r0, #45	; 0x2d
 8002a86:	f000 fe0e 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 8002a8a:	bf00      	nop
 8002a8c:	3728      	adds	r7, #40	; 0x28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40010400 	.word	0x40010400
 8002aa0:	40020800 	.word	0x40020800

08002aa4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	; 0x30
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d14b      	bne.n	8002b5e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	4a3e      	ldr	r2, [pc, #248]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad6:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a37      	ldr	r2, [pc, #220]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b35      	ldr	r3, [pc, #212]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a30      	ldr	r2, [pc, #192]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b2e      	ldr	r3, [pc, #184]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_CH1_Pin;
 8002b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b20:	2302      	movs	r3, #2
 8002b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH1_GPIO_Port, &GPIO_InitStruct);
 8002b30:	f107 031c 	add.w	r3, r7, #28
 8002b34:	4619      	mov	r1, r3
 8002b36:	4825      	ldr	r0, [pc, #148]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x128>)
 8002b38:	f000 fe62 	bl	8003800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA_CH2_Pin;
 8002b3c:	2308      	movs	r3, #8
 8002b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b40:	2302      	movs	r3, #2
 8002b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH2_GPIO_Port, &GPIO_InitStruct);
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	4619      	mov	r1, r3
 8002b56:	481e      	ldr	r0, [pc, #120]	; (8002bd0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002b58:	f000 fe52 	bl	8003800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b5c:	e030      	b.n	8002bc0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x130>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d12b      	bne.n	8002bc0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b72:	f043 0302 	orr.w	r3, r3, #2
 8002b76:	6413      	str	r3, [r2, #64]	; 0x40
 8002b78:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	4a0e      	ldr	r2, [pc, #56]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6313      	str	r3, [r2, #48]	; 0x30
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderB_CH1_Pin|EncoderB_CH2_Pin;
 8002ba0:	23c0      	movs	r3, #192	; 0xc0
 8002ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4804      	ldr	r0, [pc, #16]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x128>)
 8002bbc:	f000 fe20 	bl	8003800 <HAL_GPIO_Init>
}
 8002bc0:	bf00      	nop
 8002bc2:	3730      	adds	r7, #48	; 0x30
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40020000 	.word	0x40020000
 8002bd0:	40020400 	.word	0x40020400
 8002bd4:	40000400 	.word	0x40000400

08002bd8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	; 0x28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <HAL_TIM_IC_MspInit+0x94>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d134      	bne.n	8002c64 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <HAL_TIM_IC_MspInit+0x98>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	4a1b      	ldr	r2, [pc, #108]	; (8002c70 <HAL_TIM_IC_MspInit+0x98>)
 8002c04:	f043 0304 	orr.w	r3, r3, #4
 8002c08:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_TIM_IC_MspInit+0x98>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <HAL_TIM_IC_MspInit+0x98>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <HAL_TIM_IC_MspInit+0x98>)
 8002c20:	f043 0308 	orr.w	r3, r3, #8
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_TIM_IC_MspInit+0x98>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8002c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c40:	2300      	movs	r3, #0
 8002c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c44:	2302      	movs	r3, #2
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4809      	ldr	r0, [pc, #36]	; (8002c74 <HAL_TIM_IC_MspInit+0x9c>)
 8002c50:	f000 fdd6 	bl	8003800 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002c54:	2200      	movs	r2, #0
 8002c56:	2105      	movs	r1, #5
 8002c58:	201e      	movs	r0, #30
 8002c5a:	f000 fd08 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c5e:	201e      	movs	r0, #30
 8002c60:	f000 fd21 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c64:	bf00      	nop
 8002c66:	3728      	adds	r7, #40	; 0x28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40000800 	.word	0x40000800
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40020c00 	.word	0x40020c00

08002c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 030c 	add.w	r3, r7, #12
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <HAL_TIM_MspPostInit+0x68>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d11e      	bne.n	8002cd8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <HAL_TIM_MspPostInit+0x6c>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a10      	ldr	r2, [pc, #64]	; (8002ce4 <HAL_TIM_MspPostInit+0x6c>)
 8002ca4:	f043 0310 	orr.w	r3, r3, #16
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <HAL_TIM_MspPostInit+0x6c>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002cb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ccc:	f107 030c 	add.w	r3, r7, #12
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <HAL_TIM_MspPostInit+0x70>)
 8002cd4:	f000 fd94 	bl	8003800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002cd8:	bf00      	nop
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40021000 	.word	0x40021000

08002cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1d      	ldr	r2, [pc, #116]	; (8002d80 <HAL_UART_MspInit+0x94>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d134      	bne.n	8002d78 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <HAL_UART_MspInit+0x98>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4a1b      	ldr	r2, [pc, #108]	; (8002d84 <HAL_UART_MspInit+0x98>)
 8002d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1e:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <HAL_UART_MspInit+0x98>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <HAL_UART_MspInit+0x98>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <HAL_UART_MspInit+0x98>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_UART_MspInit+0x98>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d58:	2307      	movs	r3, #7
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4619      	mov	r1, r3
 8002d62:	4809      	ldr	r0, [pc, #36]	; (8002d88 <HAL_UART_MspInit+0x9c>)
 8002d64:	f000 fd4c 	bl	8003800 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2105      	movs	r1, #5
 8002d6c:	2027      	movs	r0, #39	; 0x27
 8002d6e:	f000 fc7e 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d72:	2027      	movs	r0, #39	; 0x27
 8002d74:	f000 fc97 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d78:	bf00      	nop
 8002d7a:	3728      	adds	r7, #40	; 0x28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40004800 	.word	0x40004800
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020800 	.word	0x40020800

08002d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d90:	e7fe      	b.n	8002d90 <NMI_Handler+0x4>

08002d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d96:	e7fe      	b.n	8002d96 <HardFault_Handler+0x4>

08002d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d9c:	e7fe      	b.n	8002d9c <MemManage_Handler+0x4>

08002d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002da2:	e7fe      	b.n	8002da2 <BusFault_Handler+0x4>

08002da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002da8:	e7fe      	b.n	8002da8 <UsageFault_Handler+0x4>

08002daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dbc:	f000 fb38 	bl	8003430 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002dc0:	f006 fc6e 	bl	80096a0 <xTaskGetSchedulerState>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d001      	beq.n	8002dce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002dca:	f007 fa55 	bl	800a278 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002de4:	4802      	ldr	r0, [pc, #8]	; (8002df0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002de6:	f002 fde4 	bl	80059b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200000d8 	.word	0x200000d8

08002df4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002df8:	4802      	ldr	r0, [pc, #8]	; (8002e04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002dfa:	f002 fdda 	bl	80059b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200000d8 	.word	0x200000d8

08002e08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e0c:	4802      	ldr	r0, [pc, #8]	; (8002e18 <TIM4_IRQHandler+0x10>)
 8002e0e:	f002 fdd0 	bl	80059b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200001b0 	.word	0x200001b0

08002e1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e20:	4802      	ldr	r0, [pc, #8]	; (8002e2c <USART3_IRQHandler+0x10>)
 8002e22:	f003 ff8d 	bl	8006d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000240 	.word	0x20000240

08002e30 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002e34:	4802      	ldr	r0, [pc, #8]	; (8002e40 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002e36:	f002 fdbc 	bl	80059b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200001f8 	.word	0x200001f8

08002e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e4c:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <_sbrk+0x5c>)
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <_sbrk+0x60>)
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <_sbrk+0x64>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d102      	bne.n	8002e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <_sbrk+0x64>)
 8002e62:	4a12      	ldr	r2, [pc, #72]	; (8002eac <_sbrk+0x68>)
 8002e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <_sbrk+0x64>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d207      	bcs.n	8002e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e74:	f007 fcf8 	bl	800a868 <__errno>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e82:	e009      	b.n	8002e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <_sbrk+0x64>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <_sbrk+0x64>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	4a05      	ldr	r2, [pc, #20]	; (8002ea8 <_sbrk+0x64>)
 8002e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e96:	68fb      	ldr	r3, [r7, #12]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20020000 	.word	0x20020000
 8002ea4:	00000400 	.word	0x00000400
 8002ea8:	20000304 	.word	0x20000304
 8002eac:	20005240 	.word	0x20005240

08002eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <SystemInit+0x20>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	4a05      	ldr	r2, [pc, #20]	; (8002ed0 <SystemInit+0x20>)
 8002ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ed8:	480d      	ldr	r0, [pc, #52]	; (8002f10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002eda:	490e      	ldr	r1, [pc, #56]	; (8002f14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002edc:	4a0e      	ldr	r2, [pc, #56]	; (8002f18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ee0:	e002      	b.n	8002ee8 <LoopCopyDataInit>

08002ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ee6:	3304      	adds	r3, #4

08002ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eec:	d3f9      	bcc.n	8002ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eee:	4a0b      	ldr	r2, [pc, #44]	; (8002f1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ef0:	4c0b      	ldr	r4, [pc, #44]	; (8002f20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ef4:	e001      	b.n	8002efa <LoopFillZerobss>

08002ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef8:	3204      	adds	r2, #4

08002efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002efc:	d3fb      	bcc.n	8002ef6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002efe:	f7ff ffd7 	bl	8002eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f02:	f007 fcb7 	bl	800a874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f06:	f7fd ffe5 	bl	8000ed4 <main>
  bx  lr    
 8002f0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f14:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002f18:	0800be10 	.word	0x0800be10
  ldr r2, =_sbss
 8002f1c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002f20:	2000523c 	.word	0x2000523c

08002f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f24:	e7fe      	b.n	8002f24 <ADC_IRQHandler>
	...

08002f28 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8002f2e:	2300      	movs	r3, #0
 8002f30:	71fb      	strb	r3, [r7, #7]
 8002f32:	e026      	b.n	8002f82 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	3b50      	subs	r3, #80	; 0x50
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 f82b 	bl	8002f98 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8002f42:	2100      	movs	r1, #0
 8002f44:	2000      	movs	r0, #0
 8002f46:	f000 f827 	bl	8002f98 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	2010      	movs	r0, #16
 8002f4e:	f000 f823 	bl	8002f98 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8002f52:	2300      	movs	r3, #0
 8002f54:	71bb      	strb	r3, [r7, #6]
 8002f56:	e00d      	b.n	8002f74 <OLED_Refresh_Gram+0x4c>
 8002f58:	79ba      	ldrb	r2, [r7, #6]
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	490d      	ldr	r1, [pc, #52]	; (8002f94 <OLED_Refresh_Gram+0x6c>)
 8002f5e:	00d2      	lsls	r2, r2, #3
 8002f60:	440a      	add	r2, r1
 8002f62:	4413      	add	r3, r2
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f815 	bl	8002f98 <OLED_WR_Byte>
 8002f6e:	79bb      	ldrb	r3, [r7, #6]
 8002f70:	3301      	adds	r3, #1
 8002f72:	71bb      	strb	r3, [r7, #6]
 8002f74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	daed      	bge.n	8002f58 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	71fb      	strb	r3, [r7, #7]
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	2b07      	cmp	r3, #7
 8002f86:	d9d5      	bls.n	8002f34 <OLED_Refresh_Gram+0xc>
	}   
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000308 	.word	0x20000308

08002f98 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	460a      	mov	r2, r1
 8002fa2:	71fb      	strb	r3, [r7, #7]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8002fa8:	79bb      	ldrb	r3, [r7, #6]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d006      	beq.n	8002fbc <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fb4:	481c      	ldr	r0, [pc, #112]	; (8003028 <OLED_WR_Byte+0x90>)
 8002fb6:	f000 fdbf 	bl	8003b38 <HAL_GPIO_WritePin>
 8002fba:	e005      	b.n	8002fc8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fc2:	4819      	ldr	r0, [pc, #100]	; (8003028 <OLED_WR_Byte+0x90>)
 8002fc4:	f000 fdb8 	bl	8003b38 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
 8002fcc:	e01e      	b.n	800300c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2120      	movs	r1, #32
 8002fd2:	4815      	ldr	r0, [pc, #84]	; (8003028 <OLED_WR_Byte+0x90>)
 8002fd4:	f000 fdb0 	bl	8003b38 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8002fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	da05      	bge.n	8002fec <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	2140      	movs	r1, #64	; 0x40
 8002fe4:	4810      	ldr	r0, [pc, #64]	; (8003028 <OLED_WR_Byte+0x90>)
 8002fe6:	f000 fda7 	bl	8003b38 <HAL_GPIO_WritePin>
 8002fea:	e004      	b.n	8002ff6 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8002fec:	2200      	movs	r2, #0
 8002fee:	2140      	movs	r1, #64	; 0x40
 8002ff0:	480d      	ldr	r0, [pc, #52]	; (8003028 <OLED_WR_Byte+0x90>)
 8002ff2:	f000 fda1 	bl	8003b38 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	2120      	movs	r1, #32
 8002ffa:	480b      	ldr	r0, [pc, #44]	; (8003028 <OLED_WR_Byte+0x90>)
 8002ffc:	f000 fd9c 	bl	8003b38 <HAL_GPIO_WritePin>
		dat<<=1;   
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	3301      	adds	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	2b07      	cmp	r3, #7
 8003010:	d9dd      	bls.n	8002fce <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8003012:	2201      	movs	r2, #1
 8003014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003018:	4803      	ldr	r0, [pc, #12]	; (8003028 <OLED_WR_Byte+0x90>)
 800301a:	f000 fd8d 	bl	8003b38 <HAL_GPIO_WritePin>
} 
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000

0800302c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8003032:	2300      	movs	r3, #0
 8003034:	71fb      	strb	r3, [r7, #7]
 8003036:	e014      	b.n	8003062 <OLED_Clear+0x36>
 8003038:	2300      	movs	r3, #0
 800303a:	71bb      	strb	r3, [r7, #6]
 800303c:	e00a      	b.n	8003054 <OLED_Clear+0x28>
 800303e:	79ba      	ldrb	r2, [r7, #6]
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	490c      	ldr	r1, [pc, #48]	; (8003074 <OLED_Clear+0x48>)
 8003044:	00d2      	lsls	r2, r2, #3
 8003046:	440a      	add	r2, r1
 8003048:	4413      	add	r3, r2
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
 800304e:	79bb      	ldrb	r3, [r7, #6]
 8003050:	3301      	adds	r3, #1
 8003052:	71bb      	strb	r3, [r7, #6]
 8003054:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003058:	2b00      	cmp	r3, #0
 800305a:	daf0      	bge.n	800303e <OLED_Clear+0x12>
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	3301      	adds	r3, #1
 8003060:	71fb      	strb	r3, [r7, #7]
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	2b07      	cmp	r3, #7
 8003066:	d9e7      	bls.n	8003038 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8003068:	f7ff ff5e 	bl	8002f28 <OLED_Refresh_Gram>
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20000308 	.word	0x20000308

08003078 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
 8003082:	460b      	mov	r3, r1
 8003084:	71bb      	strb	r3, [r7, #6]
 8003086:	4613      	mov	r3, r2
 8003088:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800308a:	2300      	movs	r3, #0
 800308c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	2b00      	cmp	r3, #0
 8003094:	db41      	blt.n	800311a <OLED_DrawPoint+0xa2>
 8003096:	79bb      	ldrb	r3, [r7, #6]
 8003098:	2b3f      	cmp	r3, #63	; 0x3f
 800309a:	d83e      	bhi.n	800311a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800309c:	79bb      	ldrb	r3, [r7, #6]
 800309e:	08db      	lsrs	r3, r3, #3
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f1c3 0307 	rsb	r3, r3, #7
 80030a6:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80030a8:	79bb      	ldrb	r3, [r7, #6]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80030b0:	7b7b      	ldrb	r3, [r7, #13]
 80030b2:	f1c3 0307 	rsb	r3, r3, #7
 80030b6:	2201      	movs	r2, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80030be:	797b      	ldrb	r3, [r7, #5]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d012      	beq.n	80030ea <OLED_DrawPoint+0x72>
 80030c4:	79fa      	ldrb	r2, [r7, #7]
 80030c6:	7bbb      	ldrb	r3, [r7, #14]
 80030c8:	4917      	ldr	r1, [pc, #92]	; (8003128 <OLED_DrawPoint+0xb0>)
 80030ca:	00d2      	lsls	r2, r2, #3
 80030cc:	440a      	add	r2, r1
 80030ce:	4413      	add	r3, r2
 80030d0:	7818      	ldrb	r0, [r3, #0]
 80030d2:	79fa      	ldrb	r2, [r7, #7]
 80030d4:	7bbb      	ldrb	r3, [r7, #14]
 80030d6:	7bf9      	ldrb	r1, [r7, #15]
 80030d8:	4301      	orrs	r1, r0
 80030da:	b2c8      	uxtb	r0, r1
 80030dc:	4912      	ldr	r1, [pc, #72]	; (8003128 <OLED_DrawPoint+0xb0>)
 80030de:	00d2      	lsls	r2, r2, #3
 80030e0:	440a      	add	r2, r1
 80030e2:	4413      	add	r3, r2
 80030e4:	4602      	mov	r2, r0
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	e018      	b.n	800311c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80030ea:	79fa      	ldrb	r2, [r7, #7]
 80030ec:	7bbb      	ldrb	r3, [r7, #14]
 80030ee:	490e      	ldr	r1, [pc, #56]	; (8003128 <OLED_DrawPoint+0xb0>)
 80030f0:	00d2      	lsls	r2, r2, #3
 80030f2:	440a      	add	r2, r1
 80030f4:	4413      	add	r3, r2
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	b25a      	sxtb	r2, r3
 80030fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030fe:	43db      	mvns	r3, r3
 8003100:	b25b      	sxtb	r3, r3
 8003102:	4013      	ands	r3, r2
 8003104:	b259      	sxtb	r1, r3
 8003106:	79fa      	ldrb	r2, [r7, #7]
 8003108:	7bbb      	ldrb	r3, [r7, #14]
 800310a:	b2c8      	uxtb	r0, r1
 800310c:	4906      	ldr	r1, [pc, #24]	; (8003128 <OLED_DrawPoint+0xb0>)
 800310e:	00d2      	lsls	r2, r2, #3
 8003110:	440a      	add	r2, r1
 8003112:	4413      	add	r3, r2
 8003114:	4602      	mov	r2, r0
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	e000      	b.n	800311c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800311a:	bf00      	nop
}
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000308 	.word	0x20000308

0800312c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	4604      	mov	r4, r0
 8003134:	4608      	mov	r0, r1
 8003136:	4611      	mov	r1, r2
 8003138:	461a      	mov	r2, r3
 800313a:	4623      	mov	r3, r4
 800313c:	71fb      	strb	r3, [r7, #7]
 800313e:	4603      	mov	r3, r0
 8003140:	71bb      	strb	r3, [r7, #6]
 8003142:	460b      	mov	r3, r1
 8003144:	717b      	strb	r3, [r7, #5]
 8003146:	4613      	mov	r3, r2
 8003148:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800314a:	79bb      	ldrb	r3, [r7, #6]
 800314c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800314e:	797b      	ldrb	r3, [r7, #5]
 8003150:	3b20      	subs	r3, #32
 8003152:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8003154:	2300      	movs	r3, #0
 8003156:	73bb      	strb	r3, [r7, #14]
 8003158:	e04d      	b.n	80031f6 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800315a:	793b      	ldrb	r3, [r7, #4]
 800315c:	2b0c      	cmp	r3, #12
 800315e:	d10b      	bne.n	8003178 <OLED_ShowChar+0x4c>
 8003160:	797a      	ldrb	r2, [r7, #5]
 8003162:	7bb9      	ldrb	r1, [r7, #14]
 8003164:	4828      	ldr	r0, [pc, #160]	; (8003208 <OLED_ShowChar+0xdc>)
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4403      	add	r3, r0
 8003170:	440b      	add	r3, r1
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	73fb      	strb	r3, [r7, #15]
 8003176:	e007      	b.n	8003188 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8003178:	797a      	ldrb	r2, [r7, #5]
 800317a:	7bbb      	ldrb	r3, [r7, #14]
 800317c:	4923      	ldr	r1, [pc, #140]	; (800320c <OLED_ShowChar+0xe0>)
 800317e:	0112      	lsls	r2, r2, #4
 8003180:	440a      	add	r2, r1
 8003182:	4413      	add	r3, r2
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8003188:	2300      	movs	r3, #0
 800318a:	737b      	strb	r3, [r7, #13]
 800318c:	e02d      	b.n	80031ea <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800318e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	da07      	bge.n	80031a6 <OLED_ShowChar+0x7a>
 8003196:	f897 2020 	ldrb.w	r2, [r7, #32]
 800319a:	79b9      	ldrb	r1, [r7, #6]
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff6a 	bl	8003078 <OLED_DrawPoint>
 80031a4:	e00c      	b.n	80031c0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80031a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf0c      	ite	eq
 80031ae:	2301      	moveq	r3, #1
 80031b0:	2300      	movne	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	79b9      	ldrb	r1, [r7, #6]
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff5c 	bl	8003078 <OLED_DrawPoint>
			temp<<=1;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
			y++;
 80031c6:	79bb      	ldrb	r3, [r7, #6]
 80031c8:	3301      	adds	r3, #1
 80031ca:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80031cc:	79ba      	ldrb	r2, [r7, #6]
 80031ce:	7b3b      	ldrb	r3, [r7, #12]
 80031d0:	1ad2      	subs	r2, r2, r3
 80031d2:	793b      	ldrb	r3, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d105      	bne.n	80031e4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80031d8:	7b3b      	ldrb	r3, [r7, #12]
 80031da:	71bb      	strb	r3, [r7, #6]
				x++;
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	3301      	adds	r3, #1
 80031e0:	71fb      	strb	r3, [r7, #7]
				break;
 80031e2:	e005      	b.n	80031f0 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80031e4:	7b7b      	ldrb	r3, [r7, #13]
 80031e6:	3301      	adds	r3, #1
 80031e8:	737b      	strb	r3, [r7, #13]
 80031ea:	7b7b      	ldrb	r3, [r7, #13]
 80031ec:	2b07      	cmp	r3, #7
 80031ee:	d9ce      	bls.n	800318e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80031f0:	7bbb      	ldrb	r3, [r7, #14]
 80031f2:	3301      	adds	r3, #1
 80031f4:	73bb      	strb	r3, [r7, #14]
 80031f6:	7bba      	ldrb	r2, [r7, #14]
 80031f8:	793b      	ldrb	r3, [r7, #4]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d3ad      	bcc.n	800315a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80031fe:	bf00      	nop
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	bd90      	pop	{r4, r7, pc}
 8003208:	0800b368 	.word	0x0800b368
 800320c:	0800b7dc 	.word	0x0800b7dc

08003210 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af02      	add	r7, sp, #8
 8003216:	4603      	mov	r3, r0
 8003218:	603a      	str	r2, [r7, #0]
 800321a:	71fb      	strb	r3, [r7, #7]
 800321c:	460b      	mov	r3, r1
 800321e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8003220:	e01f      	b.n	8003262 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	2b7a      	cmp	r3, #122	; 0x7a
 8003226:	d904      	bls.n	8003232 <OLED_ShowString+0x22>
 8003228:	2300      	movs	r3, #0
 800322a:	71fb      	strb	r3, [r7, #7]
 800322c:	79bb      	ldrb	r3, [r7, #6]
 800322e:	3310      	adds	r3, #16
 8003230:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8003232:	79bb      	ldrb	r3, [r7, #6]
 8003234:	2b3a      	cmp	r3, #58	; 0x3a
 8003236:	d905      	bls.n	8003244 <OLED_ShowString+0x34>
 8003238:	2300      	movs	r3, #0
 800323a:	71fb      	strb	r3, [r7, #7]
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	71bb      	strb	r3, [r7, #6]
 8003240:	f7ff fef4 	bl	800302c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	781a      	ldrb	r2, [r3, #0]
 8003248:	79b9      	ldrb	r1, [r7, #6]
 800324a:	79f8      	ldrb	r0, [r7, #7]
 800324c:	2301      	movs	r3, #1
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	230c      	movs	r3, #12
 8003252:	f7ff ff6b 	bl	800312c <OLED_ShowChar>
        x+=8;
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	3308      	adds	r3, #8
 800325a:	71fb      	strb	r3, [r7, #7]
        p++;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	3301      	adds	r3, #1
 8003260:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1db      	bne.n	8003222 <OLED_ShowString+0x12>
    }  
}	 
 800326a:	bf00      	nop
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <OLED_Init>:

void OLED_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8003278:	f001 fc28 	bl	8004acc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800327c:	4b41      	ldr	r3, [pc, #260]	; (8003384 <OLED_Init+0x110>)
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	4a40      	ldr	r2, [pc, #256]	; (8003384 <OLED_Init+0x110>)
 8003282:	f023 0301 	bic.w	r3, r3, #1
 8003286:	6713      	str	r3, [r2, #112]	; 0x70
 8003288:	4b3e      	ldr	r3, [pc, #248]	; (8003384 <OLED_Init+0x110>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	4a3d      	ldr	r2, [pc, #244]	; (8003384 <OLED_Init+0x110>)
 800328e:	f023 0304 	bic.w	r3, r3, #4
 8003292:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8003294:	f001 fc2e 	bl	8004af4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8003298:	2200      	movs	r2, #0
 800329a:	2180      	movs	r1, #128	; 0x80
 800329c:	483a      	ldr	r0, [pc, #232]	; (8003388 <OLED_Init+0x114>)
 800329e:	f000 fc4b 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80032a2:	2064      	movs	r0, #100	; 0x64
 80032a4:	f000 f8e4 	bl	8003470 <HAL_Delay>
	OLED_RST_Set();
 80032a8:	2201      	movs	r2, #1
 80032aa:	2180      	movs	r1, #128	; 0x80
 80032ac:	4836      	ldr	r0, [pc, #216]	; (8003388 <OLED_Init+0x114>)
 80032ae:	f000 fc43 	bl	8003b38 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80032b2:	2100      	movs	r1, #0
 80032b4:	20ae      	movs	r0, #174	; 0xae
 80032b6:	f7ff fe6f 	bl	8002f98 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80032ba:	2100      	movs	r1, #0
 80032bc:	20d5      	movs	r0, #213	; 0xd5
 80032be:	f7ff fe6b 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80032c2:	2100      	movs	r1, #0
 80032c4:	2050      	movs	r0, #80	; 0x50
 80032c6:	f7ff fe67 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80032ca:	2100      	movs	r1, #0
 80032cc:	20a8      	movs	r0, #168	; 0xa8
 80032ce:	f7ff fe63 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80032d2:	2100      	movs	r1, #0
 80032d4:	203f      	movs	r0, #63	; 0x3f
 80032d6:	f7ff fe5f 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80032da:	2100      	movs	r1, #0
 80032dc:	20d3      	movs	r0, #211	; 0xd3
 80032de:	f7ff fe5b 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80032e2:	2100      	movs	r1, #0
 80032e4:	2000      	movs	r0, #0
 80032e6:	f7ff fe57 	bl	8002f98 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80032ea:	2100      	movs	r1, #0
 80032ec:	2040      	movs	r0, #64	; 0x40
 80032ee:	f7ff fe53 	bl	8002f98 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80032f2:	2100      	movs	r1, #0
 80032f4:	208d      	movs	r0, #141	; 0x8d
 80032f6:	f7ff fe4f 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80032fa:	2100      	movs	r1, #0
 80032fc:	2014      	movs	r0, #20
 80032fe:	f7ff fe4b 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8003302:	2100      	movs	r1, #0
 8003304:	2020      	movs	r0, #32
 8003306:	f7ff fe47 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800330a:	2100      	movs	r1, #0
 800330c:	2002      	movs	r0, #2
 800330e:	f7ff fe43 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8003312:	2100      	movs	r1, #0
 8003314:	20a1      	movs	r0, #161	; 0xa1
 8003316:	f7ff fe3f 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800331a:	2100      	movs	r1, #0
 800331c:	20c0      	movs	r0, #192	; 0xc0
 800331e:	f7ff fe3b 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8003322:	2100      	movs	r1, #0
 8003324:	20da      	movs	r0, #218	; 0xda
 8003326:	f7ff fe37 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800332a:	2100      	movs	r1, #0
 800332c:	2012      	movs	r0, #18
 800332e:	f7ff fe33 	bl	8002f98 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8003332:	2100      	movs	r1, #0
 8003334:	2081      	movs	r0, #129	; 0x81
 8003336:	f7ff fe2f 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800333a:	2100      	movs	r1, #0
 800333c:	20ef      	movs	r0, #239	; 0xef
 800333e:	f7ff fe2b 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8003342:	2100      	movs	r1, #0
 8003344:	20d9      	movs	r0, #217	; 0xd9
 8003346:	f7ff fe27 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800334a:	2100      	movs	r1, #0
 800334c:	20f1      	movs	r0, #241	; 0xf1
 800334e:	f7ff fe23 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8003352:	2100      	movs	r1, #0
 8003354:	20db      	movs	r0, #219	; 0xdb
 8003356:	f7ff fe1f 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800335a:	2100      	movs	r1, #0
 800335c:	2030      	movs	r0, #48	; 0x30
 800335e:	f7ff fe1b 	bl	8002f98 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8003362:	2100      	movs	r1, #0
 8003364:	20a4      	movs	r0, #164	; 0xa4
 8003366:	f7ff fe17 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800336a:	2100      	movs	r1, #0
 800336c:	20a6      	movs	r0, #166	; 0xa6
 800336e:	f7ff fe13 	bl	8002f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8003372:	2100      	movs	r1, #0
 8003374:	20af      	movs	r0, #175	; 0xaf
 8003376:	f7ff fe0f 	bl	8002f98 <OLED_WR_Byte>
	OLED_Clear(); 
 800337a:	f7ff fe57 	bl	800302c <OLED_Clear>
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800
 8003388:	40021000 	.word	0x40021000

0800338c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003390:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <HAL_Init+0x40>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0d      	ldr	r2, [pc, #52]	; (80033cc <HAL_Init+0x40>)
 8003396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800339a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_Init+0x40>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <HAL_Init+0x40>)
 80033a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_Init+0x40>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a07      	ldr	r2, [pc, #28]	; (80033cc <HAL_Init+0x40>)
 80033ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b4:	2003      	movs	r0, #3
 80033b6:	f000 f94f 	bl	8003658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ba:	200f      	movs	r0, #15
 80033bc:	f000 f808 	bl	80033d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033c0:	f7ff fa7e 	bl	80028c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023c00 	.word	0x40023c00

080033d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033d8:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_InitTick+0x54>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_InitTick+0x58>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	4619      	mov	r1, r3
 80033e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f967 	bl	80036c2 <HAL_SYSTICK_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e00e      	b.n	800341c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b0f      	cmp	r3, #15
 8003402:	d80a      	bhi.n	800341a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003404:	2200      	movs	r2, #0
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	f04f 30ff 	mov.w	r0, #4294967295
 800340c:	f000 f92f 	bl	800366e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003410:	4a06      	ldr	r2, [pc, #24]	; (800342c <HAL_InitTick+0x5c>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e000      	b.n	800341c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000004 	.word	0x20000004
 8003428:	2000000c 	.word	0x2000000c
 800342c:	20000008 	.word	0x20000008

08003430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_IncTick+0x20>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_IncTick+0x24>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4413      	add	r3, r2
 8003440:	4a04      	ldr	r2, [pc, #16]	; (8003454 <HAL_IncTick+0x24>)
 8003442:	6013      	str	r3, [r2, #0]
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	2000000c 	.word	0x2000000c
 8003454:	20000708 	.word	0x20000708

08003458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return uwTick;
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <HAL_GetTick+0x14>)
 800345e:	681b      	ldr	r3, [r3, #0]
}
 8003460:	4618      	mov	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20000708 	.word	0x20000708

08003470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003478:	f7ff ffee 	bl	8003458 <HAL_GetTick>
 800347c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d005      	beq.n	8003496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <HAL_Delay+0x44>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4413      	add	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003496:	bf00      	nop
 8003498:	f7ff ffde 	bl	8003458 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d8f7      	bhi.n	8003498 <HAL_Delay+0x28>
  {
  }
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	2000000c 	.word	0x2000000c

080034b8 <__NVIC_SetPriorityGrouping>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c8:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <__NVIC_SetPriorityGrouping+0x44>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034d4:	4013      	ands	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ea:	4a04      	ldr	r2, [pc, #16]	; (80034fc <__NVIC_SetPriorityGrouping+0x44>)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	60d3      	str	r3, [r2, #12]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <__NVIC_GetPriorityGrouping>:
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <__NVIC_GetPriorityGrouping+0x18>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	f003 0307 	and.w	r3, r3, #7
}
 800350e:	4618      	mov	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <__NVIC_EnableIRQ>:
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	2b00      	cmp	r3, #0
 800352c:	db0b      	blt.n	8003546 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	f003 021f 	and.w	r2, r3, #31
 8003534:	4907      	ldr	r1, [pc, #28]	; (8003554 <__NVIC_EnableIRQ+0x38>)
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	2001      	movs	r0, #1
 800353e:	fa00 f202 	lsl.w	r2, r0, r2
 8003542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000e100 	.word	0xe000e100

08003558 <__NVIC_SetPriority>:
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003568:	2b00      	cmp	r3, #0
 800356a:	db0a      	blt.n	8003582 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	490c      	ldr	r1, [pc, #48]	; (80035a4 <__NVIC_SetPriority+0x4c>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	0112      	lsls	r2, r2, #4
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	440b      	add	r3, r1
 800357c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003580:	e00a      	b.n	8003598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4908      	ldr	r1, [pc, #32]	; (80035a8 <__NVIC_SetPriority+0x50>)
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	3b04      	subs	r3, #4
 8003590:	0112      	lsls	r2, r2, #4
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	440b      	add	r3, r1
 8003596:	761a      	strb	r2, [r3, #24]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	e000e100 	.word	0xe000e100
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <NVIC_EncodePriority>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	; 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f1c3 0307 	rsb	r3, r3, #7
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	bf28      	it	cs
 80035ca:	2304      	movcs	r3, #4
 80035cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3304      	adds	r3, #4
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d902      	bls.n	80035dc <NVIC_EncodePriority+0x30>
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3b03      	subs	r3, #3
 80035da:	e000      	b.n	80035de <NVIC_EncodePriority+0x32>
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	f04f 32ff 	mov.w	r2, #4294967295
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43da      	mvns	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	401a      	ands	r2, r3
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f4:	f04f 31ff 	mov.w	r1, #4294967295
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	fa01 f303 	lsl.w	r3, r1, r3
 80035fe:	43d9      	mvns	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	4313      	orrs	r3, r2
}
 8003606:	4618      	mov	r0, r3
 8003608:	3724      	adds	r7, #36	; 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003624:	d301      	bcc.n	800362a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003626:	2301      	movs	r3, #1
 8003628:	e00f      	b.n	800364a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362a:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <SysTick_Config+0x40>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3b01      	subs	r3, #1
 8003630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003632:	210f      	movs	r1, #15
 8003634:	f04f 30ff 	mov.w	r0, #4294967295
 8003638:	f7ff ff8e 	bl	8003558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <SysTick_Config+0x40>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003642:	4b04      	ldr	r3, [pc, #16]	; (8003654 <SysTick_Config+0x40>)
 8003644:	2207      	movs	r2, #7
 8003646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	e000e010 	.word	0xe000e010

08003658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ff29 	bl	80034b8 <__NVIC_SetPriorityGrouping>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800366e:	b580      	push	{r7, lr}
 8003670:	b086      	sub	sp, #24
 8003672:	af00      	add	r7, sp, #0
 8003674:	4603      	mov	r3, r0
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003680:	f7ff ff3e 	bl	8003500 <__NVIC_GetPriorityGrouping>
 8003684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f7ff ff8e 	bl	80035ac <NVIC_EncodePriority>
 8003690:	4602      	mov	r2, r0
 8003692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff5d 	bl	8003558 <__NVIC_SetPriority>
}
 800369e:	bf00      	nop
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff ff31 	bl	800351c <__NVIC_EnableIRQ>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ffa2 	bl	8003614 <SysTick_Config>
 80036d0:	4603      	mov	r3, r0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036e8:	f7ff feb6 	bl	8003458 <HAL_GetTick>
 80036ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d008      	beq.n	800370c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2280      	movs	r2, #128	; 0x80
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e052      	b.n	80037b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0216 	bic.w	r2, r2, #22
 800371a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800372a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	2b00      	cmp	r3, #0
 8003732:	d103      	bne.n	800373c <HAL_DMA_Abort+0x62>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0208 	bic.w	r2, r2, #8
 800374a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800375c:	e013      	b.n	8003786 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800375e:	f7ff fe7b 	bl	8003458 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b05      	cmp	r3, #5
 800376a:	d90c      	bls.n	8003786 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2203      	movs	r2, #3
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e015      	b.n	80037b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e4      	bne.n	800375e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003798:	223f      	movs	r2, #63	; 0x3f
 800379a:	409a      	lsls	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d004      	beq.n	80037d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2280      	movs	r2, #128	; 0x80
 80037d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e00c      	b.n	80037f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2205      	movs	r2, #5
 80037dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003800:	b480      	push	{r7}
 8003802:	b089      	sub	sp, #36	; 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	e16b      	b.n	8003af4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800381c:	2201      	movs	r2, #1
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	429a      	cmp	r2, r3
 8003836:	f040 815a 	bne.w	8003aee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d005      	beq.n	8003852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800384e:	2b02      	cmp	r3, #2
 8003850:	d130      	bne.n	80038b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	2203      	movs	r2, #3
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4013      	ands	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003888:	2201      	movs	r2, #1
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	f003 0201 	and.w	r2, r3, #1
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d017      	beq.n	80038f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	2203      	movs	r2, #3
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d123      	bne.n	8003944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	08da      	lsrs	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3208      	adds	r2, #8
 8003904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	220f      	movs	r2, #15
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	08da      	lsrs	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3208      	adds	r2, #8
 800393e:	69b9      	ldr	r1, [r7, #24]
 8003940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	2203      	movs	r2, #3
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0203 	and.w	r2, r3, #3
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80b4 	beq.w	8003aee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	4b60      	ldr	r3, [pc, #384]	; (8003b0c <HAL_GPIO_Init+0x30c>)
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	4a5f      	ldr	r2, [pc, #380]	; (8003b0c <HAL_GPIO_Init+0x30c>)
 8003990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003994:	6453      	str	r3, [r2, #68]	; 0x44
 8003996:	4b5d      	ldr	r3, [pc, #372]	; (8003b0c <HAL_GPIO_Init+0x30c>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039a2:	4a5b      	ldr	r2, [pc, #364]	; (8003b10 <HAL_GPIO_Init+0x310>)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	089b      	lsrs	r3, r3, #2
 80039a8:	3302      	adds	r3, #2
 80039aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	220f      	movs	r2, #15
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a52      	ldr	r2, [pc, #328]	; (8003b14 <HAL_GPIO_Init+0x314>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d02b      	beq.n	8003a26 <HAL_GPIO_Init+0x226>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a51      	ldr	r2, [pc, #324]	; (8003b18 <HAL_GPIO_Init+0x318>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d025      	beq.n	8003a22 <HAL_GPIO_Init+0x222>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a50      	ldr	r2, [pc, #320]	; (8003b1c <HAL_GPIO_Init+0x31c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01f      	beq.n	8003a1e <HAL_GPIO_Init+0x21e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4f      	ldr	r2, [pc, #316]	; (8003b20 <HAL_GPIO_Init+0x320>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d019      	beq.n	8003a1a <HAL_GPIO_Init+0x21a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a4e      	ldr	r2, [pc, #312]	; (8003b24 <HAL_GPIO_Init+0x324>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <HAL_GPIO_Init+0x216>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a4d      	ldr	r2, [pc, #308]	; (8003b28 <HAL_GPIO_Init+0x328>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00d      	beq.n	8003a12 <HAL_GPIO_Init+0x212>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a4c      	ldr	r2, [pc, #304]	; (8003b2c <HAL_GPIO_Init+0x32c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d007      	beq.n	8003a0e <HAL_GPIO_Init+0x20e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a4b      	ldr	r2, [pc, #300]	; (8003b30 <HAL_GPIO_Init+0x330>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d101      	bne.n	8003a0a <HAL_GPIO_Init+0x20a>
 8003a06:	2307      	movs	r3, #7
 8003a08:	e00e      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	e00c      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a0e:	2306      	movs	r3, #6
 8003a10:	e00a      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a12:	2305      	movs	r3, #5
 8003a14:	e008      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a16:	2304      	movs	r3, #4
 8003a18:	e006      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e004      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e002      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a26:	2300      	movs	r3, #0
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	f002 0203 	and.w	r2, r2, #3
 8003a2e:	0092      	lsls	r2, r2, #2
 8003a30:	4093      	lsls	r3, r2
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a38:	4935      	ldr	r1, [pc, #212]	; (8003b10 <HAL_GPIO_Init+0x310>)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	3302      	adds	r3, #2
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <HAL_GPIO_Init+0x334>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4013      	ands	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a6a:	4a32      	ldr	r2, [pc, #200]	; (8003b34 <HAL_GPIO_Init+0x334>)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a70:	4b30      	ldr	r3, [pc, #192]	; (8003b34 <HAL_GPIO_Init+0x334>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a94:	4a27      	ldr	r2, [pc, #156]	; (8003b34 <HAL_GPIO_Init+0x334>)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a9a:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <HAL_GPIO_Init+0x334>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003abe:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <HAL_GPIO_Init+0x334>)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ac4:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <HAL_GPIO_Init+0x334>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ae8:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <HAL_GPIO_Init+0x334>)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3301      	adds	r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	2b0f      	cmp	r3, #15
 8003af8:	f67f ae90 	bls.w	800381c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	3724      	adds	r7, #36	; 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40013800 	.word	0x40013800
 8003b14:	40020000 	.word	0x40020000
 8003b18:	40020400 	.word	0x40020400
 8003b1c:	40020800 	.word	0x40020800
 8003b20:	40020c00 	.word	0x40020c00
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40021400 	.word	0x40021400
 8003b2c:	40021800 	.word	0x40021800
 8003b30:	40021c00 	.word	0x40021c00
 8003b34:	40013c00 	.word	0x40013c00

08003b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]
 8003b44:	4613      	mov	r3, r2
 8003b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b48:	787b      	ldrb	r3, [r7, #1]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b4e:	887a      	ldrh	r2, [r7, #2]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b54:	e003      	b.n	8003b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b56:	887b      	ldrh	r3, [r7, #2]
 8003b58:	041a      	lsls	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	619a      	str	r2, [r3, #24]
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b7c:	887a      	ldrh	r2, [r7, #2]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4013      	ands	r3, r2
 8003b82:	041a      	lsls	r2, r3, #16
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	43d9      	mvns	r1, r3
 8003b88:	887b      	ldrh	r3, [r7, #2]
 8003b8a:	400b      	ands	r3, r1
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	619a      	str	r2, [r3, #24]
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e12b      	b.n	8003e0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fe feae 	bl	8002928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2224      	movs	r2, #36	; 0x24
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0201 	bic.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c04:	f001 fbba 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 8003c08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4a81      	ldr	r2, [pc, #516]	; (8003e14 <HAL_I2C_Init+0x274>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d807      	bhi.n	8003c24 <HAL_I2C_Init+0x84>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a80      	ldr	r2, [pc, #512]	; (8003e18 <HAL_I2C_Init+0x278>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bf94      	ite	ls
 8003c1c:	2301      	movls	r3, #1
 8003c1e:	2300      	movhi	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e006      	b.n	8003c32 <HAL_I2C_Init+0x92>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4a7d      	ldr	r2, [pc, #500]	; (8003e1c <HAL_I2C_Init+0x27c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	bf94      	ite	ls
 8003c2c:	2301      	movls	r3, #1
 8003c2e:	2300      	movhi	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e0e7      	b.n	8003e0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4a78      	ldr	r2, [pc, #480]	; (8003e20 <HAL_I2C_Init+0x280>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	0c9b      	lsrs	r3, r3, #18
 8003c44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	4a6a      	ldr	r2, [pc, #424]	; (8003e14 <HAL_I2C_Init+0x274>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d802      	bhi.n	8003c74 <HAL_I2C_Init+0xd4>
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	3301      	adds	r3, #1
 8003c72:	e009      	b.n	8003c88 <HAL_I2C_Init+0xe8>
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c7a:	fb02 f303 	mul.w	r3, r2, r3
 8003c7e:	4a69      	ldr	r2, [pc, #420]	; (8003e24 <HAL_I2C_Init+0x284>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	3301      	adds	r3, #1
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	495c      	ldr	r1, [pc, #368]	; (8003e14 <HAL_I2C_Init+0x274>)
 8003ca4:	428b      	cmp	r3, r1
 8003ca6:	d819      	bhi.n	8003cdc <HAL_I2C_Init+0x13c>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1e59      	subs	r1, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cb6:	1c59      	adds	r1, r3, #1
 8003cb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cbc:	400b      	ands	r3, r1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_I2C_Init+0x138>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1e59      	subs	r1, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd6:	e051      	b.n	8003d7c <HAL_I2C_Init+0x1dc>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	e04f      	b.n	8003d7c <HAL_I2C_Init+0x1dc>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d111      	bne.n	8003d08 <HAL_I2C_Init+0x168>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1e58      	subs	r0, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6859      	ldr	r1, [r3, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	440b      	add	r3, r1
 8003cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	e012      	b.n	8003d2e <HAL_I2C_Init+0x18e>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1e58      	subs	r0, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	0099      	lsls	r1, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf0c      	ite	eq
 8003d28:	2301      	moveq	r3, #1
 8003d2a:	2300      	movne	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_I2C_Init+0x196>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e022      	b.n	8003d7c <HAL_I2C_Init+0x1dc>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10e      	bne.n	8003d5c <HAL_I2C_Init+0x1bc>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1e58      	subs	r0, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6859      	ldr	r1, [r3, #4]
 8003d46:	460b      	mov	r3, r1
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	440b      	add	r3, r1
 8003d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d50:	3301      	adds	r3, #1
 8003d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d5a:	e00f      	b.n	8003d7c <HAL_I2C_Init+0x1dc>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	1e58      	subs	r0, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	0099      	lsls	r1, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d72:	3301      	adds	r3, #1
 8003d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	6809      	ldr	r1, [r1, #0]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69da      	ldr	r2, [r3, #28]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003daa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6911      	ldr	r1, [r2, #16]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68d2      	ldr	r2, [r2, #12]
 8003db6:	4311      	orrs	r1, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	000186a0 	.word	0x000186a0
 8003e18:	001e847f 	.word	0x001e847f
 8003e1c:	003d08ff 	.word	0x003d08ff
 8003e20:	431bde83 	.word	0x431bde83
 8003e24:	10624dd3 	.word	0x10624dd3

08003e28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	461a      	mov	r2, r3
 8003e34:	460b      	mov	r3, r1
 8003e36:	817b      	strh	r3, [r7, #10]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e3c:	f7ff fb0c 	bl	8003458 <HAL_GetTick>
 8003e40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	f040 80e0 	bne.w	8004010 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	2319      	movs	r3, #25
 8003e56:	2201      	movs	r2, #1
 8003e58:	4970      	ldr	r1, [pc, #448]	; (800401c <HAL_I2C_Master_Transmit+0x1f4>)
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fc58 	bl	8004710 <I2C_WaitOnFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
 8003e68:	e0d3      	b.n	8004012 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_I2C_Master_Transmit+0x50>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e0cc      	b.n	8004012 <HAL_I2C_Master_Transmit+0x1ea>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d007      	beq.n	8003e9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0201 	orr.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2221      	movs	r2, #33	; 0x21
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2210      	movs	r2, #16
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	893a      	ldrh	r2, [r7, #8]
 8003ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4a50      	ldr	r2, [pc, #320]	; (8004020 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ee0:	8979      	ldrh	r1, [r7, #10]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fac2 	bl	8004470 <I2C_MasterRequestWrite>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e08d      	b.n	8004012 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f0c:	e066      	b.n	8003fdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	6a39      	ldr	r1, [r7, #32]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fcd2 	bl	80048bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00d      	beq.n	8003f3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d107      	bne.n	8003f36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e06b      	b.n	8004012 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	781a      	ldrb	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d11b      	bne.n	8003fb0 <HAL_I2C_Master_Transmit+0x188>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d017      	beq.n	8003fb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	781a      	ldrb	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	6a39      	ldr	r1, [r7, #32]
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fcc2 	bl	800493e <I2C_WaitOnBTFFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00d      	beq.n	8003fdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d107      	bne.n	8003fd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e01a      	b.n	8004012 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d194      	bne.n	8003f0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	00100002 	.word	0x00100002
 8004020:	ffff0000 	.word	0xffff0000

08004024 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08c      	sub	sp, #48	; 0x30
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	607a      	str	r2, [r7, #4]
 800402e:	461a      	mov	r2, r3
 8004030:	460b      	mov	r3, r1
 8004032:	817b      	strh	r3, [r7, #10]
 8004034:	4613      	mov	r3, r2
 8004036:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004038:	f7ff fa0e 	bl	8003458 <HAL_GetTick>
 800403c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b20      	cmp	r3, #32
 8004048:	f040 820b 	bne.w	8004462 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	2319      	movs	r3, #25
 8004052:	2201      	movs	r2, #1
 8004054:	497c      	ldr	r1, [pc, #496]	; (8004248 <HAL_I2C_Master_Receive+0x224>)
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fb5a 	bl	8004710 <I2C_WaitOnFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004062:	2302      	movs	r3, #2
 8004064:	e1fe      	b.n	8004464 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_I2C_Master_Receive+0x50>
 8004070:	2302      	movs	r3, #2
 8004072:	e1f7      	b.n	8004464 <HAL_I2C_Master_Receive+0x440>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b01      	cmp	r3, #1
 8004088:	d007      	beq.n	800409a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2222      	movs	r2, #34	; 0x22
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2210      	movs	r2, #16
 80040b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	893a      	ldrh	r2, [r7, #8]
 80040ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4a5c      	ldr	r2, [pc, #368]	; (800424c <HAL_I2C_Master_Receive+0x228>)
 80040da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040dc:	8979      	ldrh	r1, [r7, #10]
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fa46 	bl	8004574 <I2C_MasterRequestRead>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e1b8      	b.n	8004464 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d113      	bne.n	8004122 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fa:	2300      	movs	r3, #0
 80040fc:	623b      	str	r3, [r7, #32]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	623b      	str	r3, [r7, #32]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	623b      	str	r3, [r7, #32]
 800410e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e18c      	b.n	800443c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	2b01      	cmp	r3, #1
 8004128:	d11b      	bne.n	8004162 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004138:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413a:	2300      	movs	r3, #0
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e16c      	b.n	800443c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004166:	2b02      	cmp	r3, #2
 8004168:	d11b      	bne.n	80041a2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004178:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418a:	2300      	movs	r3, #0
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	e14c      	b.n	800443c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041c8:	e138      	b.n	800443c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	f200 80f1 	bhi.w	80043b6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d123      	bne.n	8004224 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fbed 	bl	80049c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e139      	b.n	8004464 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004222:	e10b      	b.n	800443c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004228:	2b02      	cmp	r3, #2
 800422a:	d14e      	bne.n	80042ca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	2200      	movs	r2, #0
 8004234:	4906      	ldr	r1, [pc, #24]	; (8004250 <HAL_I2C_Master_Receive+0x22c>)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 fa6a 	bl	8004710 <I2C_WaitOnFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e10e      	b.n	8004464 <HAL_I2C_Master_Receive+0x440>
 8004246:	bf00      	nop
 8004248:	00100002 	.word	0x00100002
 800424c:	ffff0000 	.word	0xffff0000
 8004250:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004262:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042c8:	e0b8      	b.n	800443c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	2200      	movs	r2, #0
 80042d2:	4966      	ldr	r1, [pc, #408]	; (800446c <HAL_I2C_Master_Receive+0x448>)
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fa1b 	bl	8004710 <I2C_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0bf      	b.n	8004464 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	2200      	movs	r2, #0
 800432e:	494f      	ldr	r1, [pc, #316]	; (800446c <HAL_I2C_Master_Receive+0x448>)
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f9ed 	bl	8004710 <I2C_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e091      	b.n	8004464 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043b4:	e042      	b.n	800443c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fb00 	bl	80049c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e04c      	b.n	8004464 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b04      	cmp	r3, #4
 8004408:	d118      	bne.n	800443c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	2b00      	cmp	r3, #0
 8004442:	f47f aec2 	bne.w	80041ca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004462:	2302      	movs	r3, #2
  }
}
 8004464:	4618      	mov	r0, r3
 8004466:	3728      	adds	r7, #40	; 0x28
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	00010004 	.word	0x00010004

08004470 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	460b      	mov	r3, r1
 800447e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d006      	beq.n	800449a <I2C_MasterRequestWrite+0x2a>
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d003      	beq.n	800449a <I2C_MasterRequestWrite+0x2a>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004498:	d108      	bne.n	80044ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e00b      	b.n	80044c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	2b12      	cmp	r3, #18
 80044b2:	d107      	bne.n	80044c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f91d 	bl	8004710 <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00d      	beq.n	80044f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ea:	d103      	bne.n	80044f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e035      	b.n	8004564 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004500:	d108      	bne.n	8004514 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004502:	897b      	ldrh	r3, [r7, #10]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004510:	611a      	str	r2, [r3, #16]
 8004512:	e01b      	b.n	800454c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004514:	897b      	ldrh	r3, [r7, #10]
 8004516:	11db      	asrs	r3, r3, #7
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f003 0306 	and.w	r3, r3, #6
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f063 030f 	orn	r3, r3, #15
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	490e      	ldr	r1, [pc, #56]	; (800456c <I2C_MasterRequestWrite+0xfc>)
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f943 	bl	80047be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e010      	b.n	8004564 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004542:	897b      	ldrh	r3, [r7, #10]
 8004544:	b2da      	uxtb	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	4907      	ldr	r1, [pc, #28]	; (8004570 <I2C_MasterRequestWrite+0x100>)
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f933 	bl	80047be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	00010008 	.word	0x00010008
 8004570:	00010002 	.word	0x00010002

08004574 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	460b      	mov	r3, r1
 8004582:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004598:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b08      	cmp	r3, #8
 800459e:	d006      	beq.n	80045ae <I2C_MasterRequestRead+0x3a>
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d003      	beq.n	80045ae <I2C_MasterRequestRead+0x3a>
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045ac:	d108      	bne.n	80045c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e00b      	b.n	80045d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	2b11      	cmp	r3, #17
 80045c6:	d107      	bne.n	80045d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f893 	bl	8004710 <I2C_WaitOnFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00d      	beq.n	800460c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fe:	d103      	bne.n	8004608 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004606:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e079      	b.n	8004700 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004614:	d108      	bne.n	8004628 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004616:	897b      	ldrh	r3, [r7, #10]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	b2da      	uxtb	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	611a      	str	r2, [r3, #16]
 8004626:	e05f      	b.n	80046e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004628:	897b      	ldrh	r3, [r7, #10]
 800462a:	11db      	asrs	r3, r3, #7
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f003 0306 	and.w	r3, r3, #6
 8004632:	b2db      	uxtb	r3, r3
 8004634:	f063 030f 	orn	r3, r3, #15
 8004638:	b2da      	uxtb	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	4930      	ldr	r1, [pc, #192]	; (8004708 <I2C_MasterRequestRead+0x194>)
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f8b9 	bl	80047be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e054      	b.n	8004700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004656:	897b      	ldrh	r3, [r7, #10]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	4929      	ldr	r1, [pc, #164]	; (800470c <I2C_MasterRequestRead+0x198>)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f8a9 	bl	80047be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e044      	b.n	8004700 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800469a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f831 	bl	8004710 <I2C_WaitOnFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00d      	beq.n	80046d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c2:	d103      	bne.n	80046cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e017      	b.n	8004700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80046d0:	897b      	ldrh	r3, [r7, #10]
 80046d2:	11db      	asrs	r3, r3, #7
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	f003 0306 	and.w	r3, r3, #6
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f063 030e 	orn	r3, r3, #14
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	4907      	ldr	r1, [pc, #28]	; (800470c <I2C_MasterRequestRead+0x198>)
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f865 	bl	80047be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	00010008 	.word	0x00010008
 800470c:	00010002 	.word	0x00010002

08004710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004720:	e025      	b.n	800476e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d021      	beq.n	800476e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472a:	f7fe fe95 	bl	8003458 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <I2C_WaitOnFlagUntilTimeout+0x30>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d116      	bne.n	800476e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f043 0220 	orr.w	r2, r3, #32
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e023      	b.n	80047b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	0c1b      	lsrs	r3, r3, #16
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d10d      	bne.n	8004794 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	43da      	mvns	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4013      	ands	r3, r2
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	bf0c      	ite	eq
 800478a:	2301      	moveq	r3, #1
 800478c:	2300      	movne	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	e00c      	b.n	80047ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	43da      	mvns	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4013      	ands	r3, r2
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	bf0c      	ite	eq
 80047a6:	2301      	moveq	r3, #1
 80047a8:	2300      	movne	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	79fb      	ldrb	r3, [r7, #7]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d0b6      	beq.n	8004722 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
 80047ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047cc:	e051      	b.n	8004872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047dc:	d123      	bne.n	8004826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f043 0204 	orr.w	r2, r3, #4
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e046      	b.n	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482c:	d021      	beq.n	8004872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482e:	f7fe fe13 	bl	8003458 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	429a      	cmp	r2, r3
 800483c:	d302      	bcc.n	8004844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d116      	bne.n	8004872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f043 0220 	orr.w	r2, r3, #32
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e020      	b.n	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	d10c      	bne.n	8004896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	43da      	mvns	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4013      	ands	r3, r2
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	bf14      	ite	ne
 800488e:	2301      	movne	r3, #1
 8004890:	2300      	moveq	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	e00b      	b.n	80048ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	43da      	mvns	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4013      	ands	r3, r2
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d18d      	bne.n	80047ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048c8:	e02d      	b.n	8004926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f8ce 	bl	8004a6c <I2C_IsAcknowledgeFailed>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e02d      	b.n	8004936 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d021      	beq.n	8004926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e2:	f7fe fdb9 	bl	8003458 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d302      	bcc.n	80048f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d116      	bne.n	8004926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f043 0220 	orr.w	r2, r3, #32
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e007      	b.n	8004936 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004930:	2b80      	cmp	r3, #128	; 0x80
 8004932:	d1ca      	bne.n	80048ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800494a:	e02d      	b.n	80049a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f88d 	bl	8004a6c <I2C_IsAcknowledgeFailed>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e02d      	b.n	80049b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	d021      	beq.n	80049a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004964:	f7fe fd78 	bl	8003458 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	429a      	cmp	r2, r3
 8004972:	d302      	bcc.n	800497a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d116      	bne.n	80049a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	f043 0220 	orr.w	r2, r3, #32
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e007      	b.n	80049b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d1ca      	bne.n	800494c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049cc:	e042      	b.n	8004a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d119      	bne.n	8004a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0210 	mvn.w	r2, #16
 80049e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e029      	b.n	8004a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a10:	f7fe fd22 	bl	8003458 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d302      	bcc.n	8004a26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d116      	bne.n	8004a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	f043 0220 	orr.w	r2, r3, #32
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e007      	b.n	8004a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	d1b5      	bne.n	80049ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a82:	d11b      	bne.n	8004abc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	f043 0204 	orr.w	r2, r3, #4
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004ad2:	4b06      	ldr	r3, [pc, #24]	; (8004aec <HAL_PWR_EnableBkUpAccess+0x20>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004ad8:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_PWR_EnableBkUpAccess+0x24>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004ade:	687b      	ldr	r3, [r7, #4]
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	420e0020 	.word	0x420e0020
 8004af0:	40007000 	.word	0x40007000

08004af4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_PWR_DisableBkUpAccess+0x20>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <HAL_PWR_DisableBkUpAccess+0x24>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004b06:	687b      	ldr	r3, [r7, #4]
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	420e0020 	.word	0x420e0020
 8004b18:	40007000 	.word	0x40007000

08004b1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e267      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d075      	beq.n	8004c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b3a:	4b88      	ldr	r3, [pc, #544]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d00c      	beq.n	8004b60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b46:	4b85      	ldr	r3, [pc, #532]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d112      	bne.n	8004b78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b52:	4b82      	ldr	r3, [pc, #520]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b5e:	d10b      	bne.n	8004b78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b60:	4b7e      	ldr	r3, [pc, #504]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d05b      	beq.n	8004c24 <HAL_RCC_OscConfig+0x108>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d157      	bne.n	8004c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e242      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b80:	d106      	bne.n	8004b90 <HAL_RCC_OscConfig+0x74>
 8004b82:	4b76      	ldr	r3, [pc, #472]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a75      	ldr	r2, [pc, #468]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e01d      	b.n	8004bcc <HAL_RCC_OscConfig+0xb0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x98>
 8004b9a:	4b70      	ldr	r3, [pc, #448]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a6f      	ldr	r2, [pc, #444]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	4b6d      	ldr	r3, [pc, #436]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a6c      	ldr	r2, [pc, #432]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	e00b      	b.n	8004bcc <HAL_RCC_OscConfig+0xb0>
 8004bb4:	4b69      	ldr	r3, [pc, #420]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a68      	ldr	r2, [pc, #416]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	4b66      	ldr	r3, [pc, #408]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a65      	ldr	r2, [pc, #404]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d013      	beq.n	8004bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd4:	f7fe fc40 	bl	8003458 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bdc:	f7fe fc3c 	bl	8003458 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b64      	cmp	r3, #100	; 0x64
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e207      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bee:	4b5b      	ldr	r3, [pc, #364]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0xc0>
 8004bfa:	e014      	b.n	8004c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7fe fc2c 	bl	8003458 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c04:	f7fe fc28 	bl	8003458 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	; 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e1f3      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c16:	4b51      	ldr	r3, [pc, #324]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0xe8>
 8004c22:	e000      	b.n	8004c26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d063      	beq.n	8004cfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c32:	4b4a      	ldr	r3, [pc, #296]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 030c 	and.w	r3, r3, #12
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c3e:	4b47      	ldr	r3, [pc, #284]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d11c      	bne.n	8004c84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c4a:	4b44      	ldr	r3, [pc, #272]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d116      	bne.n	8004c84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c56:	4b41      	ldr	r3, [pc, #260]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d005      	beq.n	8004c6e <HAL_RCC_OscConfig+0x152>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d001      	beq.n	8004c6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e1c7      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6e:	4b3b      	ldr	r3, [pc, #236]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4937      	ldr	r1, [pc, #220]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c82:	e03a      	b.n	8004cfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d020      	beq.n	8004cce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c8c:	4b34      	ldr	r3, [pc, #208]	; (8004d60 <HAL_RCC_OscConfig+0x244>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c92:	f7fe fbe1 	bl	8003458 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c9a:	f7fe fbdd 	bl	8003458 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e1a8      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cac:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb8:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4925      	ldr	r1, [pc, #148]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]
 8004ccc:	e015      	b.n	8004cfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cce:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <HAL_RCC_OscConfig+0x244>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fe fbc0 	bl	8003458 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cdc:	f7fe fbbc 	bl	8003458 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e187      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cee:	4b1b      	ldr	r3, [pc, #108]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d036      	beq.n	8004d74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d016      	beq.n	8004d3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d0e:	4b15      	ldr	r3, [pc, #84]	; (8004d64 <HAL_RCC_OscConfig+0x248>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fe fba0 	bl	8003458 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d1c:	f7fe fb9c 	bl	8003458 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e167      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0f0      	beq.n	8004d1c <HAL_RCC_OscConfig+0x200>
 8004d3a:	e01b      	b.n	8004d74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <HAL_RCC_OscConfig+0x248>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d42:	f7fe fb89 	bl	8003458 <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d48:	e00e      	b.n	8004d68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d4a:	f7fe fb85 	bl	8003458 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d907      	bls.n	8004d68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e150      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	42470000 	.word	0x42470000
 8004d64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d68:	4b88      	ldr	r3, [pc, #544]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1ea      	bne.n	8004d4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8097 	beq.w	8004eb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d82:	2300      	movs	r3, #0
 8004d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d86:	4b81      	ldr	r3, [pc, #516]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10f      	bne.n	8004db2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	4b7d      	ldr	r3, [pc, #500]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	4a7c      	ldr	r2, [pc, #496]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da0:	6413      	str	r3, [r2, #64]	; 0x40
 8004da2:	4b7a      	ldr	r3, [pc, #488]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dae:	2301      	movs	r3, #1
 8004db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db2:	4b77      	ldr	r3, [pc, #476]	; (8004f90 <HAL_RCC_OscConfig+0x474>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d118      	bne.n	8004df0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dbe:	4b74      	ldr	r3, [pc, #464]	; (8004f90 <HAL_RCC_OscConfig+0x474>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a73      	ldr	r2, [pc, #460]	; (8004f90 <HAL_RCC_OscConfig+0x474>)
 8004dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dca:	f7fe fb45 	bl	8003458 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd2:	f7fe fb41 	bl	8003458 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e10c      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de4:	4b6a      	ldr	r3, [pc, #424]	; (8004f90 <HAL_RCC_OscConfig+0x474>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d106      	bne.n	8004e06 <HAL_RCC_OscConfig+0x2ea>
 8004df8:	4b64      	ldr	r3, [pc, #400]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfc:	4a63      	ldr	r2, [pc, #396]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	6713      	str	r3, [r2, #112]	; 0x70
 8004e04:	e01c      	b.n	8004e40 <HAL_RCC_OscConfig+0x324>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b05      	cmp	r3, #5
 8004e0c:	d10c      	bne.n	8004e28 <HAL_RCC_OscConfig+0x30c>
 8004e0e:	4b5f      	ldr	r3, [pc, #380]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e12:	4a5e      	ldr	r2, [pc, #376]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e14:	f043 0304 	orr.w	r3, r3, #4
 8004e18:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1a:	4b5c      	ldr	r3, [pc, #368]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	4a5b      	ldr	r2, [pc, #364]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	6713      	str	r3, [r2, #112]	; 0x70
 8004e26:	e00b      	b.n	8004e40 <HAL_RCC_OscConfig+0x324>
 8004e28:	4b58      	ldr	r3, [pc, #352]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2c:	4a57      	ldr	r2, [pc, #348]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
 8004e32:	6713      	str	r3, [r2, #112]	; 0x70
 8004e34:	4b55      	ldr	r3, [pc, #340]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e38:	4a54      	ldr	r2, [pc, #336]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e3a:	f023 0304 	bic.w	r3, r3, #4
 8004e3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d015      	beq.n	8004e74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e48:	f7fe fb06 	bl	8003458 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4e:	e00a      	b.n	8004e66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e50:	f7fe fb02 	bl	8003458 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e0cb      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e66:	4b49      	ldr	r3, [pc, #292]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0ee      	beq.n	8004e50 <HAL_RCC_OscConfig+0x334>
 8004e72:	e014      	b.n	8004e9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e74:	f7fe faf0 	bl	8003458 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e7a:	e00a      	b.n	8004e92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e7c:	f7fe faec 	bl	8003458 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e0b5      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e92:	4b3e      	ldr	r3, [pc, #248]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1ee      	bne.n	8004e7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d105      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea4:	4b39      	ldr	r3, [pc, #228]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	4a38      	ldr	r2, [pc, #224]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80a1 	beq.w	8004ffc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eba:	4b34      	ldr	r3, [pc, #208]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d05c      	beq.n	8004f80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d141      	bne.n	8004f52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ece:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <HAL_RCC_OscConfig+0x478>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed4:	f7fe fac0 	bl	8003458 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004edc:	f7fe fabc 	bl	8003458 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e087      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eee:	4b27      	ldr	r3, [pc, #156]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69da      	ldr	r2, [r3, #28]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	019b      	lsls	r3, r3, #6
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	3b01      	subs	r3, #1
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	061b      	lsls	r3, r3, #24
 8004f1e:	491b      	ldr	r1, [pc, #108]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f24:	4b1b      	ldr	r3, [pc, #108]	; (8004f94 <HAL_RCC_OscConfig+0x478>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2a:	f7fe fa95 	bl	8003458 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f32:	f7fe fa91 	bl	8003458 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e05c      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f44:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCC_OscConfig+0x416>
 8004f50:	e054      	b.n	8004ffc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <HAL_RCC_OscConfig+0x478>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f58:	f7fe fa7e 	bl	8003458 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f60:	f7fe fa7a 	bl	8003458 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e045      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f72:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x444>
 8004f7e:	e03d      	b.n	8004ffc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d107      	bne.n	8004f98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e038      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	40007000 	.word	0x40007000
 8004f94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f98:	4b1b      	ldr	r3, [pc, #108]	; (8005008 <HAL_RCC_OscConfig+0x4ec>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d028      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d121      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d11a      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fc8:	4013      	ands	r3, r2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d111      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d107      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40023800 	.word	0x40023800

0800500c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e0cc      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005020:	4b68      	ldr	r3, [pc, #416]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d90c      	bls.n	8005048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b65      	ldr	r3, [pc, #404]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005036:	4b63      	ldr	r3, [pc, #396]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d001      	beq.n	8005048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0b8      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d020      	beq.n	8005096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005060:	4b59      	ldr	r3, [pc, #356]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a58      	ldr	r2, [pc, #352]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800506a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005078:	4b53      	ldr	r3, [pc, #332]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4a52      	ldr	r2, [pc, #328]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005084:	4b50      	ldr	r3, [pc, #320]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	494d      	ldr	r1, [pc, #308]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d044      	beq.n	800512c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050aa:	4b47      	ldr	r3, [pc, #284]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d119      	bne.n	80050ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e07f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d003      	beq.n	80050ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d107      	bne.n	80050da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ca:	4b3f      	ldr	r3, [pc, #252]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e06f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050da:	4b3b      	ldr	r3, [pc, #236]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e067      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ea:	4b37      	ldr	r3, [pc, #220]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f023 0203 	bic.w	r2, r3, #3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	4934      	ldr	r1, [pc, #208]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050fc:	f7fe f9ac 	bl	8003458 <HAL_GetTick>
 8005100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005102:	e00a      	b.n	800511a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005104:	f7fe f9a8 	bl	8003458 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e04f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511a:	4b2b      	ldr	r3, [pc, #172]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 020c 	and.w	r2, r3, #12
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	429a      	cmp	r2, r3
 800512a:	d1eb      	bne.n	8005104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800512c:	4b25      	ldr	r3, [pc, #148]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d20c      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513a:	4b22      	ldr	r3, [pc, #136]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b20      	ldr	r3, [pc, #128]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e032      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d008      	beq.n	8005172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005160:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4916      	ldr	r1, [pc, #88]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800517e:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	490e      	ldr	r1, [pc, #56]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	4313      	orrs	r3, r2
 8005190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005192:	f000 f821 	bl	80051d8 <HAL_RCC_GetSysClockFreq>
 8005196:	4602      	mov	r2, r0
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	490a      	ldr	r1, [pc, #40]	; (80051cc <HAL_RCC_ClockConfig+0x1c0>)
 80051a4:	5ccb      	ldrb	r3, [r1, r3]
 80051a6:	fa22 f303 	lsr.w	r3, r2, r3
 80051aa:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 80051ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <HAL_RCC_ClockConfig+0x1c8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe f90c 	bl	80033d0 <HAL_InitTick>

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40023c00 	.word	0x40023c00
 80051c8:	40023800 	.word	0x40023800
 80051cc:	0800b350 	.word	0x0800b350
 80051d0:	20000004 	.word	0x20000004
 80051d4:	20000008 	.word	0x20000008

080051d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051dc:	b090      	sub	sp, #64	; 0x40
 80051de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	637b      	str	r3, [r7, #52]	; 0x34
 80051e4:	2300      	movs	r3, #0
 80051e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e8:	2300      	movs	r3, #0
 80051ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051f0:	4b59      	ldr	r3, [pc, #356]	; (8005358 <HAL_RCC_GetSysClockFreq+0x180>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 030c 	and.w	r3, r3, #12
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d00d      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x40>
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	f200 80a1 	bhi.w	8005344 <HAL_RCC_GetSysClockFreq+0x16c>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_RCC_GetSysClockFreq+0x34>
 8005206:	2b04      	cmp	r3, #4
 8005208:	d003      	beq.n	8005212 <HAL_RCC_GetSysClockFreq+0x3a>
 800520a:	e09b      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800520c:	4b53      	ldr	r3, [pc, #332]	; (800535c <HAL_RCC_GetSysClockFreq+0x184>)
 800520e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005210:	e09b      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005212:	4b53      	ldr	r3, [pc, #332]	; (8005360 <HAL_RCC_GetSysClockFreq+0x188>)
 8005214:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005216:	e098      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005218:	4b4f      	ldr	r3, [pc, #316]	; (8005358 <HAL_RCC_GetSysClockFreq+0x180>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005222:	4b4d      	ldr	r3, [pc, #308]	; (8005358 <HAL_RCC_GetSysClockFreq+0x180>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d028      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522e:	4b4a      	ldr	r3, [pc, #296]	; (8005358 <HAL_RCC_GetSysClockFreq+0x180>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	099b      	lsrs	r3, r3, #6
 8005234:	2200      	movs	r2, #0
 8005236:	623b      	str	r3, [r7, #32]
 8005238:	627a      	str	r2, [r7, #36]	; 0x24
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005240:	2100      	movs	r1, #0
 8005242:	4b47      	ldr	r3, [pc, #284]	; (8005360 <HAL_RCC_GetSysClockFreq+0x188>)
 8005244:	fb03 f201 	mul.w	r2, r3, r1
 8005248:	2300      	movs	r3, #0
 800524a:	fb00 f303 	mul.w	r3, r0, r3
 800524e:	4413      	add	r3, r2
 8005250:	4a43      	ldr	r2, [pc, #268]	; (8005360 <HAL_RCC_GetSysClockFreq+0x188>)
 8005252:	fba0 1202 	umull	r1, r2, r0, r2
 8005256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005258:	460a      	mov	r2, r1
 800525a:	62ba      	str	r2, [r7, #40]	; 0x28
 800525c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800525e:	4413      	add	r3, r2
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005264:	2200      	movs	r2, #0
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	61fa      	str	r2, [r7, #28]
 800526a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800526e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005272:	f7fb fc9b 	bl	8000bac <__aeabi_uldivmod>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4613      	mov	r3, r2
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800527e:	e053      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005280:	4b35      	ldr	r3, [pc, #212]	; (8005358 <HAL_RCC_GetSysClockFreq+0x180>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	099b      	lsrs	r3, r3, #6
 8005286:	2200      	movs	r2, #0
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	617a      	str	r2, [r7, #20]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005292:	f04f 0b00 	mov.w	fp, #0
 8005296:	4652      	mov	r2, sl
 8005298:	465b      	mov	r3, fp
 800529a:	f04f 0000 	mov.w	r0, #0
 800529e:	f04f 0100 	mov.w	r1, #0
 80052a2:	0159      	lsls	r1, r3, #5
 80052a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052a8:	0150      	lsls	r0, r2, #5
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	ebb2 080a 	subs.w	r8, r2, sl
 80052b2:	eb63 090b 	sbc.w	r9, r3, fp
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80052c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80052c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80052ca:	ebb2 0408 	subs.w	r4, r2, r8
 80052ce:	eb63 0509 	sbc.w	r5, r3, r9
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	00eb      	lsls	r3, r5, #3
 80052dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052e0:	00e2      	lsls	r2, r4, #3
 80052e2:	4614      	mov	r4, r2
 80052e4:	461d      	mov	r5, r3
 80052e6:	eb14 030a 	adds.w	r3, r4, sl
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	eb45 030b 	adc.w	r3, r5, fp
 80052f0:	607b      	str	r3, [r7, #4]
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052fe:	4629      	mov	r1, r5
 8005300:	028b      	lsls	r3, r1, #10
 8005302:	4621      	mov	r1, r4
 8005304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005308:	4621      	mov	r1, r4
 800530a:	028a      	lsls	r2, r1, #10
 800530c:	4610      	mov	r0, r2
 800530e:	4619      	mov	r1, r3
 8005310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005312:	2200      	movs	r2, #0
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	60fa      	str	r2, [r7, #12]
 8005318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800531c:	f7fb fc46 	bl	8000bac <__aeabi_uldivmod>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4613      	mov	r3, r2
 8005326:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <HAL_RCC_GetSysClockFreq+0x180>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	3301      	adds	r3, #1
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005338:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005340:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005342:	e002      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <HAL_RCC_GetSysClockFreq+0x184>)
 8005346:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800534c:	4618      	mov	r0, r3
 800534e:	3740      	adds	r7, #64	; 0x40
 8005350:	46bd      	mov	sp, r7
 8005352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005356:	bf00      	nop
 8005358:	40023800 	.word	0x40023800
 800535c:	00f42400 	.word	0x00f42400
 8005360:	017d7840 	.word	0x017d7840

08005364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005368:	4b03      	ldr	r3, [pc, #12]	; (8005378 <HAL_RCC_GetHCLKFreq+0x14>)
 800536a:	681b      	ldr	r3, [r3, #0]
}
 800536c:	4618      	mov	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20000004 	.word	0x20000004

0800537c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005380:	f7ff fff0 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0a9b      	lsrs	r3, r3, #10
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4903      	ldr	r1, [pc, #12]	; (80053a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40023800 	.word	0x40023800
 80053a0:	0800b360 	.word	0x0800b360

080053a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053a8:	f7ff ffdc 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	0b5b      	lsrs	r3, r3, #13
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4903      	ldr	r1, [pc, #12]	; (80053c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40023800 	.word	0x40023800
 80053c8:	0800b360 	.word	0x0800b360

080053cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e041      	b.n	8005462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fd fae0 	bl	80029b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3304      	adds	r3, #4
 8005408:	4619      	mov	r1, r3
 800540a:	4610      	mov	r0, r2
 800540c:	f000 fe6c 	bl	80060e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b082      	sub	sp, #8
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e041      	b.n	8005500 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d106      	bne.n	8005496 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f839 	bl	8005508 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4619      	mov	r1, r3
 80054a8:	4610      	mov	r0, r2
 80054aa:	f000 fe1d 	bl	80060e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d109      	bne.n	8005540 <HAL_TIM_PWM_Start+0x24>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	bf14      	ite	ne
 8005538:	2301      	movne	r3, #1
 800553a:	2300      	moveq	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e022      	b.n	8005586 <HAL_TIM_PWM_Start+0x6a>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b04      	cmp	r3, #4
 8005544:	d109      	bne.n	800555a <HAL_TIM_PWM_Start+0x3e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b01      	cmp	r3, #1
 8005550:	bf14      	ite	ne
 8005552:	2301      	movne	r3, #1
 8005554:	2300      	moveq	r3, #0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	e015      	b.n	8005586 <HAL_TIM_PWM_Start+0x6a>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b08      	cmp	r3, #8
 800555e:	d109      	bne.n	8005574 <HAL_TIM_PWM_Start+0x58>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b01      	cmp	r3, #1
 800556a:	bf14      	ite	ne
 800556c:	2301      	movne	r3, #1
 800556e:	2300      	moveq	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	e008      	b.n	8005586 <HAL_TIM_PWM_Start+0x6a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	bf14      	ite	ne
 8005580:	2301      	movne	r3, #1
 8005582:	2300      	moveq	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e07c      	b.n	8005688 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d104      	bne.n	800559e <HAL_TIM_PWM_Start+0x82>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800559c:	e013      	b.n	80055c6 <HAL_TIM_PWM_Start+0xaa>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_PWM_Start+0x92>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ac:	e00b      	b.n	80055c6 <HAL_TIM_PWM_Start+0xaa>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d104      	bne.n	80055be <HAL_TIM_PWM_Start+0xa2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055bc:	e003      	b.n	80055c6 <HAL_TIM_PWM_Start+0xaa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2201      	movs	r2, #1
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f001 f99e 	bl	8006910 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a2d      	ldr	r2, [pc, #180]	; (8005690 <HAL_TIM_PWM_Start+0x174>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_TIM_PWM_Start+0xcc>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a2c      	ldr	r2, [pc, #176]	; (8005694 <HAL_TIM_PWM_Start+0x178>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d101      	bne.n	80055ec <HAL_TIM_PWM_Start+0xd0>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <HAL_TIM_PWM_Start+0xd2>
 80055ec:	2300      	movs	r3, #0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005600:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a22      	ldr	r2, [pc, #136]	; (8005690 <HAL_TIM_PWM_Start+0x174>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d022      	beq.n	8005652 <HAL_TIM_PWM_Start+0x136>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005614:	d01d      	beq.n	8005652 <HAL_TIM_PWM_Start+0x136>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a1f      	ldr	r2, [pc, #124]	; (8005698 <HAL_TIM_PWM_Start+0x17c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d018      	beq.n	8005652 <HAL_TIM_PWM_Start+0x136>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1d      	ldr	r2, [pc, #116]	; (800569c <HAL_TIM_PWM_Start+0x180>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d013      	beq.n	8005652 <HAL_TIM_PWM_Start+0x136>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a1c      	ldr	r2, [pc, #112]	; (80056a0 <HAL_TIM_PWM_Start+0x184>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00e      	beq.n	8005652 <HAL_TIM_PWM_Start+0x136>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a16      	ldr	r2, [pc, #88]	; (8005694 <HAL_TIM_PWM_Start+0x178>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d009      	beq.n	8005652 <HAL_TIM_PWM_Start+0x136>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a18      	ldr	r2, [pc, #96]	; (80056a4 <HAL_TIM_PWM_Start+0x188>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d004      	beq.n	8005652 <HAL_TIM_PWM_Start+0x136>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a16      	ldr	r2, [pc, #88]	; (80056a8 <HAL_TIM_PWM_Start+0x18c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d111      	bne.n	8005676 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b06      	cmp	r3, #6
 8005662:	d010      	beq.n	8005686 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005674:	e007      	b.n	8005686 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0201 	orr.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40010000 	.word	0x40010000
 8005694:	40010400 	.word	0x40010400
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40000c00 	.word	0x40000c00
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40001800 	.word	0x40001800

080056ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e041      	b.n	8005742 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fd fa80 	bl	8002bd8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f000 fcfc 	bl	80060e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b086      	sub	sp, #24
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e097      	b.n	800588e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fd f996 	bl	8002aa4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800578e:	f023 0307 	bic.w	r3, r3, #7
 8005792:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3304      	adds	r3, #4
 800579c:	4619      	mov	r1, r3
 800579e:	4610      	mov	r0, r2
 80057a0:	f000 fca2 	bl	80060e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057cc:	f023 0303 	bic.w	r3, r3, #3
 80057d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	4313      	orrs	r3, r2
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80057ea:	f023 030c 	bic.w	r3, r3, #12
 80057ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	021b      	lsls	r3, r3, #8
 8005806:	4313      	orrs	r3, r2
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	011a      	lsls	r2, r3, #4
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	031b      	lsls	r3, r3, #12
 800581a:	4313      	orrs	r3, r2
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005828:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005830:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	4313      	orrs	r3, r2
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058ae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058b6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058be:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d110      	bne.n	80058e8 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d102      	bne.n	80058d2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058cc:	7b7b      	ldrb	r3, [r7, #13]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d001      	beq.n	80058d6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e069      	b.n	80059aa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2202      	movs	r2, #2
 80058da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e6:	e031      	b.n	800594c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d110      	bne.n	8005910 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058ee:	7bbb      	ldrb	r3, [r7, #14]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d102      	bne.n	80058fa <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058f4:	7b3b      	ldrb	r3, [r7, #12]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d001      	beq.n	80058fe <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e055      	b.n	80059aa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2202      	movs	r2, #2
 800590a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800590e:	e01d      	b.n	800594c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d108      	bne.n	8005928 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005916:	7bbb      	ldrb	r3, [r7, #14]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d105      	bne.n	8005928 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800591c:	7b7b      	ldrb	r3, [r7, #13]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d102      	bne.n	8005928 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005922:	7b3b      	ldrb	r3, [r7, #12]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d001      	beq.n	800592c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e03e      	b.n	80059aa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_TIM_Encoder_Start+0xc4>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b04      	cmp	r3, #4
 8005956:	d008      	beq.n	800596a <HAL_TIM_Encoder_Start+0xd4>
 8005958:	e00f      	b.n	800597a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2201      	movs	r2, #1
 8005960:	2100      	movs	r1, #0
 8005962:	4618      	mov	r0, r3
 8005964:	f000 ffd4 	bl	8006910 <TIM_CCxChannelCmd>
      break;
 8005968:	e016      	b.n	8005998 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2201      	movs	r2, #1
 8005970:	2104      	movs	r1, #4
 8005972:	4618      	mov	r0, r3
 8005974:	f000 ffcc 	bl	8006910 <TIM_CCxChannelCmd>
      break;
 8005978:	e00e      	b.n	8005998 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2201      	movs	r2, #1
 8005980:	2100      	movs	r1, #0
 8005982:	4618      	mov	r0, r3
 8005984:	f000 ffc4 	bl	8006910 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2201      	movs	r2, #1
 800598e:	2104      	movs	r1, #4
 8005990:	4618      	mov	r0, r3
 8005992:	f000 ffbd 	bl	8006910 <TIM_CCxChannelCmd>
      break;
 8005996:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b082      	sub	sp, #8
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d122      	bne.n	8005a0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d11b      	bne.n	8005a0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f06f 0202 	mvn.w	r2, #2
 80059de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	f003 0303 	and.w	r3, r3, #3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7fb fedf 	bl	80017b8 <HAL_TIM_IC_CaptureCallback>
 80059fa:	e005      	b.n	8005a08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fb55 	bl	80060ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fb5c 	bl	80060c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d122      	bne.n	8005a62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d11b      	bne.n	8005a62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f06f 0204 	mvn.w	r2, #4
 8005a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7fb feb5 	bl	80017b8 <HAL_TIM_IC_CaptureCallback>
 8005a4e:	e005      	b.n	8005a5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fb2b 	bl	80060ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fb32 	bl	80060c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d122      	bne.n	8005ab6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d11b      	bne.n	8005ab6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f06f 0208 	mvn.w	r2, #8
 8005a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2204      	movs	r2, #4
 8005a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	f003 0303 	and.w	r3, r3, #3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7fb fe8b 	bl	80017b8 <HAL_TIM_IC_CaptureCallback>
 8005aa2:	e005      	b.n	8005ab0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fb01 	bl	80060ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fb08 	bl	80060c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2b10      	cmp	r3, #16
 8005ac2:	d122      	bne.n	8005b0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f003 0310 	and.w	r3, r3, #16
 8005ace:	2b10      	cmp	r3, #16
 8005ad0:	d11b      	bne.n	8005b0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f06f 0210 	mvn.w	r2, #16
 8005ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2208      	movs	r2, #8
 8005ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7fb fe61 	bl	80017b8 <HAL_TIM_IC_CaptureCallback>
 8005af6:	e005      	b.n	8005b04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fad7 	bl	80060ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fade 	bl	80060c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d10e      	bne.n	8005b36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d107      	bne.n	8005b36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f06f 0201 	mvn.w	r2, #1
 8005b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fab1 	bl	8006098 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b40:	2b80      	cmp	r3, #128	; 0x80
 8005b42:	d10e      	bne.n	8005b62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4e:	2b80      	cmp	r3, #128	; 0x80
 8005b50:	d107      	bne.n	8005b62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 ffd5 	bl	8006b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6c:	2b40      	cmp	r3, #64	; 0x40
 8005b6e:	d10e      	bne.n	8005b8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7a:	2b40      	cmp	r3, #64	; 0x40
 8005b7c:	d107      	bne.n	8005b8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 faa3 	bl	80060d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b20      	cmp	r3, #32
 8005b9a:	d10e      	bne.n	8005bba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d107      	bne.n	8005bba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f06f 0220 	mvn.w	r2, #32
 8005bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 ff9f 	bl	8006af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bba:	bf00      	nop
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b086      	sub	sp, #24
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e088      	b.n	8005cf2 <HAL_TIM_IC_ConfigChannel+0x130>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d11b      	bne.n	8005c26 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6819      	ldr	r1, [r3, #0]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f000 fcc3 	bl	8006588 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699a      	ldr	r2, [r3, #24]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 020c 	bic.w	r2, r2, #12
 8005c10:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6999      	ldr	r1, [r3, #24]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	619a      	str	r2, [r3, #24]
 8005c24:	e060      	b.n	8005ce8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d11c      	bne.n	8005c66 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6819      	ldr	r1, [r3, #0]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f000 fd47 	bl	80066ce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c4e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6999      	ldr	r1, [r3, #24]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	021a      	lsls	r2, r3, #8
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	619a      	str	r2, [r3, #24]
 8005c64:	e040      	b.n	8005ce8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d11b      	bne.n	8005ca4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6818      	ldr	r0, [r3, #0]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	6819      	ldr	r1, [r3, #0]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f000 fd94 	bl	80067a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69da      	ldr	r2, [r3, #28]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 020c 	bic.w	r2, r2, #12
 8005c8e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	69d9      	ldr	r1, [r3, #28]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	61da      	str	r2, [r3, #28]
 8005ca2:	e021      	b.n	8005ce8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b0c      	cmp	r3, #12
 8005ca8:	d11c      	bne.n	8005ce4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	6819      	ldr	r1, [r3, #0]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f000 fdb1 	bl	8006820 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ccc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69d9      	ldr	r1, [r3, #28]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	021a      	lsls	r2, r3, #8
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	61da      	str	r2, [r3, #28]
 8005ce2:	e001      	b.n	8005ce8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
	...

08005cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e0ae      	b.n	8005e78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b0c      	cmp	r3, #12
 8005d26:	f200 809f 	bhi.w	8005e68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d2a:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005d65 	.word	0x08005d65
 8005d34:	08005e69 	.word	0x08005e69
 8005d38:	08005e69 	.word	0x08005e69
 8005d3c:	08005e69 	.word	0x08005e69
 8005d40:	08005da5 	.word	0x08005da5
 8005d44:	08005e69 	.word	0x08005e69
 8005d48:	08005e69 	.word	0x08005e69
 8005d4c:	08005e69 	.word	0x08005e69
 8005d50:	08005de7 	.word	0x08005de7
 8005d54:	08005e69 	.word	0x08005e69
 8005d58:	08005e69 	.word	0x08005e69
 8005d5c:	08005e69 	.word	0x08005e69
 8005d60:	08005e27 	.word	0x08005e27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68b9      	ldr	r1, [r7, #8]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fa5c 	bl	8006228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0208 	orr.w	r2, r2, #8
 8005d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0204 	bic.w	r2, r2, #4
 8005d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6999      	ldr	r1, [r3, #24]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	691a      	ldr	r2, [r3, #16]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	619a      	str	r2, [r3, #24]
      break;
 8005da2:	e064      	b.n	8005e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 faac 	bl	8006308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6999      	ldr	r1, [r3, #24]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	021a      	lsls	r2, r3, #8
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	619a      	str	r2, [r3, #24]
      break;
 8005de4:	e043      	b.n	8005e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68b9      	ldr	r1, [r7, #8]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 fb01 	bl	80063f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69da      	ldr	r2, [r3, #28]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0208 	orr.w	r2, r2, #8
 8005e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69da      	ldr	r2, [r3, #28]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0204 	bic.w	r2, r2, #4
 8005e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69d9      	ldr	r1, [r3, #28]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	61da      	str	r2, [r3, #28]
      break;
 8005e24:	e023      	b.n	8005e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 fb55 	bl	80064dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69da      	ldr	r2, [r3, #28]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69d9      	ldr	r1, [r3, #28]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	021a      	lsls	r2, r3, #8
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	61da      	str	r2, [r3, #28]
      break;
 8005e66:	e002      	b.n	8005e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_TIM_ConfigClockSource+0x1c>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e0b4      	b.n	8006006 <HAL_TIM_ConfigClockSource+0x186>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ec2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed4:	d03e      	beq.n	8005f54 <HAL_TIM_ConfigClockSource+0xd4>
 8005ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eda:	f200 8087 	bhi.w	8005fec <HAL_TIM_ConfigClockSource+0x16c>
 8005ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee2:	f000 8086 	beq.w	8005ff2 <HAL_TIM_ConfigClockSource+0x172>
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eea:	d87f      	bhi.n	8005fec <HAL_TIM_ConfigClockSource+0x16c>
 8005eec:	2b70      	cmp	r3, #112	; 0x70
 8005eee:	d01a      	beq.n	8005f26 <HAL_TIM_ConfigClockSource+0xa6>
 8005ef0:	2b70      	cmp	r3, #112	; 0x70
 8005ef2:	d87b      	bhi.n	8005fec <HAL_TIM_ConfigClockSource+0x16c>
 8005ef4:	2b60      	cmp	r3, #96	; 0x60
 8005ef6:	d050      	beq.n	8005f9a <HAL_TIM_ConfigClockSource+0x11a>
 8005ef8:	2b60      	cmp	r3, #96	; 0x60
 8005efa:	d877      	bhi.n	8005fec <HAL_TIM_ConfigClockSource+0x16c>
 8005efc:	2b50      	cmp	r3, #80	; 0x50
 8005efe:	d03c      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0xfa>
 8005f00:	2b50      	cmp	r3, #80	; 0x50
 8005f02:	d873      	bhi.n	8005fec <HAL_TIM_ConfigClockSource+0x16c>
 8005f04:	2b40      	cmp	r3, #64	; 0x40
 8005f06:	d058      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0x13a>
 8005f08:	2b40      	cmp	r3, #64	; 0x40
 8005f0a:	d86f      	bhi.n	8005fec <HAL_TIM_ConfigClockSource+0x16c>
 8005f0c:	2b30      	cmp	r3, #48	; 0x30
 8005f0e:	d064      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x15a>
 8005f10:	2b30      	cmp	r3, #48	; 0x30
 8005f12:	d86b      	bhi.n	8005fec <HAL_TIM_ConfigClockSource+0x16c>
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d060      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x15a>
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d867      	bhi.n	8005fec <HAL_TIM_ConfigClockSource+0x16c>
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d05c      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x15a>
 8005f20:	2b10      	cmp	r3, #16
 8005f22:	d05a      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x15a>
 8005f24:	e062      	b.n	8005fec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	6899      	ldr	r1, [r3, #8]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f000 fccb 	bl	80068d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	609a      	str	r2, [r3, #8]
      break;
 8005f52:	e04f      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	6899      	ldr	r1, [r3, #8]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f000 fcb4 	bl	80068d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f76:	609a      	str	r2, [r3, #8]
      break;
 8005f78:	e03c      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	6859      	ldr	r1, [r3, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	461a      	mov	r2, r3
 8005f88:	f000 fb72 	bl	8006670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2150      	movs	r1, #80	; 0x50
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 fc81 	bl	800689a <TIM_ITRx_SetConfig>
      break;
 8005f98:	e02c      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6859      	ldr	r1, [r3, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f000 fbce 	bl	8006748 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2160      	movs	r1, #96	; 0x60
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fc71 	bl	800689a <TIM_ITRx_SetConfig>
      break;
 8005fb8:	e01c      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6859      	ldr	r1, [r3, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f000 fb52 	bl	8006670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2140      	movs	r1, #64	; 0x40
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fc61 	bl	800689a <TIM_ITRx_SetConfig>
      break;
 8005fd8:	e00c      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	f000 fc58 	bl	800689a <TIM_ITRx_SetConfig>
      break;
 8005fea:	e003      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff0:	e000      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ff2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006004:	7bfb      	ldrb	r3, [r7, #15]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b0c      	cmp	r3, #12
 8006022:	d831      	bhi.n	8006088 <HAL_TIM_ReadCapturedValue+0x78>
 8006024:	a201      	add	r2, pc, #4	; (adr r2, 800602c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602a:	bf00      	nop
 800602c:	08006061 	.word	0x08006061
 8006030:	08006089 	.word	0x08006089
 8006034:	08006089 	.word	0x08006089
 8006038:	08006089 	.word	0x08006089
 800603c:	0800606b 	.word	0x0800606b
 8006040:	08006089 	.word	0x08006089
 8006044:	08006089 	.word	0x08006089
 8006048:	08006089 	.word	0x08006089
 800604c:	08006075 	.word	0x08006075
 8006050:	08006089 	.word	0x08006089
 8006054:	08006089 	.word	0x08006089
 8006058:	08006089 	.word	0x08006089
 800605c:	0800607f 	.word	0x0800607f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006066:	60fb      	str	r3, [r7, #12]

      break;
 8006068:	e00f      	b.n	800608a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	60fb      	str	r3, [r7, #12]

      break;
 8006072:	e00a      	b.n	800608a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607a:	60fb      	str	r3, [r7, #12]

      break;
 800607c:	e005      	b.n	800608a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006084:	60fb      	str	r3, [r7, #12]

      break;
 8006086:	e000      	b.n	800608a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006088:	bf00      	nop
  }

  return tmpreg;
 800608a:	68fb      	ldr	r3, [r7, #12]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a40      	ldr	r2, [pc, #256]	; (80061fc <TIM_Base_SetConfig+0x114>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d013      	beq.n	8006128 <TIM_Base_SetConfig+0x40>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006106:	d00f      	beq.n	8006128 <TIM_Base_SetConfig+0x40>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a3d      	ldr	r2, [pc, #244]	; (8006200 <TIM_Base_SetConfig+0x118>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00b      	beq.n	8006128 <TIM_Base_SetConfig+0x40>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a3c      	ldr	r2, [pc, #240]	; (8006204 <TIM_Base_SetConfig+0x11c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d007      	beq.n	8006128 <TIM_Base_SetConfig+0x40>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a3b      	ldr	r2, [pc, #236]	; (8006208 <TIM_Base_SetConfig+0x120>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_Base_SetConfig+0x40>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a3a      	ldr	r2, [pc, #232]	; (800620c <TIM_Base_SetConfig+0x124>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d108      	bne.n	800613a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a2f      	ldr	r2, [pc, #188]	; (80061fc <TIM_Base_SetConfig+0x114>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d02b      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006148:	d027      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a2c      	ldr	r2, [pc, #176]	; (8006200 <TIM_Base_SetConfig+0x118>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d023      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a2b      	ldr	r2, [pc, #172]	; (8006204 <TIM_Base_SetConfig+0x11c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d01f      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a2a      	ldr	r2, [pc, #168]	; (8006208 <TIM_Base_SetConfig+0x120>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d01b      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a29      	ldr	r2, [pc, #164]	; (800620c <TIM_Base_SetConfig+0x124>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d017      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a28      	ldr	r2, [pc, #160]	; (8006210 <TIM_Base_SetConfig+0x128>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d013      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a27      	ldr	r2, [pc, #156]	; (8006214 <TIM_Base_SetConfig+0x12c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00f      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a26      	ldr	r2, [pc, #152]	; (8006218 <TIM_Base_SetConfig+0x130>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00b      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a25      	ldr	r2, [pc, #148]	; (800621c <TIM_Base_SetConfig+0x134>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d007      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a24      	ldr	r2, [pc, #144]	; (8006220 <TIM_Base_SetConfig+0x138>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d003      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a23      	ldr	r2, [pc, #140]	; (8006224 <TIM_Base_SetConfig+0x13c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d108      	bne.n	80061ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a0a      	ldr	r2, [pc, #40]	; (80061fc <TIM_Base_SetConfig+0x114>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_Base_SetConfig+0xf8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a0c      	ldr	r2, [pc, #48]	; (800620c <TIM_Base_SetConfig+0x124>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d103      	bne.n	80061e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	615a      	str	r2, [r3, #20]
}
 80061ee:	bf00      	nop
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40010000 	.word	0x40010000
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40000c00 	.word	0x40000c00
 800620c:	40010400 	.word	0x40010400
 8006210:	40014000 	.word	0x40014000
 8006214:	40014400 	.word	0x40014400
 8006218:	40014800 	.word	0x40014800
 800621c:	40001800 	.word	0x40001800
 8006220:	40001c00 	.word	0x40001c00
 8006224:	40002000 	.word	0x40002000

08006228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f023 0201 	bic.w	r2, r3, #1
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0303 	bic.w	r3, r3, #3
 800625e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f023 0302 	bic.w	r3, r3, #2
 8006270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	4313      	orrs	r3, r2
 800627a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a20      	ldr	r2, [pc, #128]	; (8006300 <TIM_OC1_SetConfig+0xd8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d003      	beq.n	800628c <TIM_OC1_SetConfig+0x64>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a1f      	ldr	r2, [pc, #124]	; (8006304 <TIM_OC1_SetConfig+0xdc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d10c      	bne.n	80062a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f023 0308 	bic.w	r3, r3, #8
 8006292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f023 0304 	bic.w	r3, r3, #4
 80062a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a15      	ldr	r2, [pc, #84]	; (8006300 <TIM_OC1_SetConfig+0xd8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d003      	beq.n	80062b6 <TIM_OC1_SetConfig+0x8e>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a14      	ldr	r2, [pc, #80]	; (8006304 <TIM_OC1_SetConfig+0xdc>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d111      	bne.n	80062da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	621a      	str	r2, [r3, #32]
}
 80062f4:	bf00      	nop
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	40010000 	.word	0x40010000
 8006304:	40010400 	.word	0x40010400

08006308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f023 0210 	bic.w	r2, r3, #16
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800633e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f023 0320 	bic.w	r3, r3, #32
 8006352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a22      	ldr	r2, [pc, #136]	; (80063ec <TIM_OC2_SetConfig+0xe4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <TIM_OC2_SetConfig+0x68>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a21      	ldr	r2, [pc, #132]	; (80063f0 <TIM_OC2_SetConfig+0xe8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d10d      	bne.n	800638c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800638a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a17      	ldr	r2, [pc, #92]	; (80063ec <TIM_OC2_SetConfig+0xe4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d003      	beq.n	800639c <TIM_OC2_SetConfig+0x94>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a16      	ldr	r2, [pc, #88]	; (80063f0 <TIM_OC2_SetConfig+0xe8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d113      	bne.n	80063c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40010400 	.word	0x40010400

080063f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0303 	bic.w	r3, r3, #3
 800642a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800643c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	021b      	lsls	r3, r3, #8
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a21      	ldr	r2, [pc, #132]	; (80064d4 <TIM_OC3_SetConfig+0xe0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d003      	beq.n	800645a <TIM_OC3_SetConfig+0x66>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a20      	ldr	r2, [pc, #128]	; (80064d8 <TIM_OC3_SetConfig+0xe4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d10d      	bne.n	8006476 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	021b      	lsls	r3, r3, #8
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	4313      	orrs	r3, r2
 800646c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a16      	ldr	r2, [pc, #88]	; (80064d4 <TIM_OC3_SetConfig+0xe0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d003      	beq.n	8006486 <TIM_OC3_SetConfig+0x92>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a15      	ldr	r2, [pc, #84]	; (80064d8 <TIM_OC3_SetConfig+0xe4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d113      	bne.n	80064ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800648c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	4313      	orrs	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	621a      	str	r2, [r3, #32]
}
 80064c8:	bf00      	nop
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	40010000 	.word	0x40010000
 80064d8:	40010400 	.word	0x40010400

080064dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	021b      	lsls	r3, r3, #8
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4313      	orrs	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	031b      	lsls	r3, r3, #12
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a12      	ldr	r2, [pc, #72]	; (8006580 <TIM_OC4_SetConfig+0xa4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <TIM_OC4_SetConfig+0x68>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a11      	ldr	r2, [pc, #68]	; (8006584 <TIM_OC4_SetConfig+0xa8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d109      	bne.n	8006558 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800654a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	019b      	lsls	r3, r3, #6
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4313      	orrs	r3, r2
 8006556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	621a      	str	r2, [r3, #32]
}
 8006572:	bf00      	nop
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40010000 	.word	0x40010000
 8006584:	40010400 	.word	0x40010400

08006588 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	f023 0201 	bic.w	r2, r3, #1
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4a28      	ldr	r2, [pc, #160]	; (8006654 <TIM_TI1_SetConfig+0xcc>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d01b      	beq.n	80065ee <TIM_TI1_SetConfig+0x66>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065bc:	d017      	beq.n	80065ee <TIM_TI1_SetConfig+0x66>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4a25      	ldr	r2, [pc, #148]	; (8006658 <TIM_TI1_SetConfig+0xd0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d013      	beq.n	80065ee <TIM_TI1_SetConfig+0x66>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4a24      	ldr	r2, [pc, #144]	; (800665c <TIM_TI1_SetConfig+0xd4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00f      	beq.n	80065ee <TIM_TI1_SetConfig+0x66>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4a23      	ldr	r2, [pc, #140]	; (8006660 <TIM_TI1_SetConfig+0xd8>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00b      	beq.n	80065ee <TIM_TI1_SetConfig+0x66>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4a22      	ldr	r2, [pc, #136]	; (8006664 <TIM_TI1_SetConfig+0xdc>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d007      	beq.n	80065ee <TIM_TI1_SetConfig+0x66>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4a21      	ldr	r2, [pc, #132]	; (8006668 <TIM_TI1_SetConfig+0xe0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d003      	beq.n	80065ee <TIM_TI1_SetConfig+0x66>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4a20      	ldr	r2, [pc, #128]	; (800666c <TIM_TI1_SetConfig+0xe4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d101      	bne.n	80065f2 <TIM_TI1_SetConfig+0x6a>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e000      	b.n	80065f4 <TIM_TI1_SetConfig+0x6c>
 80065f2:	2300      	movs	r3, #0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d008      	beq.n	800660a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	e003      	b.n	8006612 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f043 0301 	orr.w	r3, r3, #1
 8006610:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006618:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	b2db      	uxtb	r3, r3
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f023 030a 	bic.w	r3, r3, #10
 800662c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f003 030a 	and.w	r3, r3, #10
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	621a      	str	r2, [r3, #32]
}
 8006646:	bf00      	nop
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40010000 	.word	0x40010000
 8006658:	40000400 	.word	0x40000400
 800665c:	40000800 	.word	0x40000800
 8006660:	40000c00 	.word	0x40000c00
 8006664:	40010400 	.word	0x40010400
 8006668:	40014000 	.word	0x40014000
 800666c:	40001800 	.word	0x40001800

08006670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	f023 0201 	bic.w	r2, r3, #1
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800669a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f023 030a 	bic.w	r3, r3, #10
 80066ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	621a      	str	r2, [r3, #32]
}
 80066c2:	bf00      	nop
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b087      	sub	sp, #28
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	607a      	str	r2, [r7, #4]
 80066da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	f023 0210 	bic.w	r2, r3, #16
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800670c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	031b      	lsls	r3, r3, #12
 8006712:	b29b      	uxth	r3, r3
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006720:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	621a      	str	r2, [r3, #32]
}
 800673c:	bf00      	nop
 800673e:	371c      	adds	r7, #28
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	f023 0210 	bic.w	r2, r3, #16
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006772:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	031b      	lsls	r3, r3, #12
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006784:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	621a      	str	r2, [r3, #32]
}
 800679c:	bf00      	nop
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f023 0303 	bic.w	r3, r3, #3
 80067d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80067f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	021b      	lsls	r3, r3, #8
 80067fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	621a      	str	r2, [r3, #32]
}
 8006814:	bf00      	nop
 8006816:	371c      	adds	r7, #28
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800684c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	4313      	orrs	r3, r2
 8006856:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800685e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	031b      	lsls	r3, r3, #12
 8006864:	b29b      	uxth	r3, r3
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006872:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	031b      	lsls	r3, r3, #12
 8006878:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	4313      	orrs	r3, r2
 8006880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	621a      	str	r2, [r3, #32]
}
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800689a:	b480      	push	{r7}
 800689c:	b085      	sub	sp, #20
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f043 0307 	orr.w	r3, r3, #7
 80068bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	609a      	str	r2, [r3, #8]
}
 80068c4:	bf00      	nop
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	021a      	lsls	r2, r3, #8
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	609a      	str	r2, [r3, #8]
}
 8006904:	bf00      	nop
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	2201      	movs	r2, #1
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a1a      	ldr	r2, [r3, #32]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	43db      	mvns	r3, r3
 8006932:	401a      	ands	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a1a      	ldr	r2, [r3, #32]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f003 031f 	and.w	r3, r3, #31
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	fa01 f303 	lsl.w	r3, r1, r3
 8006948:	431a      	orrs	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
	...

0800695c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006970:	2302      	movs	r3, #2
 8006972:	e05a      	b.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a21      	ldr	r2, [pc, #132]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d022      	beq.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c0:	d01d      	beq.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1d      	ldr	r2, [pc, #116]	; (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d018      	beq.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1b      	ldr	r2, [pc, #108]	; (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d013      	beq.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a1a      	ldr	r2, [pc, #104]	; (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d00e      	beq.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d009      	beq.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a17      	ldr	r2, [pc, #92]	; (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d004      	beq.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a15      	ldr	r2, [pc, #84]	; (8006a50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d10c      	bne.n	8006a18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	40010000 	.word	0x40010000
 8006a3c:	40000400 	.word	0x40000400
 8006a40:	40000800 	.word	0x40000800
 8006a44:	40000c00 	.word	0x40000c00
 8006a48:	40010400 	.word	0x40010400
 8006a4c:	40014000 	.word	0x40014000
 8006a50:	40001800 	.word	0x40001800

08006a54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e03d      	b.n	8006aec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e03f      	b.n	8006bb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fc f8d0 	bl	8002cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2224      	movs	r2, #36	; 0x24
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fddf 	bl	8007728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	691a      	ldr	r2, [r3, #16]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	695a      	ldr	r2, [r3, #20]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b08a      	sub	sp, #40	; 0x28
 8006bbe:	af02      	add	r7, sp, #8
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	603b      	str	r3, [r7, #0]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	d17c      	bne.n	8006cd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <HAL_UART_Transmit+0x2c>
 8006be0:	88fb      	ldrh	r3, [r7, #6]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e075      	b.n	8006cd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_UART_Transmit+0x3e>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e06e      	b.n	8006cd6 <HAL_UART_Transmit+0x11c>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2221      	movs	r2, #33	; 0x21
 8006c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c0e:	f7fc fc23 	bl	8003458 <HAL_GetTick>
 8006c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	88fa      	ldrh	r2, [r7, #6]
 8006c18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	88fa      	ldrh	r2, [r7, #6]
 8006c1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c28:	d108      	bne.n	8006c3c <HAL_UART_Transmit+0x82>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d104      	bne.n	8006c3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	e003      	b.n	8006c44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c40:	2300      	movs	r3, #0
 8006c42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006c4c:	e02a      	b.n	8006ca4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2200      	movs	r2, #0
 8006c56:	2180      	movs	r1, #128	; 0x80
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 fb1f 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e036      	b.n	8006cd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10b      	bne.n	8006c86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	3302      	adds	r3, #2
 8006c82:	61bb      	str	r3, [r7, #24]
 8006c84:	e007      	b.n	8006c96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	781a      	ldrb	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	3301      	adds	r3, #1
 8006c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1cf      	bne.n	8006c4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2140      	movs	r1, #64	; 0x40
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 faef 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e006      	b.n	8006cd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e000      	b.n	8006cd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006cd4:	2302      	movs	r3, #2
  }
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3720      	adds	r7, #32
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b20      	cmp	r3, #32
 8006cf6:	d11d      	bne.n	8006d34 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <HAL_UART_Receive_IT+0x26>
 8006cfe:	88fb      	ldrh	r3, [r7, #6]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e016      	b.n	8006d36 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_UART_Receive_IT+0x38>
 8006d12:	2302      	movs	r3, #2
 8006d14:	e00f      	b.n	8006d36 <HAL_UART_Receive_IT+0x58>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d24:	88fb      	ldrh	r3, [r7, #6]
 8006d26:	461a      	mov	r2, r3
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 fb24 	bl	8007378 <UART_Start_Receive_IT>
 8006d30:	4603      	mov	r3, r0
 8006d32:	e000      	b.n	8006d36 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006d34:	2302      	movs	r3, #2
  }
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b0ba      	sub	sp, #232	; 0xe8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10f      	bne.n	8006da6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d009      	beq.n	8006da6 <HAL_UART_IRQHandler+0x66>
 8006d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fc07 	bl	80075b2 <UART_Receive_IT>
      return;
 8006da4:	e256      	b.n	8007254 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 80de 	beq.w	8006f6c <HAL_UART_IRQHandler+0x22c>
 8006db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d106      	bne.n	8006dca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 80d1 	beq.w	8006f6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00b      	beq.n	8006dee <HAL_UART_IRQHandler+0xae>
 8006dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d005      	beq.n	8006dee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	f043 0201 	orr.w	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df2:	f003 0304 	and.w	r3, r3, #4
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00b      	beq.n	8006e12 <HAL_UART_IRQHandler+0xd2>
 8006dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d005      	beq.n	8006e12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	f043 0202 	orr.w	r2, r3, #2
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00b      	beq.n	8006e36 <HAL_UART_IRQHandler+0xf6>
 8006e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d005      	beq.n	8006e36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2e:	f043 0204 	orr.w	r2, r3, #4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e3a:	f003 0308 	and.w	r3, r3, #8
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d011      	beq.n	8006e66 <HAL_UART_IRQHandler+0x126>
 8006e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e46:	f003 0320 	and.w	r3, r3, #32
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d105      	bne.n	8006e5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d005      	beq.n	8006e66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	f043 0208 	orr.w	r2, r3, #8
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 81ed 	beq.w	800724a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e74:	f003 0320 	and.w	r3, r3, #32
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <HAL_UART_IRQHandler+0x14e>
 8006e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e80:	f003 0320 	and.w	r3, r3, #32
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fb92 	bl	80075b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e98:	2b40      	cmp	r3, #64	; 0x40
 8006e9a:	bf0c      	ite	eq
 8006e9c:	2301      	moveq	r3, #1
 8006e9e:	2300      	movne	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	f003 0308 	and.w	r3, r3, #8
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d103      	bne.n	8006eba <HAL_UART_IRQHandler+0x17a>
 8006eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d04f      	beq.n	8006f5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa9a 	bl	80073f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d141      	bne.n	8006f52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3314      	adds	r3, #20
 8006ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3314      	adds	r3, #20
 8006ef6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006efa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006efe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1d9      	bne.n	8006ece <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d013      	beq.n	8006f4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f26:	4a7d      	ldr	r2, [pc, #500]	; (800711c <HAL_UART_IRQHandler+0x3dc>)
 8006f28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fc fc43 	bl	80037ba <HAL_DMA_Abort_IT>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d016      	beq.n	8006f68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f44:	4610      	mov	r0, r2
 8006f46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f48:	e00e      	b.n	8006f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f990 	bl	8007270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f50:	e00a      	b.n	8006f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f98c 	bl	8007270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f58:	e006      	b.n	8006f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f988 	bl	8007270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006f66:	e170      	b.n	800724a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f68:	bf00      	nop
    return;
 8006f6a:	e16e      	b.n	800724a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	f040 814a 	bne.w	800720a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7a:	f003 0310 	and.w	r3, r3, #16
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 8143 	beq.w	800720a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f88:	f003 0310 	and.w	r3, r3, #16
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 813c 	beq.w	800720a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f92:	2300      	movs	r3, #0
 8006f94:	60bb      	str	r3, [r7, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60bb      	str	r3, [r7, #8]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	60bb      	str	r3, [r7, #8]
 8006fa6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb2:	2b40      	cmp	r3, #64	; 0x40
 8006fb4:	f040 80b4 	bne.w	8007120 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 8140 	beq.w	800724e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	f080 8139 	bcs.w	800724e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fe2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fee:	f000 8088 	beq.w	8007102 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	330c      	adds	r3, #12
 8006ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007008:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800700c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	330c      	adds	r3, #12
 800701a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800701e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800702a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007036:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1d9      	bne.n	8006ff2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3314      	adds	r3, #20
 8007044:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800704e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007050:	f023 0301 	bic.w	r3, r3, #1
 8007054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3314      	adds	r3, #20
 800705e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007062:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007066:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800706a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e1      	bne.n	800703e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3314      	adds	r3, #20
 8007080:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800708a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800708c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3314      	adds	r3, #20
 800709a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800709e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e3      	bne.n	800707a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2220      	movs	r2, #32
 80070b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	330c      	adds	r3, #12
 80070c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ca:	e853 3f00 	ldrex	r3, [r3]
 80070ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070d2:	f023 0310 	bic.w	r3, r3, #16
 80070d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	330c      	adds	r3, #12
 80070e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80070e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80070e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070ec:	e841 2300 	strex	r3, r2, [r1]
 80070f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e3      	bne.n	80070c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fc faec 	bl	80036da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800710a:	b29b      	uxth	r3, r3
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	b29b      	uxth	r3, r3
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f8b6 	bl	8007284 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007118:	e099      	b.n	800724e <HAL_UART_IRQHandler+0x50e>
 800711a:	bf00      	nop
 800711c:	080074bb 	.word	0x080074bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007128:	b29b      	uxth	r3, r3
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007134:	b29b      	uxth	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 808b 	beq.w	8007252 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800713c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 8086 	beq.w	8007252 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	330c      	adds	r3, #12
 800714c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	e853 3f00 	ldrex	r3, [r3]
 8007154:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007158:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800715c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	330c      	adds	r3, #12
 8007166:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800716a:	647a      	str	r2, [r7, #68]	; 0x44
 800716c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e3      	bne.n	8007146 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3314      	adds	r3, #20
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	e853 3f00 	ldrex	r3, [r3]
 800718c:	623b      	str	r3, [r7, #32]
   return(result);
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	f023 0301 	bic.w	r3, r3, #1
 8007194:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3314      	adds	r3, #20
 800719e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071a2:	633a      	str	r2, [r7, #48]	; 0x30
 80071a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e3      	bne.n	800717e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2220      	movs	r2, #32
 80071ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	330c      	adds	r3, #12
 80071ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0310 	bic.w	r3, r3, #16
 80071da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	330c      	adds	r3, #12
 80071e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80071e8:	61fa      	str	r2, [r7, #28]
 80071ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	69b9      	ldr	r1, [r7, #24]
 80071ee:	69fa      	ldr	r2, [r7, #28]
 80071f0:	e841 2300 	strex	r3, r2, [r1]
 80071f4:	617b      	str	r3, [r7, #20]
   return(result);
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e3      	bne.n	80071c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f83e 	bl	8007284 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007208:	e023      	b.n	8007252 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800720a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007212:	2b00      	cmp	r3, #0
 8007214:	d009      	beq.n	800722a <HAL_UART_IRQHandler+0x4ea>
 8007216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800721a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f95d 	bl	80074e2 <UART_Transmit_IT>
    return;
 8007228:	e014      	b.n	8007254 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800722a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00e      	beq.n	8007254 <HAL_UART_IRQHandler+0x514>
 8007236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	d008      	beq.n	8007254 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f99d 	bl	8007582 <UART_EndTransmit_IT>
    return;
 8007248:	e004      	b.n	8007254 <HAL_UART_IRQHandler+0x514>
    return;
 800724a:	bf00      	nop
 800724c:	e002      	b.n	8007254 <HAL_UART_IRQHandler+0x514>
      return;
 800724e:	bf00      	nop
 8007250:	e000      	b.n	8007254 <HAL_UART_IRQHandler+0x514>
      return;
 8007252:	bf00      	nop
  }
}
 8007254:	37e8      	adds	r7, #232	; 0xe8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop

0800725c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b090      	sub	sp, #64	; 0x40
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	4613      	mov	r3, r2
 80072aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ac:	e050      	b.n	8007350 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b4:	d04c      	beq.n	8007350 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80072b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d007      	beq.n	80072cc <UART_WaitOnFlagUntilTimeout+0x30>
 80072bc:	f7fc f8cc 	bl	8003458 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d241      	bcs.n	8007350 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	330c      	adds	r3, #12
 80072d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	330c      	adds	r3, #12
 80072ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072ec:	637a      	str	r2, [r7, #52]	; 0x34
 80072ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e5      	bne.n	80072cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3314      	adds	r3, #20
 8007306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	613b      	str	r3, [r7, #16]
   return(result);
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	f023 0301 	bic.w	r3, r3, #1
 8007316:	63bb      	str	r3, [r7, #56]	; 0x38
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3314      	adds	r3, #20
 800731e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007320:	623a      	str	r2, [r7, #32]
 8007322:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	69f9      	ldr	r1, [r7, #28]
 8007326:	6a3a      	ldr	r2, [r7, #32]
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	61bb      	str	r3, [r7, #24]
   return(result);
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e5      	bne.n	8007300 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2220      	movs	r2, #32
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2220      	movs	r2, #32
 8007340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e00f      	b.n	8007370 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	4013      	ands	r3, r2
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	429a      	cmp	r2, r3
 800735e:	bf0c      	ite	eq
 8007360:	2301      	moveq	r3, #1
 8007362:	2300      	movne	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	461a      	mov	r2, r3
 8007368:	79fb      	ldrb	r3, [r7, #7]
 800736a:	429a      	cmp	r2, r3
 800736c:	d09f      	beq.n	80072ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3740      	adds	r7, #64	; 0x40
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	4613      	mov	r3, r2
 8007384:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	88fa      	ldrh	r2, [r7, #6]
 8007390:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	88fa      	ldrh	r2, [r7, #6]
 8007396:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2222      	movs	r2, #34	; 0x22
 80073a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d007      	beq.n	80073c6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68da      	ldr	r2, [r3, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	695a      	ldr	r2, [r3, #20]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f042 0201 	orr.w	r2, r2, #1
 80073d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f042 0220 	orr.w	r2, r2, #32
 80073e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b095      	sub	sp, #84	; 0x54
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	330c      	adds	r3, #12
 8007402:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	330c      	adds	r3, #12
 800741a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800741c:	643a      	str	r2, [r7, #64]	; 0x40
 800741e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007420:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007424:	e841 2300 	strex	r3, r2, [r1]
 8007428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1e5      	bne.n	80073fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3314      	adds	r3, #20
 8007436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	e853 3f00 	ldrex	r3, [r3]
 800743e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	f023 0301 	bic.w	r3, r3, #1
 8007446:	64bb      	str	r3, [r7, #72]	; 0x48
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3314      	adds	r3, #20
 800744e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007450:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007458:	e841 2300 	strex	r3, r2, [r1]
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e5      	bne.n	8007430 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007468:	2b01      	cmp	r3, #1
 800746a:	d119      	bne.n	80074a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	330c      	adds	r3, #12
 8007472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	e853 3f00 	ldrex	r3, [r3]
 800747a:	60bb      	str	r3, [r7, #8]
   return(result);
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f023 0310 	bic.w	r3, r3, #16
 8007482:	647b      	str	r3, [r7, #68]	; 0x44
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	330c      	adds	r3, #12
 800748a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800748c:	61ba      	str	r2, [r7, #24]
 800748e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007490:	6979      	ldr	r1, [r7, #20]
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	e841 2300 	strex	r3, r2, [r1]
 8007498:	613b      	str	r3, [r7, #16]
   return(result);
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e5      	bne.n	800746c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80074ae:	bf00      	nop
 80074b0:	3754      	adds	r7, #84	; 0x54
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f7ff fecb 	bl	8007270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074da:	bf00      	nop
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b085      	sub	sp, #20
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b21      	cmp	r3, #33	; 0x21
 80074f4:	d13e      	bne.n	8007574 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074fe:	d114      	bne.n	800752a <UART_Transmit_IT+0x48>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d110      	bne.n	800752a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800751c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	1c9a      	adds	r2, r3, #2
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	621a      	str	r2, [r3, #32]
 8007528:	e008      	b.n	800753c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	1c59      	adds	r1, r3, #1
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6211      	str	r1, [r2, #32]
 8007534:	781a      	ldrb	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007540:	b29b      	uxth	r3, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	b29b      	uxth	r3, r3
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	4619      	mov	r1, r3
 800754a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10f      	bne.n	8007570 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800755e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800756e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	e000      	b.n	8007576 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007574:	2302      	movs	r3, #2
  }
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007598:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2220      	movs	r2, #32
 800759e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7ff fe5a 	bl	800725c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b08c      	sub	sp, #48	; 0x30
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b22      	cmp	r3, #34	; 0x22
 80075c4:	f040 80ab 	bne.w	800771e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d0:	d117      	bne.n	8007602 <UART_Receive_IT+0x50>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d113      	bne.n	8007602 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fa:	1c9a      	adds	r2, r3, #2
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	629a      	str	r2, [r3, #40]	; 0x28
 8007600:	e026      	b.n	8007650 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007606:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007608:	2300      	movs	r3, #0
 800760a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007614:	d007      	beq.n	8007626 <UART_Receive_IT+0x74>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10a      	bne.n	8007634 <UART_Receive_IT+0x82>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	b2da      	uxtb	r2, r3
 800762e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007630:	701a      	strb	r2, [r3, #0]
 8007632:	e008      	b.n	8007646 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007640:	b2da      	uxtb	r2, r3
 8007642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007644:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007654:	b29b      	uxth	r3, r3
 8007656:	3b01      	subs	r3, #1
 8007658:	b29b      	uxth	r3, r3
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	4619      	mov	r1, r3
 800765e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007660:	2b00      	cmp	r3, #0
 8007662:	d15a      	bne.n	800771a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0220 	bic.w	r2, r2, #32
 8007672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007682:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695a      	ldr	r2, [r3, #20]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 0201 	bic.w	r2, r2, #1
 8007692:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2220      	movs	r2, #32
 8007698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d135      	bne.n	8007710 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	330c      	adds	r3, #12
 80076b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	613b      	str	r3, [r7, #16]
   return(result);
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f023 0310 	bic.w	r3, r3, #16
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	330c      	adds	r3, #12
 80076c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ca:	623a      	str	r2, [r7, #32]
 80076cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	69f9      	ldr	r1, [r7, #28]
 80076d0:	6a3a      	ldr	r2, [r7, #32]
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e5      	bne.n	80076aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0310 	and.w	r3, r3, #16
 80076e8:	2b10      	cmp	r3, #16
 80076ea:	d10a      	bne.n	8007702 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7ff fdbb 	bl	8007284 <HAL_UARTEx_RxEventCallback>
 800770e:	e002      	b.n	8007716 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7fa f83d 	bl	8001790 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	e002      	b.n	8007720 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	e000      	b.n	8007720 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800771e:	2302      	movs	r3, #2
  }
}
 8007720:	4618      	mov	r0, r3
 8007722:	3730      	adds	r7, #48	; 0x30
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800772c:	b0c0      	sub	sp, #256	; 0x100
 800772e:	af00      	add	r7, sp, #0
 8007730:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007744:	68d9      	ldr	r1, [r3, #12]
 8007746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	ea40 0301 	orr.w	r3, r0, r1
 8007750:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007756:	689a      	ldr	r2, [r3, #8]
 8007758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	431a      	orrs	r2, r3
 8007760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	431a      	orrs	r2, r3
 8007768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	4313      	orrs	r3, r2
 8007770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007780:	f021 010c 	bic.w	r1, r1, #12
 8007784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800778e:	430b      	orrs	r3, r1
 8007790:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800779e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a2:	6999      	ldr	r1, [r3, #24]
 80077a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	ea40 0301 	orr.w	r3, r0, r1
 80077ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	4b8f      	ldr	r3, [pc, #572]	; (80079f4 <UART_SetConfig+0x2cc>)
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d005      	beq.n	80077c8 <UART_SetConfig+0xa0>
 80077bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	4b8d      	ldr	r3, [pc, #564]	; (80079f8 <UART_SetConfig+0x2d0>)
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d104      	bne.n	80077d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077c8:	f7fd fdec 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 80077cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80077d0:	e003      	b.n	80077da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077d2:	f7fd fdd3 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 80077d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077e4:	f040 810c 	bne.w	8007a00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077ec:	2200      	movs	r2, #0
 80077ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80077f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80077fa:	4622      	mov	r2, r4
 80077fc:	462b      	mov	r3, r5
 80077fe:	1891      	adds	r1, r2, r2
 8007800:	65b9      	str	r1, [r7, #88]	; 0x58
 8007802:	415b      	adcs	r3, r3
 8007804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007806:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800780a:	4621      	mov	r1, r4
 800780c:	eb12 0801 	adds.w	r8, r2, r1
 8007810:	4629      	mov	r1, r5
 8007812:	eb43 0901 	adc.w	r9, r3, r1
 8007816:	f04f 0200 	mov.w	r2, #0
 800781a:	f04f 0300 	mov.w	r3, #0
 800781e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800782a:	4690      	mov	r8, r2
 800782c:	4699      	mov	r9, r3
 800782e:	4623      	mov	r3, r4
 8007830:	eb18 0303 	adds.w	r3, r8, r3
 8007834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007838:	462b      	mov	r3, r5
 800783a:	eb49 0303 	adc.w	r3, r9, r3
 800783e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800784e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007856:	460b      	mov	r3, r1
 8007858:	18db      	adds	r3, r3, r3
 800785a:	653b      	str	r3, [r7, #80]	; 0x50
 800785c:	4613      	mov	r3, r2
 800785e:	eb42 0303 	adc.w	r3, r2, r3
 8007862:	657b      	str	r3, [r7, #84]	; 0x54
 8007864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007868:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800786c:	f7f9 f99e 	bl	8000bac <__aeabi_uldivmod>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4b61      	ldr	r3, [pc, #388]	; (80079fc <UART_SetConfig+0x2d4>)
 8007876:	fba3 2302 	umull	r2, r3, r3, r2
 800787a:	095b      	lsrs	r3, r3, #5
 800787c:	011c      	lsls	r4, r3, #4
 800787e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007882:	2200      	movs	r2, #0
 8007884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007888:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800788c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007890:	4642      	mov	r2, r8
 8007892:	464b      	mov	r3, r9
 8007894:	1891      	adds	r1, r2, r2
 8007896:	64b9      	str	r1, [r7, #72]	; 0x48
 8007898:	415b      	adcs	r3, r3
 800789a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800789c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80078a0:	4641      	mov	r1, r8
 80078a2:	eb12 0a01 	adds.w	sl, r2, r1
 80078a6:	4649      	mov	r1, r9
 80078a8:	eb43 0b01 	adc.w	fp, r3, r1
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	f04f 0300 	mov.w	r3, #0
 80078b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078c0:	4692      	mov	sl, r2
 80078c2:	469b      	mov	fp, r3
 80078c4:	4643      	mov	r3, r8
 80078c6:	eb1a 0303 	adds.w	r3, sl, r3
 80078ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078ce:	464b      	mov	r3, r9
 80078d0:	eb4b 0303 	adc.w	r3, fp, r3
 80078d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80078e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80078ec:	460b      	mov	r3, r1
 80078ee:	18db      	adds	r3, r3, r3
 80078f0:	643b      	str	r3, [r7, #64]	; 0x40
 80078f2:	4613      	mov	r3, r2
 80078f4:	eb42 0303 	adc.w	r3, r2, r3
 80078f8:	647b      	str	r3, [r7, #68]	; 0x44
 80078fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80078fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007902:	f7f9 f953 	bl	8000bac <__aeabi_uldivmod>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	4611      	mov	r1, r2
 800790c:	4b3b      	ldr	r3, [pc, #236]	; (80079fc <UART_SetConfig+0x2d4>)
 800790e:	fba3 2301 	umull	r2, r3, r3, r1
 8007912:	095b      	lsrs	r3, r3, #5
 8007914:	2264      	movs	r2, #100	; 0x64
 8007916:	fb02 f303 	mul.w	r3, r2, r3
 800791a:	1acb      	subs	r3, r1, r3
 800791c:	00db      	lsls	r3, r3, #3
 800791e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007922:	4b36      	ldr	r3, [pc, #216]	; (80079fc <UART_SetConfig+0x2d4>)
 8007924:	fba3 2302 	umull	r2, r3, r3, r2
 8007928:	095b      	lsrs	r3, r3, #5
 800792a:	005b      	lsls	r3, r3, #1
 800792c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007930:	441c      	add	r4, r3
 8007932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007936:	2200      	movs	r2, #0
 8007938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800793c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007940:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007944:	4642      	mov	r2, r8
 8007946:	464b      	mov	r3, r9
 8007948:	1891      	adds	r1, r2, r2
 800794a:	63b9      	str	r1, [r7, #56]	; 0x38
 800794c:	415b      	adcs	r3, r3
 800794e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007954:	4641      	mov	r1, r8
 8007956:	1851      	adds	r1, r2, r1
 8007958:	6339      	str	r1, [r7, #48]	; 0x30
 800795a:	4649      	mov	r1, r9
 800795c:	414b      	adcs	r3, r1
 800795e:	637b      	str	r3, [r7, #52]	; 0x34
 8007960:	f04f 0200 	mov.w	r2, #0
 8007964:	f04f 0300 	mov.w	r3, #0
 8007968:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800796c:	4659      	mov	r1, fp
 800796e:	00cb      	lsls	r3, r1, #3
 8007970:	4651      	mov	r1, sl
 8007972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007976:	4651      	mov	r1, sl
 8007978:	00ca      	lsls	r2, r1, #3
 800797a:	4610      	mov	r0, r2
 800797c:	4619      	mov	r1, r3
 800797e:	4603      	mov	r3, r0
 8007980:	4642      	mov	r2, r8
 8007982:	189b      	adds	r3, r3, r2
 8007984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007988:	464b      	mov	r3, r9
 800798a:	460a      	mov	r2, r1
 800798c:	eb42 0303 	adc.w	r3, r2, r3
 8007990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80079a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80079a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80079a8:	460b      	mov	r3, r1
 80079aa:	18db      	adds	r3, r3, r3
 80079ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80079ae:	4613      	mov	r3, r2
 80079b0:	eb42 0303 	adc.w	r3, r2, r3
 80079b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80079be:	f7f9 f8f5 	bl	8000bac <__aeabi_uldivmod>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	4b0d      	ldr	r3, [pc, #52]	; (80079fc <UART_SetConfig+0x2d4>)
 80079c8:	fba3 1302 	umull	r1, r3, r3, r2
 80079cc:	095b      	lsrs	r3, r3, #5
 80079ce:	2164      	movs	r1, #100	; 0x64
 80079d0:	fb01 f303 	mul.w	r3, r1, r3
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	3332      	adds	r3, #50	; 0x32
 80079da:	4a08      	ldr	r2, [pc, #32]	; (80079fc <UART_SetConfig+0x2d4>)
 80079dc:	fba2 2303 	umull	r2, r3, r2, r3
 80079e0:	095b      	lsrs	r3, r3, #5
 80079e2:	f003 0207 	and.w	r2, r3, #7
 80079e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4422      	add	r2, r4
 80079ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079f0:	e106      	b.n	8007c00 <UART_SetConfig+0x4d8>
 80079f2:	bf00      	nop
 80079f4:	40011000 	.word	0x40011000
 80079f8:	40011400 	.word	0x40011400
 80079fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a04:	2200      	movs	r2, #0
 8007a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007a0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007a12:	4642      	mov	r2, r8
 8007a14:	464b      	mov	r3, r9
 8007a16:	1891      	adds	r1, r2, r2
 8007a18:	6239      	str	r1, [r7, #32]
 8007a1a:	415b      	adcs	r3, r3
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a22:	4641      	mov	r1, r8
 8007a24:	1854      	adds	r4, r2, r1
 8007a26:	4649      	mov	r1, r9
 8007a28:	eb43 0501 	adc.w	r5, r3, r1
 8007a2c:	f04f 0200 	mov.w	r2, #0
 8007a30:	f04f 0300 	mov.w	r3, #0
 8007a34:	00eb      	lsls	r3, r5, #3
 8007a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a3a:	00e2      	lsls	r2, r4, #3
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	461d      	mov	r5, r3
 8007a40:	4643      	mov	r3, r8
 8007a42:	18e3      	adds	r3, r4, r3
 8007a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a48:	464b      	mov	r3, r9
 8007a4a:	eb45 0303 	adc.w	r3, r5, r3
 8007a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a62:	f04f 0200 	mov.w	r2, #0
 8007a66:	f04f 0300 	mov.w	r3, #0
 8007a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a6e:	4629      	mov	r1, r5
 8007a70:	008b      	lsls	r3, r1, #2
 8007a72:	4621      	mov	r1, r4
 8007a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a78:	4621      	mov	r1, r4
 8007a7a:	008a      	lsls	r2, r1, #2
 8007a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007a80:	f7f9 f894 	bl	8000bac <__aeabi_uldivmod>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4b60      	ldr	r3, [pc, #384]	; (8007c0c <UART_SetConfig+0x4e4>)
 8007a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a8e:	095b      	lsrs	r3, r3, #5
 8007a90:	011c      	lsls	r4, r3, #4
 8007a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007aa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007aa4:	4642      	mov	r2, r8
 8007aa6:	464b      	mov	r3, r9
 8007aa8:	1891      	adds	r1, r2, r2
 8007aaa:	61b9      	str	r1, [r7, #24]
 8007aac:	415b      	adcs	r3, r3
 8007aae:	61fb      	str	r3, [r7, #28]
 8007ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ab4:	4641      	mov	r1, r8
 8007ab6:	1851      	adds	r1, r2, r1
 8007ab8:	6139      	str	r1, [r7, #16]
 8007aba:	4649      	mov	r1, r9
 8007abc:	414b      	adcs	r3, r1
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	f04f 0200 	mov.w	r2, #0
 8007ac4:	f04f 0300 	mov.w	r3, #0
 8007ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007acc:	4659      	mov	r1, fp
 8007ace:	00cb      	lsls	r3, r1, #3
 8007ad0:	4651      	mov	r1, sl
 8007ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ad6:	4651      	mov	r1, sl
 8007ad8:	00ca      	lsls	r2, r1, #3
 8007ada:	4610      	mov	r0, r2
 8007adc:	4619      	mov	r1, r3
 8007ade:	4603      	mov	r3, r0
 8007ae0:	4642      	mov	r2, r8
 8007ae2:	189b      	adds	r3, r3, r2
 8007ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ae8:	464b      	mov	r3, r9
 8007aea:	460a      	mov	r2, r1
 8007aec:	eb42 0303 	adc.w	r3, r2, r3
 8007af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007afe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007b00:	f04f 0200 	mov.w	r2, #0
 8007b04:	f04f 0300 	mov.w	r3, #0
 8007b08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007b0c:	4649      	mov	r1, r9
 8007b0e:	008b      	lsls	r3, r1, #2
 8007b10:	4641      	mov	r1, r8
 8007b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b16:	4641      	mov	r1, r8
 8007b18:	008a      	lsls	r2, r1, #2
 8007b1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007b1e:	f7f9 f845 	bl	8000bac <__aeabi_uldivmod>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4611      	mov	r1, r2
 8007b28:	4b38      	ldr	r3, [pc, #224]	; (8007c0c <UART_SetConfig+0x4e4>)
 8007b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b2e:	095b      	lsrs	r3, r3, #5
 8007b30:	2264      	movs	r2, #100	; 0x64
 8007b32:	fb02 f303 	mul.w	r3, r2, r3
 8007b36:	1acb      	subs	r3, r1, r3
 8007b38:	011b      	lsls	r3, r3, #4
 8007b3a:	3332      	adds	r3, #50	; 0x32
 8007b3c:	4a33      	ldr	r2, [pc, #204]	; (8007c0c <UART_SetConfig+0x4e4>)
 8007b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b42:	095b      	lsrs	r3, r3, #5
 8007b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b48:	441c      	add	r4, r3
 8007b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b4e:	2200      	movs	r2, #0
 8007b50:	673b      	str	r3, [r7, #112]	; 0x70
 8007b52:	677a      	str	r2, [r7, #116]	; 0x74
 8007b54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007b58:	4642      	mov	r2, r8
 8007b5a:	464b      	mov	r3, r9
 8007b5c:	1891      	adds	r1, r2, r2
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	415b      	adcs	r3, r3
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b68:	4641      	mov	r1, r8
 8007b6a:	1851      	adds	r1, r2, r1
 8007b6c:	6039      	str	r1, [r7, #0]
 8007b6e:	4649      	mov	r1, r9
 8007b70:	414b      	adcs	r3, r1
 8007b72:	607b      	str	r3, [r7, #4]
 8007b74:	f04f 0200 	mov.w	r2, #0
 8007b78:	f04f 0300 	mov.w	r3, #0
 8007b7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b80:	4659      	mov	r1, fp
 8007b82:	00cb      	lsls	r3, r1, #3
 8007b84:	4651      	mov	r1, sl
 8007b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b8a:	4651      	mov	r1, sl
 8007b8c:	00ca      	lsls	r2, r1, #3
 8007b8e:	4610      	mov	r0, r2
 8007b90:	4619      	mov	r1, r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	4642      	mov	r2, r8
 8007b96:	189b      	adds	r3, r3, r2
 8007b98:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b9a:	464b      	mov	r3, r9
 8007b9c:	460a      	mov	r2, r1
 8007b9e:	eb42 0303 	adc.w	r3, r2, r3
 8007ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	663b      	str	r3, [r7, #96]	; 0x60
 8007bae:	667a      	str	r2, [r7, #100]	; 0x64
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	008b      	lsls	r3, r1, #2
 8007bc0:	4641      	mov	r1, r8
 8007bc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bc6:	4641      	mov	r1, r8
 8007bc8:	008a      	lsls	r2, r1, #2
 8007bca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007bce:	f7f8 ffed 	bl	8000bac <__aeabi_uldivmod>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4b0d      	ldr	r3, [pc, #52]	; (8007c0c <UART_SetConfig+0x4e4>)
 8007bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8007bdc:	095b      	lsrs	r3, r3, #5
 8007bde:	2164      	movs	r1, #100	; 0x64
 8007be0:	fb01 f303 	mul.w	r3, r1, r3
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	3332      	adds	r3, #50	; 0x32
 8007bea:	4a08      	ldr	r2, [pc, #32]	; (8007c0c <UART_SetConfig+0x4e4>)
 8007bec:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf0:	095b      	lsrs	r3, r3, #5
 8007bf2:	f003 020f 	and.w	r2, r3, #15
 8007bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4422      	add	r2, r4
 8007bfe:	609a      	str	r2, [r3, #8]
}
 8007c00:	bf00      	nop
 8007c02:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007c06:	46bd      	mov	sp, r7
 8007c08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c0c:	51eb851f 	.word	0x51eb851f

08007c10 <__NVIC_SetPriority>:
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	6039      	str	r1, [r7, #0]
 8007c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	db0a      	blt.n	8007c3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	490c      	ldr	r1, [pc, #48]	; (8007c5c <__NVIC_SetPriority+0x4c>)
 8007c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c2e:	0112      	lsls	r2, r2, #4
 8007c30:	b2d2      	uxtb	r2, r2
 8007c32:	440b      	add	r3, r1
 8007c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c38:	e00a      	b.n	8007c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	4908      	ldr	r1, [pc, #32]	; (8007c60 <__NVIC_SetPriority+0x50>)
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	f003 030f 	and.w	r3, r3, #15
 8007c46:	3b04      	subs	r3, #4
 8007c48:	0112      	lsls	r2, r2, #4
 8007c4a:	b2d2      	uxtb	r2, r2
 8007c4c:	440b      	add	r3, r1
 8007c4e:	761a      	strb	r2, [r3, #24]
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	e000e100 	.word	0xe000e100
 8007c60:	e000ed00 	.word	0xe000ed00

08007c64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007c68:	2100      	movs	r1, #0
 8007c6a:	f06f 0004 	mvn.w	r0, #4
 8007c6e:	f7ff ffcf 	bl	8007c10 <__NVIC_SetPriority>
#endif
}
 8007c72:	bf00      	nop
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c7e:	f3ef 8305 	mrs	r3, IPSR
 8007c82:	603b      	str	r3, [r7, #0]
  return(result);
 8007c84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007c8a:	f06f 0305 	mvn.w	r3, #5
 8007c8e:	607b      	str	r3, [r7, #4]
 8007c90:	e00c      	b.n	8007cac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c92:	4b0a      	ldr	r3, [pc, #40]	; (8007cbc <osKernelInitialize+0x44>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d105      	bne.n	8007ca6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c9a:	4b08      	ldr	r3, [pc, #32]	; (8007cbc <osKernelInitialize+0x44>)
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	607b      	str	r3, [r7, #4]
 8007ca4:	e002      	b.n	8007cac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8007caa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007cac:	687b      	ldr	r3, [r7, #4]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	2000070c 	.word	0x2000070c

08007cc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cc6:	f3ef 8305 	mrs	r3, IPSR
 8007cca:	603b      	str	r3, [r7, #0]
  return(result);
 8007ccc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <osKernelStart+0x1a>
    stat = osErrorISR;
 8007cd2:	f06f 0305 	mvn.w	r3, #5
 8007cd6:	607b      	str	r3, [r7, #4]
 8007cd8:	e010      	b.n	8007cfc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007cda:	4b0b      	ldr	r3, [pc, #44]	; (8007d08 <osKernelStart+0x48>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d109      	bne.n	8007cf6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007ce2:	f7ff ffbf 	bl	8007c64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007ce6:	4b08      	ldr	r3, [pc, #32]	; (8007d08 <osKernelStart+0x48>)
 8007ce8:	2202      	movs	r2, #2
 8007cea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007cec:	f001 f87c 	bl	8008de8 <vTaskStartScheduler>
      stat = osOK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	607b      	str	r3, [r7, #4]
 8007cf4:	e002      	b.n	8007cfc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007cfc:	687b      	ldr	r3, [r7, #4]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	2000070c 	.word	0x2000070c

08007d0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08e      	sub	sp, #56	; 0x38
 8007d10:	af04      	add	r7, sp, #16
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d1c:	f3ef 8305 	mrs	r3, IPSR
 8007d20:	617b      	str	r3, [r7, #20]
  return(result);
 8007d22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d17e      	bne.n	8007e26 <osThreadNew+0x11a>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d07b      	beq.n	8007e26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007d2e:	2380      	movs	r3, #128	; 0x80
 8007d30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d32:	2318      	movs	r3, #24
 8007d34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d36:	2300      	movs	r3, #0
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d045      	beq.n	8007dd2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d002      	beq.n	8007d54 <osThreadNew+0x48>
        name = attr->name;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d008      	beq.n	8007d7a <osThreadNew+0x6e>
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	2b38      	cmp	r3, #56	; 0x38
 8007d6c:	d805      	bhi.n	8007d7a <osThreadNew+0x6e>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <osThreadNew+0x72>
        return (NULL);
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	e054      	b.n	8007e28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d003      	beq.n	8007d8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	089b      	lsrs	r3, r3, #2
 8007d8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00e      	beq.n	8007db4 <osThreadNew+0xa8>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	2ba7      	cmp	r3, #167	; 0xa7
 8007d9c:	d90a      	bls.n	8007db4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d006      	beq.n	8007db4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <osThreadNew+0xa8>
        mem = 1;
 8007dae:	2301      	movs	r3, #1
 8007db0:	61bb      	str	r3, [r7, #24]
 8007db2:	e010      	b.n	8007dd6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10c      	bne.n	8007dd6 <osThreadNew+0xca>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d108      	bne.n	8007dd6 <osThreadNew+0xca>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d104      	bne.n	8007dd6 <osThreadNew+0xca>
          mem = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	61bb      	str	r3, [r7, #24]
 8007dd0:	e001      	b.n	8007dd6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d110      	bne.n	8007dfe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007de4:	9202      	str	r2, [sp, #8]
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	6a3a      	ldr	r2, [r7, #32]
 8007df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 fe0c 	bl	8008a10 <xTaskCreateStatic>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	613b      	str	r3, [r7, #16]
 8007dfc:	e013      	b.n	8007e26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d110      	bne.n	8007e26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	f107 0310 	add.w	r3, r7, #16
 8007e0c:	9301      	str	r3, [sp, #4]
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 fe57 	bl	8008aca <xTaskCreate>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d001      	beq.n	8007e26 <osThreadNew+0x11a>
            hTask = NULL;
 8007e22:	2300      	movs	r3, #0
 8007e24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e26:	693b      	ldr	r3, [r7, #16]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3728      	adds	r7, #40	; 0x28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e38:	f3ef 8305 	mrs	r3, IPSR
 8007e3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d003      	beq.n	8007e4c <osDelay+0x1c>
    stat = osErrorISR;
 8007e44:	f06f 0305 	mvn.w	r3, #5
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	e007      	b.n	8007e5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 ff92 	bl	8008d80 <vTaskDelay>
    }
  }

  return (stat);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4a07      	ldr	r2, [pc, #28]	; (8007e94 <vApplicationGetIdleTaskMemory+0x2c>)
 8007e78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	4a06      	ldr	r2, [pc, #24]	; (8007e98 <vApplicationGetIdleTaskMemory+0x30>)
 8007e7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2280      	movs	r2, #128	; 0x80
 8007e84:	601a      	str	r2, [r3, #0]
}
 8007e86:	bf00      	nop
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20000710 	.word	0x20000710
 8007e98:	200007b8 	.word	0x200007b8

08007e9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4a07      	ldr	r2, [pc, #28]	; (8007ec8 <vApplicationGetTimerTaskMemory+0x2c>)
 8007eac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	4a06      	ldr	r2, [pc, #24]	; (8007ecc <vApplicationGetTimerTaskMemory+0x30>)
 8007eb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007eba:	601a      	str	r2, [r3, #0]
}
 8007ebc:	bf00      	nop
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	200009b8 	.word	0x200009b8
 8007ecc:	20000a60 	.word	0x20000a60

08007ed0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f103 0208 	add.w	r2, r3, #8
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f103 0208 	add.w	r2, r3, #8
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f103 0208 	add.w	r2, r3, #8
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f1e:	bf00      	nop
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b085      	sub	sp, #20
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	689a      	ldr	r2, [r3, #8]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	601a      	str	r2, [r3, #0]
}
 8007f66:	bf00      	nop
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f72:	b480      	push	{r7}
 8007f74:	b085      	sub	sp, #20
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f88:	d103      	bne.n	8007f92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	e00c      	b.n	8007fac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3308      	adds	r3, #8
 8007f96:	60fb      	str	r3, [r7, #12]
 8007f98:	e002      	b.n	8007fa0 <vListInsert+0x2e>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d2f6      	bcs.n	8007f9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	601a      	str	r2, [r3, #0]
}
 8007fd8:	bf00      	nop
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	6892      	ldr	r2, [r2, #8]
 8007ffa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6852      	ldr	r2, [r2, #4]
 8008004:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	429a      	cmp	r2, r3
 800800e:	d103      	bne.n	8008018 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	1e5a      	subs	r2, r3, #1
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10a      	bne.n	8008062 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800805e:	bf00      	nop
 8008060:	e7fe      	b.n	8008060 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008062:	f002 f877 	bl	800a154 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806e:	68f9      	ldr	r1, [r7, #12]
 8008070:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008072:	fb01 f303 	mul.w	r3, r1, r3
 8008076:	441a      	add	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008092:	3b01      	subs	r3, #1
 8008094:	68f9      	ldr	r1, [r7, #12]
 8008096:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008098:	fb01 f303 	mul.w	r3, r1, r3
 800809c:	441a      	add	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	22ff      	movs	r2, #255	; 0xff
 80080a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	22ff      	movs	r2, #255	; 0xff
 80080ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d114      	bne.n	80080e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d01a      	beq.n	80080f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	3310      	adds	r3, #16
 80080c4:	4618      	mov	r0, r3
 80080c6:	f001 f929 	bl	800931c <xTaskRemoveFromEventList>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d012      	beq.n	80080f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080d0:	4b0c      	ldr	r3, [pc, #48]	; (8008104 <xQueueGenericReset+0xcc>)
 80080d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	e009      	b.n	80080f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3310      	adds	r3, #16
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff fef2 	bl	8007ed0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	3324      	adds	r3, #36	; 0x24
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff feed 	bl	8007ed0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80080f6:	f002 f85d 	bl	800a1b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80080fa:	2301      	movs	r3, #1
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	e000ed04 	.word	0xe000ed04

08008108 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008108:	b580      	push	{r7, lr}
 800810a:	b08e      	sub	sp, #56	; 0x38
 800810c:	af02      	add	r7, sp, #8
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10a      	bne.n	8008132 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800812e:	bf00      	nop
 8008130:	e7fe      	b.n	8008130 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10a      	bne.n	800814e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
}
 800814a:	bf00      	nop
 800814c:	e7fe      	b.n	800814c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <xQueueGenericCreateStatic+0x52>
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <xQueueGenericCreateStatic+0x56>
 800815a:	2301      	movs	r3, #1
 800815c:	e000      	b.n	8008160 <xQueueGenericCreateStatic+0x58>
 800815e:	2300      	movs	r3, #0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10a      	bne.n	800817a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	623b      	str	r3, [r7, #32]
}
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d102      	bne.n	8008186 <xQueueGenericCreateStatic+0x7e>
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <xQueueGenericCreateStatic+0x82>
 8008186:	2301      	movs	r3, #1
 8008188:	e000      	b.n	800818c <xQueueGenericCreateStatic+0x84>
 800818a:	2300      	movs	r3, #0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10a      	bne.n	80081a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	61fb      	str	r3, [r7, #28]
}
 80081a2:	bf00      	nop
 80081a4:	e7fe      	b.n	80081a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80081a6:	2350      	movs	r3, #80	; 0x50
 80081a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	2b50      	cmp	r3, #80	; 0x50
 80081ae:	d00a      	beq.n	80081c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	61bb      	str	r3, [r7, #24]
}
 80081c2:	bf00      	nop
 80081c4:	e7fe      	b.n	80081c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80081c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80081cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00d      	beq.n	80081ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80081de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	4613      	mov	r3, r2
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	68b9      	ldr	r1, [r7, #8]
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 f805 	bl	80081f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3730      	adds	r7, #48	; 0x30
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d103      	bne.n	8008214 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	e002      	b.n	800821a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008226:	2101      	movs	r1, #1
 8008228:	69b8      	ldr	r0, [r7, #24]
 800822a:	f7ff ff05 	bl	8008038 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	78fa      	ldrb	r2, [r7, #3]
 8008232:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008236:	bf00      	nop
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
	...

08008240 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08e      	sub	sp, #56	; 0x38
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
 800824c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800824e:	2300      	movs	r3, #0
 8008250:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10a      	bne.n	8008272 <xQueueGenericSend+0x32>
	__asm volatile
 800825c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800826e:	bf00      	nop
 8008270:	e7fe      	b.n	8008270 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d103      	bne.n	8008280 <xQueueGenericSend+0x40>
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <xQueueGenericSend+0x44>
 8008280:	2301      	movs	r3, #1
 8008282:	e000      	b.n	8008286 <xQueueGenericSend+0x46>
 8008284:	2300      	movs	r3, #0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10a      	bne.n	80082a0 <xQueueGenericSend+0x60>
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800829c:	bf00      	nop
 800829e:	e7fe      	b.n	800829e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d103      	bne.n	80082ae <xQueueGenericSend+0x6e>
 80082a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d101      	bne.n	80082b2 <xQueueGenericSend+0x72>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e000      	b.n	80082b4 <xQueueGenericSend+0x74>
 80082b2:	2300      	movs	r3, #0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <xQueueGenericSend+0x8e>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	623b      	str	r3, [r7, #32]
}
 80082ca:	bf00      	nop
 80082cc:	e7fe      	b.n	80082cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082ce:	f001 f9e7 	bl	80096a0 <xTaskGetSchedulerState>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d102      	bne.n	80082de <xQueueGenericSend+0x9e>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <xQueueGenericSend+0xa2>
 80082de:	2301      	movs	r3, #1
 80082e0:	e000      	b.n	80082e4 <xQueueGenericSend+0xa4>
 80082e2:	2300      	movs	r3, #0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10a      	bne.n	80082fe <xQueueGenericSend+0xbe>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	61fb      	str	r3, [r7, #28]
}
 80082fa:	bf00      	nop
 80082fc:	e7fe      	b.n	80082fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082fe:	f001 ff29 	bl	800a154 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830a:	429a      	cmp	r2, r3
 800830c:	d302      	bcc.n	8008314 <xQueueGenericSend+0xd4>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b02      	cmp	r3, #2
 8008312:	d129      	bne.n	8008368 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	68b9      	ldr	r1, [r7, #8]
 8008318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800831a:	f000 fa0b 	bl	8008734 <prvCopyDataToQueue>
 800831e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008324:	2b00      	cmp	r3, #0
 8008326:	d010      	beq.n	800834a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	3324      	adds	r3, #36	; 0x24
 800832c:	4618      	mov	r0, r3
 800832e:	f000 fff5 	bl	800931c <xTaskRemoveFromEventList>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d013      	beq.n	8008360 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008338:	4b3f      	ldr	r3, [pc, #252]	; (8008438 <xQueueGenericSend+0x1f8>)
 800833a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	e00a      	b.n	8008360 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800834a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008350:	4b39      	ldr	r3, [pc, #228]	; (8008438 <xQueueGenericSend+0x1f8>)
 8008352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008360:	f001 ff28 	bl	800a1b4 <vPortExitCritical>
				return pdPASS;
 8008364:	2301      	movs	r3, #1
 8008366:	e063      	b.n	8008430 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d103      	bne.n	8008376 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800836e:	f001 ff21 	bl	800a1b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008372:	2300      	movs	r3, #0
 8008374:	e05c      	b.n	8008430 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008378:	2b00      	cmp	r3, #0
 800837a:	d106      	bne.n	800838a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800837c:	f107 0314 	add.w	r3, r7, #20
 8008380:	4618      	mov	r0, r3
 8008382:	f001 f82f 	bl	80093e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008386:	2301      	movs	r3, #1
 8008388:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800838a:	f001 ff13 	bl	800a1b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800838e:	f000 fd9b 	bl	8008ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008392:	f001 fedf 	bl	800a154 <vPortEnterCritical>
 8008396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800839c:	b25b      	sxtb	r3, r3
 800839e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a2:	d103      	bne.n	80083ac <xQueueGenericSend+0x16c>
 80083a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083b2:	b25b      	sxtb	r3, r3
 80083b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b8:	d103      	bne.n	80083c2 <xQueueGenericSend+0x182>
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083c2:	f001 fef7 	bl	800a1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083c6:	1d3a      	adds	r2, r7, #4
 80083c8:	f107 0314 	add.w	r3, r7, #20
 80083cc:	4611      	mov	r1, r2
 80083ce:	4618      	mov	r0, r3
 80083d0:	f001 f81e 	bl	8009410 <xTaskCheckForTimeOut>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d124      	bne.n	8008424 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80083da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083dc:	f000 faa2 	bl	8008924 <prvIsQueueFull>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d018      	beq.n	8008418 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	3310      	adds	r3, #16
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	4611      	mov	r1, r2
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 ff44 	bl	800927c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80083f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083f6:	f000 fa2d 	bl	8008854 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80083fa:	f000 fd73 	bl	8008ee4 <xTaskResumeAll>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	f47f af7c 	bne.w	80082fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008406:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <xQueueGenericSend+0x1f8>)
 8008408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	e772      	b.n	80082fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800841a:	f000 fa1b 	bl	8008854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800841e:	f000 fd61 	bl	8008ee4 <xTaskResumeAll>
 8008422:	e76c      	b.n	80082fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008426:	f000 fa15 	bl	8008854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800842a:	f000 fd5b 	bl	8008ee4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800842e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008430:	4618      	mov	r0, r3
 8008432:	3738      	adds	r7, #56	; 0x38
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	e000ed04 	.word	0xe000ed04

0800843c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b090      	sub	sp, #64	; 0x40
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
 8008448:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800844e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10a      	bne.n	800846a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008466:	bf00      	nop
 8008468:	e7fe      	b.n	8008468 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d103      	bne.n	8008478 <xQueueGenericSendFromISR+0x3c>
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <xQueueGenericSendFromISR+0x40>
 8008478:	2301      	movs	r3, #1
 800847a:	e000      	b.n	800847e <xQueueGenericSendFromISR+0x42>
 800847c:	2300      	movs	r3, #0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10a      	bne.n	8008498 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008494:	bf00      	nop
 8008496:	e7fe      	b.n	8008496 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2b02      	cmp	r3, #2
 800849c:	d103      	bne.n	80084a6 <xQueueGenericSendFromISR+0x6a>
 800849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d101      	bne.n	80084aa <xQueueGenericSendFromISR+0x6e>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e000      	b.n	80084ac <xQueueGenericSendFromISR+0x70>
 80084aa:	2300      	movs	r3, #0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10a      	bne.n	80084c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	623b      	str	r3, [r7, #32]
}
 80084c2:	bf00      	nop
 80084c4:	e7fe      	b.n	80084c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084c6:	f001 ff27 	bl	800a318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80084ca:	f3ef 8211 	mrs	r2, BASEPRI
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	61fa      	str	r2, [r7, #28]
 80084e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80084e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d302      	bcc.n	80084f8 <xQueueGenericSendFromISR+0xbc>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d12f      	bne.n	8008558 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	68b9      	ldr	r1, [r7, #8]
 800850c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800850e:	f000 f911 	bl	8008734 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008512:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851a:	d112      	bne.n	8008542 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	2b00      	cmp	r3, #0
 8008522:	d016      	beq.n	8008552 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008526:	3324      	adds	r3, #36	; 0x24
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fef7 	bl	800931c <xTaskRemoveFromEventList>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00e      	beq.n	8008552 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00b      	beq.n	8008552 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	e007      	b.n	8008552 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008542:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008546:	3301      	adds	r3, #1
 8008548:	b2db      	uxtb	r3, r3
 800854a:	b25a      	sxtb	r2, r3
 800854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008552:	2301      	movs	r3, #1
 8008554:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008556:	e001      	b.n	800855c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008558:	2300      	movs	r3, #0
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800855c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008566:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800856a:	4618      	mov	r0, r3
 800856c:	3740      	adds	r7, #64	; 0x40
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08c      	sub	sp, #48	; 0x30
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008580:	2300      	movs	r3, #0
 8008582:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10a      	bne.n	80085a4 <xQueueReceive+0x30>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	623b      	str	r3, [r7, #32]
}
 80085a0:	bf00      	nop
 80085a2:	e7fe      	b.n	80085a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d103      	bne.n	80085b2 <xQueueReceive+0x3e>
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <xQueueReceive+0x42>
 80085b2:	2301      	movs	r3, #1
 80085b4:	e000      	b.n	80085b8 <xQueueReceive+0x44>
 80085b6:	2300      	movs	r3, #0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10a      	bne.n	80085d2 <xQueueReceive+0x5e>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	61fb      	str	r3, [r7, #28]
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085d2:	f001 f865 	bl	80096a0 <xTaskGetSchedulerState>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d102      	bne.n	80085e2 <xQueueReceive+0x6e>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <xQueueReceive+0x72>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e000      	b.n	80085e8 <xQueueReceive+0x74>
 80085e6:	2300      	movs	r3, #0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10a      	bne.n	8008602 <xQueueReceive+0x8e>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	61bb      	str	r3, [r7, #24]
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008602:	f001 fda7 	bl	800a154 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	2b00      	cmp	r3, #0
 8008610:	d01f      	beq.n	8008652 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008612:	68b9      	ldr	r1, [r7, #8]
 8008614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008616:	f000 f8f7 	bl	8008808 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	1e5a      	subs	r2, r3, #1
 800861e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008620:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00f      	beq.n	800864a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	3310      	adds	r3, #16
 800862e:	4618      	mov	r0, r3
 8008630:	f000 fe74 	bl	800931c <xTaskRemoveFromEventList>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d007      	beq.n	800864a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800863a:	4b3d      	ldr	r3, [pc, #244]	; (8008730 <xQueueReceive+0x1bc>)
 800863c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800864a:	f001 fdb3 	bl	800a1b4 <vPortExitCritical>
				return pdPASS;
 800864e:	2301      	movs	r3, #1
 8008650:	e069      	b.n	8008726 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d103      	bne.n	8008660 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008658:	f001 fdac 	bl	800a1b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800865c:	2300      	movs	r3, #0
 800865e:	e062      	b.n	8008726 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008662:	2b00      	cmp	r3, #0
 8008664:	d106      	bne.n	8008674 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008666:	f107 0310 	add.w	r3, r7, #16
 800866a:	4618      	mov	r0, r3
 800866c:	f000 feba 	bl	80093e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008670:	2301      	movs	r3, #1
 8008672:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008674:	f001 fd9e 	bl	800a1b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008678:	f000 fc26 	bl	8008ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800867c:	f001 fd6a 	bl	800a154 <vPortEnterCritical>
 8008680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008686:	b25b      	sxtb	r3, r3
 8008688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868c:	d103      	bne.n	8008696 <xQueueReceive+0x122>
 800868e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008690:	2200      	movs	r2, #0
 8008692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800869c:	b25b      	sxtb	r3, r3
 800869e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a2:	d103      	bne.n	80086ac <xQueueReceive+0x138>
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086ac:	f001 fd82 	bl	800a1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086b0:	1d3a      	adds	r2, r7, #4
 80086b2:	f107 0310 	add.w	r3, r7, #16
 80086b6:	4611      	mov	r1, r2
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 fea9 	bl	8009410 <xTaskCheckForTimeOut>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d123      	bne.n	800870c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086c6:	f000 f917 	bl	80088f8 <prvIsQueueEmpty>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d017      	beq.n	8008700 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d2:	3324      	adds	r3, #36	; 0x24
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	4611      	mov	r1, r2
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fdcf 	bl	800927c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086e0:	f000 f8b8 	bl	8008854 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086e4:	f000 fbfe 	bl	8008ee4 <xTaskResumeAll>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d189      	bne.n	8008602 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80086ee:	4b10      	ldr	r3, [pc, #64]	; (8008730 <xQueueReceive+0x1bc>)
 80086f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	e780      	b.n	8008602 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008702:	f000 f8a7 	bl	8008854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008706:	f000 fbed 	bl	8008ee4 <xTaskResumeAll>
 800870a:	e77a      	b.n	8008602 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800870c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800870e:	f000 f8a1 	bl	8008854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008712:	f000 fbe7 	bl	8008ee4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008718:	f000 f8ee 	bl	80088f8 <prvIsQueueEmpty>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	f43f af6f 	beq.w	8008602 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008724:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008726:	4618      	mov	r0, r3
 8008728:	3730      	adds	r7, #48	; 0x30
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	e000ed04 	.word	0xe000ed04

08008734 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008740:	2300      	movs	r3, #0
 8008742:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10d      	bne.n	800876e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d14d      	bne.n	80087f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	4618      	mov	r0, r3
 8008760:	f000 ffbc 	bl	80096dc <xTaskPriorityDisinherit>
 8008764:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	609a      	str	r2, [r3, #8]
 800876c:	e043      	b.n	80087f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d119      	bne.n	80087a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6858      	ldr	r0, [r3, #4]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877c:	461a      	mov	r2, r3
 800877e:	68b9      	ldr	r1, [r7, #8]
 8008780:	f002 f89e 	bl	800a8c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878c:	441a      	add	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	429a      	cmp	r2, r3
 800879c:	d32b      	bcc.n	80087f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	605a      	str	r2, [r3, #4]
 80087a6:	e026      	b.n	80087f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	68d8      	ldr	r0, [r3, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b0:	461a      	mov	r2, r3
 80087b2:	68b9      	ldr	r1, [r7, #8]
 80087b4:	f002 f884 	bl	800a8c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	68da      	ldr	r2, [r3, #12]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c0:	425b      	negs	r3, r3
 80087c2:	441a      	add	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	68da      	ldr	r2, [r3, #12]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d207      	bcs.n	80087e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	689a      	ldr	r2, [r3, #8]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087dc:	425b      	negs	r3, r3
 80087de:	441a      	add	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d105      	bne.n	80087f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80087fe:	697b      	ldr	r3, [r7, #20]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	2b00      	cmp	r3, #0
 8008818:	d018      	beq.n	800884c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68da      	ldr	r2, [r3, #12]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008822:	441a      	add	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	429a      	cmp	r2, r3
 8008832:	d303      	bcc.n	800883c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68d9      	ldr	r1, [r3, #12]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008844:	461a      	mov	r2, r3
 8008846:	6838      	ldr	r0, [r7, #0]
 8008848:	f002 f83a 	bl	800a8c0 <memcpy>
	}
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800885c:	f001 fc7a 	bl	800a154 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008866:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008868:	e011      	b.n	800888e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	2b00      	cmp	r3, #0
 8008870:	d012      	beq.n	8008898 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	3324      	adds	r3, #36	; 0x24
 8008876:	4618      	mov	r0, r3
 8008878:	f000 fd50 	bl	800931c <xTaskRemoveFromEventList>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d001      	beq.n	8008886 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008882:	f000 fe27 	bl	80094d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008886:	7bfb      	ldrb	r3, [r7, #15]
 8008888:	3b01      	subs	r3, #1
 800888a:	b2db      	uxtb	r3, r3
 800888c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800888e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008892:	2b00      	cmp	r3, #0
 8008894:	dce9      	bgt.n	800886a <prvUnlockQueue+0x16>
 8008896:	e000      	b.n	800889a <prvUnlockQueue+0x46>
					break;
 8008898:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	22ff      	movs	r2, #255	; 0xff
 800889e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80088a2:	f001 fc87 	bl	800a1b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088a6:	f001 fc55 	bl	800a154 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088b2:	e011      	b.n	80088d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d012      	beq.n	80088e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	3310      	adds	r3, #16
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 fd2b 	bl	800931c <xTaskRemoveFromEventList>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80088cc:	f000 fe02 	bl	80094d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	dce9      	bgt.n	80088b4 <prvUnlockQueue+0x60>
 80088e0:	e000      	b.n	80088e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80088e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	22ff      	movs	r2, #255	; 0xff
 80088e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80088ec:	f001 fc62 	bl	800a1b4 <vPortExitCritical>
}
 80088f0:	bf00      	nop
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008900:	f001 fc28 	bl	800a154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008908:	2b00      	cmp	r3, #0
 800890a:	d102      	bne.n	8008912 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800890c:	2301      	movs	r3, #1
 800890e:	60fb      	str	r3, [r7, #12]
 8008910:	e001      	b.n	8008916 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008916:	f001 fc4d 	bl	800a1b4 <vPortExitCritical>

	return xReturn;
 800891a:	68fb      	ldr	r3, [r7, #12]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800892c:	f001 fc12 	bl	800a154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008938:	429a      	cmp	r2, r3
 800893a:	d102      	bne.n	8008942 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800893c:	2301      	movs	r3, #1
 800893e:	60fb      	str	r3, [r7, #12]
 8008940:	e001      	b.n	8008946 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008946:	f001 fc35 	bl	800a1b4 <vPortExitCritical>

	return xReturn;
 800894a:	68fb      	ldr	r3, [r7, #12]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800895e:	2300      	movs	r3, #0
 8008960:	60fb      	str	r3, [r7, #12]
 8008962:	e014      	b.n	800898e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008964:	4a0f      	ldr	r2, [pc, #60]	; (80089a4 <vQueueAddToRegistry+0x50>)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10b      	bne.n	8008988 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008970:	490c      	ldr	r1, [pc, #48]	; (80089a4 <vQueueAddToRegistry+0x50>)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800897a:	4a0a      	ldr	r2, [pc, #40]	; (80089a4 <vQueueAddToRegistry+0x50>)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	00db      	lsls	r3, r3, #3
 8008980:	4413      	add	r3, r2
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008986:	e006      	b.n	8008996 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3301      	adds	r3, #1
 800898c:	60fb      	str	r3, [r7, #12]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b07      	cmp	r3, #7
 8008992:	d9e7      	bls.n	8008964 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008994:	bf00      	nop
 8008996:	bf00      	nop
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	20000e60 	.word	0x20000e60

080089a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089b8:	f001 fbcc 	bl	800a154 <vPortEnterCritical>
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089c2:	b25b      	sxtb	r3, r3
 80089c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c8:	d103      	bne.n	80089d2 <vQueueWaitForMessageRestricted+0x2a>
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089d8:	b25b      	sxtb	r3, r3
 80089da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089de:	d103      	bne.n	80089e8 <vQueueWaitForMessageRestricted+0x40>
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089e8:	f001 fbe4 	bl	800a1b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d106      	bne.n	8008a02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	3324      	adds	r3, #36	; 0x24
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	68b9      	ldr	r1, [r7, #8]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 fc61 	bl	80092c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a02:	6978      	ldr	r0, [r7, #20]
 8008a04:	f7ff ff26 	bl	8008854 <prvUnlockQueue>
	}
 8008a08:	bf00      	nop
 8008a0a:	3718      	adds	r7, #24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08e      	sub	sp, #56	; 0x38
 8008a14:	af04      	add	r7, sp, #16
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10a      	bne.n	8008a3a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	623b      	str	r3, [r7, #32]
}
 8008a36:	bf00      	nop
 8008a38:	e7fe      	b.n	8008a38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10a      	bne.n	8008a56 <xTaskCreateStatic+0x46>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	61fb      	str	r3, [r7, #28]
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a56:	23a8      	movs	r3, #168	; 0xa8
 8008a58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	2ba8      	cmp	r3, #168	; 0xa8
 8008a5e:	d00a      	beq.n	8008a76 <xTaskCreateStatic+0x66>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	61bb      	str	r3, [r7, #24]
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d01e      	beq.n	8008abc <xTaskCreateStatic+0xac>
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d01b      	beq.n	8008abc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	2202      	movs	r2, #2
 8008a92:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a96:	2300      	movs	r3, #0
 8008a98:	9303      	str	r3, [sp, #12]
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	9302      	str	r3, [sp, #8]
 8008a9e:	f107 0314 	add.w	r3, r7, #20
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	68b9      	ldr	r1, [r7, #8]
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f000 f850 	bl	8008b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ab6:	f000 f8f3 	bl	8008ca0 <prvAddNewTaskToReadyList>
 8008aba:	e001      	b.n	8008ac0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008abc:	2300      	movs	r3, #0
 8008abe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ac0:	697b      	ldr	r3, [r7, #20]
	}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3728      	adds	r7, #40	; 0x28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b08c      	sub	sp, #48	; 0x30
 8008ace:	af04      	add	r7, sp, #16
 8008ad0:	60f8      	str	r0, [r7, #12]
 8008ad2:	60b9      	str	r1, [r7, #8]
 8008ad4:	603b      	str	r3, [r7, #0]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ada:	88fb      	ldrh	r3, [r7, #6]
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f001 fc5a 	bl	800a398 <pvPortMalloc>
 8008ae4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00e      	beq.n	8008b0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008aec:	20a8      	movs	r0, #168	; 0xa8
 8008aee:	f001 fc53 	bl	800a398 <pvPortMalloc>
 8008af2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	631a      	str	r2, [r3, #48]	; 0x30
 8008b00:	e005      	b.n	8008b0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b02:	6978      	ldr	r0, [r7, #20]
 8008b04:	f001 fd14 	bl	800a530 <vPortFree>
 8008b08:	e001      	b.n	8008b0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d017      	beq.n	8008b44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b1c:	88fa      	ldrh	r2, [r7, #6]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	9303      	str	r3, [sp, #12]
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	9302      	str	r3, [sp, #8]
 8008b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	68b9      	ldr	r1, [r7, #8]
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f000 f80e 	bl	8008b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b38:	69f8      	ldr	r0, [r7, #28]
 8008b3a:	f000 f8b1 	bl	8008ca0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	61bb      	str	r3, [r7, #24]
 8008b42:	e002      	b.n	8008b4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b44:	f04f 33ff 	mov.w	r3, #4294967295
 8008b48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b4a:	69bb      	ldr	r3, [r7, #24]
	}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3720      	adds	r7, #32
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b088      	sub	sp, #32
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
 8008b60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	21a5      	movs	r1, #165	; 0xa5
 8008b6e:	f001 fe1d 	bl	800a7ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	f023 0307 	bic.w	r3, r3, #7
 8008b8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	f003 0307 	and.w	r3, r3, #7
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00a      	beq.n	8008bac <prvInitialiseNewTask+0x58>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	617b      	str	r3, [r7, #20]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d01f      	beq.n	8008bf2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	61fb      	str	r3, [r7, #28]
 8008bb6:	e012      	b.n	8008bde <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	7819      	ldrb	r1, [r3, #0]
 8008bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	3334      	adds	r3, #52	; 0x34
 8008bc8:	460a      	mov	r2, r1
 8008bca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d006      	beq.n	8008be6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	61fb      	str	r3, [r7, #28]
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	2b0f      	cmp	r3, #15
 8008be2:	d9e9      	bls.n	8008bb8 <prvInitialiseNewTask+0x64>
 8008be4:	e000      	b.n	8008be8 <prvInitialiseNewTask+0x94>
			{
				break;
 8008be6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bf0:	e003      	b.n	8008bfa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	2b37      	cmp	r3, #55	; 0x37
 8008bfe:	d901      	bls.n	8008c04 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c00:	2337      	movs	r3, #55	; 0x37
 8008c02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c12:	2200      	movs	r2, #0
 8008c14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	3304      	adds	r3, #4
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff f978 	bl	8007f10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c22:	3318      	adds	r3, #24
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7ff f973 	bl	8007f10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	3354      	adds	r3, #84	; 0x54
 8008c54:	224c      	movs	r2, #76	; 0x4c
 8008c56:	2100      	movs	r1, #0
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f001 fda7 	bl	800a7ac <memset>
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	4a0c      	ldr	r2, [pc, #48]	; (8008c94 <prvInitialiseNewTask+0x140>)
 8008c62:	659a      	str	r2, [r3, #88]	; 0x58
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c66:	4a0c      	ldr	r2, [pc, #48]	; (8008c98 <prvInitialiseNewTask+0x144>)
 8008c68:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	4a0b      	ldr	r2, [pc, #44]	; (8008c9c <prvInitialiseNewTask+0x148>)
 8008c6e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	68f9      	ldr	r1, [r7, #12]
 8008c74:	69b8      	ldr	r0, [r7, #24]
 8008c76:	f001 f941 	bl	8009efc <pxPortInitialiseStack>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d002      	beq.n	8008c8c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c8c:	bf00      	nop
 8008c8e:	3720      	adds	r7, #32
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	200050f4 	.word	0x200050f4
 8008c98:	2000515c 	.word	0x2000515c
 8008c9c:	200051c4 	.word	0x200051c4

08008ca0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ca8:	f001 fa54 	bl	800a154 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cac:	4b2d      	ldr	r3, [pc, #180]	; (8008d64 <prvAddNewTaskToReadyList+0xc4>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	4a2c      	ldr	r2, [pc, #176]	; (8008d64 <prvAddNewTaskToReadyList+0xc4>)
 8008cb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cb6:	4b2c      	ldr	r3, [pc, #176]	; (8008d68 <prvAddNewTaskToReadyList+0xc8>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d109      	bne.n	8008cd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cbe:	4a2a      	ldr	r2, [pc, #168]	; (8008d68 <prvAddNewTaskToReadyList+0xc8>)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cc4:	4b27      	ldr	r3, [pc, #156]	; (8008d64 <prvAddNewTaskToReadyList+0xc4>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d110      	bne.n	8008cee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ccc:	f000 fc26 	bl	800951c <prvInitialiseTaskLists>
 8008cd0:	e00d      	b.n	8008cee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cd2:	4b26      	ldr	r3, [pc, #152]	; (8008d6c <prvAddNewTaskToReadyList+0xcc>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d109      	bne.n	8008cee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cda:	4b23      	ldr	r3, [pc, #140]	; (8008d68 <prvAddNewTaskToReadyList+0xc8>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d802      	bhi.n	8008cee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ce8:	4a1f      	ldr	r2, [pc, #124]	; (8008d68 <prvAddNewTaskToReadyList+0xc8>)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008cee:	4b20      	ldr	r3, [pc, #128]	; (8008d70 <prvAddNewTaskToReadyList+0xd0>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	4a1e      	ldr	r2, [pc, #120]	; (8008d70 <prvAddNewTaskToReadyList+0xd0>)
 8008cf6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008cf8:	4b1d      	ldr	r3, [pc, #116]	; (8008d70 <prvAddNewTaskToReadyList+0xd0>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d04:	4b1b      	ldr	r3, [pc, #108]	; (8008d74 <prvAddNewTaskToReadyList+0xd4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d903      	bls.n	8008d14 <prvAddNewTaskToReadyList+0x74>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d10:	4a18      	ldr	r2, [pc, #96]	; (8008d74 <prvAddNewTaskToReadyList+0xd4>)
 8008d12:	6013      	str	r3, [r2, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d18:	4613      	mov	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4413      	add	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4a15      	ldr	r2, [pc, #84]	; (8008d78 <prvAddNewTaskToReadyList+0xd8>)
 8008d22:	441a      	add	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3304      	adds	r3, #4
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	f7ff f8fd 	bl	8007f2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d30:	f001 fa40 	bl	800a1b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d34:	4b0d      	ldr	r3, [pc, #52]	; (8008d6c <prvAddNewTaskToReadyList+0xcc>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00e      	beq.n	8008d5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d3c:	4b0a      	ldr	r3, [pc, #40]	; (8008d68 <prvAddNewTaskToReadyList+0xc8>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d207      	bcs.n	8008d5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d4a:	4b0c      	ldr	r3, [pc, #48]	; (8008d7c <prvAddNewTaskToReadyList+0xdc>)
 8008d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d5a:	bf00      	nop
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	20001374 	.word	0x20001374
 8008d68:	20000ea0 	.word	0x20000ea0
 8008d6c:	20001380 	.word	0x20001380
 8008d70:	20001390 	.word	0x20001390
 8008d74:	2000137c 	.word	0x2000137c
 8008d78:	20000ea4 	.word	0x20000ea4
 8008d7c:	e000ed04 	.word	0xe000ed04

08008d80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d017      	beq.n	8008dc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d92:	4b13      	ldr	r3, [pc, #76]	; (8008de0 <vTaskDelay+0x60>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <vTaskDelay+0x30>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	60bb      	str	r3, [r7, #8]
}
 8008dac:	bf00      	nop
 8008dae:	e7fe      	b.n	8008dae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008db0:	f000 f88a 	bl	8008ec8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008db4:	2100      	movs	r1, #0
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fcfe 	bl	80097b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008dbc:	f000 f892 	bl	8008ee4 <xTaskResumeAll>
 8008dc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d107      	bne.n	8008dd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008dc8:	4b06      	ldr	r3, [pc, #24]	; (8008de4 <vTaskDelay+0x64>)
 8008dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dce:	601a      	str	r2, [r3, #0]
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008dd8:	bf00      	nop
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	2000139c 	.word	0x2000139c
 8008de4:	e000ed04 	.word	0xe000ed04

08008de8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b08a      	sub	sp, #40	; 0x28
 8008dec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008dee:	2300      	movs	r3, #0
 8008df0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008df6:	463a      	mov	r2, r7
 8008df8:	1d39      	adds	r1, r7, #4
 8008dfa:	f107 0308 	add.w	r3, r7, #8
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff f832 	bl	8007e68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	9202      	str	r2, [sp, #8]
 8008e0c:	9301      	str	r3, [sp, #4]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	2300      	movs	r3, #0
 8008e14:	460a      	mov	r2, r1
 8008e16:	4924      	ldr	r1, [pc, #144]	; (8008ea8 <vTaskStartScheduler+0xc0>)
 8008e18:	4824      	ldr	r0, [pc, #144]	; (8008eac <vTaskStartScheduler+0xc4>)
 8008e1a:	f7ff fdf9 	bl	8008a10 <xTaskCreateStatic>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	4a23      	ldr	r2, [pc, #140]	; (8008eb0 <vTaskStartScheduler+0xc8>)
 8008e22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e24:	4b22      	ldr	r3, [pc, #136]	; (8008eb0 <vTaskStartScheduler+0xc8>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d002      	beq.n	8008e32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	617b      	str	r3, [r7, #20]
 8008e30:	e001      	b.n	8008e36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e32:	2300      	movs	r3, #0
 8008e34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d102      	bne.n	8008e42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e3c:	f000 fd10 	bl	8009860 <xTimerCreateTimerTask>
 8008e40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d11b      	bne.n	8008e80 <vTaskStartScheduler+0x98>
	__asm volatile
 8008e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4c:	f383 8811 	msr	BASEPRI, r3
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	613b      	str	r3, [r7, #16]
}
 8008e5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e5c:	4b15      	ldr	r3, [pc, #84]	; (8008eb4 <vTaskStartScheduler+0xcc>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3354      	adds	r3, #84	; 0x54
 8008e62:	4a15      	ldr	r2, [pc, #84]	; (8008eb8 <vTaskStartScheduler+0xd0>)
 8008e64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e66:	4b15      	ldr	r3, [pc, #84]	; (8008ebc <vTaskStartScheduler+0xd4>)
 8008e68:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e6e:	4b14      	ldr	r3, [pc, #80]	; (8008ec0 <vTaskStartScheduler+0xd8>)
 8008e70:	2201      	movs	r2, #1
 8008e72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e74:	4b13      	ldr	r3, [pc, #76]	; (8008ec4 <vTaskStartScheduler+0xdc>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e7a:	f001 f8c9 	bl	800a010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e7e:	e00e      	b.n	8008e9e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e86:	d10a      	bne.n	8008e9e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8c:	f383 8811 	msr	BASEPRI, r3
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	60fb      	str	r3, [r7, #12]
}
 8008e9a:	bf00      	nop
 8008e9c:	e7fe      	b.n	8008e9c <vTaskStartScheduler+0xb4>
}
 8008e9e:	bf00      	nop
 8008ea0:	3718      	adds	r7, #24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	0800b218 	.word	0x0800b218
 8008eac:	080094ed 	.word	0x080094ed
 8008eb0:	20001398 	.word	0x20001398
 8008eb4:	20000ea0 	.word	0x20000ea0
 8008eb8:	20000060 	.word	0x20000060
 8008ebc:	20001394 	.word	0x20001394
 8008ec0:	20001380 	.word	0x20001380
 8008ec4:	20001378 	.word	0x20001378

08008ec8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ec8:	b480      	push	{r7}
 8008eca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ecc:	4b04      	ldr	r3, [pc, #16]	; (8008ee0 <vTaskSuspendAll+0x18>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	4a03      	ldr	r2, [pc, #12]	; (8008ee0 <vTaskSuspendAll+0x18>)
 8008ed4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ed6:	bf00      	nop
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	2000139c 	.word	0x2000139c

08008ee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ef2:	4b42      	ldr	r3, [pc, #264]	; (8008ffc <xTaskResumeAll+0x118>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10a      	bne.n	8008f10 <xTaskResumeAll+0x2c>
	__asm volatile
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	603b      	str	r3, [r7, #0]
}
 8008f0c:	bf00      	nop
 8008f0e:	e7fe      	b.n	8008f0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f10:	f001 f920 	bl	800a154 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f14:	4b39      	ldr	r3, [pc, #228]	; (8008ffc <xTaskResumeAll+0x118>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	4a38      	ldr	r2, [pc, #224]	; (8008ffc <xTaskResumeAll+0x118>)
 8008f1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f1e:	4b37      	ldr	r3, [pc, #220]	; (8008ffc <xTaskResumeAll+0x118>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d162      	bne.n	8008fec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f26:	4b36      	ldr	r3, [pc, #216]	; (8009000 <xTaskResumeAll+0x11c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d05e      	beq.n	8008fec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f2e:	e02f      	b.n	8008f90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f30:	4b34      	ldr	r3, [pc, #208]	; (8009004 <xTaskResumeAll+0x120>)
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3318      	adds	r3, #24
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7ff f851 	bl	8007fe4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3304      	adds	r3, #4
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7ff f84c 	bl	8007fe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f50:	4b2d      	ldr	r3, [pc, #180]	; (8009008 <xTaskResumeAll+0x124>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d903      	bls.n	8008f60 <xTaskResumeAll+0x7c>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5c:	4a2a      	ldr	r2, [pc, #168]	; (8009008 <xTaskResumeAll+0x124>)
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f64:	4613      	mov	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	4a27      	ldr	r2, [pc, #156]	; (800900c <xTaskResumeAll+0x128>)
 8008f6e:	441a      	add	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3304      	adds	r3, #4
 8008f74:	4619      	mov	r1, r3
 8008f76:	4610      	mov	r0, r2
 8008f78:	f7fe ffd7 	bl	8007f2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f80:	4b23      	ldr	r3, [pc, #140]	; (8009010 <xTaskResumeAll+0x12c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d302      	bcc.n	8008f90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f8a:	4b22      	ldr	r3, [pc, #136]	; (8009014 <xTaskResumeAll+0x130>)
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f90:	4b1c      	ldr	r3, [pc, #112]	; (8009004 <xTaskResumeAll+0x120>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1cb      	bne.n	8008f30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f9e:	f000 fb5f 	bl	8009660 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008fa2:	4b1d      	ldr	r3, [pc, #116]	; (8009018 <xTaskResumeAll+0x134>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d010      	beq.n	8008fd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fae:	f000 f847 	bl	8009040 <xTaskIncrementTick>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008fb8:	4b16      	ldr	r3, [pc, #88]	; (8009014 <xTaskResumeAll+0x130>)
 8008fba:	2201      	movs	r2, #1
 8008fbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1f1      	bne.n	8008fae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008fca:	4b13      	ldr	r3, [pc, #76]	; (8009018 <xTaskResumeAll+0x134>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008fd0:	4b10      	ldr	r3, [pc, #64]	; (8009014 <xTaskResumeAll+0x130>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d009      	beq.n	8008fec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fdc:	4b0f      	ldr	r3, [pc, #60]	; (800901c <xTaskResumeAll+0x138>)
 8008fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fec:	f001 f8e2 	bl	800a1b4 <vPortExitCritical>

	return xAlreadyYielded;
 8008ff0:	68bb      	ldr	r3, [r7, #8]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	2000139c 	.word	0x2000139c
 8009000:	20001374 	.word	0x20001374
 8009004:	20001334 	.word	0x20001334
 8009008:	2000137c 	.word	0x2000137c
 800900c:	20000ea4 	.word	0x20000ea4
 8009010:	20000ea0 	.word	0x20000ea0
 8009014:	20001388 	.word	0x20001388
 8009018:	20001384 	.word	0x20001384
 800901c:	e000ed04 	.word	0xe000ed04

08009020 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009026:	4b05      	ldr	r3, [pc, #20]	; (800903c <xTaskGetTickCount+0x1c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800902c:	687b      	ldr	r3, [r7, #4]
}
 800902e:	4618      	mov	r0, r3
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	20001378 	.word	0x20001378

08009040 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009046:	2300      	movs	r3, #0
 8009048:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800904a:	4b4f      	ldr	r3, [pc, #316]	; (8009188 <xTaskIncrementTick+0x148>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	f040 808f 	bne.w	8009172 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009054:	4b4d      	ldr	r3, [pc, #308]	; (800918c <xTaskIncrementTick+0x14c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3301      	adds	r3, #1
 800905a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800905c:	4a4b      	ldr	r2, [pc, #300]	; (800918c <xTaskIncrementTick+0x14c>)
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d120      	bne.n	80090aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009068:	4b49      	ldr	r3, [pc, #292]	; (8009190 <xTaskIncrementTick+0x150>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00a      	beq.n	8009088 <xTaskIncrementTick+0x48>
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	603b      	str	r3, [r7, #0]
}
 8009084:	bf00      	nop
 8009086:	e7fe      	b.n	8009086 <xTaskIncrementTick+0x46>
 8009088:	4b41      	ldr	r3, [pc, #260]	; (8009190 <xTaskIncrementTick+0x150>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	60fb      	str	r3, [r7, #12]
 800908e:	4b41      	ldr	r3, [pc, #260]	; (8009194 <xTaskIncrementTick+0x154>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a3f      	ldr	r2, [pc, #252]	; (8009190 <xTaskIncrementTick+0x150>)
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	4a3f      	ldr	r2, [pc, #252]	; (8009194 <xTaskIncrementTick+0x154>)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	4b3e      	ldr	r3, [pc, #248]	; (8009198 <xTaskIncrementTick+0x158>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3301      	adds	r3, #1
 80090a2:	4a3d      	ldr	r2, [pc, #244]	; (8009198 <xTaskIncrementTick+0x158>)
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	f000 fadb 	bl	8009660 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090aa:	4b3c      	ldr	r3, [pc, #240]	; (800919c <xTaskIncrementTick+0x15c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d349      	bcc.n	8009148 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090b4:	4b36      	ldr	r3, [pc, #216]	; (8009190 <xTaskIncrementTick+0x150>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d104      	bne.n	80090c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090be:	4b37      	ldr	r3, [pc, #220]	; (800919c <xTaskIncrementTick+0x15c>)
 80090c0:	f04f 32ff 	mov.w	r2, #4294967295
 80090c4:	601a      	str	r2, [r3, #0]
					break;
 80090c6:	e03f      	b.n	8009148 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090c8:	4b31      	ldr	r3, [pc, #196]	; (8009190 <xTaskIncrementTick+0x150>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d203      	bcs.n	80090e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090e0:	4a2e      	ldr	r2, [pc, #184]	; (800919c <xTaskIncrementTick+0x15c>)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090e6:	e02f      	b.n	8009148 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fe ff79 	bl	8007fe4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d004      	beq.n	8009104 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	3318      	adds	r3, #24
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe ff70 	bl	8007fe4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009108:	4b25      	ldr	r3, [pc, #148]	; (80091a0 <xTaskIncrementTick+0x160>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	429a      	cmp	r2, r3
 800910e:	d903      	bls.n	8009118 <xTaskIncrementTick+0xd8>
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	4a22      	ldr	r2, [pc, #136]	; (80091a0 <xTaskIncrementTick+0x160>)
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4a1f      	ldr	r2, [pc, #124]	; (80091a4 <xTaskIncrementTick+0x164>)
 8009126:	441a      	add	r2, r3
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	3304      	adds	r3, #4
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f7fe fefb 	bl	8007f2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009138:	4b1b      	ldr	r3, [pc, #108]	; (80091a8 <xTaskIncrementTick+0x168>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913e:	429a      	cmp	r2, r3
 8009140:	d3b8      	bcc.n	80090b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009142:	2301      	movs	r3, #1
 8009144:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009146:	e7b5      	b.n	80090b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009148:	4b17      	ldr	r3, [pc, #92]	; (80091a8 <xTaskIncrementTick+0x168>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914e:	4915      	ldr	r1, [pc, #84]	; (80091a4 <xTaskIncrementTick+0x164>)
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d901      	bls.n	8009164 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009160:	2301      	movs	r3, #1
 8009162:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009164:	4b11      	ldr	r3, [pc, #68]	; (80091ac <xTaskIncrementTick+0x16c>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d007      	beq.n	800917c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800916c:	2301      	movs	r3, #1
 800916e:	617b      	str	r3, [r7, #20]
 8009170:	e004      	b.n	800917c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009172:	4b0f      	ldr	r3, [pc, #60]	; (80091b0 <xTaskIncrementTick+0x170>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3301      	adds	r3, #1
 8009178:	4a0d      	ldr	r2, [pc, #52]	; (80091b0 <xTaskIncrementTick+0x170>)
 800917a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800917c:	697b      	ldr	r3, [r7, #20]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	2000139c 	.word	0x2000139c
 800918c:	20001378 	.word	0x20001378
 8009190:	2000132c 	.word	0x2000132c
 8009194:	20001330 	.word	0x20001330
 8009198:	2000138c 	.word	0x2000138c
 800919c:	20001394 	.word	0x20001394
 80091a0:	2000137c 	.word	0x2000137c
 80091a4:	20000ea4 	.word	0x20000ea4
 80091a8:	20000ea0 	.word	0x20000ea0
 80091ac:	20001388 	.word	0x20001388
 80091b0:	20001384 	.word	0x20001384

080091b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091ba:	4b2a      	ldr	r3, [pc, #168]	; (8009264 <vTaskSwitchContext+0xb0>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091c2:	4b29      	ldr	r3, [pc, #164]	; (8009268 <vTaskSwitchContext+0xb4>)
 80091c4:	2201      	movs	r2, #1
 80091c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091c8:	e046      	b.n	8009258 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80091ca:	4b27      	ldr	r3, [pc, #156]	; (8009268 <vTaskSwitchContext+0xb4>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d0:	4b26      	ldr	r3, [pc, #152]	; (800926c <vTaskSwitchContext+0xb8>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	e010      	b.n	80091fa <vTaskSwitchContext+0x46>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10a      	bne.n	80091f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	607b      	str	r3, [r7, #4]
}
 80091f0:	bf00      	nop
 80091f2:	e7fe      	b.n	80091f2 <vTaskSwitchContext+0x3e>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	60fb      	str	r3, [r7, #12]
 80091fa:	491d      	ldr	r1, [pc, #116]	; (8009270 <vTaskSwitchContext+0xbc>)
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4613      	mov	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	440b      	add	r3, r1
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d0e4      	beq.n	80091d8 <vTaskSwitchContext+0x24>
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4a15      	ldr	r2, [pc, #84]	; (8009270 <vTaskSwitchContext+0xbc>)
 800921a:	4413      	add	r3, r2
 800921c:	60bb      	str	r3, [r7, #8]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	605a      	str	r2, [r3, #4]
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	3308      	adds	r3, #8
 8009230:	429a      	cmp	r2, r3
 8009232:	d104      	bne.n	800923e <vTaskSwitchContext+0x8a>
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	605a      	str	r2, [r3, #4]
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	4a0b      	ldr	r2, [pc, #44]	; (8009274 <vTaskSwitchContext+0xc0>)
 8009246:	6013      	str	r3, [r2, #0]
 8009248:	4a08      	ldr	r2, [pc, #32]	; (800926c <vTaskSwitchContext+0xb8>)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <vTaskSwitchContext+0xc0>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	3354      	adds	r3, #84	; 0x54
 8009254:	4a08      	ldr	r2, [pc, #32]	; (8009278 <vTaskSwitchContext+0xc4>)
 8009256:	6013      	str	r3, [r2, #0]
}
 8009258:	bf00      	nop
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr
 8009264:	2000139c 	.word	0x2000139c
 8009268:	20001388 	.word	0x20001388
 800926c:	2000137c 	.word	0x2000137c
 8009270:	20000ea4 	.word	0x20000ea4
 8009274:	20000ea0 	.word	0x20000ea0
 8009278:	20000060 	.word	0x20000060

0800927c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10a      	bne.n	80092a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	60fb      	str	r3, [r7, #12]
}
 800929e:	bf00      	nop
 80092a0:	e7fe      	b.n	80092a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092a2:	4b07      	ldr	r3, [pc, #28]	; (80092c0 <vTaskPlaceOnEventList+0x44>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3318      	adds	r3, #24
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7fe fe61 	bl	8007f72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092b0:	2101      	movs	r1, #1
 80092b2:	6838      	ldr	r0, [r7, #0]
 80092b4:	f000 fa80 	bl	80097b8 <prvAddCurrentTaskToDelayedList>
}
 80092b8:	bf00      	nop
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20000ea0 	.word	0x20000ea0

080092c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10a      	bne.n	80092ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	617b      	str	r3, [r7, #20]
}
 80092e8:	bf00      	nop
 80092ea:	e7fe      	b.n	80092ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092ec:	4b0a      	ldr	r3, [pc, #40]	; (8009318 <vTaskPlaceOnEventListRestricted+0x54>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3318      	adds	r3, #24
 80092f2:	4619      	mov	r1, r3
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f7fe fe18 	bl	8007f2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009300:	f04f 33ff 	mov.w	r3, #4294967295
 8009304:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009306:	6879      	ldr	r1, [r7, #4]
 8009308:	68b8      	ldr	r0, [r7, #8]
 800930a:	f000 fa55 	bl	80097b8 <prvAddCurrentTaskToDelayedList>
	}
 800930e:	bf00      	nop
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20000ea0 	.word	0x20000ea0

0800931c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10a      	bne.n	8009348 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	60fb      	str	r3, [r7, #12]
}
 8009344:	bf00      	nop
 8009346:	e7fe      	b.n	8009346 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	3318      	adds	r3, #24
 800934c:	4618      	mov	r0, r3
 800934e:	f7fe fe49 	bl	8007fe4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009352:	4b1e      	ldr	r3, [pc, #120]	; (80093cc <xTaskRemoveFromEventList+0xb0>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d11d      	bne.n	8009396 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	3304      	adds	r3, #4
 800935e:	4618      	mov	r0, r3
 8009360:	f7fe fe40 	bl	8007fe4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009368:	4b19      	ldr	r3, [pc, #100]	; (80093d0 <xTaskRemoveFromEventList+0xb4>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	429a      	cmp	r2, r3
 800936e:	d903      	bls.n	8009378 <xTaskRemoveFromEventList+0x5c>
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009374:	4a16      	ldr	r2, [pc, #88]	; (80093d0 <xTaskRemoveFromEventList+0xb4>)
 8009376:	6013      	str	r3, [r2, #0]
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800937c:	4613      	mov	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4a13      	ldr	r2, [pc, #76]	; (80093d4 <xTaskRemoveFromEventList+0xb8>)
 8009386:	441a      	add	r2, r3
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	3304      	adds	r3, #4
 800938c:	4619      	mov	r1, r3
 800938e:	4610      	mov	r0, r2
 8009390:	f7fe fdcb 	bl	8007f2a <vListInsertEnd>
 8009394:	e005      	b.n	80093a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	3318      	adds	r3, #24
 800939a:	4619      	mov	r1, r3
 800939c:	480e      	ldr	r0, [pc, #56]	; (80093d8 <xTaskRemoveFromEventList+0xbc>)
 800939e:	f7fe fdc4 	bl	8007f2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a6:	4b0d      	ldr	r3, [pc, #52]	; (80093dc <xTaskRemoveFromEventList+0xc0>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d905      	bls.n	80093bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093b0:	2301      	movs	r3, #1
 80093b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093b4:	4b0a      	ldr	r3, [pc, #40]	; (80093e0 <xTaskRemoveFromEventList+0xc4>)
 80093b6:	2201      	movs	r2, #1
 80093b8:	601a      	str	r2, [r3, #0]
 80093ba:	e001      	b.n	80093c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80093bc:	2300      	movs	r3, #0
 80093be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093c0:	697b      	ldr	r3, [r7, #20]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	2000139c 	.word	0x2000139c
 80093d0:	2000137c 	.word	0x2000137c
 80093d4:	20000ea4 	.word	0x20000ea4
 80093d8:	20001334 	.word	0x20001334
 80093dc:	20000ea0 	.word	0x20000ea0
 80093e0:	20001388 	.word	0x20001388

080093e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093ec:	4b06      	ldr	r3, [pc, #24]	; (8009408 <vTaskInternalSetTimeOutState+0x24>)
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093f4:	4b05      	ldr	r3, [pc, #20]	; (800940c <vTaskInternalSetTimeOutState+0x28>)
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	605a      	str	r2, [r3, #4]
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	2000138c 	.word	0x2000138c
 800940c:	20001378 	.word	0x20001378

08009410 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10a      	bne.n	8009436 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	613b      	str	r3, [r7, #16]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10a      	bne.n	8009452 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	60fb      	str	r3, [r7, #12]
}
 800944e:	bf00      	nop
 8009450:	e7fe      	b.n	8009450 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009452:	f000 fe7f 	bl	800a154 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009456:	4b1d      	ldr	r3, [pc, #116]	; (80094cc <xTaskCheckForTimeOut+0xbc>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	69ba      	ldr	r2, [r7, #24]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946e:	d102      	bne.n	8009476 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009470:	2300      	movs	r3, #0
 8009472:	61fb      	str	r3, [r7, #28]
 8009474:	e023      	b.n	80094be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	4b15      	ldr	r3, [pc, #84]	; (80094d0 <xTaskCheckForTimeOut+0xc0>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	429a      	cmp	r2, r3
 8009480:	d007      	beq.n	8009492 <xTaskCheckForTimeOut+0x82>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	69ba      	ldr	r2, [r7, #24]
 8009488:	429a      	cmp	r2, r3
 800948a:	d302      	bcc.n	8009492 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800948c:	2301      	movs	r3, #1
 800948e:	61fb      	str	r3, [r7, #28]
 8009490:	e015      	b.n	80094be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	429a      	cmp	r2, r3
 800949a:	d20b      	bcs.n	80094b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	1ad2      	subs	r2, r2, r3
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7ff ff9b 	bl	80093e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094ae:	2300      	movs	r3, #0
 80094b0:	61fb      	str	r3, [r7, #28]
 80094b2:	e004      	b.n	80094be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094ba:	2301      	movs	r3, #1
 80094bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094be:	f000 fe79 	bl	800a1b4 <vPortExitCritical>

	return xReturn;
 80094c2:	69fb      	ldr	r3, [r7, #28]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3720      	adds	r7, #32
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	20001378 	.word	0x20001378
 80094d0:	2000138c 	.word	0x2000138c

080094d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094d4:	b480      	push	{r7}
 80094d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094d8:	4b03      	ldr	r3, [pc, #12]	; (80094e8 <vTaskMissedYield+0x14>)
 80094da:	2201      	movs	r2, #1
 80094dc:	601a      	str	r2, [r3, #0]
}
 80094de:	bf00      	nop
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	20001388 	.word	0x20001388

080094ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094f4:	f000 f852 	bl	800959c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094f8:	4b06      	ldr	r3, [pc, #24]	; (8009514 <prvIdleTask+0x28>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d9f9      	bls.n	80094f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009500:	4b05      	ldr	r3, [pc, #20]	; (8009518 <prvIdleTask+0x2c>)
 8009502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009510:	e7f0      	b.n	80094f4 <prvIdleTask+0x8>
 8009512:	bf00      	nop
 8009514:	20000ea4 	.word	0x20000ea4
 8009518:	e000ed04 	.word	0xe000ed04

0800951c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009522:	2300      	movs	r3, #0
 8009524:	607b      	str	r3, [r7, #4]
 8009526:	e00c      	b.n	8009542 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	4613      	mov	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4a12      	ldr	r2, [pc, #72]	; (800957c <prvInitialiseTaskLists+0x60>)
 8009534:	4413      	add	r3, r2
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe fcca 	bl	8007ed0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3301      	adds	r3, #1
 8009540:	607b      	str	r3, [r7, #4]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b37      	cmp	r3, #55	; 0x37
 8009546:	d9ef      	bls.n	8009528 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009548:	480d      	ldr	r0, [pc, #52]	; (8009580 <prvInitialiseTaskLists+0x64>)
 800954a:	f7fe fcc1 	bl	8007ed0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800954e:	480d      	ldr	r0, [pc, #52]	; (8009584 <prvInitialiseTaskLists+0x68>)
 8009550:	f7fe fcbe 	bl	8007ed0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009554:	480c      	ldr	r0, [pc, #48]	; (8009588 <prvInitialiseTaskLists+0x6c>)
 8009556:	f7fe fcbb 	bl	8007ed0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800955a:	480c      	ldr	r0, [pc, #48]	; (800958c <prvInitialiseTaskLists+0x70>)
 800955c:	f7fe fcb8 	bl	8007ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009560:	480b      	ldr	r0, [pc, #44]	; (8009590 <prvInitialiseTaskLists+0x74>)
 8009562:	f7fe fcb5 	bl	8007ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009566:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <prvInitialiseTaskLists+0x78>)
 8009568:	4a05      	ldr	r2, [pc, #20]	; (8009580 <prvInitialiseTaskLists+0x64>)
 800956a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800956c:	4b0a      	ldr	r3, [pc, #40]	; (8009598 <prvInitialiseTaskLists+0x7c>)
 800956e:	4a05      	ldr	r2, [pc, #20]	; (8009584 <prvInitialiseTaskLists+0x68>)
 8009570:	601a      	str	r2, [r3, #0]
}
 8009572:	bf00      	nop
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	20000ea4 	.word	0x20000ea4
 8009580:	20001304 	.word	0x20001304
 8009584:	20001318 	.word	0x20001318
 8009588:	20001334 	.word	0x20001334
 800958c:	20001348 	.word	0x20001348
 8009590:	20001360 	.word	0x20001360
 8009594:	2000132c 	.word	0x2000132c
 8009598:	20001330 	.word	0x20001330

0800959c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095a2:	e019      	b.n	80095d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80095a4:	f000 fdd6 	bl	800a154 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a8:	4b10      	ldr	r3, [pc, #64]	; (80095ec <prvCheckTasksWaitingTermination+0x50>)
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3304      	adds	r3, #4
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fe fd15 	bl	8007fe4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095ba:	4b0d      	ldr	r3, [pc, #52]	; (80095f0 <prvCheckTasksWaitingTermination+0x54>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	3b01      	subs	r3, #1
 80095c0:	4a0b      	ldr	r2, [pc, #44]	; (80095f0 <prvCheckTasksWaitingTermination+0x54>)
 80095c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095c4:	4b0b      	ldr	r3, [pc, #44]	; (80095f4 <prvCheckTasksWaitingTermination+0x58>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	3b01      	subs	r3, #1
 80095ca:	4a0a      	ldr	r2, [pc, #40]	; (80095f4 <prvCheckTasksWaitingTermination+0x58>)
 80095cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095ce:	f000 fdf1 	bl	800a1b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f810 	bl	80095f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095d8:	4b06      	ldr	r3, [pc, #24]	; (80095f4 <prvCheckTasksWaitingTermination+0x58>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1e1      	bne.n	80095a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095e0:	bf00      	nop
 80095e2:	bf00      	nop
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20001348 	.word	0x20001348
 80095f0:	20001374 	.word	0x20001374
 80095f4:	2000135c 	.word	0x2000135c

080095f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	3354      	adds	r3, #84	; 0x54
 8009604:	4618      	mov	r0, r3
 8009606:	f001 f8d9 	bl	800a7bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009610:	2b00      	cmp	r3, #0
 8009612:	d108      	bne.n	8009626 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009618:	4618      	mov	r0, r3
 800961a:	f000 ff89 	bl	800a530 <vPortFree>
				vPortFree( pxTCB );
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 ff86 	bl	800a530 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009624:	e018      	b.n	8009658 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800962c:	2b01      	cmp	r3, #1
 800962e:	d103      	bne.n	8009638 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 ff7d 	bl	800a530 <vPortFree>
	}
 8009636:	e00f      	b.n	8009658 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800963e:	2b02      	cmp	r3, #2
 8009640:	d00a      	beq.n	8009658 <prvDeleteTCB+0x60>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	60fb      	str	r3, [r7, #12]
}
 8009654:	bf00      	nop
 8009656:	e7fe      	b.n	8009656 <prvDeleteTCB+0x5e>
	}
 8009658:	bf00      	nop
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009666:	4b0c      	ldr	r3, [pc, #48]	; (8009698 <prvResetNextTaskUnblockTime+0x38>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d104      	bne.n	800967a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009670:	4b0a      	ldr	r3, [pc, #40]	; (800969c <prvResetNextTaskUnblockTime+0x3c>)
 8009672:	f04f 32ff 	mov.w	r2, #4294967295
 8009676:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009678:	e008      	b.n	800968c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800967a:	4b07      	ldr	r3, [pc, #28]	; (8009698 <prvResetNextTaskUnblockTime+0x38>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	4a04      	ldr	r2, [pc, #16]	; (800969c <prvResetNextTaskUnblockTime+0x3c>)
 800968a:	6013      	str	r3, [r2, #0]
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	2000132c 	.word	0x2000132c
 800969c:	20001394 	.word	0x20001394

080096a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096a6:	4b0b      	ldr	r3, [pc, #44]	; (80096d4 <xTaskGetSchedulerState+0x34>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d102      	bne.n	80096b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096ae:	2301      	movs	r3, #1
 80096b0:	607b      	str	r3, [r7, #4]
 80096b2:	e008      	b.n	80096c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096b4:	4b08      	ldr	r3, [pc, #32]	; (80096d8 <xTaskGetSchedulerState+0x38>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d102      	bne.n	80096c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096bc:	2302      	movs	r3, #2
 80096be:	607b      	str	r3, [r7, #4]
 80096c0:	e001      	b.n	80096c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096c2:	2300      	movs	r3, #0
 80096c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096c6:	687b      	ldr	r3, [r7, #4]
	}
 80096c8:	4618      	mov	r0, r3
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	20001380 	.word	0x20001380
 80096d8:	2000139c 	.word	0x2000139c

080096dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096e8:	2300      	movs	r3, #0
 80096ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d056      	beq.n	80097a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096f2:	4b2e      	ldr	r3, [pc, #184]	; (80097ac <xTaskPriorityDisinherit+0xd0>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d00a      	beq.n	8009712 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80096fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	60fb      	str	r3, [r7, #12]
}
 800970e:	bf00      	nop
 8009710:	e7fe      	b.n	8009710 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10a      	bne.n	8009730 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800971a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	60bb      	str	r3, [r7, #8]
}
 800972c:	bf00      	nop
 800972e:	e7fe      	b.n	800972e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009734:	1e5a      	subs	r2, r3, #1
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009742:	429a      	cmp	r2, r3
 8009744:	d02c      	beq.n	80097a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800974a:	2b00      	cmp	r3, #0
 800974c:	d128      	bne.n	80097a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	3304      	adds	r3, #4
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fc46 	bl	8007fe4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009764:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009770:	4b0f      	ldr	r3, [pc, #60]	; (80097b0 <xTaskPriorityDisinherit+0xd4>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	429a      	cmp	r2, r3
 8009776:	d903      	bls.n	8009780 <xTaskPriorityDisinherit+0xa4>
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977c:	4a0c      	ldr	r2, [pc, #48]	; (80097b0 <xTaskPriorityDisinherit+0xd4>)
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009784:	4613      	mov	r3, r2
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4413      	add	r3, r2
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	4a09      	ldr	r2, [pc, #36]	; (80097b4 <xTaskPriorityDisinherit+0xd8>)
 800978e:	441a      	add	r2, r3
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	3304      	adds	r3, #4
 8009794:	4619      	mov	r1, r3
 8009796:	4610      	mov	r0, r2
 8009798:	f7fe fbc7 	bl	8007f2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800979c:	2301      	movs	r3, #1
 800979e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097a0:	697b      	ldr	r3, [r7, #20]
	}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3718      	adds	r7, #24
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20000ea0 	.word	0x20000ea0
 80097b0:	2000137c 	.word	0x2000137c
 80097b4:	20000ea4 	.word	0x20000ea4

080097b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097c2:	4b21      	ldr	r3, [pc, #132]	; (8009848 <prvAddCurrentTaskToDelayedList+0x90>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097c8:	4b20      	ldr	r3, [pc, #128]	; (800984c <prvAddCurrentTaskToDelayedList+0x94>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3304      	adds	r3, #4
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fe fc08 	bl	8007fe4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097da:	d10a      	bne.n	80097f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d007      	beq.n	80097f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097e2:	4b1a      	ldr	r3, [pc, #104]	; (800984c <prvAddCurrentTaskToDelayedList+0x94>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3304      	adds	r3, #4
 80097e8:	4619      	mov	r1, r3
 80097ea:	4819      	ldr	r0, [pc, #100]	; (8009850 <prvAddCurrentTaskToDelayedList+0x98>)
 80097ec:	f7fe fb9d 	bl	8007f2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097f0:	e026      	b.n	8009840 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4413      	add	r3, r2
 80097f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097fa:	4b14      	ldr	r3, [pc, #80]	; (800984c <prvAddCurrentTaskToDelayedList+0x94>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	429a      	cmp	r2, r3
 8009808:	d209      	bcs.n	800981e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800980a:	4b12      	ldr	r3, [pc, #72]	; (8009854 <prvAddCurrentTaskToDelayedList+0x9c>)
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	4b0f      	ldr	r3, [pc, #60]	; (800984c <prvAddCurrentTaskToDelayedList+0x94>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	3304      	adds	r3, #4
 8009814:	4619      	mov	r1, r3
 8009816:	4610      	mov	r0, r2
 8009818:	f7fe fbab 	bl	8007f72 <vListInsert>
}
 800981c:	e010      	b.n	8009840 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800981e:	4b0e      	ldr	r3, [pc, #56]	; (8009858 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	4b0a      	ldr	r3, [pc, #40]	; (800984c <prvAddCurrentTaskToDelayedList+0x94>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	3304      	adds	r3, #4
 8009828:	4619      	mov	r1, r3
 800982a:	4610      	mov	r0, r2
 800982c:	f7fe fba1 	bl	8007f72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009830:	4b0a      	ldr	r3, [pc, #40]	; (800985c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	429a      	cmp	r2, r3
 8009838:	d202      	bcs.n	8009840 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800983a:	4a08      	ldr	r2, [pc, #32]	; (800985c <prvAddCurrentTaskToDelayedList+0xa4>)
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	6013      	str	r3, [r2, #0]
}
 8009840:	bf00      	nop
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	20001378 	.word	0x20001378
 800984c:	20000ea0 	.word	0x20000ea0
 8009850:	20001360 	.word	0x20001360
 8009854:	20001330 	.word	0x20001330
 8009858:	2000132c 	.word	0x2000132c
 800985c:	20001394 	.word	0x20001394

08009860 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b08a      	sub	sp, #40	; 0x28
 8009864:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009866:	2300      	movs	r3, #0
 8009868:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800986a:	f000 fb07 	bl	8009e7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800986e:	4b1c      	ldr	r3, [pc, #112]	; (80098e0 <xTimerCreateTimerTask+0x80>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d021      	beq.n	80098ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009876:	2300      	movs	r3, #0
 8009878:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800987a:	2300      	movs	r3, #0
 800987c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800987e:	1d3a      	adds	r2, r7, #4
 8009880:	f107 0108 	add.w	r1, r7, #8
 8009884:	f107 030c 	add.w	r3, r7, #12
 8009888:	4618      	mov	r0, r3
 800988a:	f7fe fb07 	bl	8007e9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	9202      	str	r2, [sp, #8]
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	2302      	movs	r3, #2
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	2300      	movs	r3, #0
 800989e:	460a      	mov	r2, r1
 80098a0:	4910      	ldr	r1, [pc, #64]	; (80098e4 <xTimerCreateTimerTask+0x84>)
 80098a2:	4811      	ldr	r0, [pc, #68]	; (80098e8 <xTimerCreateTimerTask+0x88>)
 80098a4:	f7ff f8b4 	bl	8008a10 <xTaskCreateStatic>
 80098a8:	4603      	mov	r3, r0
 80098aa:	4a10      	ldr	r2, [pc, #64]	; (80098ec <xTimerCreateTimerTask+0x8c>)
 80098ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80098ae:	4b0f      	ldr	r3, [pc, #60]	; (80098ec <xTimerCreateTimerTask+0x8c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098b6:	2301      	movs	r3, #1
 80098b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10a      	bne.n	80098d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	613b      	str	r3, [r7, #16]
}
 80098d2:	bf00      	nop
 80098d4:	e7fe      	b.n	80098d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098d6:	697b      	ldr	r3, [r7, #20]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	200013d0 	.word	0x200013d0
 80098e4:	0800b220 	.word	0x0800b220
 80098e8:	08009a25 	.word	0x08009a25
 80098ec:	200013d4 	.word	0x200013d4

080098f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08a      	sub	sp, #40	; 0x28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
 80098fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80098fe:	2300      	movs	r3, #0
 8009900:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10a      	bne.n	800991e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	623b      	str	r3, [r7, #32]
}
 800991a:	bf00      	nop
 800991c:	e7fe      	b.n	800991c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800991e:	4b1a      	ldr	r3, [pc, #104]	; (8009988 <xTimerGenericCommand+0x98>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d02a      	beq.n	800997c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2b05      	cmp	r3, #5
 8009936:	dc18      	bgt.n	800996a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009938:	f7ff feb2 	bl	80096a0 <xTaskGetSchedulerState>
 800993c:	4603      	mov	r3, r0
 800993e:	2b02      	cmp	r3, #2
 8009940:	d109      	bne.n	8009956 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009942:	4b11      	ldr	r3, [pc, #68]	; (8009988 <xTimerGenericCommand+0x98>)
 8009944:	6818      	ldr	r0, [r3, #0]
 8009946:	f107 0110 	add.w	r1, r7, #16
 800994a:	2300      	movs	r3, #0
 800994c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800994e:	f7fe fc77 	bl	8008240 <xQueueGenericSend>
 8009952:	6278      	str	r0, [r7, #36]	; 0x24
 8009954:	e012      	b.n	800997c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009956:	4b0c      	ldr	r3, [pc, #48]	; (8009988 <xTimerGenericCommand+0x98>)
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	f107 0110 	add.w	r1, r7, #16
 800995e:	2300      	movs	r3, #0
 8009960:	2200      	movs	r2, #0
 8009962:	f7fe fc6d 	bl	8008240 <xQueueGenericSend>
 8009966:	6278      	str	r0, [r7, #36]	; 0x24
 8009968:	e008      	b.n	800997c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800996a:	4b07      	ldr	r3, [pc, #28]	; (8009988 <xTimerGenericCommand+0x98>)
 800996c:	6818      	ldr	r0, [r3, #0]
 800996e:	f107 0110 	add.w	r1, r7, #16
 8009972:	2300      	movs	r3, #0
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	f7fe fd61 	bl	800843c <xQueueGenericSendFromISR>
 800997a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800997e:	4618      	mov	r0, r3
 8009980:	3728      	adds	r7, #40	; 0x28
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	200013d0 	.word	0x200013d0

0800998c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b088      	sub	sp, #32
 8009990:	af02      	add	r7, sp, #8
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009996:	4b22      	ldr	r3, [pc, #136]	; (8009a20 <prvProcessExpiredTimer+0x94>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	3304      	adds	r3, #4
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fe fb1d 	bl	8007fe4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099b0:	f003 0304 	and.w	r3, r3, #4
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d022      	beq.n	80099fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	699a      	ldr	r2, [r3, #24]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	18d1      	adds	r1, r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	6978      	ldr	r0, [r7, #20]
 80099c6:	f000 f8d1 	bl	8009b6c <prvInsertTimerInActiveList>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d01f      	beq.n	8009a10 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099d0:	2300      	movs	r3, #0
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	2300      	movs	r3, #0
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	2100      	movs	r1, #0
 80099da:	6978      	ldr	r0, [r7, #20]
 80099dc:	f7ff ff88 	bl	80098f0 <xTimerGenericCommand>
 80099e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d113      	bne.n	8009a10 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	60fb      	str	r3, [r7, #12]
}
 80099fa:	bf00      	nop
 80099fc:	e7fe      	b.n	80099fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a04:	f023 0301 	bic.w	r3, r3, #1
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	6a1b      	ldr	r3, [r3, #32]
 8009a14:	6978      	ldr	r0, [r7, #20]
 8009a16:	4798      	blx	r3
}
 8009a18:	bf00      	nop
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	200013c8 	.word	0x200013c8

08009a24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a2c:	f107 0308 	add.w	r3, r7, #8
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 f857 	bl	8009ae4 <prvGetNextExpireTime>
 8009a36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 f803 	bl	8009a48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a42:	f000 f8d5 	bl	8009bf0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a46:	e7f1      	b.n	8009a2c <prvTimerTask+0x8>

08009a48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a52:	f7ff fa39 	bl	8008ec8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a56:	f107 0308 	add.w	r3, r7, #8
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 f866 	bl	8009b2c <prvSampleTimeNow>
 8009a60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d130      	bne.n	8009aca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10a      	bne.n	8009a84 <prvProcessTimerOrBlockTask+0x3c>
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d806      	bhi.n	8009a84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a76:	f7ff fa35 	bl	8008ee4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a7a:	68f9      	ldr	r1, [r7, #12]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7ff ff85 	bl	800998c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a82:	e024      	b.n	8009ace <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d008      	beq.n	8009a9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a8a:	4b13      	ldr	r3, [pc, #76]	; (8009ad8 <prvProcessTimerOrBlockTask+0x90>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d101      	bne.n	8009a98 <prvProcessTimerOrBlockTask+0x50>
 8009a94:	2301      	movs	r3, #1
 8009a96:	e000      	b.n	8009a9a <prvProcessTimerOrBlockTask+0x52>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a9c:	4b0f      	ldr	r3, [pc, #60]	; (8009adc <prvProcessTimerOrBlockTask+0x94>)
 8009a9e:	6818      	ldr	r0, [r3, #0]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	1ad3      	subs	r3, r2, r3
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	f7fe ff7d 	bl	80089a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009aae:	f7ff fa19 	bl	8008ee4 <xTaskResumeAll>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10a      	bne.n	8009ace <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ab8:	4b09      	ldr	r3, [pc, #36]	; (8009ae0 <prvProcessTimerOrBlockTask+0x98>)
 8009aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009abe:	601a      	str	r2, [r3, #0]
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	f3bf 8f6f 	isb	sy
}
 8009ac8:	e001      	b.n	8009ace <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009aca:	f7ff fa0b 	bl	8008ee4 <xTaskResumeAll>
}
 8009ace:	bf00      	nop
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	200013cc 	.word	0x200013cc
 8009adc:	200013d0 	.word	0x200013d0
 8009ae0:	e000ed04 	.word	0xe000ed04

08009ae4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009aec:	4b0e      	ldr	r3, [pc, #56]	; (8009b28 <prvGetNextExpireTime+0x44>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <prvGetNextExpireTime+0x16>
 8009af6:	2201      	movs	r2, #1
 8009af8:	e000      	b.n	8009afc <prvGetNextExpireTime+0x18>
 8009afa:	2200      	movs	r2, #0
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d105      	bne.n	8009b14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b08:	4b07      	ldr	r3, [pc, #28]	; (8009b28 <prvGetNextExpireTime+0x44>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	60fb      	str	r3, [r7, #12]
 8009b12:	e001      	b.n	8009b18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b14:	2300      	movs	r3, #0
 8009b16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b18:	68fb      	ldr	r3, [r7, #12]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3714      	adds	r7, #20
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	200013c8 	.word	0x200013c8

08009b2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b34:	f7ff fa74 	bl	8009020 <xTaskGetTickCount>
 8009b38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b3a:	4b0b      	ldr	r3, [pc, #44]	; (8009b68 <prvSampleTimeNow+0x3c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d205      	bcs.n	8009b50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b44:	f000 f936 	bl	8009db4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	e002      	b.n	8009b56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b56:	4a04      	ldr	r2, [pc, #16]	; (8009b68 <prvSampleTimeNow+0x3c>)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	200013d8 	.word	0x200013d8

08009b6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
 8009b78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d812      	bhi.n	8009bb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	1ad2      	subs	r2, r2, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d302      	bcc.n	8009ba6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	617b      	str	r3, [r7, #20]
 8009ba4:	e01b      	b.n	8009bde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ba6:	4b10      	ldr	r3, [pc, #64]	; (8009be8 <prvInsertTimerInActiveList+0x7c>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3304      	adds	r3, #4
 8009bae:	4619      	mov	r1, r3
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	f7fe f9de 	bl	8007f72 <vListInsert>
 8009bb6:	e012      	b.n	8009bde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d206      	bcs.n	8009bce <prvInsertTimerInActiveList+0x62>
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d302      	bcc.n	8009bce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	617b      	str	r3, [r7, #20]
 8009bcc:	e007      	b.n	8009bde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bce:	4b07      	ldr	r3, [pc, #28]	; (8009bec <prvInsertTimerInActiveList+0x80>)
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4610      	mov	r0, r2
 8009bda:	f7fe f9ca 	bl	8007f72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009bde:	697b      	ldr	r3, [r7, #20]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3718      	adds	r7, #24
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	200013cc 	.word	0x200013cc
 8009bec:	200013c8 	.word	0x200013c8

08009bf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08e      	sub	sp, #56	; 0x38
 8009bf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bf6:	e0ca      	b.n	8009d8e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	da18      	bge.n	8009c30 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009bfe:	1d3b      	adds	r3, r7, #4
 8009c00:	3304      	adds	r3, #4
 8009c02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10a      	bne.n	8009c20 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	61fb      	str	r3, [r7, #28]
}
 8009c1c:	bf00      	nop
 8009c1e:	e7fe      	b.n	8009c1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c26:	6850      	ldr	r0, [r2, #4]
 8009c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c2a:	6892      	ldr	r2, [r2, #8]
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f2c0 80ab 	blt.w	8009d8e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d004      	beq.n	8009c4e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	3304      	adds	r3, #4
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fe f9cb 	bl	8007fe4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c4e:	463b      	mov	r3, r7
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7ff ff6b 	bl	8009b2c <prvSampleTimeNow>
 8009c56:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b09      	cmp	r3, #9
 8009c5c:	f200 8096 	bhi.w	8009d8c <prvProcessReceivedCommands+0x19c>
 8009c60:	a201      	add	r2, pc, #4	; (adr r2, 8009c68 <prvProcessReceivedCommands+0x78>)
 8009c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c66:	bf00      	nop
 8009c68:	08009c91 	.word	0x08009c91
 8009c6c:	08009c91 	.word	0x08009c91
 8009c70:	08009c91 	.word	0x08009c91
 8009c74:	08009d05 	.word	0x08009d05
 8009c78:	08009d19 	.word	0x08009d19
 8009c7c:	08009d63 	.word	0x08009d63
 8009c80:	08009c91 	.word	0x08009c91
 8009c84:	08009c91 	.word	0x08009c91
 8009c88:	08009d05 	.word	0x08009d05
 8009c8c:	08009d19 	.word	0x08009d19
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c96:	f043 0301 	orr.w	r3, r3, #1
 8009c9a:	b2da      	uxtb	r2, r3
 8009c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	18d1      	adds	r1, r2, r3
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cb0:	f7ff ff5c 	bl	8009b6c <prvInsertTimerInActiveList>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d069      	beq.n	8009d8e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cc8:	f003 0304 	and.w	r3, r3, #4
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d05e      	beq.n	8009d8e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	441a      	add	r2, r3
 8009cd8:	2300      	movs	r3, #0
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	2100      	movs	r1, #0
 8009ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ce2:	f7ff fe05 	bl	80098f0 <xTimerGenericCommand>
 8009ce6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009ce8:	6a3b      	ldr	r3, [r7, #32]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d14f      	bne.n	8009d8e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	61bb      	str	r3, [r7, #24]
}
 8009d00:	bf00      	nop
 8009d02:	e7fe      	b.n	8009d02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d0a:	f023 0301 	bic.w	r3, r3, #1
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009d16:	e03a      	b.n	8009d8e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d1e:	f043 0301 	orr.w	r3, r3, #1
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d32:	699b      	ldr	r3, [r3, #24]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10a      	bne.n	8009d4e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3c:	f383 8811 	msr	BASEPRI, r3
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	617b      	str	r3, [r7, #20]
}
 8009d4a:	bf00      	nop
 8009d4c:	e7fe      	b.n	8009d4c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d50:	699a      	ldr	r2, [r3, #24]
 8009d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d54:	18d1      	adds	r1, r2, r3
 8009d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d5c:	f7ff ff06 	bl	8009b6c <prvInsertTimerInActiveList>
					break;
 8009d60:	e015      	b.n	8009d8e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d68:	f003 0302 	and.w	r3, r3, #2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d103      	bne.n	8009d78 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d72:	f000 fbdd 	bl	800a530 <vPortFree>
 8009d76:	e00a      	b.n	8009d8e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d7e:	f023 0301 	bic.w	r3, r3, #1
 8009d82:	b2da      	uxtb	r2, r3
 8009d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d8a:	e000      	b.n	8009d8e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009d8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d8e:	4b08      	ldr	r3, [pc, #32]	; (8009db0 <prvProcessReceivedCommands+0x1c0>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	1d39      	adds	r1, r7, #4
 8009d94:	2200      	movs	r2, #0
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fe fbec 	bl	8008574 <xQueueReceive>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f47f af2a 	bne.w	8009bf8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009da4:	bf00      	nop
 8009da6:	bf00      	nop
 8009da8:	3730      	adds	r7, #48	; 0x30
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	200013d0 	.word	0x200013d0

08009db4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b088      	sub	sp, #32
 8009db8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dba:	e048      	b.n	8009e4e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dbc:	4b2d      	ldr	r3, [pc, #180]	; (8009e74 <prvSwitchTimerLists+0xc0>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dc6:	4b2b      	ldr	r3, [pc, #172]	; (8009e74 <prvSwitchTimerLists+0xc0>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fe f905 	bl	8007fe4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009de8:	f003 0304 	and.w	r3, r3, #4
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d02e      	beq.n	8009e4e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	4413      	add	r3, r2
 8009df8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d90e      	bls.n	8009e20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e0e:	4b19      	ldr	r3, [pc, #100]	; (8009e74 <prvSwitchTimerLists+0xc0>)
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	3304      	adds	r3, #4
 8009e16:	4619      	mov	r1, r3
 8009e18:	4610      	mov	r0, r2
 8009e1a:	f7fe f8aa 	bl	8007f72 <vListInsert>
 8009e1e:	e016      	b.n	8009e4e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e20:	2300      	movs	r3, #0
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	2300      	movs	r3, #0
 8009e26:	693a      	ldr	r2, [r7, #16]
 8009e28:	2100      	movs	r1, #0
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f7ff fd60 	bl	80098f0 <xTimerGenericCommand>
 8009e30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10a      	bne.n	8009e4e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	603b      	str	r3, [r7, #0]
}
 8009e4a:	bf00      	nop
 8009e4c:	e7fe      	b.n	8009e4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e4e:	4b09      	ldr	r3, [pc, #36]	; (8009e74 <prvSwitchTimerLists+0xc0>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1b1      	bne.n	8009dbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e58:	4b06      	ldr	r3, [pc, #24]	; (8009e74 <prvSwitchTimerLists+0xc0>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e5e:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <prvSwitchTimerLists+0xc4>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a04      	ldr	r2, [pc, #16]	; (8009e74 <prvSwitchTimerLists+0xc0>)
 8009e64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e66:	4a04      	ldr	r2, [pc, #16]	; (8009e78 <prvSwitchTimerLists+0xc4>)
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	6013      	str	r3, [r2, #0]
}
 8009e6c:	bf00      	nop
 8009e6e:	3718      	adds	r7, #24
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	200013c8 	.word	0x200013c8
 8009e78:	200013cc 	.word	0x200013cc

08009e7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e82:	f000 f967 	bl	800a154 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e86:	4b15      	ldr	r3, [pc, #84]	; (8009edc <prvCheckForValidListAndQueue+0x60>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d120      	bne.n	8009ed0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e8e:	4814      	ldr	r0, [pc, #80]	; (8009ee0 <prvCheckForValidListAndQueue+0x64>)
 8009e90:	f7fe f81e 	bl	8007ed0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e94:	4813      	ldr	r0, [pc, #76]	; (8009ee4 <prvCheckForValidListAndQueue+0x68>)
 8009e96:	f7fe f81b 	bl	8007ed0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e9a:	4b13      	ldr	r3, [pc, #76]	; (8009ee8 <prvCheckForValidListAndQueue+0x6c>)
 8009e9c:	4a10      	ldr	r2, [pc, #64]	; (8009ee0 <prvCheckForValidListAndQueue+0x64>)
 8009e9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ea0:	4b12      	ldr	r3, [pc, #72]	; (8009eec <prvCheckForValidListAndQueue+0x70>)
 8009ea2:	4a10      	ldr	r2, [pc, #64]	; (8009ee4 <prvCheckForValidListAndQueue+0x68>)
 8009ea4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	4b11      	ldr	r3, [pc, #68]	; (8009ef0 <prvCheckForValidListAndQueue+0x74>)
 8009eac:	4a11      	ldr	r2, [pc, #68]	; (8009ef4 <prvCheckForValidListAndQueue+0x78>)
 8009eae:	2110      	movs	r1, #16
 8009eb0:	200a      	movs	r0, #10
 8009eb2:	f7fe f929 	bl	8008108 <xQueueGenericCreateStatic>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	4a08      	ldr	r2, [pc, #32]	; (8009edc <prvCheckForValidListAndQueue+0x60>)
 8009eba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ebc:	4b07      	ldr	r3, [pc, #28]	; (8009edc <prvCheckForValidListAndQueue+0x60>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d005      	beq.n	8009ed0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ec4:	4b05      	ldr	r3, [pc, #20]	; (8009edc <prvCheckForValidListAndQueue+0x60>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	490b      	ldr	r1, [pc, #44]	; (8009ef8 <prvCheckForValidListAndQueue+0x7c>)
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fe fd42 	bl	8008954 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ed0:	f000 f970 	bl	800a1b4 <vPortExitCritical>
}
 8009ed4:	bf00      	nop
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	200013d0 	.word	0x200013d0
 8009ee0:	200013a0 	.word	0x200013a0
 8009ee4:	200013b4 	.word	0x200013b4
 8009ee8:	200013c8 	.word	0x200013c8
 8009eec:	200013cc 	.word	0x200013cc
 8009ef0:	2000147c 	.word	0x2000147c
 8009ef4:	200013dc 	.word	0x200013dc
 8009ef8:	0800b228 	.word	0x0800b228

08009efc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3b04      	subs	r3, #4
 8009f0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	3b04      	subs	r3, #4
 8009f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	f023 0201 	bic.w	r2, r3, #1
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3b04      	subs	r3, #4
 8009f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f2c:	4a0c      	ldr	r2, [pc, #48]	; (8009f60 <pxPortInitialiseStack+0x64>)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	3b14      	subs	r3, #20
 8009f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	3b04      	subs	r3, #4
 8009f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f06f 0202 	mvn.w	r2, #2
 8009f4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	3b20      	subs	r3, #32
 8009f50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f52:	68fb      	ldr	r3, [r7, #12]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	08009f65 	.word	0x08009f65

08009f64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f6e:	4b12      	ldr	r3, [pc, #72]	; (8009fb8 <prvTaskExitError+0x54>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f76:	d00a      	beq.n	8009f8e <prvTaskExitError+0x2a>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	60fb      	str	r3, [r7, #12]
}
 8009f8a:	bf00      	nop
 8009f8c:	e7fe      	b.n	8009f8c <prvTaskExitError+0x28>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	60bb      	str	r3, [r7, #8]
}
 8009fa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009fa2:	bf00      	nop
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d0fc      	beq.n	8009fa4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009faa:	bf00      	nop
 8009fac:	bf00      	nop
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	20000010 	.word	0x20000010
 8009fbc:	00000000 	.word	0x00000000

08009fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <pxCurrentTCBConst2>)
 8009fc2:	6819      	ldr	r1, [r3, #0]
 8009fc4:	6808      	ldr	r0, [r1, #0]
 8009fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fca:	f380 8809 	msr	PSP, r0
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f04f 0000 	mov.w	r0, #0
 8009fd6:	f380 8811 	msr	BASEPRI, r0
 8009fda:	4770      	bx	lr
 8009fdc:	f3af 8000 	nop.w

08009fe0 <pxCurrentTCBConst2>:
 8009fe0:	20000ea0 	.word	0x20000ea0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop

08009fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fe8:	4808      	ldr	r0, [pc, #32]	; (800a00c <prvPortStartFirstTask+0x24>)
 8009fea:	6800      	ldr	r0, [r0, #0]
 8009fec:	6800      	ldr	r0, [r0, #0]
 8009fee:	f380 8808 	msr	MSP, r0
 8009ff2:	f04f 0000 	mov.w	r0, #0
 8009ff6:	f380 8814 	msr	CONTROL, r0
 8009ffa:	b662      	cpsie	i
 8009ffc:	b661      	cpsie	f
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	df00      	svc	0
 800a008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a00a:	bf00      	nop
 800a00c:	e000ed08 	.word	0xe000ed08

0800a010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a016:	4b46      	ldr	r3, [pc, #280]	; (800a130 <xPortStartScheduler+0x120>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a46      	ldr	r2, [pc, #280]	; (800a134 <xPortStartScheduler+0x124>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d10a      	bne.n	800a036 <xPortStartScheduler+0x26>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	613b      	str	r3, [r7, #16]
}
 800a032:	bf00      	nop
 800a034:	e7fe      	b.n	800a034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a036:	4b3e      	ldr	r3, [pc, #248]	; (800a130 <xPortStartScheduler+0x120>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a3f      	ldr	r2, [pc, #252]	; (800a138 <xPortStartScheduler+0x128>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d10a      	bne.n	800a056 <xPortStartScheduler+0x46>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	60fb      	str	r3, [r7, #12]
}
 800a052:	bf00      	nop
 800a054:	e7fe      	b.n	800a054 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a056:	4b39      	ldr	r3, [pc, #228]	; (800a13c <xPortStartScheduler+0x12c>)
 800a058:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	22ff      	movs	r2, #255	; 0xff
 800a066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a070:	78fb      	ldrb	r3, [r7, #3]
 800a072:	b2db      	uxtb	r3, r3
 800a074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	4b31      	ldr	r3, [pc, #196]	; (800a140 <xPortStartScheduler+0x130>)
 800a07c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a07e:	4b31      	ldr	r3, [pc, #196]	; (800a144 <xPortStartScheduler+0x134>)
 800a080:	2207      	movs	r2, #7
 800a082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a084:	e009      	b.n	800a09a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a086:	4b2f      	ldr	r3, [pc, #188]	; (800a144 <xPortStartScheduler+0x134>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	4a2d      	ldr	r2, [pc, #180]	; (800a144 <xPortStartScheduler+0x134>)
 800a08e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	b2db      	uxtb	r3, r3
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	b2db      	uxtb	r3, r3
 800a098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a09a:	78fb      	ldrb	r3, [r7, #3]
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0a2:	2b80      	cmp	r3, #128	; 0x80
 800a0a4:	d0ef      	beq.n	800a086 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0a6:	4b27      	ldr	r3, [pc, #156]	; (800a144 <xPortStartScheduler+0x134>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f1c3 0307 	rsb	r3, r3, #7
 800a0ae:	2b04      	cmp	r3, #4
 800a0b0:	d00a      	beq.n	800a0c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	60bb      	str	r3, [r7, #8]
}
 800a0c4:	bf00      	nop
 800a0c6:	e7fe      	b.n	800a0c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0c8:	4b1e      	ldr	r3, [pc, #120]	; (800a144 <xPortStartScheduler+0x134>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	021b      	lsls	r3, r3, #8
 800a0ce:	4a1d      	ldr	r2, [pc, #116]	; (800a144 <xPortStartScheduler+0x134>)
 800a0d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0d2:	4b1c      	ldr	r3, [pc, #112]	; (800a144 <xPortStartScheduler+0x134>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0da:	4a1a      	ldr	r2, [pc, #104]	; (800a144 <xPortStartScheduler+0x134>)
 800a0dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0e6:	4b18      	ldr	r3, [pc, #96]	; (800a148 <xPortStartScheduler+0x138>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a17      	ldr	r2, [pc, #92]	; (800a148 <xPortStartScheduler+0x138>)
 800a0ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a0f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0f2:	4b15      	ldr	r3, [pc, #84]	; (800a148 <xPortStartScheduler+0x138>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a14      	ldr	r2, [pc, #80]	; (800a148 <xPortStartScheduler+0x138>)
 800a0f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a0fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0fe:	f000 f8dd 	bl	800a2bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a102:	4b12      	ldr	r3, [pc, #72]	; (800a14c <xPortStartScheduler+0x13c>)
 800a104:	2200      	movs	r2, #0
 800a106:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a108:	f000 f8fc 	bl	800a304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a10c:	4b10      	ldr	r3, [pc, #64]	; (800a150 <xPortStartScheduler+0x140>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a0f      	ldr	r2, [pc, #60]	; (800a150 <xPortStartScheduler+0x140>)
 800a112:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a116:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a118:	f7ff ff66 	bl	8009fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a11c:	f7ff f84a 	bl	80091b4 <vTaskSwitchContext>
	prvTaskExitError();
 800a120:	f7ff ff20 	bl	8009f64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	e000ed00 	.word	0xe000ed00
 800a134:	410fc271 	.word	0x410fc271
 800a138:	410fc270 	.word	0x410fc270
 800a13c:	e000e400 	.word	0xe000e400
 800a140:	200014cc 	.word	0x200014cc
 800a144:	200014d0 	.word	0x200014d0
 800a148:	e000ed20 	.word	0xe000ed20
 800a14c:	20000010 	.word	0x20000010
 800a150:	e000ef34 	.word	0xe000ef34

0800a154 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
	__asm volatile
 800a15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	607b      	str	r3, [r7, #4]
}
 800a16c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a16e:	4b0f      	ldr	r3, [pc, #60]	; (800a1ac <vPortEnterCritical+0x58>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3301      	adds	r3, #1
 800a174:	4a0d      	ldr	r2, [pc, #52]	; (800a1ac <vPortEnterCritical+0x58>)
 800a176:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a178:	4b0c      	ldr	r3, [pc, #48]	; (800a1ac <vPortEnterCritical+0x58>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d10f      	bne.n	800a1a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a180:	4b0b      	ldr	r3, [pc, #44]	; (800a1b0 <vPortEnterCritical+0x5c>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00a      	beq.n	800a1a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	603b      	str	r3, [r7, #0]
}
 800a19c:	bf00      	nop
 800a19e:	e7fe      	b.n	800a19e <vPortEnterCritical+0x4a>
	}
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	20000010 	.word	0x20000010
 800a1b0:	e000ed04 	.word	0xe000ed04

0800a1b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1ba:	4b12      	ldr	r3, [pc, #72]	; (800a204 <vPortExitCritical+0x50>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10a      	bne.n	800a1d8 <vPortExitCritical+0x24>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	607b      	str	r3, [r7, #4]
}
 800a1d4:	bf00      	nop
 800a1d6:	e7fe      	b.n	800a1d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1d8:	4b0a      	ldr	r3, [pc, #40]	; (800a204 <vPortExitCritical+0x50>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	4a09      	ldr	r2, [pc, #36]	; (800a204 <vPortExitCritical+0x50>)
 800a1e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1e2:	4b08      	ldr	r3, [pc, #32]	; (800a204 <vPortExitCritical+0x50>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d105      	bne.n	800a1f6 <vPortExitCritical+0x42>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	f383 8811 	msr	BASEPRI, r3
}
 800a1f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1f6:	bf00      	nop
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	20000010 	.word	0x20000010
	...

0800a210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a210:	f3ef 8009 	mrs	r0, PSP
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	4b15      	ldr	r3, [pc, #84]	; (800a270 <pxCurrentTCBConst>)
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	f01e 0f10 	tst.w	lr, #16
 800a220:	bf08      	it	eq
 800a222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22a:	6010      	str	r0, [r2, #0]
 800a22c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a230:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a234:	f380 8811 	msr	BASEPRI, r0
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f7fe ffb8 	bl	80091b4 <vTaskSwitchContext>
 800a244:	f04f 0000 	mov.w	r0, #0
 800a248:	f380 8811 	msr	BASEPRI, r0
 800a24c:	bc09      	pop	{r0, r3}
 800a24e:	6819      	ldr	r1, [r3, #0]
 800a250:	6808      	ldr	r0, [r1, #0]
 800a252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a256:	f01e 0f10 	tst.w	lr, #16
 800a25a:	bf08      	it	eq
 800a25c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a260:	f380 8809 	msr	PSP, r0
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	f3af 8000 	nop.w

0800a270 <pxCurrentTCBConst>:
 800a270:	20000ea0 	.word	0x20000ea0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a274:	bf00      	nop
 800a276:	bf00      	nop

0800a278 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	607b      	str	r3, [r7, #4]
}
 800a290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a292:	f7fe fed5 	bl	8009040 <xTaskIncrementTick>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d003      	beq.n	800a2a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a29c:	4b06      	ldr	r3, [pc, #24]	; (800a2b8 <xPortSysTickHandler+0x40>)
 800a29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2a2:	601a      	str	r2, [r3, #0]
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f383 8811 	msr	BASEPRI, r3
}
 800a2ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2b0:	bf00      	nop
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	e000ed04 	.word	0xe000ed04

0800a2bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2bc:	b480      	push	{r7}
 800a2be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2c0:	4b0b      	ldr	r3, [pc, #44]	; (800a2f0 <vPortSetupTimerInterrupt+0x34>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2c6:	4b0b      	ldr	r3, [pc, #44]	; (800a2f4 <vPortSetupTimerInterrupt+0x38>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2cc:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <vPortSetupTimerInterrupt+0x3c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a0a      	ldr	r2, [pc, #40]	; (800a2fc <vPortSetupTimerInterrupt+0x40>)
 800a2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2d6:	099b      	lsrs	r3, r3, #6
 800a2d8:	4a09      	ldr	r2, [pc, #36]	; (800a300 <vPortSetupTimerInterrupt+0x44>)
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2de:	4b04      	ldr	r3, [pc, #16]	; (800a2f0 <vPortSetupTimerInterrupt+0x34>)
 800a2e0:	2207      	movs	r2, #7
 800a2e2:	601a      	str	r2, [r3, #0]
}
 800a2e4:	bf00      	nop
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	e000e010 	.word	0xe000e010
 800a2f4:	e000e018 	.word	0xe000e018
 800a2f8:	20000004 	.word	0x20000004
 800a2fc:	10624dd3 	.word	0x10624dd3
 800a300:	e000e014 	.word	0xe000e014

0800a304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a314 <vPortEnableVFP+0x10>
 800a308:	6801      	ldr	r1, [r0, #0]
 800a30a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a30e:	6001      	str	r1, [r0, #0]
 800a310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a312:	bf00      	nop
 800a314:	e000ed88 	.word	0xe000ed88

0800a318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a31e:	f3ef 8305 	mrs	r3, IPSR
 800a322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2b0f      	cmp	r3, #15
 800a328:	d914      	bls.n	800a354 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a32a:	4a17      	ldr	r2, [pc, #92]	; (800a388 <vPortValidateInterruptPriority+0x70>)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	4413      	add	r3, r2
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a334:	4b15      	ldr	r3, [pc, #84]	; (800a38c <vPortValidateInterruptPriority+0x74>)
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	7afa      	ldrb	r2, [r7, #11]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d20a      	bcs.n	800a354 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	607b      	str	r3, [r7, #4]
}
 800a350:	bf00      	nop
 800a352:	e7fe      	b.n	800a352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a354:	4b0e      	ldr	r3, [pc, #56]	; (800a390 <vPortValidateInterruptPriority+0x78>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a35c:	4b0d      	ldr	r3, [pc, #52]	; (800a394 <vPortValidateInterruptPriority+0x7c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d90a      	bls.n	800a37a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a368:	f383 8811 	msr	BASEPRI, r3
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	603b      	str	r3, [r7, #0]
}
 800a376:	bf00      	nop
 800a378:	e7fe      	b.n	800a378 <vPortValidateInterruptPriority+0x60>
	}
 800a37a:	bf00      	nop
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	e000e3f0 	.word	0xe000e3f0
 800a38c:	200014cc 	.word	0x200014cc
 800a390:	e000ed0c 	.word	0xe000ed0c
 800a394:	200014d0 	.word	0x200014d0

0800a398 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b08a      	sub	sp, #40	; 0x28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3a4:	f7fe fd90 	bl	8008ec8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3a8:	4b5b      	ldr	r3, [pc, #364]	; (800a518 <pvPortMalloc+0x180>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d101      	bne.n	800a3b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3b0:	f000 f920 	bl	800a5f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3b4:	4b59      	ldr	r3, [pc, #356]	; (800a51c <pvPortMalloc+0x184>)
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f040 8093 	bne.w	800a4e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d01d      	beq.n	800a404 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a3c8:	2208      	movs	r2, #8
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f003 0307 	and.w	r3, r3, #7
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d014      	beq.n	800a404 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f023 0307 	bic.w	r3, r3, #7
 800a3e0:	3308      	adds	r3, #8
 800a3e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f003 0307 	and.w	r3, r3, #7
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00a      	beq.n	800a404 <pvPortMalloc+0x6c>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	617b      	str	r3, [r7, #20]
}
 800a400:	bf00      	nop
 800a402:	e7fe      	b.n	800a402 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d06e      	beq.n	800a4e8 <pvPortMalloc+0x150>
 800a40a:	4b45      	ldr	r3, [pc, #276]	; (800a520 <pvPortMalloc+0x188>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	429a      	cmp	r2, r3
 800a412:	d869      	bhi.n	800a4e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a414:	4b43      	ldr	r3, [pc, #268]	; (800a524 <pvPortMalloc+0x18c>)
 800a416:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a418:	4b42      	ldr	r3, [pc, #264]	; (800a524 <pvPortMalloc+0x18c>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a41e:	e004      	b.n	800a42a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	429a      	cmp	r2, r3
 800a432:	d903      	bls.n	800a43c <pvPortMalloc+0xa4>
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1f1      	bne.n	800a420 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a43c:	4b36      	ldr	r3, [pc, #216]	; (800a518 <pvPortMalloc+0x180>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a442:	429a      	cmp	r2, r3
 800a444:	d050      	beq.n	800a4e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2208      	movs	r2, #8
 800a44c:	4413      	add	r3, r2
 800a44e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	1ad2      	subs	r2, r2, r3
 800a460:	2308      	movs	r3, #8
 800a462:	005b      	lsls	r3, r3, #1
 800a464:	429a      	cmp	r2, r3
 800a466:	d91f      	bls.n	800a4a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4413      	add	r3, r2
 800a46e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	f003 0307 	and.w	r3, r3, #7
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00a      	beq.n	800a490 <pvPortMalloc+0xf8>
	__asm volatile
 800a47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47e:	f383 8811 	msr	BASEPRI, r3
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	613b      	str	r3, [r7, #16]
}
 800a48c:	bf00      	nop
 800a48e:	e7fe      	b.n	800a48e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a492:	685a      	ldr	r2, [r3, #4]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	1ad2      	subs	r2, r2, r3
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4a2:	69b8      	ldr	r0, [r7, #24]
 800a4a4:	f000 f908 	bl	800a6b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4a8:	4b1d      	ldr	r3, [pc, #116]	; (800a520 <pvPortMalloc+0x188>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	4a1b      	ldr	r2, [pc, #108]	; (800a520 <pvPortMalloc+0x188>)
 800a4b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4b6:	4b1a      	ldr	r3, [pc, #104]	; (800a520 <pvPortMalloc+0x188>)
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	4b1b      	ldr	r3, [pc, #108]	; (800a528 <pvPortMalloc+0x190>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d203      	bcs.n	800a4ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4c2:	4b17      	ldr	r3, [pc, #92]	; (800a520 <pvPortMalloc+0x188>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a18      	ldr	r2, [pc, #96]	; (800a528 <pvPortMalloc+0x190>)
 800a4c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	4b13      	ldr	r3, [pc, #76]	; (800a51c <pvPortMalloc+0x184>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	431a      	orrs	r2, r3
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	2200      	movs	r2, #0
 800a4dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a4de:	4b13      	ldr	r3, [pc, #76]	; (800a52c <pvPortMalloc+0x194>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	4a11      	ldr	r2, [pc, #68]	; (800a52c <pvPortMalloc+0x194>)
 800a4e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4e8:	f7fe fcfc 	bl	8008ee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	f003 0307 	and.w	r3, r3, #7
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00a      	beq.n	800a50c <pvPortMalloc+0x174>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	60fb      	str	r3, [r7, #12]
}
 800a508:	bf00      	nop
 800a50a:	e7fe      	b.n	800a50a <pvPortMalloc+0x172>
	return pvReturn;
 800a50c:	69fb      	ldr	r3, [r7, #28]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3728      	adds	r7, #40	; 0x28
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	200050dc 	.word	0x200050dc
 800a51c:	200050f0 	.word	0x200050f0
 800a520:	200050e0 	.word	0x200050e0
 800a524:	200050d4 	.word	0x200050d4
 800a528:	200050e4 	.word	0x200050e4
 800a52c:	200050e8 	.word	0x200050e8

0800a530 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d04d      	beq.n	800a5de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a542:	2308      	movs	r3, #8
 800a544:	425b      	negs	r3, r3
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	4413      	add	r3, r2
 800a54a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	4b24      	ldr	r3, [pc, #144]	; (800a5e8 <vPortFree+0xb8>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4013      	ands	r3, r2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10a      	bne.n	800a574 <vPortFree+0x44>
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	60fb      	str	r3, [r7, #12]
}
 800a570:	bf00      	nop
 800a572:	e7fe      	b.n	800a572 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00a      	beq.n	800a592 <vPortFree+0x62>
	__asm volatile
 800a57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	60bb      	str	r3, [r7, #8]
}
 800a58e:	bf00      	nop
 800a590:	e7fe      	b.n	800a590 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	685a      	ldr	r2, [r3, #4]
 800a596:	4b14      	ldr	r3, [pc, #80]	; (800a5e8 <vPortFree+0xb8>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4013      	ands	r3, r2
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d01e      	beq.n	800a5de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d11a      	bne.n	800a5de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	4b0e      	ldr	r3, [pc, #56]	; (800a5e8 <vPortFree+0xb8>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	43db      	mvns	r3, r3
 800a5b2:	401a      	ands	r2, r3
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5b8:	f7fe fc86 	bl	8008ec8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	4b0a      	ldr	r3, [pc, #40]	; (800a5ec <vPortFree+0xbc>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	4a09      	ldr	r2, [pc, #36]	; (800a5ec <vPortFree+0xbc>)
 800a5c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5ca:	6938      	ldr	r0, [r7, #16]
 800a5cc:	f000 f874 	bl	800a6b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a5d0:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <vPortFree+0xc0>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	4a06      	ldr	r2, [pc, #24]	; (800a5f0 <vPortFree+0xc0>)
 800a5d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a5da:	f7fe fc83 	bl	8008ee4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5de:	bf00      	nop
 800a5e0:	3718      	adds	r7, #24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	200050f0 	.word	0x200050f0
 800a5ec:	200050e0 	.word	0x200050e0
 800a5f0:	200050ec 	.word	0x200050ec

0800a5f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a5fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a600:	4b27      	ldr	r3, [pc, #156]	; (800a6a0 <prvHeapInit+0xac>)
 800a602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f003 0307 	and.w	r3, r3, #7
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00c      	beq.n	800a628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	3307      	adds	r3, #7
 800a612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f023 0307 	bic.w	r3, r3, #7
 800a61a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	4a1f      	ldr	r2, [pc, #124]	; (800a6a0 <prvHeapInit+0xac>)
 800a624:	4413      	add	r3, r2
 800a626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a62c:	4a1d      	ldr	r2, [pc, #116]	; (800a6a4 <prvHeapInit+0xb0>)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a632:	4b1c      	ldr	r3, [pc, #112]	; (800a6a4 <prvHeapInit+0xb0>)
 800a634:	2200      	movs	r2, #0
 800a636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	68ba      	ldr	r2, [r7, #8]
 800a63c:	4413      	add	r3, r2
 800a63e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a640:	2208      	movs	r2, #8
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	1a9b      	subs	r3, r3, r2
 800a646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f023 0307 	bic.w	r3, r3, #7
 800a64e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	4a15      	ldr	r2, [pc, #84]	; (800a6a8 <prvHeapInit+0xb4>)
 800a654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a656:	4b14      	ldr	r3, [pc, #80]	; (800a6a8 <prvHeapInit+0xb4>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2200      	movs	r2, #0
 800a65c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a65e:	4b12      	ldr	r3, [pc, #72]	; (800a6a8 <prvHeapInit+0xb4>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	1ad2      	subs	r2, r2, r3
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a674:	4b0c      	ldr	r3, [pc, #48]	; (800a6a8 <prvHeapInit+0xb4>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	4a0a      	ldr	r2, [pc, #40]	; (800a6ac <prvHeapInit+0xb8>)
 800a682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	4a09      	ldr	r2, [pc, #36]	; (800a6b0 <prvHeapInit+0xbc>)
 800a68a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a68c:	4b09      	ldr	r3, [pc, #36]	; (800a6b4 <prvHeapInit+0xc0>)
 800a68e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a692:	601a      	str	r2, [r3, #0]
}
 800a694:	bf00      	nop
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	200014d4 	.word	0x200014d4
 800a6a4:	200050d4 	.word	0x200050d4
 800a6a8:	200050dc 	.word	0x200050dc
 800a6ac:	200050e4 	.word	0x200050e4
 800a6b0:	200050e0 	.word	0x200050e0
 800a6b4:	200050f0 	.word	0x200050f0

0800a6b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6c0:	4b28      	ldr	r3, [pc, #160]	; (800a764 <prvInsertBlockIntoFreeList+0xac>)
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	e002      	b.n	800a6cc <prvInsertBlockIntoFreeList+0x14>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d8f7      	bhi.n	800a6c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d108      	bne.n	800a6fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	441a      	add	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	441a      	add	r2, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d118      	bne.n	800a740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	4b15      	ldr	r3, [pc, #84]	; (800a768 <prvInsertBlockIntoFreeList+0xb0>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	429a      	cmp	r2, r3
 800a718:	d00d      	beq.n	800a736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	441a      	add	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	601a      	str	r2, [r3, #0]
 800a734:	e008      	b.n	800a748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a736:	4b0c      	ldr	r3, [pc, #48]	; (800a768 <prvInsertBlockIntoFreeList+0xb0>)
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	e003      	b.n	800a748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d002      	beq.n	800a756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a756:	bf00      	nop
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	200050d4 	.word	0x200050d4
 800a768:	200050dc 	.word	0x200050dc

0800a76c <siprintf>:
 800a76c:	b40e      	push	{r1, r2, r3}
 800a76e:	b500      	push	{lr}
 800a770:	b09c      	sub	sp, #112	; 0x70
 800a772:	ab1d      	add	r3, sp, #116	; 0x74
 800a774:	9002      	str	r0, [sp, #8]
 800a776:	9006      	str	r0, [sp, #24]
 800a778:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a77c:	4809      	ldr	r0, [pc, #36]	; (800a7a4 <siprintf+0x38>)
 800a77e:	9107      	str	r1, [sp, #28]
 800a780:	9104      	str	r1, [sp, #16]
 800a782:	4909      	ldr	r1, [pc, #36]	; (800a7a8 <siprintf+0x3c>)
 800a784:	f853 2b04 	ldr.w	r2, [r3], #4
 800a788:	9105      	str	r1, [sp, #20]
 800a78a:	6800      	ldr	r0, [r0, #0]
 800a78c:	9301      	str	r3, [sp, #4]
 800a78e:	a902      	add	r1, sp, #8
 800a790:	f000 f9f6 	bl	800ab80 <_svfiprintf_r>
 800a794:	9b02      	ldr	r3, [sp, #8]
 800a796:	2200      	movs	r2, #0
 800a798:	701a      	strb	r2, [r3, #0]
 800a79a:	b01c      	add	sp, #112	; 0x70
 800a79c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7a0:	b003      	add	sp, #12
 800a7a2:	4770      	bx	lr
 800a7a4:	20000060 	.word	0x20000060
 800a7a8:	ffff0208 	.word	0xffff0208

0800a7ac <memset>:
 800a7ac:	4402      	add	r2, r0
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d100      	bne.n	800a7b6 <memset+0xa>
 800a7b4:	4770      	bx	lr
 800a7b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7ba:	e7f9      	b.n	800a7b0 <memset+0x4>

0800a7bc <_reclaim_reent>:
 800a7bc:	4b29      	ldr	r3, [pc, #164]	; (800a864 <_reclaim_reent+0xa8>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4283      	cmp	r3, r0
 800a7c2:	b570      	push	{r4, r5, r6, lr}
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	d04b      	beq.n	800a860 <_reclaim_reent+0xa4>
 800a7c8:	69c3      	ldr	r3, [r0, #28]
 800a7ca:	b143      	cbz	r3, 800a7de <_reclaim_reent+0x22>
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d144      	bne.n	800a85c <_reclaim_reent+0xa0>
 800a7d2:	69e3      	ldr	r3, [r4, #28]
 800a7d4:	6819      	ldr	r1, [r3, #0]
 800a7d6:	b111      	cbz	r1, 800a7de <_reclaim_reent+0x22>
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f000 f87f 	bl	800a8dc <_free_r>
 800a7de:	6961      	ldr	r1, [r4, #20]
 800a7e0:	b111      	cbz	r1, 800a7e8 <_reclaim_reent+0x2c>
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 f87a 	bl	800a8dc <_free_r>
 800a7e8:	69e1      	ldr	r1, [r4, #28]
 800a7ea:	b111      	cbz	r1, 800a7f2 <_reclaim_reent+0x36>
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f000 f875 	bl	800a8dc <_free_r>
 800a7f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a7f4:	b111      	cbz	r1, 800a7fc <_reclaim_reent+0x40>
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f000 f870 	bl	800a8dc <_free_r>
 800a7fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7fe:	b111      	cbz	r1, 800a806 <_reclaim_reent+0x4a>
 800a800:	4620      	mov	r0, r4
 800a802:	f000 f86b 	bl	800a8dc <_free_r>
 800a806:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a808:	b111      	cbz	r1, 800a810 <_reclaim_reent+0x54>
 800a80a:	4620      	mov	r0, r4
 800a80c:	f000 f866 	bl	800a8dc <_free_r>
 800a810:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a812:	b111      	cbz	r1, 800a81a <_reclaim_reent+0x5e>
 800a814:	4620      	mov	r0, r4
 800a816:	f000 f861 	bl	800a8dc <_free_r>
 800a81a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a81c:	b111      	cbz	r1, 800a824 <_reclaim_reent+0x68>
 800a81e:	4620      	mov	r0, r4
 800a820:	f000 f85c 	bl	800a8dc <_free_r>
 800a824:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a826:	b111      	cbz	r1, 800a82e <_reclaim_reent+0x72>
 800a828:	4620      	mov	r0, r4
 800a82a:	f000 f857 	bl	800a8dc <_free_r>
 800a82e:	6a23      	ldr	r3, [r4, #32]
 800a830:	b1b3      	cbz	r3, 800a860 <_reclaim_reent+0xa4>
 800a832:	4620      	mov	r0, r4
 800a834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a838:	4718      	bx	r3
 800a83a:	5949      	ldr	r1, [r1, r5]
 800a83c:	b941      	cbnz	r1, 800a850 <_reclaim_reent+0x94>
 800a83e:	3504      	adds	r5, #4
 800a840:	69e3      	ldr	r3, [r4, #28]
 800a842:	2d80      	cmp	r5, #128	; 0x80
 800a844:	68d9      	ldr	r1, [r3, #12]
 800a846:	d1f8      	bne.n	800a83a <_reclaim_reent+0x7e>
 800a848:	4620      	mov	r0, r4
 800a84a:	f000 f847 	bl	800a8dc <_free_r>
 800a84e:	e7c0      	b.n	800a7d2 <_reclaim_reent+0x16>
 800a850:	680e      	ldr	r6, [r1, #0]
 800a852:	4620      	mov	r0, r4
 800a854:	f000 f842 	bl	800a8dc <_free_r>
 800a858:	4631      	mov	r1, r6
 800a85a:	e7ef      	b.n	800a83c <_reclaim_reent+0x80>
 800a85c:	2500      	movs	r5, #0
 800a85e:	e7ef      	b.n	800a840 <_reclaim_reent+0x84>
 800a860:	bd70      	pop	{r4, r5, r6, pc}
 800a862:	bf00      	nop
 800a864:	20000060 	.word	0x20000060

0800a868 <__errno>:
 800a868:	4b01      	ldr	r3, [pc, #4]	; (800a870 <__errno+0x8>)
 800a86a:	6818      	ldr	r0, [r3, #0]
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	20000060 	.word	0x20000060

0800a874 <__libc_init_array>:
 800a874:	b570      	push	{r4, r5, r6, lr}
 800a876:	4d0d      	ldr	r5, [pc, #52]	; (800a8ac <__libc_init_array+0x38>)
 800a878:	4c0d      	ldr	r4, [pc, #52]	; (800a8b0 <__libc_init_array+0x3c>)
 800a87a:	1b64      	subs	r4, r4, r5
 800a87c:	10a4      	asrs	r4, r4, #2
 800a87e:	2600      	movs	r6, #0
 800a880:	42a6      	cmp	r6, r4
 800a882:	d109      	bne.n	800a898 <__libc_init_array+0x24>
 800a884:	4d0b      	ldr	r5, [pc, #44]	; (800a8b4 <__libc_init_array+0x40>)
 800a886:	4c0c      	ldr	r4, [pc, #48]	; (800a8b8 <__libc_init_array+0x44>)
 800a888:	f000 fc6a 	bl	800b160 <_init>
 800a88c:	1b64      	subs	r4, r4, r5
 800a88e:	10a4      	asrs	r4, r4, #2
 800a890:	2600      	movs	r6, #0
 800a892:	42a6      	cmp	r6, r4
 800a894:	d105      	bne.n	800a8a2 <__libc_init_array+0x2e>
 800a896:	bd70      	pop	{r4, r5, r6, pc}
 800a898:	f855 3b04 	ldr.w	r3, [r5], #4
 800a89c:	4798      	blx	r3
 800a89e:	3601      	adds	r6, #1
 800a8a0:	e7ee      	b.n	800a880 <__libc_init_array+0xc>
 800a8a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8a6:	4798      	blx	r3
 800a8a8:	3601      	adds	r6, #1
 800a8aa:	e7f2      	b.n	800a892 <__libc_init_array+0x1e>
 800a8ac:	0800be08 	.word	0x0800be08
 800a8b0:	0800be08 	.word	0x0800be08
 800a8b4:	0800be08 	.word	0x0800be08
 800a8b8:	0800be0c 	.word	0x0800be0c

0800a8bc <__retarget_lock_acquire_recursive>:
 800a8bc:	4770      	bx	lr

0800a8be <__retarget_lock_release_recursive>:
 800a8be:	4770      	bx	lr

0800a8c0 <memcpy>:
 800a8c0:	440a      	add	r2, r1
 800a8c2:	4291      	cmp	r1, r2
 800a8c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8c8:	d100      	bne.n	800a8cc <memcpy+0xc>
 800a8ca:	4770      	bx	lr
 800a8cc:	b510      	push	{r4, lr}
 800a8ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8d6:	4291      	cmp	r1, r2
 800a8d8:	d1f9      	bne.n	800a8ce <memcpy+0xe>
 800a8da:	bd10      	pop	{r4, pc}

0800a8dc <_free_r>:
 800a8dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8de:	2900      	cmp	r1, #0
 800a8e0:	d044      	beq.n	800a96c <_free_r+0x90>
 800a8e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e6:	9001      	str	r0, [sp, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f1a1 0404 	sub.w	r4, r1, #4
 800a8ee:	bfb8      	it	lt
 800a8f0:	18e4      	addlt	r4, r4, r3
 800a8f2:	f000 f8df 	bl	800aab4 <__malloc_lock>
 800a8f6:	4a1e      	ldr	r2, [pc, #120]	; (800a970 <_free_r+0x94>)
 800a8f8:	9801      	ldr	r0, [sp, #4]
 800a8fa:	6813      	ldr	r3, [r2, #0]
 800a8fc:	b933      	cbnz	r3, 800a90c <_free_r+0x30>
 800a8fe:	6063      	str	r3, [r4, #4]
 800a900:	6014      	str	r4, [r2, #0]
 800a902:	b003      	add	sp, #12
 800a904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a908:	f000 b8da 	b.w	800aac0 <__malloc_unlock>
 800a90c:	42a3      	cmp	r3, r4
 800a90e:	d908      	bls.n	800a922 <_free_r+0x46>
 800a910:	6825      	ldr	r5, [r4, #0]
 800a912:	1961      	adds	r1, r4, r5
 800a914:	428b      	cmp	r3, r1
 800a916:	bf01      	itttt	eq
 800a918:	6819      	ldreq	r1, [r3, #0]
 800a91a:	685b      	ldreq	r3, [r3, #4]
 800a91c:	1949      	addeq	r1, r1, r5
 800a91e:	6021      	streq	r1, [r4, #0]
 800a920:	e7ed      	b.n	800a8fe <_free_r+0x22>
 800a922:	461a      	mov	r2, r3
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	b10b      	cbz	r3, 800a92c <_free_r+0x50>
 800a928:	42a3      	cmp	r3, r4
 800a92a:	d9fa      	bls.n	800a922 <_free_r+0x46>
 800a92c:	6811      	ldr	r1, [r2, #0]
 800a92e:	1855      	adds	r5, r2, r1
 800a930:	42a5      	cmp	r5, r4
 800a932:	d10b      	bne.n	800a94c <_free_r+0x70>
 800a934:	6824      	ldr	r4, [r4, #0]
 800a936:	4421      	add	r1, r4
 800a938:	1854      	adds	r4, r2, r1
 800a93a:	42a3      	cmp	r3, r4
 800a93c:	6011      	str	r1, [r2, #0]
 800a93e:	d1e0      	bne.n	800a902 <_free_r+0x26>
 800a940:	681c      	ldr	r4, [r3, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	6053      	str	r3, [r2, #4]
 800a946:	440c      	add	r4, r1
 800a948:	6014      	str	r4, [r2, #0]
 800a94a:	e7da      	b.n	800a902 <_free_r+0x26>
 800a94c:	d902      	bls.n	800a954 <_free_r+0x78>
 800a94e:	230c      	movs	r3, #12
 800a950:	6003      	str	r3, [r0, #0]
 800a952:	e7d6      	b.n	800a902 <_free_r+0x26>
 800a954:	6825      	ldr	r5, [r4, #0]
 800a956:	1961      	adds	r1, r4, r5
 800a958:	428b      	cmp	r3, r1
 800a95a:	bf04      	itt	eq
 800a95c:	6819      	ldreq	r1, [r3, #0]
 800a95e:	685b      	ldreq	r3, [r3, #4]
 800a960:	6063      	str	r3, [r4, #4]
 800a962:	bf04      	itt	eq
 800a964:	1949      	addeq	r1, r1, r5
 800a966:	6021      	streq	r1, [r4, #0]
 800a968:	6054      	str	r4, [r2, #4]
 800a96a:	e7ca      	b.n	800a902 <_free_r+0x26>
 800a96c:	b003      	add	sp, #12
 800a96e:	bd30      	pop	{r4, r5, pc}
 800a970:	20005234 	.word	0x20005234

0800a974 <sbrk_aligned>:
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	4e0e      	ldr	r6, [pc, #56]	; (800a9b0 <sbrk_aligned+0x3c>)
 800a978:	460c      	mov	r4, r1
 800a97a:	6831      	ldr	r1, [r6, #0]
 800a97c:	4605      	mov	r5, r0
 800a97e:	b911      	cbnz	r1, 800a986 <sbrk_aligned+0x12>
 800a980:	f000 fba6 	bl	800b0d0 <_sbrk_r>
 800a984:	6030      	str	r0, [r6, #0]
 800a986:	4621      	mov	r1, r4
 800a988:	4628      	mov	r0, r5
 800a98a:	f000 fba1 	bl	800b0d0 <_sbrk_r>
 800a98e:	1c43      	adds	r3, r0, #1
 800a990:	d00a      	beq.n	800a9a8 <sbrk_aligned+0x34>
 800a992:	1cc4      	adds	r4, r0, #3
 800a994:	f024 0403 	bic.w	r4, r4, #3
 800a998:	42a0      	cmp	r0, r4
 800a99a:	d007      	beq.n	800a9ac <sbrk_aligned+0x38>
 800a99c:	1a21      	subs	r1, r4, r0
 800a99e:	4628      	mov	r0, r5
 800a9a0:	f000 fb96 	bl	800b0d0 <_sbrk_r>
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	d101      	bne.n	800a9ac <sbrk_aligned+0x38>
 800a9a8:	f04f 34ff 	mov.w	r4, #4294967295
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	20005238 	.word	0x20005238

0800a9b4 <_malloc_r>:
 800a9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b8:	1ccd      	adds	r5, r1, #3
 800a9ba:	f025 0503 	bic.w	r5, r5, #3
 800a9be:	3508      	adds	r5, #8
 800a9c0:	2d0c      	cmp	r5, #12
 800a9c2:	bf38      	it	cc
 800a9c4:	250c      	movcc	r5, #12
 800a9c6:	2d00      	cmp	r5, #0
 800a9c8:	4607      	mov	r7, r0
 800a9ca:	db01      	blt.n	800a9d0 <_malloc_r+0x1c>
 800a9cc:	42a9      	cmp	r1, r5
 800a9ce:	d905      	bls.n	800a9dc <_malloc_r+0x28>
 800a9d0:	230c      	movs	r3, #12
 800a9d2:	603b      	str	r3, [r7, #0]
 800a9d4:	2600      	movs	r6, #0
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aab0 <_malloc_r+0xfc>
 800a9e0:	f000 f868 	bl	800aab4 <__malloc_lock>
 800a9e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a9e8:	461c      	mov	r4, r3
 800a9ea:	bb5c      	cbnz	r4, 800aa44 <_malloc_r+0x90>
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	4638      	mov	r0, r7
 800a9f0:	f7ff ffc0 	bl	800a974 <sbrk_aligned>
 800a9f4:	1c43      	adds	r3, r0, #1
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	d155      	bne.n	800aaa6 <_malloc_r+0xf2>
 800a9fa:	f8d8 4000 	ldr.w	r4, [r8]
 800a9fe:	4626      	mov	r6, r4
 800aa00:	2e00      	cmp	r6, #0
 800aa02:	d145      	bne.n	800aa90 <_malloc_r+0xdc>
 800aa04:	2c00      	cmp	r4, #0
 800aa06:	d048      	beq.n	800aa9a <_malloc_r+0xe6>
 800aa08:	6823      	ldr	r3, [r4, #0]
 800aa0a:	4631      	mov	r1, r6
 800aa0c:	4638      	mov	r0, r7
 800aa0e:	eb04 0903 	add.w	r9, r4, r3
 800aa12:	f000 fb5d 	bl	800b0d0 <_sbrk_r>
 800aa16:	4581      	cmp	r9, r0
 800aa18:	d13f      	bne.n	800aa9a <_malloc_r+0xe6>
 800aa1a:	6821      	ldr	r1, [r4, #0]
 800aa1c:	1a6d      	subs	r5, r5, r1
 800aa1e:	4629      	mov	r1, r5
 800aa20:	4638      	mov	r0, r7
 800aa22:	f7ff ffa7 	bl	800a974 <sbrk_aligned>
 800aa26:	3001      	adds	r0, #1
 800aa28:	d037      	beq.n	800aa9a <_malloc_r+0xe6>
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	442b      	add	r3, r5
 800aa2e:	6023      	str	r3, [r4, #0]
 800aa30:	f8d8 3000 	ldr.w	r3, [r8]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d038      	beq.n	800aaaa <_malloc_r+0xf6>
 800aa38:	685a      	ldr	r2, [r3, #4]
 800aa3a:	42a2      	cmp	r2, r4
 800aa3c:	d12b      	bne.n	800aa96 <_malloc_r+0xe2>
 800aa3e:	2200      	movs	r2, #0
 800aa40:	605a      	str	r2, [r3, #4]
 800aa42:	e00f      	b.n	800aa64 <_malloc_r+0xb0>
 800aa44:	6822      	ldr	r2, [r4, #0]
 800aa46:	1b52      	subs	r2, r2, r5
 800aa48:	d41f      	bmi.n	800aa8a <_malloc_r+0xd6>
 800aa4a:	2a0b      	cmp	r2, #11
 800aa4c:	d917      	bls.n	800aa7e <_malloc_r+0xca>
 800aa4e:	1961      	adds	r1, r4, r5
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	6025      	str	r5, [r4, #0]
 800aa54:	bf18      	it	ne
 800aa56:	6059      	strne	r1, [r3, #4]
 800aa58:	6863      	ldr	r3, [r4, #4]
 800aa5a:	bf08      	it	eq
 800aa5c:	f8c8 1000 	streq.w	r1, [r8]
 800aa60:	5162      	str	r2, [r4, r5]
 800aa62:	604b      	str	r3, [r1, #4]
 800aa64:	4638      	mov	r0, r7
 800aa66:	f104 060b 	add.w	r6, r4, #11
 800aa6a:	f000 f829 	bl	800aac0 <__malloc_unlock>
 800aa6e:	f026 0607 	bic.w	r6, r6, #7
 800aa72:	1d23      	adds	r3, r4, #4
 800aa74:	1af2      	subs	r2, r6, r3
 800aa76:	d0ae      	beq.n	800a9d6 <_malloc_r+0x22>
 800aa78:	1b9b      	subs	r3, r3, r6
 800aa7a:	50a3      	str	r3, [r4, r2]
 800aa7c:	e7ab      	b.n	800a9d6 <_malloc_r+0x22>
 800aa7e:	42a3      	cmp	r3, r4
 800aa80:	6862      	ldr	r2, [r4, #4]
 800aa82:	d1dd      	bne.n	800aa40 <_malloc_r+0x8c>
 800aa84:	f8c8 2000 	str.w	r2, [r8]
 800aa88:	e7ec      	b.n	800aa64 <_malloc_r+0xb0>
 800aa8a:	4623      	mov	r3, r4
 800aa8c:	6864      	ldr	r4, [r4, #4]
 800aa8e:	e7ac      	b.n	800a9ea <_malloc_r+0x36>
 800aa90:	4634      	mov	r4, r6
 800aa92:	6876      	ldr	r6, [r6, #4]
 800aa94:	e7b4      	b.n	800aa00 <_malloc_r+0x4c>
 800aa96:	4613      	mov	r3, r2
 800aa98:	e7cc      	b.n	800aa34 <_malloc_r+0x80>
 800aa9a:	230c      	movs	r3, #12
 800aa9c:	603b      	str	r3, [r7, #0]
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	f000 f80e 	bl	800aac0 <__malloc_unlock>
 800aaa4:	e797      	b.n	800a9d6 <_malloc_r+0x22>
 800aaa6:	6025      	str	r5, [r4, #0]
 800aaa8:	e7dc      	b.n	800aa64 <_malloc_r+0xb0>
 800aaaa:	605b      	str	r3, [r3, #4]
 800aaac:	deff      	udf	#255	; 0xff
 800aaae:	bf00      	nop
 800aab0:	20005234 	.word	0x20005234

0800aab4 <__malloc_lock>:
 800aab4:	4801      	ldr	r0, [pc, #4]	; (800aabc <__malloc_lock+0x8>)
 800aab6:	f7ff bf01 	b.w	800a8bc <__retarget_lock_acquire_recursive>
 800aaba:	bf00      	nop
 800aabc:	20005230 	.word	0x20005230

0800aac0 <__malloc_unlock>:
 800aac0:	4801      	ldr	r0, [pc, #4]	; (800aac8 <__malloc_unlock+0x8>)
 800aac2:	f7ff befc 	b.w	800a8be <__retarget_lock_release_recursive>
 800aac6:	bf00      	nop
 800aac8:	20005230 	.word	0x20005230

0800aacc <__ssputs_r>:
 800aacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aad0:	688e      	ldr	r6, [r1, #8]
 800aad2:	461f      	mov	r7, r3
 800aad4:	42be      	cmp	r6, r7
 800aad6:	680b      	ldr	r3, [r1, #0]
 800aad8:	4682      	mov	sl, r0
 800aada:	460c      	mov	r4, r1
 800aadc:	4690      	mov	r8, r2
 800aade:	d82c      	bhi.n	800ab3a <__ssputs_r+0x6e>
 800aae0:	898a      	ldrh	r2, [r1, #12]
 800aae2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aae6:	d026      	beq.n	800ab36 <__ssputs_r+0x6a>
 800aae8:	6965      	ldr	r5, [r4, #20]
 800aaea:	6909      	ldr	r1, [r1, #16]
 800aaec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaf0:	eba3 0901 	sub.w	r9, r3, r1
 800aaf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaf8:	1c7b      	adds	r3, r7, #1
 800aafa:	444b      	add	r3, r9
 800aafc:	106d      	asrs	r5, r5, #1
 800aafe:	429d      	cmp	r5, r3
 800ab00:	bf38      	it	cc
 800ab02:	461d      	movcc	r5, r3
 800ab04:	0553      	lsls	r3, r2, #21
 800ab06:	d527      	bpl.n	800ab58 <__ssputs_r+0x8c>
 800ab08:	4629      	mov	r1, r5
 800ab0a:	f7ff ff53 	bl	800a9b4 <_malloc_r>
 800ab0e:	4606      	mov	r6, r0
 800ab10:	b360      	cbz	r0, 800ab6c <__ssputs_r+0xa0>
 800ab12:	6921      	ldr	r1, [r4, #16]
 800ab14:	464a      	mov	r2, r9
 800ab16:	f7ff fed3 	bl	800a8c0 <memcpy>
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab24:	81a3      	strh	r3, [r4, #12]
 800ab26:	6126      	str	r6, [r4, #16]
 800ab28:	6165      	str	r5, [r4, #20]
 800ab2a:	444e      	add	r6, r9
 800ab2c:	eba5 0509 	sub.w	r5, r5, r9
 800ab30:	6026      	str	r6, [r4, #0]
 800ab32:	60a5      	str	r5, [r4, #8]
 800ab34:	463e      	mov	r6, r7
 800ab36:	42be      	cmp	r6, r7
 800ab38:	d900      	bls.n	800ab3c <__ssputs_r+0x70>
 800ab3a:	463e      	mov	r6, r7
 800ab3c:	6820      	ldr	r0, [r4, #0]
 800ab3e:	4632      	mov	r2, r6
 800ab40:	4641      	mov	r1, r8
 800ab42:	f000 faab 	bl	800b09c <memmove>
 800ab46:	68a3      	ldr	r3, [r4, #8]
 800ab48:	1b9b      	subs	r3, r3, r6
 800ab4a:	60a3      	str	r3, [r4, #8]
 800ab4c:	6823      	ldr	r3, [r4, #0]
 800ab4e:	4433      	add	r3, r6
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	2000      	movs	r0, #0
 800ab54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab58:	462a      	mov	r2, r5
 800ab5a:	f000 fac9 	bl	800b0f0 <_realloc_r>
 800ab5e:	4606      	mov	r6, r0
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d1e0      	bne.n	800ab26 <__ssputs_r+0x5a>
 800ab64:	6921      	ldr	r1, [r4, #16]
 800ab66:	4650      	mov	r0, sl
 800ab68:	f7ff feb8 	bl	800a8dc <_free_r>
 800ab6c:	230c      	movs	r3, #12
 800ab6e:	f8ca 3000 	str.w	r3, [sl]
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab78:	81a3      	strh	r3, [r4, #12]
 800ab7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab7e:	e7e9      	b.n	800ab54 <__ssputs_r+0x88>

0800ab80 <_svfiprintf_r>:
 800ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	4698      	mov	r8, r3
 800ab86:	898b      	ldrh	r3, [r1, #12]
 800ab88:	061b      	lsls	r3, r3, #24
 800ab8a:	b09d      	sub	sp, #116	; 0x74
 800ab8c:	4607      	mov	r7, r0
 800ab8e:	460d      	mov	r5, r1
 800ab90:	4614      	mov	r4, r2
 800ab92:	d50e      	bpl.n	800abb2 <_svfiprintf_r+0x32>
 800ab94:	690b      	ldr	r3, [r1, #16]
 800ab96:	b963      	cbnz	r3, 800abb2 <_svfiprintf_r+0x32>
 800ab98:	2140      	movs	r1, #64	; 0x40
 800ab9a:	f7ff ff0b 	bl	800a9b4 <_malloc_r>
 800ab9e:	6028      	str	r0, [r5, #0]
 800aba0:	6128      	str	r0, [r5, #16]
 800aba2:	b920      	cbnz	r0, 800abae <_svfiprintf_r+0x2e>
 800aba4:	230c      	movs	r3, #12
 800aba6:	603b      	str	r3, [r7, #0]
 800aba8:	f04f 30ff 	mov.w	r0, #4294967295
 800abac:	e0d0      	b.n	800ad50 <_svfiprintf_r+0x1d0>
 800abae:	2340      	movs	r3, #64	; 0x40
 800abb0:	616b      	str	r3, [r5, #20]
 800abb2:	2300      	movs	r3, #0
 800abb4:	9309      	str	r3, [sp, #36]	; 0x24
 800abb6:	2320      	movs	r3, #32
 800abb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800abc0:	2330      	movs	r3, #48	; 0x30
 800abc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ad68 <_svfiprintf_r+0x1e8>
 800abc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abca:	f04f 0901 	mov.w	r9, #1
 800abce:	4623      	mov	r3, r4
 800abd0:	469a      	mov	sl, r3
 800abd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd6:	b10a      	cbz	r2, 800abdc <_svfiprintf_r+0x5c>
 800abd8:	2a25      	cmp	r2, #37	; 0x25
 800abda:	d1f9      	bne.n	800abd0 <_svfiprintf_r+0x50>
 800abdc:	ebba 0b04 	subs.w	fp, sl, r4
 800abe0:	d00b      	beq.n	800abfa <_svfiprintf_r+0x7a>
 800abe2:	465b      	mov	r3, fp
 800abe4:	4622      	mov	r2, r4
 800abe6:	4629      	mov	r1, r5
 800abe8:	4638      	mov	r0, r7
 800abea:	f7ff ff6f 	bl	800aacc <__ssputs_r>
 800abee:	3001      	adds	r0, #1
 800abf0:	f000 80a9 	beq.w	800ad46 <_svfiprintf_r+0x1c6>
 800abf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abf6:	445a      	add	r2, fp
 800abf8:	9209      	str	r2, [sp, #36]	; 0x24
 800abfa:	f89a 3000 	ldrb.w	r3, [sl]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	f000 80a1 	beq.w	800ad46 <_svfiprintf_r+0x1c6>
 800ac04:	2300      	movs	r3, #0
 800ac06:	f04f 32ff 	mov.w	r2, #4294967295
 800ac0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac0e:	f10a 0a01 	add.w	sl, sl, #1
 800ac12:	9304      	str	r3, [sp, #16]
 800ac14:	9307      	str	r3, [sp, #28]
 800ac16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac1a:	931a      	str	r3, [sp, #104]	; 0x68
 800ac1c:	4654      	mov	r4, sl
 800ac1e:	2205      	movs	r2, #5
 800ac20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac24:	4850      	ldr	r0, [pc, #320]	; (800ad68 <_svfiprintf_r+0x1e8>)
 800ac26:	f7f5 fad3 	bl	80001d0 <memchr>
 800ac2a:	9a04      	ldr	r2, [sp, #16]
 800ac2c:	b9d8      	cbnz	r0, 800ac66 <_svfiprintf_r+0xe6>
 800ac2e:	06d0      	lsls	r0, r2, #27
 800ac30:	bf44      	itt	mi
 800ac32:	2320      	movmi	r3, #32
 800ac34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac38:	0711      	lsls	r1, r2, #28
 800ac3a:	bf44      	itt	mi
 800ac3c:	232b      	movmi	r3, #43	; 0x2b
 800ac3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac42:	f89a 3000 	ldrb.w	r3, [sl]
 800ac46:	2b2a      	cmp	r3, #42	; 0x2a
 800ac48:	d015      	beq.n	800ac76 <_svfiprintf_r+0xf6>
 800ac4a:	9a07      	ldr	r2, [sp, #28]
 800ac4c:	4654      	mov	r4, sl
 800ac4e:	2000      	movs	r0, #0
 800ac50:	f04f 0c0a 	mov.w	ip, #10
 800ac54:	4621      	mov	r1, r4
 800ac56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac5a:	3b30      	subs	r3, #48	; 0x30
 800ac5c:	2b09      	cmp	r3, #9
 800ac5e:	d94d      	bls.n	800acfc <_svfiprintf_r+0x17c>
 800ac60:	b1b0      	cbz	r0, 800ac90 <_svfiprintf_r+0x110>
 800ac62:	9207      	str	r2, [sp, #28]
 800ac64:	e014      	b.n	800ac90 <_svfiprintf_r+0x110>
 800ac66:	eba0 0308 	sub.w	r3, r0, r8
 800ac6a:	fa09 f303 	lsl.w	r3, r9, r3
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	9304      	str	r3, [sp, #16]
 800ac72:	46a2      	mov	sl, r4
 800ac74:	e7d2      	b.n	800ac1c <_svfiprintf_r+0x9c>
 800ac76:	9b03      	ldr	r3, [sp, #12]
 800ac78:	1d19      	adds	r1, r3, #4
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	9103      	str	r1, [sp, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	bfbb      	ittet	lt
 800ac82:	425b      	neglt	r3, r3
 800ac84:	f042 0202 	orrlt.w	r2, r2, #2
 800ac88:	9307      	strge	r3, [sp, #28]
 800ac8a:	9307      	strlt	r3, [sp, #28]
 800ac8c:	bfb8      	it	lt
 800ac8e:	9204      	strlt	r2, [sp, #16]
 800ac90:	7823      	ldrb	r3, [r4, #0]
 800ac92:	2b2e      	cmp	r3, #46	; 0x2e
 800ac94:	d10c      	bne.n	800acb0 <_svfiprintf_r+0x130>
 800ac96:	7863      	ldrb	r3, [r4, #1]
 800ac98:	2b2a      	cmp	r3, #42	; 0x2a
 800ac9a:	d134      	bne.n	800ad06 <_svfiprintf_r+0x186>
 800ac9c:	9b03      	ldr	r3, [sp, #12]
 800ac9e:	1d1a      	adds	r2, r3, #4
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	9203      	str	r2, [sp, #12]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	bfb8      	it	lt
 800aca8:	f04f 33ff 	movlt.w	r3, #4294967295
 800acac:	3402      	adds	r4, #2
 800acae:	9305      	str	r3, [sp, #20]
 800acb0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ad78 <_svfiprintf_r+0x1f8>
 800acb4:	7821      	ldrb	r1, [r4, #0]
 800acb6:	2203      	movs	r2, #3
 800acb8:	4650      	mov	r0, sl
 800acba:	f7f5 fa89 	bl	80001d0 <memchr>
 800acbe:	b138      	cbz	r0, 800acd0 <_svfiprintf_r+0x150>
 800acc0:	9b04      	ldr	r3, [sp, #16]
 800acc2:	eba0 000a 	sub.w	r0, r0, sl
 800acc6:	2240      	movs	r2, #64	; 0x40
 800acc8:	4082      	lsls	r2, r0
 800acca:	4313      	orrs	r3, r2
 800accc:	3401      	adds	r4, #1
 800acce:	9304      	str	r3, [sp, #16]
 800acd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd4:	4825      	ldr	r0, [pc, #148]	; (800ad6c <_svfiprintf_r+0x1ec>)
 800acd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acda:	2206      	movs	r2, #6
 800acdc:	f7f5 fa78 	bl	80001d0 <memchr>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d038      	beq.n	800ad56 <_svfiprintf_r+0x1d6>
 800ace4:	4b22      	ldr	r3, [pc, #136]	; (800ad70 <_svfiprintf_r+0x1f0>)
 800ace6:	bb1b      	cbnz	r3, 800ad30 <_svfiprintf_r+0x1b0>
 800ace8:	9b03      	ldr	r3, [sp, #12]
 800acea:	3307      	adds	r3, #7
 800acec:	f023 0307 	bic.w	r3, r3, #7
 800acf0:	3308      	adds	r3, #8
 800acf2:	9303      	str	r3, [sp, #12]
 800acf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf6:	4433      	add	r3, r6
 800acf8:	9309      	str	r3, [sp, #36]	; 0x24
 800acfa:	e768      	b.n	800abce <_svfiprintf_r+0x4e>
 800acfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad00:	460c      	mov	r4, r1
 800ad02:	2001      	movs	r0, #1
 800ad04:	e7a6      	b.n	800ac54 <_svfiprintf_r+0xd4>
 800ad06:	2300      	movs	r3, #0
 800ad08:	3401      	adds	r4, #1
 800ad0a:	9305      	str	r3, [sp, #20]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	f04f 0c0a 	mov.w	ip, #10
 800ad12:	4620      	mov	r0, r4
 800ad14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad18:	3a30      	subs	r2, #48	; 0x30
 800ad1a:	2a09      	cmp	r2, #9
 800ad1c:	d903      	bls.n	800ad26 <_svfiprintf_r+0x1a6>
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d0c6      	beq.n	800acb0 <_svfiprintf_r+0x130>
 800ad22:	9105      	str	r1, [sp, #20]
 800ad24:	e7c4      	b.n	800acb0 <_svfiprintf_r+0x130>
 800ad26:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e7f0      	b.n	800ad12 <_svfiprintf_r+0x192>
 800ad30:	ab03      	add	r3, sp, #12
 800ad32:	9300      	str	r3, [sp, #0]
 800ad34:	462a      	mov	r2, r5
 800ad36:	4b0f      	ldr	r3, [pc, #60]	; (800ad74 <_svfiprintf_r+0x1f4>)
 800ad38:	a904      	add	r1, sp, #16
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	f3af 8000 	nop.w
 800ad40:	1c42      	adds	r2, r0, #1
 800ad42:	4606      	mov	r6, r0
 800ad44:	d1d6      	bne.n	800acf4 <_svfiprintf_r+0x174>
 800ad46:	89ab      	ldrh	r3, [r5, #12]
 800ad48:	065b      	lsls	r3, r3, #25
 800ad4a:	f53f af2d 	bmi.w	800aba8 <_svfiprintf_r+0x28>
 800ad4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad50:	b01d      	add	sp, #116	; 0x74
 800ad52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad56:	ab03      	add	r3, sp, #12
 800ad58:	9300      	str	r3, [sp, #0]
 800ad5a:	462a      	mov	r2, r5
 800ad5c:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <_svfiprintf_r+0x1f4>)
 800ad5e:	a904      	add	r1, sp, #16
 800ad60:	4638      	mov	r0, r7
 800ad62:	f000 f879 	bl	800ae58 <_printf_i>
 800ad66:	e7eb      	b.n	800ad40 <_svfiprintf_r+0x1c0>
 800ad68:	0800bdcc 	.word	0x0800bdcc
 800ad6c:	0800bdd6 	.word	0x0800bdd6
 800ad70:	00000000 	.word	0x00000000
 800ad74:	0800aacd 	.word	0x0800aacd
 800ad78:	0800bdd2 	.word	0x0800bdd2

0800ad7c <_printf_common>:
 800ad7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad80:	4616      	mov	r6, r2
 800ad82:	4699      	mov	r9, r3
 800ad84:	688a      	ldr	r2, [r1, #8]
 800ad86:	690b      	ldr	r3, [r1, #16]
 800ad88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	bfb8      	it	lt
 800ad90:	4613      	movlt	r3, r2
 800ad92:	6033      	str	r3, [r6, #0]
 800ad94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad98:	4607      	mov	r7, r0
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	b10a      	cbz	r2, 800ada2 <_printf_common+0x26>
 800ad9e:	3301      	adds	r3, #1
 800ada0:	6033      	str	r3, [r6, #0]
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	0699      	lsls	r1, r3, #26
 800ada6:	bf42      	ittt	mi
 800ada8:	6833      	ldrmi	r3, [r6, #0]
 800adaa:	3302      	addmi	r3, #2
 800adac:	6033      	strmi	r3, [r6, #0]
 800adae:	6825      	ldr	r5, [r4, #0]
 800adb0:	f015 0506 	ands.w	r5, r5, #6
 800adb4:	d106      	bne.n	800adc4 <_printf_common+0x48>
 800adb6:	f104 0a19 	add.w	sl, r4, #25
 800adba:	68e3      	ldr	r3, [r4, #12]
 800adbc:	6832      	ldr	r2, [r6, #0]
 800adbe:	1a9b      	subs	r3, r3, r2
 800adc0:	42ab      	cmp	r3, r5
 800adc2:	dc26      	bgt.n	800ae12 <_printf_common+0x96>
 800adc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800adc8:	1e13      	subs	r3, r2, #0
 800adca:	6822      	ldr	r2, [r4, #0]
 800adcc:	bf18      	it	ne
 800adce:	2301      	movne	r3, #1
 800add0:	0692      	lsls	r2, r2, #26
 800add2:	d42b      	bmi.n	800ae2c <_printf_common+0xb0>
 800add4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800add8:	4649      	mov	r1, r9
 800adda:	4638      	mov	r0, r7
 800addc:	47c0      	blx	r8
 800adde:	3001      	adds	r0, #1
 800ade0:	d01e      	beq.n	800ae20 <_printf_common+0xa4>
 800ade2:	6823      	ldr	r3, [r4, #0]
 800ade4:	6922      	ldr	r2, [r4, #16]
 800ade6:	f003 0306 	and.w	r3, r3, #6
 800adea:	2b04      	cmp	r3, #4
 800adec:	bf02      	ittt	eq
 800adee:	68e5      	ldreq	r5, [r4, #12]
 800adf0:	6833      	ldreq	r3, [r6, #0]
 800adf2:	1aed      	subeq	r5, r5, r3
 800adf4:	68a3      	ldr	r3, [r4, #8]
 800adf6:	bf0c      	ite	eq
 800adf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800adfc:	2500      	movne	r5, #0
 800adfe:	4293      	cmp	r3, r2
 800ae00:	bfc4      	itt	gt
 800ae02:	1a9b      	subgt	r3, r3, r2
 800ae04:	18ed      	addgt	r5, r5, r3
 800ae06:	2600      	movs	r6, #0
 800ae08:	341a      	adds	r4, #26
 800ae0a:	42b5      	cmp	r5, r6
 800ae0c:	d11a      	bne.n	800ae44 <_printf_common+0xc8>
 800ae0e:	2000      	movs	r0, #0
 800ae10:	e008      	b.n	800ae24 <_printf_common+0xa8>
 800ae12:	2301      	movs	r3, #1
 800ae14:	4652      	mov	r2, sl
 800ae16:	4649      	mov	r1, r9
 800ae18:	4638      	mov	r0, r7
 800ae1a:	47c0      	blx	r8
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	d103      	bne.n	800ae28 <_printf_common+0xac>
 800ae20:	f04f 30ff 	mov.w	r0, #4294967295
 800ae24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae28:	3501      	adds	r5, #1
 800ae2a:	e7c6      	b.n	800adba <_printf_common+0x3e>
 800ae2c:	18e1      	adds	r1, r4, r3
 800ae2e:	1c5a      	adds	r2, r3, #1
 800ae30:	2030      	movs	r0, #48	; 0x30
 800ae32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae36:	4422      	add	r2, r4
 800ae38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae40:	3302      	adds	r3, #2
 800ae42:	e7c7      	b.n	800add4 <_printf_common+0x58>
 800ae44:	2301      	movs	r3, #1
 800ae46:	4622      	mov	r2, r4
 800ae48:	4649      	mov	r1, r9
 800ae4a:	4638      	mov	r0, r7
 800ae4c:	47c0      	blx	r8
 800ae4e:	3001      	adds	r0, #1
 800ae50:	d0e6      	beq.n	800ae20 <_printf_common+0xa4>
 800ae52:	3601      	adds	r6, #1
 800ae54:	e7d9      	b.n	800ae0a <_printf_common+0x8e>
	...

0800ae58 <_printf_i>:
 800ae58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae5c:	7e0f      	ldrb	r7, [r1, #24]
 800ae5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae60:	2f78      	cmp	r7, #120	; 0x78
 800ae62:	4691      	mov	r9, r2
 800ae64:	4680      	mov	r8, r0
 800ae66:	460c      	mov	r4, r1
 800ae68:	469a      	mov	sl, r3
 800ae6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae6e:	d807      	bhi.n	800ae80 <_printf_i+0x28>
 800ae70:	2f62      	cmp	r7, #98	; 0x62
 800ae72:	d80a      	bhi.n	800ae8a <_printf_i+0x32>
 800ae74:	2f00      	cmp	r7, #0
 800ae76:	f000 80d4 	beq.w	800b022 <_printf_i+0x1ca>
 800ae7a:	2f58      	cmp	r7, #88	; 0x58
 800ae7c:	f000 80c0 	beq.w	800b000 <_printf_i+0x1a8>
 800ae80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae88:	e03a      	b.n	800af00 <_printf_i+0xa8>
 800ae8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae8e:	2b15      	cmp	r3, #21
 800ae90:	d8f6      	bhi.n	800ae80 <_printf_i+0x28>
 800ae92:	a101      	add	r1, pc, #4	; (adr r1, 800ae98 <_printf_i+0x40>)
 800ae94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae98:	0800aef1 	.word	0x0800aef1
 800ae9c:	0800af05 	.word	0x0800af05
 800aea0:	0800ae81 	.word	0x0800ae81
 800aea4:	0800ae81 	.word	0x0800ae81
 800aea8:	0800ae81 	.word	0x0800ae81
 800aeac:	0800ae81 	.word	0x0800ae81
 800aeb0:	0800af05 	.word	0x0800af05
 800aeb4:	0800ae81 	.word	0x0800ae81
 800aeb8:	0800ae81 	.word	0x0800ae81
 800aebc:	0800ae81 	.word	0x0800ae81
 800aec0:	0800ae81 	.word	0x0800ae81
 800aec4:	0800b009 	.word	0x0800b009
 800aec8:	0800af31 	.word	0x0800af31
 800aecc:	0800afc3 	.word	0x0800afc3
 800aed0:	0800ae81 	.word	0x0800ae81
 800aed4:	0800ae81 	.word	0x0800ae81
 800aed8:	0800b02b 	.word	0x0800b02b
 800aedc:	0800ae81 	.word	0x0800ae81
 800aee0:	0800af31 	.word	0x0800af31
 800aee4:	0800ae81 	.word	0x0800ae81
 800aee8:	0800ae81 	.word	0x0800ae81
 800aeec:	0800afcb 	.word	0x0800afcb
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	1d1a      	adds	r2, r3, #4
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	602a      	str	r2, [r5, #0]
 800aef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aefc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af00:	2301      	movs	r3, #1
 800af02:	e09f      	b.n	800b044 <_printf_i+0x1ec>
 800af04:	6820      	ldr	r0, [r4, #0]
 800af06:	682b      	ldr	r3, [r5, #0]
 800af08:	0607      	lsls	r7, r0, #24
 800af0a:	f103 0104 	add.w	r1, r3, #4
 800af0e:	6029      	str	r1, [r5, #0]
 800af10:	d501      	bpl.n	800af16 <_printf_i+0xbe>
 800af12:	681e      	ldr	r6, [r3, #0]
 800af14:	e003      	b.n	800af1e <_printf_i+0xc6>
 800af16:	0646      	lsls	r6, r0, #25
 800af18:	d5fb      	bpl.n	800af12 <_printf_i+0xba>
 800af1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800af1e:	2e00      	cmp	r6, #0
 800af20:	da03      	bge.n	800af2a <_printf_i+0xd2>
 800af22:	232d      	movs	r3, #45	; 0x2d
 800af24:	4276      	negs	r6, r6
 800af26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af2a:	485a      	ldr	r0, [pc, #360]	; (800b094 <_printf_i+0x23c>)
 800af2c:	230a      	movs	r3, #10
 800af2e:	e012      	b.n	800af56 <_printf_i+0xfe>
 800af30:	682b      	ldr	r3, [r5, #0]
 800af32:	6820      	ldr	r0, [r4, #0]
 800af34:	1d19      	adds	r1, r3, #4
 800af36:	6029      	str	r1, [r5, #0]
 800af38:	0605      	lsls	r5, r0, #24
 800af3a:	d501      	bpl.n	800af40 <_printf_i+0xe8>
 800af3c:	681e      	ldr	r6, [r3, #0]
 800af3e:	e002      	b.n	800af46 <_printf_i+0xee>
 800af40:	0641      	lsls	r1, r0, #25
 800af42:	d5fb      	bpl.n	800af3c <_printf_i+0xe4>
 800af44:	881e      	ldrh	r6, [r3, #0]
 800af46:	4853      	ldr	r0, [pc, #332]	; (800b094 <_printf_i+0x23c>)
 800af48:	2f6f      	cmp	r7, #111	; 0x6f
 800af4a:	bf0c      	ite	eq
 800af4c:	2308      	moveq	r3, #8
 800af4e:	230a      	movne	r3, #10
 800af50:	2100      	movs	r1, #0
 800af52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af56:	6865      	ldr	r5, [r4, #4]
 800af58:	60a5      	str	r5, [r4, #8]
 800af5a:	2d00      	cmp	r5, #0
 800af5c:	bfa2      	ittt	ge
 800af5e:	6821      	ldrge	r1, [r4, #0]
 800af60:	f021 0104 	bicge.w	r1, r1, #4
 800af64:	6021      	strge	r1, [r4, #0]
 800af66:	b90e      	cbnz	r6, 800af6c <_printf_i+0x114>
 800af68:	2d00      	cmp	r5, #0
 800af6a:	d04b      	beq.n	800b004 <_printf_i+0x1ac>
 800af6c:	4615      	mov	r5, r2
 800af6e:	fbb6 f1f3 	udiv	r1, r6, r3
 800af72:	fb03 6711 	mls	r7, r3, r1, r6
 800af76:	5dc7      	ldrb	r7, [r0, r7]
 800af78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800af7c:	4637      	mov	r7, r6
 800af7e:	42bb      	cmp	r3, r7
 800af80:	460e      	mov	r6, r1
 800af82:	d9f4      	bls.n	800af6e <_printf_i+0x116>
 800af84:	2b08      	cmp	r3, #8
 800af86:	d10b      	bne.n	800afa0 <_printf_i+0x148>
 800af88:	6823      	ldr	r3, [r4, #0]
 800af8a:	07de      	lsls	r6, r3, #31
 800af8c:	d508      	bpl.n	800afa0 <_printf_i+0x148>
 800af8e:	6923      	ldr	r3, [r4, #16]
 800af90:	6861      	ldr	r1, [r4, #4]
 800af92:	4299      	cmp	r1, r3
 800af94:	bfde      	ittt	le
 800af96:	2330      	movle	r3, #48	; 0x30
 800af98:	f805 3c01 	strble.w	r3, [r5, #-1]
 800af9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800afa0:	1b52      	subs	r2, r2, r5
 800afa2:	6122      	str	r2, [r4, #16]
 800afa4:	f8cd a000 	str.w	sl, [sp]
 800afa8:	464b      	mov	r3, r9
 800afaa:	aa03      	add	r2, sp, #12
 800afac:	4621      	mov	r1, r4
 800afae:	4640      	mov	r0, r8
 800afb0:	f7ff fee4 	bl	800ad7c <_printf_common>
 800afb4:	3001      	adds	r0, #1
 800afb6:	d14a      	bne.n	800b04e <_printf_i+0x1f6>
 800afb8:	f04f 30ff 	mov.w	r0, #4294967295
 800afbc:	b004      	add	sp, #16
 800afbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	f043 0320 	orr.w	r3, r3, #32
 800afc8:	6023      	str	r3, [r4, #0]
 800afca:	4833      	ldr	r0, [pc, #204]	; (800b098 <_printf_i+0x240>)
 800afcc:	2778      	movs	r7, #120	; 0x78
 800afce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800afd2:	6823      	ldr	r3, [r4, #0]
 800afd4:	6829      	ldr	r1, [r5, #0]
 800afd6:	061f      	lsls	r7, r3, #24
 800afd8:	f851 6b04 	ldr.w	r6, [r1], #4
 800afdc:	d402      	bmi.n	800afe4 <_printf_i+0x18c>
 800afde:	065f      	lsls	r7, r3, #25
 800afe0:	bf48      	it	mi
 800afe2:	b2b6      	uxthmi	r6, r6
 800afe4:	07df      	lsls	r7, r3, #31
 800afe6:	bf48      	it	mi
 800afe8:	f043 0320 	orrmi.w	r3, r3, #32
 800afec:	6029      	str	r1, [r5, #0]
 800afee:	bf48      	it	mi
 800aff0:	6023      	strmi	r3, [r4, #0]
 800aff2:	b91e      	cbnz	r6, 800affc <_printf_i+0x1a4>
 800aff4:	6823      	ldr	r3, [r4, #0]
 800aff6:	f023 0320 	bic.w	r3, r3, #32
 800affa:	6023      	str	r3, [r4, #0]
 800affc:	2310      	movs	r3, #16
 800affe:	e7a7      	b.n	800af50 <_printf_i+0xf8>
 800b000:	4824      	ldr	r0, [pc, #144]	; (800b094 <_printf_i+0x23c>)
 800b002:	e7e4      	b.n	800afce <_printf_i+0x176>
 800b004:	4615      	mov	r5, r2
 800b006:	e7bd      	b.n	800af84 <_printf_i+0x12c>
 800b008:	682b      	ldr	r3, [r5, #0]
 800b00a:	6826      	ldr	r6, [r4, #0]
 800b00c:	6961      	ldr	r1, [r4, #20]
 800b00e:	1d18      	adds	r0, r3, #4
 800b010:	6028      	str	r0, [r5, #0]
 800b012:	0635      	lsls	r5, r6, #24
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	d501      	bpl.n	800b01c <_printf_i+0x1c4>
 800b018:	6019      	str	r1, [r3, #0]
 800b01a:	e002      	b.n	800b022 <_printf_i+0x1ca>
 800b01c:	0670      	lsls	r0, r6, #25
 800b01e:	d5fb      	bpl.n	800b018 <_printf_i+0x1c0>
 800b020:	8019      	strh	r1, [r3, #0]
 800b022:	2300      	movs	r3, #0
 800b024:	6123      	str	r3, [r4, #16]
 800b026:	4615      	mov	r5, r2
 800b028:	e7bc      	b.n	800afa4 <_printf_i+0x14c>
 800b02a:	682b      	ldr	r3, [r5, #0]
 800b02c:	1d1a      	adds	r2, r3, #4
 800b02e:	602a      	str	r2, [r5, #0]
 800b030:	681d      	ldr	r5, [r3, #0]
 800b032:	6862      	ldr	r2, [r4, #4]
 800b034:	2100      	movs	r1, #0
 800b036:	4628      	mov	r0, r5
 800b038:	f7f5 f8ca 	bl	80001d0 <memchr>
 800b03c:	b108      	cbz	r0, 800b042 <_printf_i+0x1ea>
 800b03e:	1b40      	subs	r0, r0, r5
 800b040:	6060      	str	r0, [r4, #4]
 800b042:	6863      	ldr	r3, [r4, #4]
 800b044:	6123      	str	r3, [r4, #16]
 800b046:	2300      	movs	r3, #0
 800b048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b04c:	e7aa      	b.n	800afa4 <_printf_i+0x14c>
 800b04e:	6923      	ldr	r3, [r4, #16]
 800b050:	462a      	mov	r2, r5
 800b052:	4649      	mov	r1, r9
 800b054:	4640      	mov	r0, r8
 800b056:	47d0      	blx	sl
 800b058:	3001      	adds	r0, #1
 800b05a:	d0ad      	beq.n	800afb8 <_printf_i+0x160>
 800b05c:	6823      	ldr	r3, [r4, #0]
 800b05e:	079b      	lsls	r3, r3, #30
 800b060:	d413      	bmi.n	800b08a <_printf_i+0x232>
 800b062:	68e0      	ldr	r0, [r4, #12]
 800b064:	9b03      	ldr	r3, [sp, #12]
 800b066:	4298      	cmp	r0, r3
 800b068:	bfb8      	it	lt
 800b06a:	4618      	movlt	r0, r3
 800b06c:	e7a6      	b.n	800afbc <_printf_i+0x164>
 800b06e:	2301      	movs	r3, #1
 800b070:	4632      	mov	r2, r6
 800b072:	4649      	mov	r1, r9
 800b074:	4640      	mov	r0, r8
 800b076:	47d0      	blx	sl
 800b078:	3001      	adds	r0, #1
 800b07a:	d09d      	beq.n	800afb8 <_printf_i+0x160>
 800b07c:	3501      	adds	r5, #1
 800b07e:	68e3      	ldr	r3, [r4, #12]
 800b080:	9903      	ldr	r1, [sp, #12]
 800b082:	1a5b      	subs	r3, r3, r1
 800b084:	42ab      	cmp	r3, r5
 800b086:	dcf2      	bgt.n	800b06e <_printf_i+0x216>
 800b088:	e7eb      	b.n	800b062 <_printf_i+0x20a>
 800b08a:	2500      	movs	r5, #0
 800b08c:	f104 0619 	add.w	r6, r4, #25
 800b090:	e7f5      	b.n	800b07e <_printf_i+0x226>
 800b092:	bf00      	nop
 800b094:	0800bddd 	.word	0x0800bddd
 800b098:	0800bdee 	.word	0x0800bdee

0800b09c <memmove>:
 800b09c:	4288      	cmp	r0, r1
 800b09e:	b510      	push	{r4, lr}
 800b0a0:	eb01 0402 	add.w	r4, r1, r2
 800b0a4:	d902      	bls.n	800b0ac <memmove+0x10>
 800b0a6:	4284      	cmp	r4, r0
 800b0a8:	4623      	mov	r3, r4
 800b0aa:	d807      	bhi.n	800b0bc <memmove+0x20>
 800b0ac:	1e43      	subs	r3, r0, #1
 800b0ae:	42a1      	cmp	r1, r4
 800b0b0:	d008      	beq.n	800b0c4 <memmove+0x28>
 800b0b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0ba:	e7f8      	b.n	800b0ae <memmove+0x12>
 800b0bc:	4402      	add	r2, r0
 800b0be:	4601      	mov	r1, r0
 800b0c0:	428a      	cmp	r2, r1
 800b0c2:	d100      	bne.n	800b0c6 <memmove+0x2a>
 800b0c4:	bd10      	pop	{r4, pc}
 800b0c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0ce:	e7f7      	b.n	800b0c0 <memmove+0x24>

0800b0d0 <_sbrk_r>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	4d06      	ldr	r5, [pc, #24]	; (800b0ec <_sbrk_r+0x1c>)
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	4608      	mov	r0, r1
 800b0da:	602b      	str	r3, [r5, #0]
 800b0dc:	f7f7 feb2 	bl	8002e44 <_sbrk>
 800b0e0:	1c43      	adds	r3, r0, #1
 800b0e2:	d102      	bne.n	800b0ea <_sbrk_r+0x1a>
 800b0e4:	682b      	ldr	r3, [r5, #0]
 800b0e6:	b103      	cbz	r3, 800b0ea <_sbrk_r+0x1a>
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	bd38      	pop	{r3, r4, r5, pc}
 800b0ec:	2000522c 	.word	0x2000522c

0800b0f0 <_realloc_r>:
 800b0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f4:	4680      	mov	r8, r0
 800b0f6:	4614      	mov	r4, r2
 800b0f8:	460e      	mov	r6, r1
 800b0fa:	b921      	cbnz	r1, 800b106 <_realloc_r+0x16>
 800b0fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b100:	4611      	mov	r1, r2
 800b102:	f7ff bc57 	b.w	800a9b4 <_malloc_r>
 800b106:	b92a      	cbnz	r2, 800b114 <_realloc_r+0x24>
 800b108:	f7ff fbe8 	bl	800a8dc <_free_r>
 800b10c:	4625      	mov	r5, r4
 800b10e:	4628      	mov	r0, r5
 800b110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b114:	f000 f81b 	bl	800b14e <_malloc_usable_size_r>
 800b118:	4284      	cmp	r4, r0
 800b11a:	4607      	mov	r7, r0
 800b11c:	d802      	bhi.n	800b124 <_realloc_r+0x34>
 800b11e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b122:	d812      	bhi.n	800b14a <_realloc_r+0x5a>
 800b124:	4621      	mov	r1, r4
 800b126:	4640      	mov	r0, r8
 800b128:	f7ff fc44 	bl	800a9b4 <_malloc_r>
 800b12c:	4605      	mov	r5, r0
 800b12e:	2800      	cmp	r0, #0
 800b130:	d0ed      	beq.n	800b10e <_realloc_r+0x1e>
 800b132:	42bc      	cmp	r4, r7
 800b134:	4622      	mov	r2, r4
 800b136:	4631      	mov	r1, r6
 800b138:	bf28      	it	cs
 800b13a:	463a      	movcs	r2, r7
 800b13c:	f7ff fbc0 	bl	800a8c0 <memcpy>
 800b140:	4631      	mov	r1, r6
 800b142:	4640      	mov	r0, r8
 800b144:	f7ff fbca 	bl	800a8dc <_free_r>
 800b148:	e7e1      	b.n	800b10e <_realloc_r+0x1e>
 800b14a:	4635      	mov	r5, r6
 800b14c:	e7df      	b.n	800b10e <_realloc_r+0x1e>

0800b14e <_malloc_usable_size_r>:
 800b14e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b152:	1f18      	subs	r0, r3, #4
 800b154:	2b00      	cmp	r3, #0
 800b156:	bfbc      	itt	lt
 800b158:	580b      	ldrlt	r3, [r1, r0]
 800b15a:	18c0      	addlt	r0, r0, r3
 800b15c:	4770      	bx	lr
	...

0800b160 <_init>:
 800b160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b162:	bf00      	nop
 800b164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b166:	bc08      	pop	{r3}
 800b168:	469e      	mov	lr, r3
 800b16a:	4770      	bx	lr

0800b16c <_fini>:
 800b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16e:	bf00      	nop
 800b170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b172:	bc08      	pop	{r3}
 800b174:	469e      	mov	lr, r3
 800b176:	4770      	bx	lr
