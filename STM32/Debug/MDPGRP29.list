
MDPGRP29.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bdc  080070fc  080070fc  000170fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cd8  08007cd8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ce0  08007ce0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ce4  08007ce4  00017ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00005040  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200050a0  200050a0  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016b88  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003216  00000000  00000000  00036c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001500  00000000  00000000  00039e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001056  00000000  00000000  0003b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003591  00000000  00000000  0003c3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016eb6  00000000  00000000  0003f95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5a4e  00000000  00000000  00056815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005d94  00000000  00000000  0012c264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  00131ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070e4 	.word	0x080070e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080070e4 	.word	0x080070e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f001 f8f2 	bl	8001758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f85a 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 fab6 	bl	8000ae8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800057c:	f000 f936 	bl	80007ec <MX_TIM2_Init>
  MX_TIM8_Init();
 8000580:	f000 f9dc 	bl	800093c <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8000584:	f000 fa86 	bl	8000a94 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000588:	f000 f8ae 	bl	80006e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800058c:	f000 f982 	bl	8000894 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000590:	f001 f856 	bl	8001640 <OLED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000594:	f003 fbb2 	bl	8003cfc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000598:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <main+0x84>)
 800059a:	2100      	movs	r1, #0
 800059c:	4815      	ldr	r0, [pc, #84]	; (80005f4 <main+0x88>)
 800059e:	f003 fbf7 	bl	8003d90 <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <main+0x8c>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* creation of oled */
  oledHandle = osThreadNew(OLEDDisplay, NULL, &oled_attributes);
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <main+0x90>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	4814      	ldr	r0, [pc, #80]	; (8000600 <main+0x94>)
 80005ae:	f003 fbef 	bl	8003d90 <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a13      	ldr	r2, [pc, #76]	; (8000604 <main+0x98>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* creation of Motor */
  MotorHandle = osThreadNew(MOTOR, NULL, &Motor_attributes);
 80005b8:	4a13      	ldr	r2, [pc, #76]	; (8000608 <main+0x9c>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4813      	ldr	r0, [pc, #76]	; (800060c <main+0xa0>)
 80005be:	f003 fbe7 	bl	8003d90 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a12      	ldr	r2, [pc, #72]	; (8000610 <main+0xa4>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of encoder1 */
  encoder1Handle = osThreadNew(LEncoder, NULL, &encoder1_attributes);
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <main+0xa8>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4812      	ldr	r0, [pc, #72]	; (8000618 <main+0xac>)
 80005ce:	f003 fbdf 	bl	8003d90 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a11      	ldr	r2, [pc, #68]	; (800061c <main+0xb0>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* creation of encoder2 */
  encoder2Handle = osThreadNew(REncoder, NULL, &encoder2_attributes);
 80005d8:	4a11      	ldr	r2, [pc, #68]	; (8000620 <main+0xb4>)
 80005da:	2100      	movs	r1, #0
 80005dc:	4811      	ldr	r0, [pc, #68]	; (8000624 <main+0xb8>)
 80005de:	f003 fbd7 	bl	8003d90 <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a10      	ldr	r2, [pc, #64]	; (8000628 <main+0xbc>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e8:	f003 fbac 	bl	8003d44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x80>
 80005ee:	bf00      	nop
 80005f0:	08007174 	.word	0x08007174
 80005f4:	08000bd5 	.word	0x08000bd5
 80005f8:	200001e4 	.word	0x200001e4
 80005fc:	08007198 	.word	0x08007198
 8000600:	08000bf5 	.word	0x08000bf5
 8000604:	200001e8 	.word	0x200001e8
 8000608:	080071bc 	.word	0x080071bc
 800060c:	08000c7d 	.word	0x08000c7d
 8000610:	200001ec 	.word	0x200001ec
 8000614:	080071e0 	.word	0x080071e0
 8000618:	08000d45 	.word	0x08000d45
 800061c:	200001f0 	.word	0x200001f0
 8000620:	08007204 	.word	0x08007204
 8000624:	08000dcd 	.word	0x08000dcd
 8000628:	200001f4 	.word	0x200001f4

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 f8ce 	bl	80067dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xb4>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xb4>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xb4>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemClock_Config+0xb8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <SystemClock_Config+0xb8>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemClock_Config+0xb8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fbcf 	bl	8001e40 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006a8:	f000 fbd4 	bl	8000e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fe32 	bl	8002330 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006d2:	f000 fbbf 	bl	8000e54 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b092      	sub	sp, #72	; 0x48
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
 8000708:	615a      	str	r2, [r3, #20]
 800070a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2220      	movs	r2, #32
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f006 f862 	bl	80067dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000718:	4b32      	ldr	r3, [pc, #200]	; (80007e4 <MX_TIM1_Init+0xfc>)
 800071a:	4a33      	ldr	r2, [pc, #204]	; (80007e8 <MX_TIM1_Init+0x100>)
 800071c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 800071e:	4b31      	ldr	r3, [pc, #196]	; (80007e4 <MX_TIM1_Init+0xfc>)
 8000720:	22a0      	movs	r2, #160	; 0xa0
 8000722:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <MX_TIM1_Init+0xfc>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800072a:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <MX_TIM1_Init+0xfc>)
 800072c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000730:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <MX_TIM1_Init+0xfc>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000738:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <MX_TIM1_Init+0xfc>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073e:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <MX_TIM1_Init+0xfc>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000744:	4827      	ldr	r0, [pc, #156]	; (80007e4 <MX_TIM1_Init+0xfc>)
 8000746:	f002 f822 	bl	800278e <HAL_TIM_PWM_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000750:	f000 fb80 	bl	8000e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800075c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000760:	4619      	mov	r1, r3
 8000762:	4820      	ldr	r0, [pc, #128]	; (80007e4 <MX_TIM1_Init+0xfc>)
 8000764:	f002 ff04 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800076e:	f000 fb71 	bl	8000e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000772:	2360      	movs	r3, #96	; 0x60
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078e:	220c      	movs	r2, #12
 8000790:	4619      	mov	r1, r3
 8000792:	4814      	ldr	r0, [pc, #80]	; (80007e4 <MX_TIM1_Init+0xfc>)
 8000794:	f002 fa46 	bl	8002c24 <HAL_TIM_PWM_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800079e:	f000 fb59 	bl	8000e54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4807      	ldr	r0, [pc, #28]	; (80007e4 <MX_TIM1_Init+0xfc>)
 80007c6:	f002 ff4f 	bl	8003668 <HAL_TIMEx_ConfigBreakDeadTime>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80007d0:	f000 fb40 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <MX_TIM1_Init+0xfc>)
 80007d6:	f000 fc4d 	bl	8001074 <HAL_TIM_MspPostInit>

}
 80007da:	bf00      	nop
 80007dc:	3748      	adds	r7, #72	; 0x48
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000007c 	.word	0x2000007c
 80007e8:	40010000 	.word	0x40010000

080007ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2224      	movs	r2, #36	; 0x24
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f005 ffee 	bl	80067dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_TIM2_Init+0xa4>)
 800080a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_TIM2_Init+0xa4>)
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MX_TIM2_Init+0xa4>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_TIM2_Init+0xa4>)
 800081e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000822:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_TIM2_Init+0xa4>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_TIM2_Init+0xa4>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000830:	2303      	movs	r3, #3
 8000832:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000840:	230a      	movs	r3, #10
 8000842:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000848:	2301      	movs	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000850:	230a      	movs	r3, #10
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4619      	mov	r1, r3
 800085a:	480d      	ldr	r0, [pc, #52]	; (8000890 <MX_TIM2_Init+0xa4>)
 800085c:	f002 f8ae 	bl	80029bc <HAL_TIM_Encoder_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000866:	f000 faf5 	bl	8000e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <MX_TIM2_Init+0xa4>)
 8000878:	f002 fe7a 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000882:	f000 fae7 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3730      	adds	r7, #48	; 0x30
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000c4 	.word	0x200000c4

08000894 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	2224      	movs	r2, #36	; 0x24
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 ff9a 	bl	80067dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008b0:	4b20      	ldr	r3, [pc, #128]	; (8000934 <MX_TIM3_Init+0xa0>)
 80008b2:	4a21      	ldr	r2, [pc, #132]	; (8000938 <MX_TIM3_Init+0xa4>)
 80008b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_TIM3_Init+0xa0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_TIM3_Init+0xa0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_TIM3_Init+0xa0>)
 80008c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_TIM3_Init+0xa0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_TIM3_Init+0xa0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008d6:	2303      	movs	r3, #3
 80008d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008de:	2301      	movs	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80008e6:	230a      	movs	r3, #10
 80008e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008ee:	2301      	movs	r3, #1
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80008f6:	230a      	movs	r3, #10
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4619      	mov	r1, r3
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_TIM3_Init+0xa0>)
 8000902:	f002 f85b 	bl	80029bc <HAL_TIM_Encoder_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800090c:	f000 faa2 	bl	8000e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_TIM3_Init+0xa0>)
 800091e:	f002 fe27 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000928:	f000 fa94 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3730      	adds	r7, #48	; 0x30
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2000010c 	.word	0x2000010c
 8000938:	40000400 	.word	0x40000400

0800093c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b096      	sub	sp, #88	; 0x58
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
 800096a:	615a      	str	r2, [r3, #20]
 800096c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2220      	movs	r2, #32
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f005 ff31 	bl	80067dc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800097a:	4b44      	ldr	r3, [pc, #272]	; (8000a8c <MX_TIM8_Init+0x150>)
 800097c:	4a44      	ldr	r2, [pc, #272]	; (8000a90 <MX_TIM8_Init+0x154>)
 800097e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000980:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <MX_TIM8_Init+0x150>)
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b41      	ldr	r3, [pc, #260]	; (8000a8c <MX_TIM8_Init+0x150>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 800098c:	4b3f      	ldr	r3, [pc, #252]	; (8000a8c <MX_TIM8_Init+0x150>)
 800098e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000992:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000994:	4b3d      	ldr	r3, [pc, #244]	; (8000a8c <MX_TIM8_Init+0x150>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800099a:	4b3c      	ldr	r3, [pc, #240]	; (8000a8c <MX_TIM8_Init+0x150>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a0:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <MX_TIM8_Init+0x150>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80009a6:	4839      	ldr	r0, [pc, #228]	; (8000a8c <MX_TIM8_Init+0x150>)
 80009a8:	f001 fea2 	bl	80026f0 <HAL_TIM_Base_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80009b2:	f000 fa4f 	bl	8000e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80009bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009c0:	4619      	mov	r1, r3
 80009c2:	4832      	ldr	r0, [pc, #200]	; (8000a8c <MX_TIM8_Init+0x150>)
 80009c4:	f002 f9f0 	bl	8002da8 <HAL_TIM_ConfigClockSource>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80009ce:	f000 fa41 	bl	8000e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80009d2:	482e      	ldr	r0, [pc, #184]	; (8000a8c <MX_TIM8_Init+0x150>)
 80009d4:	f001 fedb 	bl	800278e <HAL_TIM_PWM_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80009de:	f000 fa39 	bl	8000e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009ee:	4619      	mov	r1, r3
 80009f0:	4826      	ldr	r0, [pc, #152]	; (8000a8c <MX_TIM8_Init+0x150>)
 80009f2:	f002 fdbd 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80009fc:	f000 fa2a 	bl	8000e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a00:	2360      	movs	r3, #96	; 0x60
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	4819      	ldr	r0, [pc, #100]	; (8000a8c <MX_TIM8_Init+0x150>)
 8000a26:	f002 f8fd 	bl	8002c24 <HAL_TIM_PWM_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000a30:	f000 fa10 	bl	8000e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	2204      	movs	r2, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4813      	ldr	r0, [pc, #76]	; (8000a8c <MX_TIM8_Init+0x150>)
 8000a3e:	f002 f8f1 	bl	8002c24 <HAL_TIM_PWM_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000a48:	f000 fa04 	bl	8000e54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4807      	ldr	r0, [pc, #28]	; (8000a8c <MX_TIM8_Init+0x150>)
 8000a70:	f002 fdfa 	bl	8003668 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000a7a:	f000 f9eb 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <MX_TIM8_Init+0x150>)
 8000a80:	f000 faf8 	bl	8001074 <HAL_TIM_MspPostInit>

}
 8000a84:	bf00      	nop
 8000a86:	3758      	adds	r7, #88	; 0x58
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000154 	.word	0x20000154
 8000a90:	40010400 	.word	0x40010400

08000a94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <MX_USART3_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000acc:	f002 fe1e 	bl	800370c <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ad6:	f000 f9bd 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000019c 	.word	0x2000019c
 8000ae4:	40004800 	.word	0x40004800

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a30      	ldr	r2, [pc, #192]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b08:	f043 0310 	orr.w	r3, r3, #16
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0304 	and.w	r3, r3, #4
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8000b74:	4815      	ldr	r0, [pc, #84]	; (8000bcc <MX_GPIO_Init+0xe4>)
 8000b76:	f001 f907 	bl	8001d88 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	213c      	movs	r1, #60	; 0x3c
 8000b7e:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <MX_GPIO_Init+0xe8>)
 8000b80:	f001 f902 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000b84:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8000b88:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480b      	ldr	r0, [pc, #44]	; (8000bcc <MX_GPIO_Init+0xe4>)
 8000b9e:	f000 ff57 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8000ba2:	233c      	movs	r3, #60	; 0x3c
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_GPIO_Init+0xe8>)
 8000bba:	f000 ff49 	bl	8001a50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be0:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <StartDefaultTask+0x1c>)
 8000be2:	f001 f8ea 	bl	8001dba <HAL_GPIO_TogglePin>
    osDelay(5000);
 8000be6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bea:	f003 f963 	bl	8003eb4 <osDelay>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000bee:	e7f5      	b.n	8000bdc <StartDefaultTask+0x8>
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <OLEDDisplay>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OLEDDisplay */
void OLEDDisplay(void *argument)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b093      	sub	sp, #76	; 0x4c
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN show */
	uint8_t hello[20]= "Hello World!\0";
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <OLEDDisplay+0x74>)
 8000bfe:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c04:	c407      	stmia	r4!, {r0, r1, r2}
 8000c06:	8023      	strh	r3, [r4, #0]
 8000c08:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	809a      	strh	r2, [r3, #4]
	char speedStringR[20];

	/* Infinite loop */
	for(;;)
	{
	  OLED_ShowString(10,10, hello);
 8000c12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c16:	461a      	mov	r2, r3
 8000c18:	210a      	movs	r1, #10
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f000 fcde 	bl	80015dc <OLED_ShowString>
	  // Display motor speed revolution
	  sprintf(speedStringL, "SpeedL: %d", leftEncoderVal);
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <OLEDDisplay+0x78>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4911      	ldr	r1, [pc, #68]	; (8000c70 <OLEDDisplay+0x7c>)
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f005 fdb6 	bl	800679c <siprintf>
	  OLED_ShowString(10, 30, (uint8_t*)speedStringL);
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	461a      	mov	r2, r3
 8000c36:	211e      	movs	r1, #30
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f000 fccf 	bl	80015dc <OLED_ShowString>
	  sprintf(speedStringR, "SpeedR: %d", rightEncoderVal);
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <OLEDDisplay+0x80>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	490c      	ldr	r1, [pc, #48]	; (8000c78 <OLEDDisplay+0x84>)
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f005 fda7 	bl	800679c <siprintf>
	  OLED_ShowString(10, 50, (uint8_t*)speedStringR);
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	461a      	mov	r2, r3
 8000c54:	2132      	movs	r1, #50	; 0x32
 8000c56:	200a      	movs	r0, #10
 8000c58:	f000 fcc0 	bl	80015dc <OLED_ShowString>
	  OLED_Refresh_Gram();
 8000c5c:	f000 fb4a 	bl	80012f4 <OLED_Refresh_Gram>
	  osDelay(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f003 f927 	bl	8003eb4 <osDelay>
	{
 8000c66:	e7d4      	b.n	8000c12 <OLEDDisplay+0x1e>
 8000c68:	08007148 	.word	0x08007148
 8000c6c:	200001f8 	.word	0x200001f8
 8000c70:	08007130 	.word	0x08007130
 8000c74:	200001fc 	.word	0x200001fc
 8000c78:	0800713c 	.word	0x0800713c

08000c7c <MOTOR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MOTOR */
void MOTOR(void *argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
		/* USER CODE BEGIN motors */
		uint16_t pwmVal  =0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	81fb      	strh	r3, [r7, #14]
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	482c      	ldr	r0, [pc, #176]	; (8000d3c <MOTOR+0xc0>)
 8000c8c:	f001 fdce 	bl	800282c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000c90:	2104      	movs	r1, #4
 8000c92:	482a      	ldr	r0, [pc, #168]	; (8000d3c <MOTOR+0xc0>)
 8000c94:	f001 fdca 	bl	800282c <HAL_TIM_PWM_Start>
	  /* Infinite loop */
	  for(;;)
	  {
		  while(pwmVal<4000)
 8000c98:	e021      	b.n	8000cde <MOTOR+0x62>
		  {
			  // Left Motor (Motor A)
			  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	4828      	ldr	r0, [pc, #160]	; (8000d40 <MOTOR+0xc4>)
 8000ca0:	f001 f872 	bl	8001d88 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA,AIN1_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2108      	movs	r1, #8
 8000ca8:	4825      	ldr	r0, [pc, #148]	; (8000d40 <MOTOR+0xc4>)
 8000caa:	f001 f86d 	bl	8001d88 <HAL_GPIO_WritePin>

			  // Right Motor (Motor B)
			  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	4823      	ldr	r0, [pc, #140]	; (8000d40 <MOTOR+0xc4>)
 8000cb4:	f001 f868 	bl	8001d88 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2110      	movs	r1, #16
 8000cbc:	4820      	ldr	r0, [pc, #128]	; (8000d40 <MOTOR+0xc4>)
 8000cbe:	f001 f863 	bl	8001d88 <HAL_GPIO_WritePin>

			  pwmVal++;
 8000cc2:	89fb      	ldrh	r3, [r7, #14]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	81fb      	strh	r3, [r7, #14]
			  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal);
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <MOTOR+0xc0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	89fa      	ldrh	r2, [r7, #14]
 8000cce:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal);
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MOTOR+0xc0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	89fa      	ldrh	r2, [r7, #14]
 8000cd6:	639a      	str	r2, [r3, #56]	; 0x38

			  osDelay(10);
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f003 f8eb 	bl	8003eb4 <osDelay>
		  while(pwmVal<4000)
 8000cde:	89fb      	ldrh	r3, [r7, #14]
 8000ce0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000ce4:	d3d9      	bcc.n	8000c9a <MOTOR+0x1e>

		  }
		  //Anticlock
		  while(pwmVal>0)
 8000ce6:	e021      	b.n	8000d2c <MOTOR+0xb0>
		  {
			  // Left Motor
			  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2104      	movs	r1, #4
 8000cec:	4814      	ldr	r0, [pc, #80]	; (8000d40 <MOTOR+0xc4>)
 8000cee:	f001 f84b 	bl	8001d88 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	4812      	ldr	r0, [pc, #72]	; (8000d40 <MOTOR+0xc4>)
 8000cf8:	f001 f846 	bl	8001d88 <HAL_GPIO_WritePin>

			  // Right Motor
			  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2120      	movs	r1, #32
 8000d00:	480f      	ldr	r0, [pc, #60]	; (8000d40 <MOTOR+0xc4>)
 8000d02:	f001 f841 	bl	8001d88 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2110      	movs	r1, #16
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MOTOR+0xc4>)
 8000d0c:	f001 f83c 	bl	8001d88 <HAL_GPIO_WritePin>

			  pwmVal--;
 8000d10:	89fb      	ldrh	r3, [r7, #14]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	81fb      	strh	r3, [r7, #14]
			  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal);
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MOTOR+0xc0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	89fa      	ldrh	r2, [r7, #14]
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal);
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MOTOR+0xc0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	89fa      	ldrh	r2, [r7, #14]
 8000d24:	639a      	str	r2, [r3, #56]	; 0x38
			  osDelay(10);
 8000d26:	200a      	movs	r0, #10
 8000d28:	f003 f8c4 	bl	8003eb4 <osDelay>
		  while(pwmVal>0)
 8000d2c:	89fb      	ldrh	r3, [r7, #14]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1da      	bne.n	8000ce8 <MOTOR+0x6c>

		  }
		  osDelay(1);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f003 f8be 	bl	8003eb4 <osDelay>
		  while(pwmVal<4000)
 8000d38:	e7d1      	b.n	8000cde <MOTOR+0x62>
 8000d3a:	bf00      	nop
 8000d3c:	20000154 	.word	0x20000154
 8000d40:	40020000 	.word	0x40020000

08000d44 <LEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEncoder */
void LEncoder(void *argument)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
		HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000d4c:	213c      	movs	r1, #60	; 0x3c
 8000d4e:	481d      	ldr	r0, [pc, #116]	; (8000dc4 <LEncoder+0x80>)
 8000d50:	f001 feda 	bl	8002b08 <HAL_TIM_Encoder_Start>
		int cnt2;
		int dirL = 1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
		int diff;
		uint32_t tick = HAL_GetTick();
 8000d58:	f000 fd64 	bl	8001824 <HAL_GetTick>
 8000d5c:	60f8      	str	r0, [r7, #12]
		/* Infinite loop */
		for (;;) {
			if (HAL_GetTick() - tick > 10L) {
 8000d5e:	f000 fd61 	bl	8001824 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b0a      	cmp	r3, #10
 8000d6a:	d9f8      	bls.n	8000d5e <LEncoder+0x1a>
				cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <LEncoder+0x80>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d72:	60bb      	str	r3, [r7, #8]

				if (cnt2 > 32000) {
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000d7a:	dd06      	ble.n	8000d8a <LEncoder+0x46>
					dirL = 1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
					diff = (65536 - cnt2);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	e004      	b.n	8000d94 <LEncoder+0x50>
				} else {
					dirL = -1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	617b      	str	r3, [r7, #20]
					diff = cnt2;
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	613b      	str	r3, [r7, #16]
				}
				if (dirL == 1) {
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d106      	bne.n	8000da8 <LEncoder+0x64>
					leftEncoderVal += diff;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <LEncoder+0x84>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4413      	add	r3, r2
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <LEncoder+0x84>)
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	e005      	b.n	8000db4 <LEncoder+0x70>
				} else {
					leftEncoderVal -= diff;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <LEncoder+0x84>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <LEncoder+0x84>)
 8000db2:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <LEncoder+0x80>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2200      	movs	r2, #0
 8000dba:	625a      	str	r2, [r3, #36]	; 0x24

				tick = HAL_GetTick();
 8000dbc:	f000 fd32 	bl	8001824 <HAL_GetTick>
 8000dc0:	60f8      	str	r0, [r7, #12]
			if (HAL_GetTick() - tick > 10L) {
 8000dc2:	e7cc      	b.n	8000d5e <LEncoder+0x1a>
 8000dc4:	200000c4 	.word	0x200000c4
 8000dc8:	200001f8 	.word	0x200001f8

08000dcc <REncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_REncoder */
void REncoder(void *argument)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
		HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000dd4:	213c      	movs	r1, #60	; 0x3c
 8000dd6:	481d      	ldr	r0, [pc, #116]	; (8000e4c <REncoder+0x80>)
 8000dd8:	f001 fe96 	bl	8002b08 <HAL_TIM_Encoder_Start>
		int cnt1;
		int dirR = 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
		int diff;
		uint32_t tick = HAL_GetTick();
 8000de0:	f000 fd20 	bl	8001824 <HAL_GetTick>
 8000de4:	60f8      	str	r0, [r7, #12]
		/* Infinite loop */
		for (;;) {
			if (HAL_GetTick() - tick > 10L) {
 8000de6:	f000 fd1d 	bl	8001824 <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b0a      	cmp	r3, #10
 8000df2:	d9f8      	bls.n	8000de6 <REncoder+0x1a>
				cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <REncoder+0x80>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfa:	60bb      	str	r3, [r7, #8]
				if (cnt1 > 32000) {
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000e02:	dd06      	ble.n	8000e12 <REncoder+0x46>
					dirR = 1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
					diff = (65536 - cnt1);
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	e004      	b.n	8000e1c <REncoder+0x50>
				} else {
					dirR = -1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	617b      	str	r3, [r7, #20]
					diff = cnt1;
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	613b      	str	r3, [r7, #16]
				}

				if (dirR == 1) {
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d106      	bne.n	8000e30 <REncoder+0x64>
					rightEncoderVal -= diff;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <REncoder+0x84>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <REncoder+0x84>)
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e005      	b.n	8000e3c <REncoder+0x70>
				} else {
					rightEncoderVal += diff;
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <REncoder+0x84>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <REncoder+0x84>)
 8000e3a:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <REncoder+0x80>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2200      	movs	r2, #0
 8000e42:	625a      	str	r2, [r3, #36]	; 0x24

				tick = HAL_GetTick();
 8000e44:	f000 fcee 	bl	8001824 <HAL_GetTick>
 8000e48:	60f8      	str	r0, [r7, #12]
			if (HAL_GetTick() - tick > 10L) {
 8000e4a:	e7cc      	b.n	8000de6 <REncoder+0x1a>
 8000e4c:	2000010c 	.word	0x2000010c
 8000e50:	200001fc 	.word	0x200001fc

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){
 8000e5c:	e7fe      	b.n	8000e5c <Error_Handler+0x8>
	...

08000e60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_MspInit+0x54>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <HAL_MspInit+0x54>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_MspInit+0x54>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_MspInit+0x54>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_MspInit+0x54>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_MspInit+0x54>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	f06f 0001 	mvn.w	r0, #1
 8000ea6:	f000 fdaa 	bl	80019fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800

08000eb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d10d      	bne.n	8000ee6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_TIM_PWM_MspInit+0x40>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <HAL_TIM_PWM_MspInit+0x40>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <HAL_TIM_PWM_MspInit+0x40>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40010000 	.word	0x40010000
 8000ef8:	40023800 	.word	0x40023800

08000efc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f1c:	d14b      	bne.n	8000fb6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
 8000f22:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a3e      	ldr	r2, [pc, #248]	; (8001020 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b3c      	ldr	r3, [pc, #240]	; (8001020 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	4b38      	ldr	r3, [pc, #224]	; (8001020 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a37      	ldr	r2, [pc, #220]	; (8001020 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b35      	ldr	r3, [pc, #212]	; (8001020 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b31      	ldr	r3, [pc, #196]	; (8001020 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a30      	ldr	r2, [pc, #192]	; (8001020 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEncoder_Pin;
 8000f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f84:	2301      	movs	r3, #1
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LEncoder_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4825      	ldr	r0, [pc, #148]	; (8001024 <HAL_TIM_Encoder_MspInit+0x128>)
 8000f90:	f000 fd5e 	bl	8001a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEncoderB3_Pin;
 8000f94:	2308      	movs	r3, #8
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LEncoderB3_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	481e      	ldr	r0, [pc, #120]	; (8001028 <HAL_TIM_Encoder_MspInit+0x12c>)
 8000fb0:	f000 fd4e 	bl	8001a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fb4:	e030      	b.n	8001018 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a1c      	ldr	r2, [pc, #112]	; (800102c <HAL_TIM_Encoder_MspInit+0x130>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d12b      	bne.n	8001018 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a15      	ldr	r2, [pc, #84]	; (8001020 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fca:	f043 0302 	orr.w	r3, r3, #2
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6313      	str	r3, [r2, #48]	; 0x30
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = REncoder_Pin|REncoderA7_Pin;
 8000ff8:	23c0      	movs	r3, #192	; 0xc0
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001008:	2302      	movs	r3, #2
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	4804      	ldr	r0, [pc, #16]	; (8001024 <HAL_TIM_Encoder_MspInit+0x128>)
 8001014:	f000 fd1c 	bl	8001a50 <HAL_GPIO_Init>
}
 8001018:	bf00      	nop
 800101a:	3730      	adds	r7, #48	; 0x30
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400
 800102c:	40000400 	.word	0x40000400

08001030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <HAL_TIM_Base_MspInit+0x3c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d10d      	bne.n	800105e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_TIM_Base_MspInit+0x40>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <HAL_TIM_Base_MspInit+0x40>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <HAL_TIM_Base_MspInit+0x40>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40010400 	.word	0x40010400
 8001070:	40023800 	.word	0x40023800

08001074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a24      	ldr	r2, [pc, #144]	; (8001124 <HAL_TIM_MspPostInit+0xb0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d11f      	bne.n	80010d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <HAL_TIM_MspPostInit+0xb4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a22      	ldr	r2, [pc, #136]	; (8001128 <HAL_TIM_MspPostInit+0xb4>)
 80010a0:	f043 0310 	orr.w	r3, r3, #16
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <HAL_TIM_MspPostInit+0xb4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWMServoM_Pin;
 80010b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWMServoM_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4817      	ldr	r0, [pc, #92]	; (800112c <HAL_TIM_MspPostInit+0xb8>)
 80010d0:	f000 fcbe 	bl	8001a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80010d4:	e022      	b.n	800111c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a15      	ldr	r2, [pc, #84]	; (8001130 <HAL_TIM_MspPostInit+0xbc>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d11d      	bne.n	800111c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_TIM_MspPostInit+0xb4>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <HAL_TIM_MspPostInit+0xb4>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_TIM_MspPostInit+0xb4>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80010fc:	23c0      	movs	r3, #192	; 0xc0
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800110c:	2303      	movs	r3, #3
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <HAL_TIM_MspPostInit+0xc0>)
 8001118:	f000 fc9a 	bl	8001a50 <HAL_GPIO_Init>
}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40010000 	.word	0x40010000
 8001128:	40023800 	.word	0x40023800
 800112c:	40021000 	.word	0x40021000
 8001130:	40010400 	.word	0x40010400
 8001134:	40020800 	.word	0x40020800

08001138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a19      	ldr	r2, [pc, #100]	; (80011bc <HAL_UART_MspInit+0x84>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d12c      	bne.n	80011b4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_UART_MspInit+0x88>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <HAL_UART_MspInit+0x88>)
 8001164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_UART_MspInit+0x88>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_UART_MspInit+0x88>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_UART_MspInit+0x88>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_UART_MspInit+0x88>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001192:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011a4:	2307      	movs	r3, #7
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <HAL_UART_MspInit+0x8c>)
 80011b0:	f000 fc4e 	bl	8001a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40004800 	.word	0x40004800
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020800 	.word	0x40020800

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011cc:	e7fe      	b.n	80011cc <NMI_Handler+0x4>

080011ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <MemManage_Handler+0x4>

080011da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f8:	f000 fb00 	bl	80017fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011fc:	f004 fa68 	bl	80056d0 <xTaskGetSchedulerState>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d001      	beq.n	800120a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001206:	f005 f84f 	bl	80062a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <_sbrk+0x5c>)
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <_sbrk+0x60>)
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <_sbrk+0x64>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <_sbrk+0x68>)
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	429a      	cmp	r2, r3
 800123e:	d207      	bcs.n	8001250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001240:	f005 fad4 	bl	80067ec <__errno>
 8001244:	4603      	mov	r3, r0
 8001246:	220c      	movs	r2, #12
 8001248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	e009      	b.n	8001264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <_sbrk+0x64>)
 8001260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20020000 	.word	0x20020000
 8001270:	00000400 	.word	0x00000400
 8001274:	20000200 	.word	0x20000200
 8001278:	200050a0 	.word	0x200050a0

0800127c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <SystemInit+0x20>)
 8001282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <SystemInit+0x20>)
 8001288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800128c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012a4:	f7ff ffea 	bl	800127c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012aa:	490d      	ldr	r1, [pc, #52]	; (80012e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c0:	4c0a      	ldr	r4, [pc, #40]	; (80012ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ce:	f005 fa93 	bl	80067f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff f94b 	bl	800056c <main>
  bx  lr    
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80012e4:	08007ce8 	.word	0x08007ce8
  ldr r2, =_sbss
 80012e8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80012ec:	200050a0 	.word	0x200050a0

080012f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC_IRQHandler>
	...

080012f4 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80012fa:	2300      	movs	r3, #0
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	e026      	b.n	800134e <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	3b50      	subs	r3, #80	; 0x50
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f82b 	bl	8001364 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800130e:	2100      	movs	r1, #0
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f827 	bl	8001364 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8001316:	2100      	movs	r1, #0
 8001318:	2010      	movs	r0, #16
 800131a:	f000 f823 	bl	8001364 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800131e:	2300      	movs	r3, #0
 8001320:	71bb      	strb	r3, [r7, #6]
 8001322:	e00d      	b.n	8001340 <OLED_Refresh_Gram+0x4c>
 8001324:	79ba      	ldrb	r2, [r7, #6]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	490d      	ldr	r1, [pc, #52]	; (8001360 <OLED_Refresh_Gram+0x6c>)
 800132a:	00d2      	lsls	r2, r2, #3
 800132c:	440a      	add	r2, r1
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2101      	movs	r1, #1
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f815 	bl	8001364 <OLED_WR_Byte>
 800133a:	79bb      	ldrb	r3, [r7, #6]
 800133c:	3301      	adds	r3, #1
 800133e:	71bb      	strb	r3, [r7, #6]
 8001340:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001344:	2b00      	cmp	r3, #0
 8001346:	daed      	bge.n	8001324 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	3301      	adds	r3, #1
 800134c:	71fb      	strb	r3, [r7, #7]
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b07      	cmp	r3, #7
 8001352:	d9d5      	bls.n	8001300 <OLED_Refresh_Gram+0xc>
	}   
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000204 	.word	0x20000204

08001364 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	460a      	mov	r2, r1
 800136e:	71fb      	strb	r3, [r7, #7]
 8001370:	4613      	mov	r3, r2
 8001372:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d006      	beq.n	8001388 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800137a:	2201      	movs	r2, #1
 800137c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001380:	481c      	ldr	r0, [pc, #112]	; (80013f4 <OLED_WR_Byte+0x90>)
 8001382:	f000 fd01 	bl	8001d88 <HAL_GPIO_WritePin>
 8001386:	e005      	b.n	8001394 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138e:	4819      	ldr	r0, [pc, #100]	; (80013f4 <OLED_WR_Byte+0x90>)
 8001390:	f000 fcfa 	bl	8001d88 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e01e      	b.n	80013d8 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800139a:	2200      	movs	r2, #0
 800139c:	2120      	movs	r1, #32
 800139e:	4815      	ldr	r0, [pc, #84]	; (80013f4 <OLED_WR_Byte+0x90>)
 80013a0:	f000 fcf2 	bl	8001d88 <HAL_GPIO_WritePin>
		if(dat&0x80)
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	da05      	bge.n	80013b8 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80013ac:	2201      	movs	r2, #1
 80013ae:	2140      	movs	r1, #64	; 0x40
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <OLED_WR_Byte+0x90>)
 80013b2:	f000 fce9 	bl	8001d88 <HAL_GPIO_WritePin>
 80013b6:	e004      	b.n	80013c2 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80013b8:	2200      	movs	r2, #0
 80013ba:	2140      	movs	r1, #64	; 0x40
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <OLED_WR_Byte+0x90>)
 80013be:	f000 fce3 	bl	8001d88 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80013c2:	2201      	movs	r2, #1
 80013c4:	2120      	movs	r1, #32
 80013c6:	480b      	ldr	r0, [pc, #44]	; (80013f4 <OLED_WR_Byte+0x90>)
 80013c8:	f000 fcde 	bl	8001d88 <HAL_GPIO_WritePin>
		dat<<=1;   
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	3301      	adds	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	2b07      	cmp	r3, #7
 80013dc:	d9dd      	bls.n	800139a <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80013de:	2201      	movs	r2, #1
 80013e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e4:	4803      	ldr	r0, [pc, #12]	; (80013f4 <OLED_WR_Byte+0x90>)
 80013e6:	f000 fccf 	bl	8001d88 <HAL_GPIO_WritePin>
} 
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000

080013f8 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80013fe:	2300      	movs	r3, #0
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	e014      	b.n	800142e <OLED_Clear+0x36>
 8001404:	2300      	movs	r3, #0
 8001406:	71bb      	strb	r3, [r7, #6]
 8001408:	e00a      	b.n	8001420 <OLED_Clear+0x28>
 800140a:	79ba      	ldrb	r2, [r7, #6]
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	490c      	ldr	r1, [pc, #48]	; (8001440 <OLED_Clear+0x48>)
 8001410:	00d2      	lsls	r2, r2, #3
 8001412:	440a      	add	r2, r1
 8001414:	4413      	add	r3, r2
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	3301      	adds	r3, #1
 800141e:	71bb      	strb	r3, [r7, #6]
 8001420:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001424:	2b00      	cmp	r3, #0
 8001426:	daf0      	bge.n	800140a <OLED_Clear+0x12>
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	3301      	adds	r3, #1
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b07      	cmp	r3, #7
 8001432:	d9e7      	bls.n	8001404 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8001434:	f7ff ff5e 	bl	80012f4 <OLED_Refresh_Gram>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000204 	.word	0x20000204

08001444 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	460b      	mov	r3, r1
 8001450:	71bb      	strb	r3, [r7, #6]
 8001452:	4613      	mov	r3, r2
 8001454:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	2b00      	cmp	r3, #0
 8001460:	db41      	blt.n	80014e6 <OLED_DrawPoint+0xa2>
 8001462:	79bb      	ldrb	r3, [r7, #6]
 8001464:	2b3f      	cmp	r3, #63	; 0x3f
 8001466:	d83e      	bhi.n	80014e6 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	08db      	lsrs	r3, r3, #3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f1c3 0307 	rsb	r3, r3, #7
 8001472:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8001474:	79bb      	ldrb	r3, [r7, #6]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800147c:	7b7b      	ldrb	r3, [r7, #13]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2201      	movs	r2, #1
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800148a:	797b      	ldrb	r3, [r7, #5]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d012      	beq.n	80014b6 <OLED_DrawPoint+0x72>
 8001490:	79fa      	ldrb	r2, [r7, #7]
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	4917      	ldr	r1, [pc, #92]	; (80014f4 <OLED_DrawPoint+0xb0>)
 8001496:	00d2      	lsls	r2, r2, #3
 8001498:	440a      	add	r2, r1
 800149a:	4413      	add	r3, r2
 800149c:	7818      	ldrb	r0, [r3, #0]
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	7bbb      	ldrb	r3, [r7, #14]
 80014a2:	7bf9      	ldrb	r1, [r7, #15]
 80014a4:	4301      	orrs	r1, r0
 80014a6:	b2c8      	uxtb	r0, r1
 80014a8:	4912      	ldr	r1, [pc, #72]	; (80014f4 <OLED_DrawPoint+0xb0>)
 80014aa:	00d2      	lsls	r2, r2, #3
 80014ac:	440a      	add	r2, r1
 80014ae:	4413      	add	r3, r2
 80014b0:	4602      	mov	r2, r0
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	e018      	b.n	80014e8 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80014b6:	79fa      	ldrb	r2, [r7, #7]
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	490e      	ldr	r1, [pc, #56]	; (80014f4 <OLED_DrawPoint+0xb0>)
 80014bc:	00d2      	lsls	r2, r2, #3
 80014be:	440a      	add	r2, r1
 80014c0:	4413      	add	r3, r2
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b25a      	sxtb	r2, r3
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	4013      	ands	r3, r2
 80014d0:	b259      	sxtb	r1, r3
 80014d2:	79fa      	ldrb	r2, [r7, #7]
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	b2c8      	uxtb	r0, r1
 80014d8:	4906      	ldr	r1, [pc, #24]	; (80014f4 <OLED_DrawPoint+0xb0>)
 80014da:	00d2      	lsls	r2, r2, #3
 80014dc:	440a      	add	r2, r1
 80014de:	4413      	add	r3, r2
 80014e0:	4602      	mov	r2, r0
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	e000      	b.n	80014e8 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80014e6:	bf00      	nop
}
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000204 	.word	0x20000204

080014f8 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4604      	mov	r4, r0
 8001500:	4608      	mov	r0, r1
 8001502:	4611      	mov	r1, r2
 8001504:	461a      	mov	r2, r3
 8001506:	4623      	mov	r3, r4
 8001508:	71fb      	strb	r3, [r7, #7]
 800150a:	4603      	mov	r3, r0
 800150c:	71bb      	strb	r3, [r7, #6]
 800150e:	460b      	mov	r3, r1
 8001510:	717b      	strb	r3, [r7, #5]
 8001512:	4613      	mov	r3, r2
 8001514:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8001516:	79bb      	ldrb	r3, [r7, #6]
 8001518:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800151a:	797b      	ldrb	r3, [r7, #5]
 800151c:	3b20      	subs	r3, #32
 800151e:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8001520:	2300      	movs	r3, #0
 8001522:	73bb      	strb	r3, [r7, #14]
 8001524:	e04d      	b.n	80015c2 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8001526:	793b      	ldrb	r3, [r7, #4]
 8001528:	2b0c      	cmp	r3, #12
 800152a:	d10b      	bne.n	8001544 <OLED_ShowChar+0x4c>
 800152c:	797a      	ldrb	r2, [r7, #5]
 800152e:	7bb9      	ldrb	r1, [r7, #14]
 8001530:	4828      	ldr	r0, [pc, #160]	; (80015d4 <OLED_ShowChar+0xdc>)
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4403      	add	r3, r0
 800153c:	440b      	add	r3, r1
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	73fb      	strb	r3, [r7, #15]
 8001542:	e007      	b.n	8001554 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8001544:	797a      	ldrb	r2, [r7, #5]
 8001546:	7bbb      	ldrb	r3, [r7, #14]
 8001548:	4923      	ldr	r1, [pc, #140]	; (80015d8 <OLED_ShowChar+0xe0>)
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	440a      	add	r2, r1
 800154e:	4413      	add	r3, r2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001554:	2300      	movs	r3, #0
 8001556:	737b      	strb	r3, [r7, #13]
 8001558:	e02d      	b.n	80015b6 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	2b00      	cmp	r3, #0
 8001560:	da07      	bge.n	8001572 <OLED_ShowChar+0x7a>
 8001562:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001566:	79b9      	ldrb	r1, [r7, #6]
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff6a 	bl	8001444 <OLED_DrawPoint>
 8001570:	e00c      	b.n	800158c <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8001572:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf0c      	ite	eq
 800157a:	2301      	moveq	r3, #1
 800157c:	2300      	movne	r3, #0
 800157e:	b2db      	uxtb	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	79b9      	ldrb	r1, [r7, #6]
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff ff5c 	bl	8001444 <OLED_DrawPoint>
			temp<<=1;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
			y++;
 8001592:	79bb      	ldrb	r3, [r7, #6]
 8001594:	3301      	adds	r3, #1
 8001596:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001598:	79ba      	ldrb	r2, [r7, #6]
 800159a:	7b3b      	ldrb	r3, [r7, #12]
 800159c:	1ad2      	subs	r2, r2, r3
 800159e:	793b      	ldrb	r3, [r7, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d105      	bne.n	80015b0 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80015a4:	7b3b      	ldrb	r3, [r7, #12]
 80015a6:	71bb      	strb	r3, [r7, #6]
				x++;
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	3301      	adds	r3, #1
 80015ac:	71fb      	strb	r3, [r7, #7]
				break;
 80015ae:	e005      	b.n	80015bc <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80015b0:	7b7b      	ldrb	r3, [r7, #13]
 80015b2:	3301      	adds	r3, #1
 80015b4:	737b      	strb	r3, [r7, #13]
 80015b6:	7b7b      	ldrb	r3, [r7, #13]
 80015b8:	2b07      	cmp	r3, #7
 80015ba:	d9ce      	bls.n	800155a <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80015bc:	7bbb      	ldrb	r3, [r7, #14]
 80015be:	3301      	adds	r3, #1
 80015c0:	73bb      	strb	r3, [r7, #14]
 80015c2:	7bba      	ldrb	r2, [r7, #14]
 80015c4:	793b      	ldrb	r3, [r7, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d3ad      	bcc.n	8001526 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	08007240 	.word	0x08007240
 80015d8:	080076b4 	.word	0x080076b4

080015dc <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	4603      	mov	r3, r0
 80015e4:	603a      	str	r2, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
 80015e8:	460b      	mov	r3, r1
 80015ea:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80015ec:	e01f      	b.n	800162e <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b7a      	cmp	r3, #122	; 0x7a
 80015f2:	d904      	bls.n	80015fe <OLED_ShowString+0x22>
 80015f4:	2300      	movs	r3, #0
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	79bb      	ldrb	r3, [r7, #6]
 80015fa:	3310      	adds	r3, #16
 80015fc:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80015fe:	79bb      	ldrb	r3, [r7, #6]
 8001600:	2b3a      	cmp	r3, #58	; 0x3a
 8001602:	d905      	bls.n	8001610 <OLED_ShowString+0x34>
 8001604:	2300      	movs	r3, #0
 8001606:	71fb      	strb	r3, [r7, #7]
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	71bb      	strb	r3, [r7, #6]
 800160c:	f7ff fef4 	bl	80013f8 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	781a      	ldrb	r2, [r3, #0]
 8001614:	79b9      	ldrb	r1, [r7, #6]
 8001616:	79f8      	ldrb	r0, [r7, #7]
 8001618:	2301      	movs	r3, #1
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	230c      	movs	r3, #12
 800161e:	f7ff ff6b 	bl	80014f8 <OLED_ShowChar>
        x+=8;
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	3308      	adds	r3, #8
 8001626:	71fb      	strb	r3, [r7, #7]
        p++;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1db      	bne.n	80015ee <OLED_ShowString+0x12>
    }  
}	 
 8001636:	bf00      	nop
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <OLED_Init>:

void OLED_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8001644:	f000 fbd4 	bl	8001df0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8001648:	4b41      	ldr	r3, [pc, #260]	; (8001750 <OLED_Init+0x110>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a40      	ldr	r2, [pc, #256]	; (8001750 <OLED_Init+0x110>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
 8001654:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <OLED_Init+0x110>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	4a3d      	ldr	r2, [pc, #244]	; (8001750 <OLED_Init+0x110>)
 800165a:	f023 0304 	bic.w	r3, r3, #4
 800165e:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8001660:	f000 fbda 	bl	8001e18 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8001664:	2200      	movs	r2, #0
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	483a      	ldr	r0, [pc, #232]	; (8001754 <OLED_Init+0x114>)
 800166a:	f000 fb8d 	bl	8001d88 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800166e:	2064      	movs	r0, #100	; 0x64
 8001670:	f000 f8e4 	bl	800183c <HAL_Delay>
	OLED_RST_Set();
 8001674:	2201      	movs	r2, #1
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	4836      	ldr	r0, [pc, #216]	; (8001754 <OLED_Init+0x114>)
 800167a:	f000 fb85 	bl	8001d88 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800167e:	2100      	movs	r1, #0
 8001680:	20ae      	movs	r0, #174	; 0xae
 8001682:	f7ff fe6f 	bl	8001364 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8001686:	2100      	movs	r1, #0
 8001688:	20d5      	movs	r0, #213	; 0xd5
 800168a:	f7ff fe6b 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800168e:	2100      	movs	r1, #0
 8001690:	2050      	movs	r0, #80	; 0x50
 8001692:	f7ff fe67 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8001696:	2100      	movs	r1, #0
 8001698:	20a8      	movs	r0, #168	; 0xa8
 800169a:	f7ff fe63 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800169e:	2100      	movs	r1, #0
 80016a0:	203f      	movs	r0, #63	; 0x3f
 80016a2:	f7ff fe5f 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80016a6:	2100      	movs	r1, #0
 80016a8:	20d3      	movs	r0, #211	; 0xd3
 80016aa:	f7ff fe5b 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80016ae:	2100      	movs	r1, #0
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff fe57 	bl	8001364 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80016b6:	2100      	movs	r1, #0
 80016b8:	2040      	movs	r0, #64	; 0x40
 80016ba:	f7ff fe53 	bl	8001364 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80016be:	2100      	movs	r1, #0
 80016c0:	208d      	movs	r0, #141	; 0x8d
 80016c2:	f7ff fe4f 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80016c6:	2100      	movs	r1, #0
 80016c8:	2014      	movs	r0, #20
 80016ca:	f7ff fe4b 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80016ce:	2100      	movs	r1, #0
 80016d0:	2020      	movs	r0, #32
 80016d2:	f7ff fe47 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80016d6:	2100      	movs	r1, #0
 80016d8:	2002      	movs	r0, #2
 80016da:	f7ff fe43 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80016de:	2100      	movs	r1, #0
 80016e0:	20a1      	movs	r0, #161	; 0xa1
 80016e2:	f7ff fe3f 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80016e6:	2100      	movs	r1, #0
 80016e8:	20c0      	movs	r0, #192	; 0xc0
 80016ea:	f7ff fe3b 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80016ee:	2100      	movs	r1, #0
 80016f0:	20da      	movs	r0, #218	; 0xda
 80016f2:	f7ff fe37 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80016f6:	2100      	movs	r1, #0
 80016f8:	2012      	movs	r0, #18
 80016fa:	f7ff fe33 	bl	8001364 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80016fe:	2100      	movs	r1, #0
 8001700:	2081      	movs	r0, #129	; 0x81
 8001702:	f7ff fe2f 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8001706:	2100      	movs	r1, #0
 8001708:	20ef      	movs	r0, #239	; 0xef
 800170a:	f7ff fe2b 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800170e:	2100      	movs	r1, #0
 8001710:	20d9      	movs	r0, #217	; 0xd9
 8001712:	f7ff fe27 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8001716:	2100      	movs	r1, #0
 8001718:	20f1      	movs	r0, #241	; 0xf1
 800171a:	f7ff fe23 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800171e:	2100      	movs	r1, #0
 8001720:	20db      	movs	r0, #219	; 0xdb
 8001722:	f7ff fe1f 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001726:	2100      	movs	r1, #0
 8001728:	2030      	movs	r0, #48	; 0x30
 800172a:	f7ff fe1b 	bl	8001364 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800172e:	2100      	movs	r1, #0
 8001730:	20a4      	movs	r0, #164	; 0xa4
 8001732:	f7ff fe17 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8001736:	2100      	movs	r1, #0
 8001738:	20a6      	movs	r0, #166	; 0xa6
 800173a:	f7ff fe13 	bl	8001364 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800173e:	2100      	movs	r1, #0
 8001740:	20af      	movs	r0, #175	; 0xaf
 8001742:	f7ff fe0f 	bl	8001364 <OLED_WR_Byte>
	OLED_Clear(); 
 8001746:	f7ff fe57 	bl	80013f8 <OLED_Clear>
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40021000 	.word	0x40021000

08001758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0d      	ldr	r2, [pc, #52]	; (8001798 <HAL_Init+0x40>)
 8001762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <HAL_Init+0x40>)
 800176e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_Init+0x40>)
 800177a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001780:	2003      	movs	r0, #3
 8001782:	f000 f931 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001786:	200f      	movs	r0, #15
 8001788:	f000 f808 	bl	800179c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800178c:	f7ff fb68 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023c00 	.word	0x40023c00

0800179c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_InitTick+0x54>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_InitTick+0x58>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f93b 	bl	8001a36 <HAL_SYSTICK_Config>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00e      	b.n	80017e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b0f      	cmp	r3, #15
 80017ce:	d80a      	bhi.n	80017e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d0:	2200      	movs	r2, #0
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	f000 f911 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017dc:	4a06      	ldr	r2, [pc, #24]	; (80017f8 <HAL_InitTick+0x5c>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e000      	b.n	80017e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000008 	.word	0x20000008
 80017f8:	20000004 	.word	0x20000004

080017fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x20>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_IncTick+0x24>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <HAL_IncTick+0x24>)
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000008 	.word	0x20000008
 8001820:	20000604 	.word	0x20000604

08001824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return uwTick;
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <HAL_GetTick+0x14>)
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000604 	.word	0x20000604

0800183c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001844:	f7ff ffee 	bl	8001824 <HAL_GetTick>
 8001848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001854:	d005      	beq.n	8001862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_Delay+0x44>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4413      	add	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001862:	bf00      	nop
 8001864:	f7ff ffde 	bl	8001824 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	429a      	cmp	r2, r3
 8001872:	d8f7      	bhi.n	8001864 <HAL_Delay+0x28>
  {
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000008 	.word	0x20000008

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f7ff ff8e 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff47 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff5c 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff8e 	bl	800193c <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5d 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffb0 	bl	80019a4 <SysTick_Config>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	e16b      	b.n	8001d44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	f040 815a 	bne.w	8001d3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d005      	beq.n	8001aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d130      	bne.n	8001b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 0201 	and.w	r2, r3, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d017      	beq.n	8001b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d123      	bne.n	8001b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	220f      	movs	r2, #15
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	08da      	lsrs	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3208      	adds	r2, #8
 8001b8e:	69b9      	ldr	r1, [r7, #24]
 8001b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0203 	and.w	r2, r3, #3
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80b4 	beq.w	8001d3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b60      	ldr	r3, [pc, #384]	; (8001d5c <HAL_GPIO_Init+0x30c>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	4a5f      	ldr	r2, [pc, #380]	; (8001d5c <HAL_GPIO_Init+0x30c>)
 8001be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be4:	6453      	str	r3, [r2, #68]	; 0x44
 8001be6:	4b5d      	ldr	r3, [pc, #372]	; (8001d5c <HAL_GPIO_Init+0x30c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf2:	4a5b      	ldr	r2, [pc, #364]	; (8001d60 <HAL_GPIO_Init+0x310>)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	220f      	movs	r2, #15
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a52      	ldr	r2, [pc, #328]	; (8001d64 <HAL_GPIO_Init+0x314>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d02b      	beq.n	8001c76 <HAL_GPIO_Init+0x226>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a51      	ldr	r2, [pc, #324]	; (8001d68 <HAL_GPIO_Init+0x318>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d025      	beq.n	8001c72 <HAL_GPIO_Init+0x222>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a50      	ldr	r2, [pc, #320]	; (8001d6c <HAL_GPIO_Init+0x31c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01f      	beq.n	8001c6e <HAL_GPIO_Init+0x21e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4f      	ldr	r2, [pc, #316]	; (8001d70 <HAL_GPIO_Init+0x320>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d019      	beq.n	8001c6a <HAL_GPIO_Init+0x21a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4e      	ldr	r2, [pc, #312]	; (8001d74 <HAL_GPIO_Init+0x324>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_GPIO_Init+0x216>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4d      	ldr	r2, [pc, #308]	; (8001d78 <HAL_GPIO_Init+0x328>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00d      	beq.n	8001c62 <HAL_GPIO_Init+0x212>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4c      	ldr	r2, [pc, #304]	; (8001d7c <HAL_GPIO_Init+0x32c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d007      	beq.n	8001c5e <HAL_GPIO_Init+0x20e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4b      	ldr	r2, [pc, #300]	; (8001d80 <HAL_GPIO_Init+0x330>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d101      	bne.n	8001c5a <HAL_GPIO_Init+0x20a>
 8001c56:	2307      	movs	r3, #7
 8001c58:	e00e      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	e00c      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c5e:	2306      	movs	r3, #6
 8001c60:	e00a      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c62:	2305      	movs	r3, #5
 8001c64:	e008      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c66:	2304      	movs	r3, #4
 8001c68:	e006      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e004      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c76:	2300      	movs	r3, #0
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	f002 0203 	and.w	r2, r2, #3
 8001c7e:	0092      	lsls	r2, r2, #2
 8001c80:	4093      	lsls	r3, r2
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c88:	4935      	ldr	r1, [pc, #212]	; (8001d60 <HAL_GPIO_Init+0x310>)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	089b      	lsrs	r3, r3, #2
 8001c8e:	3302      	adds	r3, #2
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c96:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <HAL_GPIO_Init+0x334>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cba:	4a32      	ldr	r2, [pc, #200]	; (8001d84 <HAL_GPIO_Init+0x334>)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc0:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <HAL_GPIO_Init+0x334>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce4:	4a27      	ldr	r2, [pc, #156]	; (8001d84 <HAL_GPIO_Init+0x334>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cea:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <HAL_GPIO_Init+0x334>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d0e:	4a1d      	ldr	r2, [pc, #116]	; (8001d84 <HAL_GPIO_Init+0x334>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_GPIO_Init+0x334>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d38:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <HAL_GPIO_Init+0x334>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3301      	adds	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	2b0f      	cmp	r3, #15
 8001d48:	f67f ae90 	bls.w	8001a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3724      	adds	r7, #36	; 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40013800 	.word	0x40013800
 8001d64:	40020000 	.word	0x40020000
 8001d68:	40020400 	.word	0x40020400
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	40020c00 	.word	0x40020c00
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40021400 	.word	0x40021400
 8001d7c:	40021800 	.word	0x40021800
 8001d80:	40021c00 	.word	0x40021c00
 8001d84:	40013c00 	.word	0x40013c00

08001d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da4:	e003      	b.n	8001dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	041a      	lsls	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	619a      	str	r2, [r3, #24]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dcc:	887a      	ldrh	r2, [r7, #2]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	041a      	lsls	r2, r3, #16
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43d9      	mvns	r1, r3
 8001dd8:	887b      	ldrh	r3, [r7, #2]
 8001dda:	400b      	ands	r3, r1
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	619a      	str	r2, [r3, #24]
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_PWR_EnableBkUpAccess+0x20>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_PWR_EnableBkUpAccess+0x24>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001e02:	687b      	ldr	r3, [r7, #4]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	420e0020 	.word	0x420e0020
 8001e14:	40007000 	.word	0x40007000

08001e18 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_PWR_DisableBkUpAccess+0x20>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_PWR_DisableBkUpAccess+0x24>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001e2a:	687b      	ldr	r3, [r7, #4]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	420e0020 	.word	0x420e0020
 8001e3c:	40007000 	.word	0x40007000

08001e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e267      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d075      	beq.n	8001f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e5e:	4b88      	ldr	r3, [pc, #544]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d00c      	beq.n	8001e84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e6a:	4b85      	ldr	r3, [pc, #532]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d112      	bne.n	8001e9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e76:	4b82      	ldr	r3, [pc, #520]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e82:	d10b      	bne.n	8001e9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	4b7e      	ldr	r3, [pc, #504]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d05b      	beq.n	8001f48 <HAL_RCC_OscConfig+0x108>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d157      	bne.n	8001f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e242      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea4:	d106      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x74>
 8001ea6:	4b76      	ldr	r3, [pc, #472]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a75      	ldr	r2, [pc, #468]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e01d      	b.n	8001ef0 <HAL_RCC_OscConfig+0xb0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x98>
 8001ebe:	4b70      	ldr	r3, [pc, #448]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a6f      	ldr	r2, [pc, #444]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b6d      	ldr	r3, [pc, #436]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6c      	ldr	r2, [pc, #432]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0xb0>
 8001ed8:	4b69      	ldr	r3, [pc, #420]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a68      	ldr	r2, [pc, #416]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b66      	ldr	r3, [pc, #408]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a65      	ldr	r2, [pc, #404]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fc94 	bl	8001824 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f00:	f7ff fc90 	bl	8001824 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e207      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b5b      	ldr	r3, [pc, #364]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0xc0>
 8001f1e:	e014      	b.n	8001f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff fc80 	bl	8001824 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff fc7c 	bl	8001824 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e1f3      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	4b51      	ldr	r3, [pc, #324]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0xe8>
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d063      	beq.n	800201e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f56:	4b4a      	ldr	r3, [pc, #296]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d11c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6e:	4b44      	ldr	r3, [pc, #272]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d116      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_RCC_OscConfig+0x152>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e1c7      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f92:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4937      	ldr	r1, [pc, #220]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa6:	e03a      	b.n	800201e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d020      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb0:	4b34      	ldr	r3, [pc, #208]	; (8002084 <HAL_RCC_OscConfig+0x244>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7ff fc35 	bl	8001824 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7ff fc31 	bl	8001824 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e1a8      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	4b28      	ldr	r3, [pc, #160]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4925      	ldr	r1, [pc, #148]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
 8001ff0:	e015      	b.n	800201e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_RCC_OscConfig+0x244>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fc14 	bl	8001824 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002000:	f7ff fc10 	bl	8001824 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e187      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d036      	beq.n	8002098 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d016      	beq.n	8002060 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_RCC_OscConfig+0x248>)
 8002034:	2201      	movs	r2, #1
 8002036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff fbf4 	bl	8001824 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002040:	f7ff fbf0 	bl	8001824 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e167      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8002054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x200>
 800205e:	e01b      	b.n	8002098 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_RCC_OscConfig+0x248>)
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7ff fbdd 	bl	8001824 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	e00e      	b.n	800208c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800206e:	f7ff fbd9 	bl	8001824 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d907      	bls.n	800208c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e150      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
 8002080:	40023800 	.word	0x40023800
 8002084:	42470000 	.word	0x42470000
 8002088:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800208e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ea      	bne.n	800206e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8097 	beq.w	80021d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020aa:	4b81      	ldr	r3, [pc, #516]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10f      	bne.n	80020d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	4b7d      	ldr	r3, [pc, #500]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a7c      	ldr	r2, [pc, #496]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b7a      	ldr	r3, [pc, #488]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	4b77      	ldr	r3, [pc, #476]	; (80022b4 <HAL_RCC_OscConfig+0x474>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d118      	bne.n	8002114 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e2:	4b74      	ldr	r3, [pc, #464]	; (80022b4 <HAL_RCC_OscConfig+0x474>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a73      	ldr	r2, [pc, #460]	; (80022b4 <HAL_RCC_OscConfig+0x474>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ee:	f7ff fb99 	bl	8001824 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f6:	f7ff fb95 	bl	8001824 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e10c      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	4b6a      	ldr	r3, [pc, #424]	; (80022b4 <HAL_RCC_OscConfig+0x474>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x2ea>
 800211c:	4b64      	ldr	r3, [pc, #400]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a63      	ldr	r2, [pc, #396]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
 8002128:	e01c      	b.n	8002164 <HAL_RCC_OscConfig+0x324>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b05      	cmp	r3, #5
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x30c>
 8002132:	4b5f      	ldr	r3, [pc, #380]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002136:	4a5e      	ldr	r2, [pc, #376]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6713      	str	r3, [r2, #112]	; 0x70
 800213e:	4b5c      	ldr	r3, [pc, #368]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002142:	4a5b      	ldr	r2, [pc, #364]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6713      	str	r3, [r2, #112]	; 0x70
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0x324>
 800214c:	4b58      	ldr	r3, [pc, #352]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	4a57      	ldr	r2, [pc, #348]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	6713      	str	r3, [r2, #112]	; 0x70
 8002158:	4b55      	ldr	r3, [pc, #340]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	4a54      	ldr	r2, [pc, #336]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800215e:	f023 0304 	bic.w	r3, r3, #4
 8002162:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d015      	beq.n	8002198 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7ff fb5a 	bl	8001824 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002172:	e00a      	b.n	800218a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002174:	f7ff fb56 	bl	8001824 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e0cb      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218a:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0ee      	beq.n	8002174 <HAL_RCC_OscConfig+0x334>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7ff fb44 	bl	8001824 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a0:	f7ff fb40 	bl	8001824 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e0b5      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b6:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ee      	bne.n	80021a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c8:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	4a38      	ldr	r2, [pc, #224]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80a1 	beq.w	8002320 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021de:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d05c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d141      	bne.n	8002276 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f2:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <HAL_RCC_OscConfig+0x478>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff fb14 	bl	8001824 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002200:	f7ff fb10 	bl	8001824 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e087      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002212:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69da      	ldr	r2, [r3, #28]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	019b      	lsls	r3, r3, #6
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	3b01      	subs	r3, #1
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	061b      	lsls	r3, r3, #24
 8002242:	491b      	ldr	r1, [pc, #108]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x478>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7ff fae9 	bl	8001824 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002256:	f7ff fae5 	bl	8001824 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e05c      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x416>
 8002274:	e054      	b.n	8002320 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_RCC_OscConfig+0x478>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff fad2 	bl	8001824 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002284:	f7ff face 	bl	8001824 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e045      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x444>
 80022a2:	e03d      	b.n	8002320 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e038      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40007000 	.word	0x40007000
 80022b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	; (800232c <HAL_RCC_OscConfig+0x4ec>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d028      	beq.n	800231c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d121      	bne.n	800231c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d11a      	bne.n	800231c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022ec:	4013      	ands	r3, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d111      	bne.n	800231c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	085b      	lsrs	r3, r3, #1
 8002304:	3b01      	subs	r3, #1
 8002306:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d107      	bne.n	800231c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800

08002330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0cc      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002344:	4b68      	ldr	r3, [pc, #416]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d90c      	bls.n	800236c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b65      	ldr	r3, [pc, #404]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b63      	ldr	r3, [pc, #396]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0b8      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d020      	beq.n	80023ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002384:	4b59      	ldr	r3, [pc, #356]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a58      	ldr	r2, [pc, #352]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800238e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800239c:	4b53      	ldr	r3, [pc, #332]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a52      	ldr	r2, [pc, #328]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a8:	4b50      	ldr	r3, [pc, #320]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	494d      	ldr	r1, [pc, #308]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d044      	beq.n	8002450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d119      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e07f      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ee:	4b3f      	ldr	r3, [pc, #252]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e06f      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fe:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e067      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240e:	4b37      	ldr	r3, [pc, #220]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f023 0203 	bic.w	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4934      	ldr	r1, [pc, #208]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	4313      	orrs	r3, r2
 800241e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002420:	f7ff fa00 	bl	8001824 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	e00a      	b.n	800243e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002428:	f7ff f9fc 	bl	8001824 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e04f      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 020c 	and.w	r2, r3, #12
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	429a      	cmp	r2, r3
 800244e:	d1eb      	bne.n	8002428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002450:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d20c      	bcs.n	8002478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e032      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4916      	ldr	r1, [pc, #88]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	490e      	ldr	r1, [pc, #56]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024b6:	f000 f821 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80024ba:	4602      	mov	r2, r0
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	490a      	ldr	r1, [pc, #40]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	5ccb      	ldrb	r3, [r1, r3]
 80024ca:	fa22 f303 	lsr.w	r3, r2, r3
 80024ce:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff f960 	bl	800179c <HAL_InitTick>

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023c00 	.word	0x40023c00
 80024ec:	40023800 	.word	0x40023800
 80024f0:	08007228 	.word	0x08007228
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20000004 	.word	0x20000004

080024fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002500:	b090      	sub	sp, #64	; 0x40
 8002502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	637b      	str	r3, [r7, #52]	; 0x34
 8002508:	2300      	movs	r3, #0
 800250a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800250c:	2300      	movs	r3, #0
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002514:	4b59      	ldr	r3, [pc, #356]	; (800267c <HAL_RCC_GetSysClockFreq+0x180>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d00d      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x40>
 8002520:	2b08      	cmp	r3, #8
 8002522:	f200 80a1 	bhi.w	8002668 <HAL_RCC_GetSysClockFreq+0x16c>
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x34>
 800252a:	2b04      	cmp	r3, #4
 800252c:	d003      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x3a>
 800252e:	e09b      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002530:	4b53      	ldr	r3, [pc, #332]	; (8002680 <HAL_RCC_GetSysClockFreq+0x184>)
 8002532:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002534:	e09b      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002536:	4b53      	ldr	r3, [pc, #332]	; (8002684 <HAL_RCC_GetSysClockFreq+0x188>)
 8002538:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800253a:	e098      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800253c:	4b4f      	ldr	r3, [pc, #316]	; (800267c <HAL_RCC_GetSysClockFreq+0x180>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002546:	4b4d      	ldr	r3, [pc, #308]	; (800267c <HAL_RCC_GetSysClockFreq+0x180>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d028      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002552:	4b4a      	ldr	r3, [pc, #296]	; (800267c <HAL_RCC_GetSysClockFreq+0x180>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	099b      	lsrs	r3, r3, #6
 8002558:	2200      	movs	r2, #0
 800255a:	623b      	str	r3, [r7, #32]
 800255c:	627a      	str	r2, [r7, #36]	; 0x24
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002564:	2100      	movs	r1, #0
 8002566:	4b47      	ldr	r3, [pc, #284]	; (8002684 <HAL_RCC_GetSysClockFreq+0x188>)
 8002568:	fb03 f201 	mul.w	r2, r3, r1
 800256c:	2300      	movs	r3, #0
 800256e:	fb00 f303 	mul.w	r3, r0, r3
 8002572:	4413      	add	r3, r2
 8002574:	4a43      	ldr	r2, [pc, #268]	; (8002684 <HAL_RCC_GetSysClockFreq+0x188>)
 8002576:	fba0 1202 	umull	r1, r2, r0, r2
 800257a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800257c:	460a      	mov	r2, r1
 800257e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002582:	4413      	add	r3, r2
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002588:	2200      	movs	r2, #0
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	61fa      	str	r2, [r7, #28]
 800258e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002592:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002596:	f7fd fe6b 	bl	8000270 <__aeabi_uldivmod>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4613      	mov	r3, r2
 80025a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a2:	e053      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a4:	4b35      	ldr	r3, [pc, #212]	; (800267c <HAL_RCC_GetSysClockFreq+0x180>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	099b      	lsrs	r3, r3, #6
 80025aa:	2200      	movs	r2, #0
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	617a      	str	r2, [r7, #20]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025b6:	f04f 0b00 	mov.w	fp, #0
 80025ba:	4652      	mov	r2, sl
 80025bc:	465b      	mov	r3, fp
 80025be:	f04f 0000 	mov.w	r0, #0
 80025c2:	f04f 0100 	mov.w	r1, #0
 80025c6:	0159      	lsls	r1, r3, #5
 80025c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025cc:	0150      	lsls	r0, r2, #5
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	ebb2 080a 	subs.w	r8, r2, sl
 80025d6:	eb63 090b 	sbc.w	r9, r3, fp
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025ee:	ebb2 0408 	subs.w	r4, r2, r8
 80025f2:	eb63 0509 	sbc.w	r5, r3, r9
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	00eb      	lsls	r3, r5, #3
 8002600:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002604:	00e2      	lsls	r2, r4, #3
 8002606:	4614      	mov	r4, r2
 8002608:	461d      	mov	r5, r3
 800260a:	eb14 030a 	adds.w	r3, r4, sl
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	eb45 030b 	adc.w	r3, r5, fp
 8002614:	607b      	str	r3, [r7, #4]
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002622:	4629      	mov	r1, r5
 8002624:	028b      	lsls	r3, r1, #10
 8002626:	4621      	mov	r1, r4
 8002628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800262c:	4621      	mov	r1, r4
 800262e:	028a      	lsls	r2, r1, #10
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002636:	2200      	movs	r2, #0
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	60fa      	str	r2, [r7, #12]
 800263c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002640:	f7fd fe16 	bl	8000270 <__aeabi_uldivmod>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4613      	mov	r3, r2
 800264a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCC_GetSysClockFreq+0x180>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	3301      	adds	r3, #1
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800265c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	fbb2 f3f3 	udiv	r3, r2, r3
 8002664:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002666:	e002      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCC_GetSysClockFreq+0x184>)
 800266a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800266c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002670:	4618      	mov	r0, r3
 8002672:	3740      	adds	r7, #64	; 0x40
 8002674:	46bd      	mov	sp, r7
 8002676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800
 8002680:	00f42400 	.word	0x00f42400
 8002684:	017d7840 	.word	0x017d7840

08002688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <HAL_RCC_GetHCLKFreq+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000000 	.word	0x20000000

080026a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026a4:	f7ff fff0 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	0a9b      	lsrs	r3, r3, #10
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	4903      	ldr	r1, [pc, #12]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b6:	5ccb      	ldrb	r3, [r1, r3]
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40023800 	.word	0x40023800
 80026c4:	08007238 	.word	0x08007238

080026c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026cc:	f7ff ffdc 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0b5b      	lsrs	r3, r3, #13
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4903      	ldr	r1, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	08007238 	.word	0x08007238

080026f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e041      	b.n	8002786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fe fc8a 	bl	8001030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f000 fc02 	bl	8002f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e041      	b.n	8002824 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d106      	bne.n	80027ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7fe fb7f 	bl	8000eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2202      	movs	r2, #2
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	4619      	mov	r1, r3
 80027cc:	4610      	mov	r0, r2
 80027ce:	f000 fbb3 	bl	8002f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d109      	bne.n	8002850 <HAL_TIM_PWM_Start+0x24>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	bf14      	ite	ne
 8002848:	2301      	movne	r3, #1
 800284a:	2300      	moveq	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	e022      	b.n	8002896 <HAL_TIM_PWM_Start+0x6a>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d109      	bne.n	800286a <HAL_TIM_PWM_Start+0x3e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b01      	cmp	r3, #1
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	e015      	b.n	8002896 <HAL_TIM_PWM_Start+0x6a>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b08      	cmp	r3, #8
 800286e:	d109      	bne.n	8002884 <HAL_TIM_PWM_Start+0x58>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b01      	cmp	r3, #1
 800287a:	bf14      	ite	ne
 800287c:	2301      	movne	r3, #1
 800287e:	2300      	moveq	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e008      	b.n	8002896 <HAL_TIM_PWM_Start+0x6a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	bf14      	ite	ne
 8002890:	2301      	movne	r3, #1
 8002892:	2300      	moveq	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e07c      	b.n	8002998 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d104      	bne.n	80028ae <HAL_TIM_PWM_Start+0x82>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028ac:	e013      	b.n	80028d6 <HAL_TIM_PWM_Start+0xaa>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d104      	bne.n	80028be <HAL_TIM_PWM_Start+0x92>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028bc:	e00b      	b.n	80028d6 <HAL_TIM_PWM_Start+0xaa>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d104      	bne.n	80028ce <HAL_TIM_PWM_Start+0xa2>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028cc:	e003      	b.n	80028d6 <HAL_TIM_PWM_Start+0xaa>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2201      	movs	r2, #1
 80028dc:	6839      	ldr	r1, [r7, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fe20 	bl	8003524 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2d      	ldr	r2, [pc, #180]	; (80029a0 <HAL_TIM_PWM_Start+0x174>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d004      	beq.n	80028f8 <HAL_TIM_PWM_Start+0xcc>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a2c      	ldr	r2, [pc, #176]	; (80029a4 <HAL_TIM_PWM_Start+0x178>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d101      	bne.n	80028fc <HAL_TIM_PWM_Start+0xd0>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <HAL_TIM_PWM_Start+0xd2>
 80028fc:	2300      	movs	r3, #0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002910:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a22      	ldr	r2, [pc, #136]	; (80029a0 <HAL_TIM_PWM_Start+0x174>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d022      	beq.n	8002962 <HAL_TIM_PWM_Start+0x136>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002924:	d01d      	beq.n	8002962 <HAL_TIM_PWM_Start+0x136>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <HAL_TIM_PWM_Start+0x17c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d018      	beq.n	8002962 <HAL_TIM_PWM_Start+0x136>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a1d      	ldr	r2, [pc, #116]	; (80029ac <HAL_TIM_PWM_Start+0x180>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_TIM_PWM_Start+0x136>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <HAL_TIM_PWM_Start+0x184>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00e      	beq.n	8002962 <HAL_TIM_PWM_Start+0x136>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a16      	ldr	r2, [pc, #88]	; (80029a4 <HAL_TIM_PWM_Start+0x178>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d009      	beq.n	8002962 <HAL_TIM_PWM_Start+0x136>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a18      	ldr	r2, [pc, #96]	; (80029b4 <HAL_TIM_PWM_Start+0x188>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d004      	beq.n	8002962 <HAL_TIM_PWM_Start+0x136>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a16      	ldr	r2, [pc, #88]	; (80029b8 <HAL_TIM_PWM_Start+0x18c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d111      	bne.n	8002986 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b06      	cmp	r3, #6
 8002972:	d010      	beq.n	8002996 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002984:	e007      	b.n	8002996 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40010400 	.word	0x40010400
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40000800 	.word	0x40000800
 80029b0:	40000c00 	.word	0x40000c00
 80029b4:	40014000 	.word	0x40014000
 80029b8:	40001800 	.word	0x40001800

080029bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e097      	b.n	8002b00 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d106      	bne.n	80029ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7fe fa89 	bl	8000efc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a00:	f023 0307 	bic.w	r3, r3, #7
 8002a04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4610      	mov	r0, r2
 8002a12:	f000 fa91 	bl	8002f38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3e:	f023 0303 	bic.w	r3, r3, #3
 8002a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002a5c:	f023 030c 	bic.w	r3, r3, #12
 8002a60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	011a      	lsls	r2, r3, #4
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	031b      	lsls	r3, r3, #12
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002a9a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002aa2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002b30:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d110      	bne.n	8002b5a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d102      	bne.n	8002b44 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b3e:	7b7b      	ldrb	r3, [r7, #13]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d001      	beq.n	8002b48 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e069      	b.n	8002c1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b58:	e031      	b.n	8002bbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d110      	bne.n	8002b82 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b60:	7bbb      	ldrb	r3, [r7, #14]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d102      	bne.n	8002b6c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b66:	7b3b      	ldrb	r3, [r7, #12]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d001      	beq.n	8002b70 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e055      	b.n	8002c1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b80:	e01d      	b.n	8002bbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d108      	bne.n	8002b9a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b88:	7bbb      	ldrb	r3, [r7, #14]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d105      	bne.n	8002b9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b8e:	7b7b      	ldrb	r3, [r7, #13]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d102      	bne.n	8002b9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b94:	7b3b      	ldrb	r3, [r7, #12]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d001      	beq.n	8002b9e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e03e      	b.n	8002c1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_TIM_Encoder_Start+0xc4>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d008      	beq.n	8002bdc <HAL_TIM_Encoder_Start+0xd4>
 8002bca:	e00f      	b.n	8002bec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fca5 	bl	8003524 <TIM_CCxChannelCmd>
      break;
 8002bda:	e016      	b.n	8002c0a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2201      	movs	r2, #1
 8002be2:	2104      	movs	r1, #4
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fc9d 	bl	8003524 <TIM_CCxChannelCmd>
      break;
 8002bea:	e00e      	b.n	8002c0a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 fc95 	bl	8003524 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	2104      	movs	r1, #4
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fc8e 	bl	8003524 <TIM_CCxChannelCmd>
      break;
 8002c08:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0201 	orr.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e0ae      	b.n	8002da0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b0c      	cmp	r3, #12
 8002c4e:	f200 809f 	bhi.w	8002d90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c52:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c58:	08002c8d 	.word	0x08002c8d
 8002c5c:	08002d91 	.word	0x08002d91
 8002c60:	08002d91 	.word	0x08002d91
 8002c64:	08002d91 	.word	0x08002d91
 8002c68:	08002ccd 	.word	0x08002ccd
 8002c6c:	08002d91 	.word	0x08002d91
 8002c70:	08002d91 	.word	0x08002d91
 8002c74:	08002d91 	.word	0x08002d91
 8002c78:	08002d0f 	.word	0x08002d0f
 8002c7c:	08002d91 	.word	0x08002d91
 8002c80:	08002d91 	.word	0x08002d91
 8002c84:	08002d91 	.word	0x08002d91
 8002c88:	08002d4f 	.word	0x08002d4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 f9fc 	bl	8003090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0208 	orr.w	r2, r2, #8
 8002ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0204 	bic.w	r2, r2, #4
 8002cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6999      	ldr	r1, [r3, #24]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	619a      	str	r2, [r3, #24]
      break;
 8002cca:	e064      	b.n	8002d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fa4c 	bl	8003170 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699a      	ldr	r2, [r3, #24]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6999      	ldr	r1, [r3, #24]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	021a      	lsls	r2, r3, #8
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	619a      	str	r2, [r3, #24]
      break;
 8002d0c:	e043      	b.n	8002d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68b9      	ldr	r1, [r7, #8]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 faa1 	bl	800325c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69da      	ldr	r2, [r3, #28]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0208 	orr.w	r2, r2, #8
 8002d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0204 	bic.w	r2, r2, #4
 8002d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69d9      	ldr	r1, [r3, #28]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	61da      	str	r2, [r3, #28]
      break;
 8002d4c:	e023      	b.n	8002d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 faf5 	bl	8003344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69d9      	ldr	r1, [r3, #28]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	021a      	lsls	r2, r3, #8
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	61da      	str	r2, [r3, #28]
      break;
 8002d8e:	e002      	b.n	8002d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	75fb      	strb	r3, [r7, #23]
      break;
 8002d94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_TIM_ConfigClockSource+0x1c>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e0b4      	b.n	8002f2e <HAL_TIM_ConfigClockSource+0x186>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfc:	d03e      	beq.n	8002e7c <HAL_TIM_ConfigClockSource+0xd4>
 8002dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e02:	f200 8087 	bhi.w	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0a:	f000 8086 	beq.w	8002f1a <HAL_TIM_ConfigClockSource+0x172>
 8002e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e12:	d87f      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e14:	2b70      	cmp	r3, #112	; 0x70
 8002e16:	d01a      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0xa6>
 8002e18:	2b70      	cmp	r3, #112	; 0x70
 8002e1a:	d87b      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e1c:	2b60      	cmp	r3, #96	; 0x60
 8002e1e:	d050      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x11a>
 8002e20:	2b60      	cmp	r3, #96	; 0x60
 8002e22:	d877      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e24:	2b50      	cmp	r3, #80	; 0x50
 8002e26:	d03c      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0xfa>
 8002e28:	2b50      	cmp	r3, #80	; 0x50
 8002e2a:	d873      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d058      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x13a>
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d86f      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e34:	2b30      	cmp	r3, #48	; 0x30
 8002e36:	d064      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x15a>
 8002e38:	2b30      	cmp	r3, #48	; 0x30
 8002e3a:	d86b      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d060      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x15a>
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d867      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d05c      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x15a>
 8002e48:	2b10      	cmp	r3, #16
 8002e4a:	d05a      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x15a>
 8002e4c:	e062      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e5e:	f000 fb41 	bl	80034e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	609a      	str	r2, [r3, #8]
      break;
 8002e7a:	e04f      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e8c:	f000 fb2a 	bl	80034e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e9e:	609a      	str	r2, [r3, #8]
      break;
 8002ea0:	e03c      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f000 fa9e 	bl	80033f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2150      	movs	r1, #80	; 0x50
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 faf7 	bl	80034ae <TIM_ITRx_SetConfig>
      break;
 8002ec0:	e02c      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f000 fabd 	bl	800344e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2160      	movs	r1, #96	; 0x60
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fae7 	bl	80034ae <TIM_ITRx_SetConfig>
      break;
 8002ee0:	e01c      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f000 fa7e 	bl	80033f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2140      	movs	r1, #64	; 0x40
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fad7 	bl	80034ae <TIM_ITRx_SetConfig>
      break;
 8002f00:	e00c      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	f000 face 	bl	80034ae <TIM_ITRx_SetConfig>
      break;
 8002f12:	e003      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      break;
 8002f18:	e000      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a46      	ldr	r2, [pc, #280]	; (8003064 <TIM_Base_SetConfig+0x12c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d013      	beq.n	8002f78 <TIM_Base_SetConfig+0x40>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f56:	d00f      	beq.n	8002f78 <TIM_Base_SetConfig+0x40>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a43      	ldr	r2, [pc, #268]	; (8003068 <TIM_Base_SetConfig+0x130>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00b      	beq.n	8002f78 <TIM_Base_SetConfig+0x40>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a42      	ldr	r2, [pc, #264]	; (800306c <TIM_Base_SetConfig+0x134>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d007      	beq.n	8002f78 <TIM_Base_SetConfig+0x40>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a41      	ldr	r2, [pc, #260]	; (8003070 <TIM_Base_SetConfig+0x138>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d003      	beq.n	8002f78 <TIM_Base_SetConfig+0x40>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a40      	ldr	r2, [pc, #256]	; (8003074 <TIM_Base_SetConfig+0x13c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d108      	bne.n	8002f8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a35      	ldr	r2, [pc, #212]	; (8003064 <TIM_Base_SetConfig+0x12c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d02b      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f98:	d027      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a32      	ldr	r2, [pc, #200]	; (8003068 <TIM_Base_SetConfig+0x130>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d023      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a31      	ldr	r2, [pc, #196]	; (800306c <TIM_Base_SetConfig+0x134>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d01f      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a30      	ldr	r2, [pc, #192]	; (8003070 <TIM_Base_SetConfig+0x138>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01b      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a2f      	ldr	r2, [pc, #188]	; (8003074 <TIM_Base_SetConfig+0x13c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d017      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a2e      	ldr	r2, [pc, #184]	; (8003078 <TIM_Base_SetConfig+0x140>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a2d      	ldr	r2, [pc, #180]	; (800307c <TIM_Base_SetConfig+0x144>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00f      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a2c      	ldr	r2, [pc, #176]	; (8003080 <TIM_Base_SetConfig+0x148>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00b      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a2b      	ldr	r2, [pc, #172]	; (8003084 <TIM_Base_SetConfig+0x14c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a2a      	ldr	r2, [pc, #168]	; (8003088 <TIM_Base_SetConfig+0x150>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d003      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a29      	ldr	r2, [pc, #164]	; (800308c <TIM_Base_SetConfig+0x154>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d108      	bne.n	8002ffc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a10      	ldr	r2, [pc, #64]	; (8003064 <TIM_Base_SetConfig+0x12c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d003      	beq.n	8003030 <TIM_Base_SetConfig+0xf8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a12      	ldr	r2, [pc, #72]	; (8003074 <TIM_Base_SetConfig+0x13c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d103      	bne.n	8003038 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f023 0201 	bic.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	611a      	str	r2, [r3, #16]
  }
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40010000 	.word	0x40010000
 8003068:	40000400 	.word	0x40000400
 800306c:	40000800 	.word	0x40000800
 8003070:	40000c00 	.word	0x40000c00
 8003074:	40010400 	.word	0x40010400
 8003078:	40014000 	.word	0x40014000
 800307c:	40014400 	.word	0x40014400
 8003080:	40014800 	.word	0x40014800
 8003084:	40001800 	.word	0x40001800
 8003088:	40001c00 	.word	0x40001c00
 800308c:	40002000 	.word	0x40002000

08003090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f023 0201 	bic.w	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0303 	bic.w	r3, r3, #3
 80030c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f023 0302 	bic.w	r3, r3, #2
 80030d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a20      	ldr	r2, [pc, #128]	; (8003168 <TIM_OC1_SetConfig+0xd8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_OC1_SetConfig+0x64>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a1f      	ldr	r2, [pc, #124]	; (800316c <TIM_OC1_SetConfig+0xdc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d10c      	bne.n	800310e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f023 0308 	bic.w	r3, r3, #8
 80030fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f023 0304 	bic.w	r3, r3, #4
 800310c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a15      	ldr	r2, [pc, #84]	; (8003168 <TIM_OC1_SetConfig+0xd8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d003      	beq.n	800311e <TIM_OC1_SetConfig+0x8e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a14      	ldr	r2, [pc, #80]	; (800316c <TIM_OC1_SetConfig+0xdc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d111      	bne.n	8003142 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800312c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	621a      	str	r2, [r3, #32]
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	40010000 	.word	0x40010000
 800316c:	40010400 	.word	0x40010400

08003170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f023 0210 	bic.w	r2, r3, #16
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f023 0320 	bic.w	r3, r3, #32
 80031ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a22      	ldr	r2, [pc, #136]	; (8003254 <TIM_OC2_SetConfig+0xe4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d003      	beq.n	80031d8 <TIM_OC2_SetConfig+0x68>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a21      	ldr	r2, [pc, #132]	; (8003258 <TIM_OC2_SetConfig+0xe8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d10d      	bne.n	80031f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a17      	ldr	r2, [pc, #92]	; (8003254 <TIM_OC2_SetConfig+0xe4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_OC2_SetConfig+0x94>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a16      	ldr	r2, [pc, #88]	; (8003258 <TIM_OC2_SetConfig+0xe8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d113      	bne.n	800322c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800320a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40010000 	.word	0x40010000
 8003258:	40010400 	.word	0x40010400

0800325c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a21      	ldr	r2, [pc, #132]	; (800333c <TIM_OC3_SetConfig+0xe0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d003      	beq.n	80032c2 <TIM_OC3_SetConfig+0x66>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a20      	ldr	r2, [pc, #128]	; (8003340 <TIM_OC3_SetConfig+0xe4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d10d      	bne.n	80032de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a16      	ldr	r2, [pc, #88]	; (800333c <TIM_OC3_SetConfig+0xe0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d003      	beq.n	80032ee <TIM_OC3_SetConfig+0x92>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a15      	ldr	r2, [pc, #84]	; (8003340 <TIM_OC3_SetConfig+0xe4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d113      	bne.n	8003316 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	621a      	str	r2, [r3, #32]
}
 8003330:	bf00      	nop
 8003332:	371c      	adds	r7, #28
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	40010000 	.word	0x40010000
 8003340:	40010400 	.word	0x40010400

08003344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800338e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	031b      	lsls	r3, r3, #12
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <TIM_OC4_SetConfig+0xa4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d003      	beq.n	80033ac <TIM_OC4_SetConfig+0x68>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a11      	ldr	r2, [pc, #68]	; (80033ec <TIM_OC4_SetConfig+0xa8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d109      	bne.n	80033c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	019b      	lsls	r3, r3, #6
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	621a      	str	r2, [r3, #32]
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40010000 	.word	0x40010000
 80033ec:	40010400 	.word	0x40010400

080033f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f023 0201 	bic.w	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800341a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f023 030a 	bic.w	r3, r3, #10
 800342c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	621a      	str	r2, [r3, #32]
}
 8003442:	bf00      	nop
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800344e:	b480      	push	{r7}
 8003450:	b087      	sub	sp, #28
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f023 0210 	bic.w	r2, r3, #16
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003478:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	031b      	lsls	r3, r3, #12
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800348a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	621a      	str	r2, [r3, #32]
}
 80034a2:	bf00      	nop
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b085      	sub	sp, #20
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f043 0307 	orr.w	r3, r3, #7
 80034d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	609a      	str	r2, [r3, #8]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	021a      	lsls	r2, r3, #8
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	431a      	orrs	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4313      	orrs	r3, r2
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	609a      	str	r2, [r3, #8]
}
 8003518:	bf00      	nop
 800351a:	371c      	adds	r7, #28
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2201      	movs	r2, #1
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a1a      	ldr	r2, [r3, #32]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	43db      	mvns	r3, r3
 8003546:	401a      	ands	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a1a      	ldr	r2, [r3, #32]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	fa01 f303 	lsl.w	r3, r1, r3
 800355c:	431a      	orrs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	621a      	str	r2, [r3, #32]
}
 8003562:	bf00      	nop
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003584:	2302      	movs	r3, #2
 8003586:	e05a      	b.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a21      	ldr	r2, [pc, #132]	; (800364c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d022      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d4:	d01d      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d018      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1b      	ldr	r2, [pc, #108]	; (8003654 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1a      	ldr	r2, [pc, #104]	; (8003658 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00e      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a18      	ldr	r2, [pc, #96]	; (800365c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d009      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a17      	ldr	r2, [pc, #92]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a15      	ldr	r2, [pc, #84]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d10c      	bne.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003618:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	4313      	orrs	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40010000 	.word	0x40010000
 8003650:	40000400 	.word	0x40000400
 8003654:	40000800 	.word	0x40000800
 8003658:	40000c00 	.word	0x40000c00
 800365c:	40010400 	.word	0x40010400
 8003660:	40014000 	.word	0x40014000
 8003664:	40001800 	.word	0x40001800

08003668 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003680:	2302      	movs	r3, #2
 8003682:	e03d      	b.n	8003700 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e042      	b.n	80037a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fd fd00 	bl	8001138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2224      	movs	r2, #36	; 0x24
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800374e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f82b 	bl	80037ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037b0:	b0c0      	sub	sp, #256	; 0x100
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c8:	68d9      	ldr	r1, [r3, #12]
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	ea40 0301 	orr.w	r3, r0, r1
 80037d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003804:	f021 010c 	bic.w	r1, r1, #12
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003812:	430b      	orrs	r3, r1
 8003814:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003826:	6999      	ldr	r1, [r3, #24]
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	ea40 0301 	orr.w	r3, r0, r1
 8003832:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4b8f      	ldr	r3, [pc, #572]	; (8003a78 <UART_SetConfig+0x2cc>)
 800383c:	429a      	cmp	r2, r3
 800383e:	d005      	beq.n	800384c <UART_SetConfig+0xa0>
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	4b8d      	ldr	r3, [pc, #564]	; (8003a7c <UART_SetConfig+0x2d0>)
 8003848:	429a      	cmp	r2, r3
 800384a:	d104      	bne.n	8003856 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800384c:	f7fe ff3c 	bl	80026c8 <HAL_RCC_GetPCLK2Freq>
 8003850:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003854:	e003      	b.n	800385e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003856:	f7fe ff23 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 800385a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800385e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003868:	f040 810c 	bne.w	8003a84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800386c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003870:	2200      	movs	r2, #0
 8003872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003876:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800387a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800387e:	4622      	mov	r2, r4
 8003880:	462b      	mov	r3, r5
 8003882:	1891      	adds	r1, r2, r2
 8003884:	65b9      	str	r1, [r7, #88]	; 0x58
 8003886:	415b      	adcs	r3, r3
 8003888:	65fb      	str	r3, [r7, #92]	; 0x5c
 800388a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800388e:	4621      	mov	r1, r4
 8003890:	eb12 0801 	adds.w	r8, r2, r1
 8003894:	4629      	mov	r1, r5
 8003896:	eb43 0901 	adc.w	r9, r3, r1
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ae:	4690      	mov	r8, r2
 80038b0:	4699      	mov	r9, r3
 80038b2:	4623      	mov	r3, r4
 80038b4:	eb18 0303 	adds.w	r3, r8, r3
 80038b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038bc:	462b      	mov	r3, r5
 80038be:	eb49 0303 	adc.w	r3, r9, r3
 80038c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038da:	460b      	mov	r3, r1
 80038dc:	18db      	adds	r3, r3, r3
 80038de:	653b      	str	r3, [r7, #80]	; 0x50
 80038e0:	4613      	mov	r3, r2
 80038e2:	eb42 0303 	adc.w	r3, r2, r3
 80038e6:	657b      	str	r3, [r7, #84]	; 0x54
 80038e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038f0:	f7fc fcbe 	bl	8000270 <__aeabi_uldivmod>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4b61      	ldr	r3, [pc, #388]	; (8003a80 <UART_SetConfig+0x2d4>)
 80038fa:	fba3 2302 	umull	r2, r3, r3, r2
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	011c      	lsls	r4, r3, #4
 8003902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003906:	2200      	movs	r2, #0
 8003908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800390c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003910:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003914:	4642      	mov	r2, r8
 8003916:	464b      	mov	r3, r9
 8003918:	1891      	adds	r1, r2, r2
 800391a:	64b9      	str	r1, [r7, #72]	; 0x48
 800391c:	415b      	adcs	r3, r3
 800391e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003920:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003924:	4641      	mov	r1, r8
 8003926:	eb12 0a01 	adds.w	sl, r2, r1
 800392a:	4649      	mov	r1, r9
 800392c:	eb43 0b01 	adc.w	fp, r3, r1
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800393c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003944:	4692      	mov	sl, r2
 8003946:	469b      	mov	fp, r3
 8003948:	4643      	mov	r3, r8
 800394a:	eb1a 0303 	adds.w	r3, sl, r3
 800394e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003952:	464b      	mov	r3, r9
 8003954:	eb4b 0303 	adc.w	r3, fp, r3
 8003958:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003968:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800396c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003970:	460b      	mov	r3, r1
 8003972:	18db      	adds	r3, r3, r3
 8003974:	643b      	str	r3, [r7, #64]	; 0x40
 8003976:	4613      	mov	r3, r2
 8003978:	eb42 0303 	adc.w	r3, r2, r3
 800397c:	647b      	str	r3, [r7, #68]	; 0x44
 800397e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003982:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003986:	f7fc fc73 	bl	8000270 <__aeabi_uldivmod>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4611      	mov	r1, r2
 8003990:	4b3b      	ldr	r3, [pc, #236]	; (8003a80 <UART_SetConfig+0x2d4>)
 8003992:	fba3 2301 	umull	r2, r3, r3, r1
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	2264      	movs	r2, #100	; 0x64
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	1acb      	subs	r3, r1, r3
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039a6:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <UART_SetConfig+0x2d4>)
 80039a8:	fba3 2302 	umull	r2, r3, r3, r2
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039b4:	441c      	add	r4, r3
 80039b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ba:	2200      	movs	r2, #0
 80039bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039c8:	4642      	mov	r2, r8
 80039ca:	464b      	mov	r3, r9
 80039cc:	1891      	adds	r1, r2, r2
 80039ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80039d0:	415b      	adcs	r3, r3
 80039d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039d8:	4641      	mov	r1, r8
 80039da:	1851      	adds	r1, r2, r1
 80039dc:	6339      	str	r1, [r7, #48]	; 0x30
 80039de:	4649      	mov	r1, r9
 80039e0:	414b      	adcs	r3, r1
 80039e2:	637b      	str	r3, [r7, #52]	; 0x34
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039f0:	4659      	mov	r1, fp
 80039f2:	00cb      	lsls	r3, r1, #3
 80039f4:	4651      	mov	r1, sl
 80039f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039fa:	4651      	mov	r1, sl
 80039fc:	00ca      	lsls	r2, r1, #3
 80039fe:	4610      	mov	r0, r2
 8003a00:	4619      	mov	r1, r3
 8003a02:	4603      	mov	r3, r0
 8003a04:	4642      	mov	r2, r8
 8003a06:	189b      	adds	r3, r3, r2
 8003a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a0c:	464b      	mov	r3, r9
 8003a0e:	460a      	mov	r2, r1
 8003a10:	eb42 0303 	adc.w	r3, r2, r3
 8003a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	18db      	adds	r3, r3, r3
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a32:	4613      	mov	r3, r2
 8003a34:	eb42 0303 	adc.w	r3, r2, r3
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a42:	f7fc fc15 	bl	8000270 <__aeabi_uldivmod>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <UART_SetConfig+0x2d4>)
 8003a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	2164      	movs	r1, #100	; 0x64
 8003a54:	fb01 f303 	mul.w	r3, r1, r3
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	3332      	adds	r3, #50	; 0x32
 8003a5e:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <UART_SetConfig+0x2d4>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	f003 0207 	and.w	r2, r3, #7
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4422      	add	r2, r4
 8003a72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a74:	e106      	b.n	8003c84 <UART_SetConfig+0x4d8>
 8003a76:	bf00      	nop
 8003a78:	40011000 	.word	0x40011000
 8003a7c:	40011400 	.word	0x40011400
 8003a80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a96:	4642      	mov	r2, r8
 8003a98:	464b      	mov	r3, r9
 8003a9a:	1891      	adds	r1, r2, r2
 8003a9c:	6239      	str	r1, [r7, #32]
 8003a9e:	415b      	adcs	r3, r3
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003aa6:	4641      	mov	r1, r8
 8003aa8:	1854      	adds	r4, r2, r1
 8003aaa:	4649      	mov	r1, r9
 8003aac:	eb43 0501 	adc.w	r5, r3, r1
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	00eb      	lsls	r3, r5, #3
 8003aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003abe:	00e2      	lsls	r2, r4, #3
 8003ac0:	4614      	mov	r4, r2
 8003ac2:	461d      	mov	r5, r3
 8003ac4:	4643      	mov	r3, r8
 8003ac6:	18e3      	adds	r3, r4, r3
 8003ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003acc:	464b      	mov	r3, r9
 8003ace:	eb45 0303 	adc.w	r3, r5, r3
 8003ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ae2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003af2:	4629      	mov	r1, r5
 8003af4:	008b      	lsls	r3, r1, #2
 8003af6:	4621      	mov	r1, r4
 8003af8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003afc:	4621      	mov	r1, r4
 8003afe:	008a      	lsls	r2, r1, #2
 8003b00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b04:	f7fc fbb4 	bl	8000270 <__aeabi_uldivmod>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4b60      	ldr	r3, [pc, #384]	; (8003c90 <UART_SetConfig+0x4e4>)
 8003b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	011c      	lsls	r4, r3, #4
 8003b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b28:	4642      	mov	r2, r8
 8003b2a:	464b      	mov	r3, r9
 8003b2c:	1891      	adds	r1, r2, r2
 8003b2e:	61b9      	str	r1, [r7, #24]
 8003b30:	415b      	adcs	r3, r3
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b38:	4641      	mov	r1, r8
 8003b3a:	1851      	adds	r1, r2, r1
 8003b3c:	6139      	str	r1, [r7, #16]
 8003b3e:	4649      	mov	r1, r9
 8003b40:	414b      	adcs	r3, r1
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b50:	4659      	mov	r1, fp
 8003b52:	00cb      	lsls	r3, r1, #3
 8003b54:	4651      	mov	r1, sl
 8003b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b5a:	4651      	mov	r1, sl
 8003b5c:	00ca      	lsls	r2, r1, #3
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4619      	mov	r1, r3
 8003b62:	4603      	mov	r3, r0
 8003b64:	4642      	mov	r2, r8
 8003b66:	189b      	adds	r3, r3, r2
 8003b68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b6c:	464b      	mov	r3, r9
 8003b6e:	460a      	mov	r2, r1
 8003b70:	eb42 0303 	adc.w	r3, r2, r3
 8003b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b90:	4649      	mov	r1, r9
 8003b92:	008b      	lsls	r3, r1, #2
 8003b94:	4641      	mov	r1, r8
 8003b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b9a:	4641      	mov	r1, r8
 8003b9c:	008a      	lsls	r2, r1, #2
 8003b9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ba2:	f7fc fb65 	bl	8000270 <__aeabi_uldivmod>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4611      	mov	r1, r2
 8003bac:	4b38      	ldr	r3, [pc, #224]	; (8003c90 <UART_SetConfig+0x4e4>)
 8003bae:	fba3 2301 	umull	r2, r3, r3, r1
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	2264      	movs	r2, #100	; 0x64
 8003bb6:	fb02 f303 	mul.w	r3, r2, r3
 8003bba:	1acb      	subs	r3, r1, r3
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	3332      	adds	r3, #50	; 0x32
 8003bc0:	4a33      	ldr	r2, [pc, #204]	; (8003c90 <UART_SetConfig+0x4e4>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bcc:	441c      	add	r4, r3
 8003bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	673b      	str	r3, [r7, #112]	; 0x70
 8003bd6:	677a      	str	r2, [r7, #116]	; 0x74
 8003bd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bdc:	4642      	mov	r2, r8
 8003bde:	464b      	mov	r3, r9
 8003be0:	1891      	adds	r1, r2, r2
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	415b      	adcs	r3, r3
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bec:	4641      	mov	r1, r8
 8003bee:	1851      	adds	r1, r2, r1
 8003bf0:	6039      	str	r1, [r7, #0]
 8003bf2:	4649      	mov	r1, r9
 8003bf4:	414b      	adcs	r3, r1
 8003bf6:	607b      	str	r3, [r7, #4]
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c04:	4659      	mov	r1, fp
 8003c06:	00cb      	lsls	r3, r1, #3
 8003c08:	4651      	mov	r1, sl
 8003c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c0e:	4651      	mov	r1, sl
 8003c10:	00ca      	lsls	r2, r1, #3
 8003c12:	4610      	mov	r0, r2
 8003c14:	4619      	mov	r1, r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	4642      	mov	r2, r8
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c1e:	464b      	mov	r3, r9
 8003c20:	460a      	mov	r2, r1
 8003c22:	eb42 0303 	adc.w	r3, r2, r3
 8003c26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	663b      	str	r3, [r7, #96]	; 0x60
 8003c32:	667a      	str	r2, [r7, #100]	; 0x64
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c40:	4649      	mov	r1, r9
 8003c42:	008b      	lsls	r3, r1, #2
 8003c44:	4641      	mov	r1, r8
 8003c46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c4a:	4641      	mov	r1, r8
 8003c4c:	008a      	lsls	r2, r1, #2
 8003c4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c52:	f7fc fb0d 	bl	8000270 <__aeabi_uldivmod>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <UART_SetConfig+0x4e4>)
 8003c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	2164      	movs	r1, #100	; 0x64
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	3332      	adds	r3, #50	; 0x32
 8003c6e:	4a08      	ldr	r2, [pc, #32]	; (8003c90 <UART_SetConfig+0x4e4>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	f003 020f 	and.w	r2, r3, #15
 8003c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4422      	add	r2, r4
 8003c82:	609a      	str	r2, [r3, #8]
}
 8003c84:	bf00      	nop
 8003c86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c90:	51eb851f 	.word	0x51eb851f

08003c94 <__NVIC_SetPriority>:
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	6039      	str	r1, [r7, #0]
 8003c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	db0a      	blt.n	8003cbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	490c      	ldr	r1, [pc, #48]	; (8003ce0 <__NVIC_SetPriority+0x4c>)
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	0112      	lsls	r2, r2, #4
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003cbc:	e00a      	b.n	8003cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	4908      	ldr	r1, [pc, #32]	; (8003ce4 <__NVIC_SetPriority+0x50>)
 8003cc4:	79fb      	ldrb	r3, [r7, #7]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	3b04      	subs	r3, #4
 8003ccc:	0112      	lsls	r2, r2, #4
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	761a      	strb	r2, [r3, #24]
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	e000e100 	.word	0xe000e100
 8003ce4:	e000ed00 	.word	0xe000ed00

08003ce8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003cec:	2100      	movs	r1, #0
 8003cee:	f06f 0004 	mvn.w	r0, #4
 8003cf2:	f7ff ffcf 	bl	8003c94 <__NVIC_SetPriority>
#endif
}
 8003cf6:	bf00      	nop
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d02:	f3ef 8305 	mrs	r3, IPSR
 8003d06:	603b      	str	r3, [r7, #0]
  return(result);
 8003d08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003d0e:	f06f 0305 	mvn.w	r3, #5
 8003d12:	607b      	str	r3, [r7, #4]
 8003d14:	e00c      	b.n	8003d30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d16:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <osKernelInitialize+0x44>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003d1e:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <osKernelInitialize+0x44>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	607b      	str	r3, [r7, #4]
 8003d28:	e002      	b.n	8003d30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d30:	687b      	ldr	r3, [r7, #4]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000608 	.word	0x20000608

08003d44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d4a:	f3ef 8305 	mrs	r3, IPSR
 8003d4e:	603b      	str	r3, [r7, #0]
  return(result);
 8003d50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003d56:	f06f 0305 	mvn.w	r3, #5
 8003d5a:	607b      	str	r3, [r7, #4]
 8003d5c:	e010      	b.n	8003d80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <osKernelStart+0x48>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d109      	bne.n	8003d7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003d66:	f7ff ffbf 	bl	8003ce8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <osKernelStart+0x48>)
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003d70:	f001 f866 	bl	8004e40 <vTaskStartScheduler>
      stat = osOK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	607b      	str	r3, [r7, #4]
 8003d78:	e002      	b.n	8003d80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d80:	687b      	ldr	r3, [r7, #4]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000608 	.word	0x20000608

08003d90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08e      	sub	sp, #56	; 0x38
 8003d94:	af04      	add	r7, sp, #16
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003da0:	f3ef 8305 	mrs	r3, IPSR
 8003da4:	617b      	str	r3, [r7, #20]
  return(result);
 8003da6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d17e      	bne.n	8003eaa <osThreadNew+0x11a>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d07b      	beq.n	8003eaa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003db6:	2318      	movs	r3, #24
 8003db8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d045      	beq.n	8003e56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <osThreadNew+0x48>
        name = attr->name;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <osThreadNew+0x6e>
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	2b38      	cmp	r3, #56	; 0x38
 8003df0:	d805      	bhi.n	8003dfe <osThreadNew+0x6e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <osThreadNew+0x72>
        return (NULL);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e054      	b.n	8003eac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	089b      	lsrs	r3, r3, #2
 8003e10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00e      	beq.n	8003e38 <osThreadNew+0xa8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b5b      	cmp	r3, #91	; 0x5b
 8003e20:	d90a      	bls.n	8003e38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d006      	beq.n	8003e38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <osThreadNew+0xa8>
        mem = 1;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	e010      	b.n	8003e5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10c      	bne.n	8003e5a <osThreadNew+0xca>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d108      	bne.n	8003e5a <osThreadNew+0xca>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <osThreadNew+0xca>
          mem = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61bb      	str	r3, [r7, #24]
 8003e54:	e001      	b.n	8003e5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d110      	bne.n	8003e82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e68:	9202      	str	r2, [sp, #8]
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6a3a      	ldr	r2, [r7, #32]
 8003e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 fe0c 	bl	8004a94 <xTaskCreateStatic>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	e013      	b.n	8003eaa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d110      	bne.n	8003eaa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	f107 0310 	add.w	r3, r7, #16
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 fe57 	bl	8004b4e <xTaskCreate>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d001      	beq.n	8003eaa <osThreadNew+0x11a>
            hTask = NULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003eaa:	693b      	ldr	r3, [r7, #16]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3728      	adds	r7, #40	; 0x28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ebc:	f3ef 8305 	mrs	r3, IPSR
 8003ec0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <osDelay+0x1c>
    stat = osErrorISR;
 8003ec8:	f06f 0305 	mvn.w	r3, #5
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	e007      	b.n	8003ee0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 ff7c 	bl	8004dd8 <vTaskDelay>
    }
  }

  return (stat);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a07      	ldr	r2, [pc, #28]	; (8003f18 <vApplicationGetIdleTaskMemory+0x2c>)
 8003efc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4a06      	ldr	r2, [pc, #24]	; (8003f1c <vApplicationGetIdleTaskMemory+0x30>)
 8003f02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2280      	movs	r2, #128	; 0x80
 8003f08:	601a      	str	r2, [r3, #0]
}
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	2000060c 	.word	0x2000060c
 8003f1c:	20000668 	.word	0x20000668

08003f20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a07      	ldr	r2, [pc, #28]	; (8003f4c <vApplicationGetTimerTaskMemory+0x2c>)
 8003f30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4a06      	ldr	r2, [pc, #24]	; (8003f50 <vApplicationGetTimerTaskMemory+0x30>)
 8003f36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f3e:	601a      	str	r2, [r3, #0]
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	20000868 	.word	0x20000868
 8003f50:	200008c4 	.word	0x200008c4

08003f54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f103 0208 	add.w	r2, r3, #8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f103 0208 	add.w	r2, r3, #8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f103 0208 	add.w	r2, r3, #8
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b085      	sub	sp, #20
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	601a      	str	r2, [r3, #0]
}
 8003fea:	bf00      	nop
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d103      	bne.n	8004016 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	e00c      	b.n	8004030 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3308      	adds	r3, #8
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e002      	b.n	8004024 <vListInsert+0x2e>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	429a      	cmp	r2, r3
 800402e:	d2f6      	bcs.n	800401e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	601a      	str	r2, [r3, #0]
}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6892      	ldr	r2, [r2, #8]
 800407e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6852      	ldr	r2, [r2, #4]
 8004088:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	429a      	cmp	r2, r3
 8004092:	d103      	bne.n	800409c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	1e5a      	subs	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80040e6:	f002 f84d 	bl	8006184 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	68f9      	ldr	r1, [r7, #12]
 80040f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040f6:	fb01 f303 	mul.w	r3, r1, r3
 80040fa:	441a      	add	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	3b01      	subs	r3, #1
 8004118:	68f9      	ldr	r1, [r7, #12]
 800411a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	441a      	add	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	22ff      	movs	r2, #255	; 0xff
 800412a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	22ff      	movs	r2, #255	; 0xff
 8004132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d114      	bne.n	8004166 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01a      	beq.n	800417a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3310      	adds	r3, #16
 8004148:	4618      	mov	r0, r3
 800414a:	f001 f903 	bl	8005354 <xTaskRemoveFromEventList>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d012      	beq.n	800417a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <xQueueGenericReset+0xcc>)
 8004156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	e009      	b.n	800417a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	3310      	adds	r3, #16
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fef2 	bl	8003f54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3324      	adds	r3, #36	; 0x24
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff feed 	bl	8003f54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800417a:	f002 f833 	bl	80061e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800417e:	2301      	movs	r3, #1
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	e000ed04 	.word	0xe000ed04

0800418c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08e      	sub	sp, #56	; 0x38
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041b2:	bf00      	nop
 80041b4:	e7fe      	b.n	80041b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041ce:	bf00      	nop
 80041d0:	e7fe      	b.n	80041d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <xQueueGenericCreateStatic+0x52>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <xQueueGenericCreateStatic+0x56>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <xQueueGenericCreateStatic+0x58>
 80041e2:	2300      	movs	r3, #0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	623b      	str	r3, [r7, #32]
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d102      	bne.n	800420a <xQueueGenericCreateStatic+0x7e>
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <xQueueGenericCreateStatic+0x82>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <xQueueGenericCreateStatic+0x84>
 800420e:	2300      	movs	r3, #0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	61fb      	str	r3, [r7, #28]
}
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800422a:	2350      	movs	r3, #80	; 0x50
 800422c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b50      	cmp	r3, #80	; 0x50
 8004232:	d00a      	beq.n	800424a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	61bb      	str	r3, [r7, #24]
}
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800424a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00d      	beq.n	8004272 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800425e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	4613      	mov	r3, r2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f805 	bl	800427c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004274:	4618      	mov	r0, r3
 8004276:	3730      	adds	r7, #48	; 0x30
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d103      	bne.n	8004298 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	e002      	b.n	800429e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042aa:	2101      	movs	r1, #1
 80042ac:	69b8      	ldr	r0, [r7, #24]
 80042ae:	f7ff ff05 	bl	80040bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	78fa      	ldrb	r2, [r7, #3]
 80042b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08e      	sub	sp, #56	; 0x38
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042d2:	2300      	movs	r3, #0
 80042d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <xQueueGenericSend+0x32>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d103      	bne.n	8004304 <xQueueGenericSend+0x40>
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <xQueueGenericSend+0x44>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <xQueueGenericSend+0x46>
 8004308:	2300      	movs	r3, #0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <xQueueGenericSend+0x60>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004320:	bf00      	nop
 8004322:	e7fe      	b.n	8004322 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d103      	bne.n	8004332 <xQueueGenericSend+0x6e>
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <xQueueGenericSend+0x72>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <xQueueGenericSend+0x74>
 8004336:	2300      	movs	r3, #0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <xQueueGenericSend+0x8e>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	623b      	str	r3, [r7, #32]
}
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004352:	f001 f9bd 	bl	80056d0 <xTaskGetSchedulerState>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <xQueueGenericSend+0x9e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <xQueueGenericSend+0xa2>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <xQueueGenericSend+0xa4>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <xQueueGenericSend+0xbe>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	61fb      	str	r3, [r7, #28]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004382:	f001 feff 	bl	8006184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	429a      	cmp	r2, r3
 8004390:	d302      	bcc.n	8004398 <xQueueGenericSend+0xd4>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d129      	bne.n	80043ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800439e:	f000 fa0b 	bl	80047b8 <prvCopyDataToQueue>
 80043a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d010      	beq.n	80043ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	3324      	adds	r3, #36	; 0x24
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 ffcf 	bl	8005354 <xTaskRemoveFromEventList>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d013      	beq.n	80043e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043bc:	4b3f      	ldr	r3, [pc, #252]	; (80044bc <xQueueGenericSend+0x1f8>)
 80043be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	e00a      	b.n	80043e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043d4:	4b39      	ldr	r3, [pc, #228]	; (80044bc <xQueueGenericSend+0x1f8>)
 80043d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80043e4:	f001 fefe 	bl	80061e4 <vPortExitCritical>
				return pdPASS;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e063      	b.n	80044b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043f2:	f001 fef7 	bl	80061e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e05c      	b.n	80044b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004400:	f107 0314 	add.w	r3, r7, #20
 8004404:	4618      	mov	r0, r3
 8004406:	f001 f809 	bl	800541c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800440a:	2301      	movs	r3, #1
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800440e:	f001 fee9 	bl	80061e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004412:	f000 fd7b 	bl	8004f0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004416:	f001 feb5 	bl	8006184 <vPortEnterCritical>
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004420:	b25b      	sxtb	r3, r3
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004426:	d103      	bne.n	8004430 <xQueueGenericSend+0x16c>
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004436:	b25b      	sxtb	r3, r3
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443c:	d103      	bne.n	8004446 <xQueueGenericSend+0x182>
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004446:	f001 fecd 	bl	80061e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800444a:	1d3a      	adds	r2, r7, #4
 800444c:	f107 0314 	add.w	r3, r7, #20
 8004450:	4611      	mov	r1, r2
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fff8 	bl	8005448 <xTaskCheckForTimeOut>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d124      	bne.n	80044a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800445e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004460:	f000 faa2 	bl	80049a8 <prvIsQueueFull>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d018      	beq.n	800449c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	3310      	adds	r3, #16
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f000 ff1e 	bl	80052b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800447a:	f000 fa2d 	bl	80048d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800447e:	f000 fd53 	bl	8004f28 <xTaskResumeAll>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	f47f af7c 	bne.w	8004382 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <xQueueGenericSend+0x1f8>)
 800448c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	e772      	b.n	8004382 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800449c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800449e:	f000 fa1b 	bl	80048d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044a2:	f000 fd41 	bl	8004f28 <xTaskResumeAll>
 80044a6:	e76c      	b.n	8004382 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044aa:	f000 fa15 	bl	80048d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044ae:	f000 fd3b 	bl	8004f28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3738      	adds	r7, #56	; 0x38
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	e000ed04 	.word	0xe000ed04

080044c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b090      	sub	sp, #64	; 0x40
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044ea:	bf00      	nop
 80044ec:	e7fe      	b.n	80044ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d103      	bne.n	80044fc <xQueueGenericSendFromISR+0x3c>
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <xQueueGenericSendFromISR+0x40>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <xQueueGenericSendFromISR+0x42>
 8004500:	2300      	movs	r3, #0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d103      	bne.n	800452a <xQueueGenericSendFromISR+0x6a>
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <xQueueGenericSendFromISR+0x6e>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <xQueueGenericSendFromISR+0x70>
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	623b      	str	r3, [r7, #32]
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800454a:	f001 fefd 	bl	8006348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800454e:	f3ef 8211 	mrs	r2, BASEPRI
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	61fa      	str	r2, [r7, #28]
 8004564:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004566:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004568:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800456a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	429a      	cmp	r2, r3
 8004574:	d302      	bcc.n	800457c <xQueueGenericSendFromISR+0xbc>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d12f      	bne.n	80045dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800457c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004592:	f000 f911 	bl	80047b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004596:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800459a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459e:	d112      	bne.n	80045c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d016      	beq.n	80045d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	3324      	adds	r3, #36	; 0x24
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fed1 	bl	8005354 <xTaskRemoveFromEventList>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00e      	beq.n	80045d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	e007      	b.n	80045d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045ca:	3301      	adds	r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	b25a      	sxtb	r2, r3
 80045d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80045d6:	2301      	movs	r3, #1
 80045d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80045da:	e001      	b.n	80045e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80045ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3740      	adds	r7, #64	; 0x40
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08c      	sub	sp, #48	; 0x30
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004604:	2300      	movs	r3, #0
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <xQueueReceive+0x30>
	__asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	623b      	str	r3, [r7, #32]
}
 8004624:	bf00      	nop
 8004626:	e7fe      	b.n	8004626 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d103      	bne.n	8004636 <xQueueReceive+0x3e>
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <xQueueReceive+0x42>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <xQueueReceive+0x44>
 800463a:	2300      	movs	r3, #0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <xQueueReceive+0x5e>
	__asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	61fb      	str	r3, [r7, #28]
}
 8004652:	bf00      	nop
 8004654:	e7fe      	b.n	8004654 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004656:	f001 f83b 	bl	80056d0 <xTaskGetSchedulerState>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d102      	bne.n	8004666 <xQueueReceive+0x6e>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <xQueueReceive+0x72>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <xQueueReceive+0x74>
 800466a:	2300      	movs	r3, #0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <xQueueReceive+0x8e>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	61bb      	str	r3, [r7, #24]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004686:	f001 fd7d 	bl	8006184 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	2b00      	cmp	r3, #0
 8004694:	d01f      	beq.n	80046d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004696:	68b9      	ldr	r1, [r7, #8]
 8004698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800469a:	f000 f8f7 	bl	800488c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	1e5a      	subs	r2, r3, #1
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00f      	beq.n	80046ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	3310      	adds	r3, #16
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fe4e 	bl	8005354 <xTaskRemoveFromEventList>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d007      	beq.n	80046ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046be:	4b3d      	ldr	r3, [pc, #244]	; (80047b4 <xQueueReceive+0x1bc>)
 80046c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046ce:	f001 fd89 	bl	80061e4 <vPortExitCritical>
				return pdPASS;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e069      	b.n	80047aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046dc:	f001 fd82 	bl	80061e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e062      	b.n	80047aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046ea:	f107 0310 	add.w	r3, r7, #16
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fe94 	bl	800541c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046f4:	2301      	movs	r3, #1
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046f8:	f001 fd74 	bl	80061e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046fc:	f000 fc06 	bl	8004f0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004700:	f001 fd40 	bl	8006184 <vPortEnterCritical>
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800470a:	b25b      	sxtb	r3, r3
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d103      	bne.n	800471a <xQueueReceive+0x122>
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004720:	b25b      	sxtb	r3, r3
 8004722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004726:	d103      	bne.n	8004730 <xQueueReceive+0x138>
 8004728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004730:	f001 fd58 	bl	80061e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004734:	1d3a      	adds	r2, r7, #4
 8004736:	f107 0310 	add.w	r3, r7, #16
 800473a:	4611      	mov	r1, r2
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fe83 	bl	8005448 <xTaskCheckForTimeOut>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d123      	bne.n	8004790 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800474a:	f000 f917 	bl	800497c <prvIsQueueEmpty>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d017      	beq.n	8004784 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	3324      	adds	r3, #36	; 0x24
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	4611      	mov	r1, r2
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fda9 	bl	80052b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004764:	f000 f8b8 	bl	80048d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004768:	f000 fbde 	bl	8004f28 <xTaskResumeAll>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d189      	bne.n	8004686 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004772:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <xQueueReceive+0x1bc>)
 8004774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	e780      	b.n	8004686 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004786:	f000 f8a7 	bl	80048d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800478a:	f000 fbcd 	bl	8004f28 <xTaskResumeAll>
 800478e:	e77a      	b.n	8004686 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004792:	f000 f8a1 	bl	80048d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004796:	f000 fbc7 	bl	8004f28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800479a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800479c:	f000 f8ee 	bl	800497c <prvIsQueueEmpty>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f43f af6f 	beq.w	8004686 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3730      	adds	r7, #48	; 0x30
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	e000ed04 	.word	0xe000ed04

080047b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10d      	bne.n	80047f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d14d      	bne.n	800487a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 ff92 	bl	800570c <xTaskPriorityDisinherit>
 80047e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	e043      	b.n	800487a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d119      	bne.n	800482c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6858      	ldr	r0, [r3, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	461a      	mov	r2, r3
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	f002 f81e 	bl	8006844 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	441a      	add	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	429a      	cmp	r2, r3
 8004820:	d32b      	bcc.n	800487a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	e026      	b.n	800487a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	68d8      	ldr	r0, [r3, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	461a      	mov	r2, r3
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	f002 f804 	bl	8006844 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	425b      	negs	r3, r3
 8004846:	441a      	add	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d207      	bcs.n	8004868 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	425b      	negs	r3, r3
 8004862:	441a      	add	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d105      	bne.n	800487a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	3b01      	subs	r3, #1
 8004878:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004882:	697b      	ldr	r3, [r7, #20]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d018      	beq.n	80048d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	441a      	add	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d303      	bcc.n	80048c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68d9      	ldr	r1, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	461a      	mov	r2, r3
 80048ca:	6838      	ldr	r0, [r7, #0]
 80048cc:	f001 ffba 	bl	8006844 <memcpy>
	}
}
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048e0:	f001 fc50 	bl	8006184 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048ec:	e011      	b.n	8004912 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d012      	beq.n	800491c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3324      	adds	r3, #36	; 0x24
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fd2a 	bl	8005354 <xTaskRemoveFromEventList>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004906:	f000 fe01 	bl	800550c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	3b01      	subs	r3, #1
 800490e:	b2db      	uxtb	r3, r3
 8004910:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004916:	2b00      	cmp	r3, #0
 8004918:	dce9      	bgt.n	80048ee <prvUnlockQueue+0x16>
 800491a:	e000      	b.n	800491e <prvUnlockQueue+0x46>
					break;
 800491c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	22ff      	movs	r2, #255	; 0xff
 8004922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004926:	f001 fc5d 	bl	80061e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800492a:	f001 fc2b 	bl	8006184 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004934:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004936:	e011      	b.n	800495c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d012      	beq.n	8004966 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3310      	adds	r3, #16
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fd05 	bl	8005354 <xTaskRemoveFromEventList>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004950:	f000 fddc 	bl	800550c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004954:	7bbb      	ldrb	r3, [r7, #14]
 8004956:	3b01      	subs	r3, #1
 8004958:	b2db      	uxtb	r3, r3
 800495a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800495c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004960:	2b00      	cmp	r3, #0
 8004962:	dce9      	bgt.n	8004938 <prvUnlockQueue+0x60>
 8004964:	e000      	b.n	8004968 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004966:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	22ff      	movs	r2, #255	; 0xff
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004970:	f001 fc38 	bl	80061e4 <vPortExitCritical>
}
 8004974:	bf00      	nop
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004984:	f001 fbfe 	bl	8006184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	2b00      	cmp	r3, #0
 800498e:	d102      	bne.n	8004996 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004990:	2301      	movs	r3, #1
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e001      	b.n	800499a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800499a:	f001 fc23 	bl	80061e4 <vPortExitCritical>

	return xReturn;
 800499e:	68fb      	ldr	r3, [r7, #12]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049b0:	f001 fbe8 	bl	8006184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049bc:	429a      	cmp	r2, r3
 80049be:	d102      	bne.n	80049c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049c0:	2301      	movs	r3, #1
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	e001      	b.n	80049ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049ca:	f001 fc0b 	bl	80061e4 <vPortExitCritical>

	return xReturn;
 80049ce:	68fb      	ldr	r3, [r7, #12]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	e014      	b.n	8004a12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80049e8:	4a0f      	ldr	r2, [pc, #60]	; (8004a28 <vQueueAddToRegistry+0x50>)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049f4:	490c      	ldr	r1, [pc, #48]	; (8004a28 <vQueueAddToRegistry+0x50>)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80049fe:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <vQueueAddToRegistry+0x50>)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a0a:	e006      	b.n	8004a1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b07      	cmp	r3, #7
 8004a16:	d9e7      	bls.n	80049e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a18:	bf00      	nop
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000cc4 	.word	0x20000cc4

08004a2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a3c:	f001 fba2 	bl	8006184 <vPortEnterCritical>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a46:	b25b      	sxtb	r3, r3
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d103      	bne.n	8004a56 <vQueueWaitForMessageRestricted+0x2a>
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a5c:	b25b      	sxtb	r3, r3
 8004a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a62:	d103      	bne.n	8004a6c <vQueueWaitForMessageRestricted+0x40>
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a6c:	f001 fbba 	bl	80061e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	3324      	adds	r3, #36	; 0x24
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fc3b 	bl	80052fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a86:	6978      	ldr	r0, [r7, #20]
 8004a88:	f7ff ff26 	bl	80048d8 <prvUnlockQueue>
	}
 8004a8c:	bf00      	nop
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08e      	sub	sp, #56	; 0x38
 8004a98:	af04      	add	r7, sp, #16
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <xTaskCreateStatic+0x2a>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	623b      	str	r3, [r7, #32]
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <xTaskCreateStatic+0x46>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	61fb      	str	r3, [r7, #28]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ada:	235c      	movs	r3, #92	; 0x5c
 8004adc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b5c      	cmp	r3, #92	; 0x5c
 8004ae2:	d00a      	beq.n	8004afa <xTaskCreateStatic+0x66>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	61bb      	str	r3, [r7, #24]
}
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004afa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d01e      	beq.n	8004b40 <xTaskCreateStatic+0xac>
 8004b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01b      	beq.n	8004b40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	9303      	str	r3, [sp, #12]
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	9302      	str	r3, [sp, #8]
 8004b22:	f107 0314 	add.w	r3, r7, #20
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f850 	bl	8004bd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b3a:	f000 f8dd 	bl	8004cf8 <prvAddNewTaskToReadyList>
 8004b3e:	e001      	b.n	8004b44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b44:	697b      	ldr	r3, [r7, #20]
	}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3728      	adds	r7, #40	; 0x28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b08c      	sub	sp, #48	; 0x30
 8004b52:	af04      	add	r7, sp, #16
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	603b      	str	r3, [r7, #0]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4618      	mov	r0, r3
 8004b64:	f001 fc30 	bl	80063c8 <pvPortMalloc>
 8004b68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00e      	beq.n	8004b8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b70:	205c      	movs	r0, #92	; 0x5c
 8004b72:	f001 fc29 	bl	80063c8 <pvPortMalloc>
 8004b76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
 8004b84:	e005      	b.n	8004b92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b86:	6978      	ldr	r0, [r7, #20]
 8004b88:	f001 fcea 	bl	8006560 <vPortFree>
 8004b8c:	e001      	b.n	8004b92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d017      	beq.n	8004bc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ba0:	88fa      	ldrh	r2, [r7, #6]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9303      	str	r3, [sp, #12]
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	9302      	str	r3, [sp, #8]
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bac:	9301      	str	r3, [sp, #4]
 8004bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f80e 	bl	8004bd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bbc:	69f8      	ldr	r0, [r7, #28]
 8004bbe:	f000 f89b 	bl	8004cf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	e002      	b.n	8004bce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bce:	69bb      	ldr	r3, [r7, #24]
	}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3720      	adds	r7, #32
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	461a      	mov	r2, r3
 8004bf0:	21a5      	movs	r1, #165	; 0xa5
 8004bf2:	f001 fdf3 	bl	80067dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c00:	3b01      	subs	r3, #1
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f023 0307 	bic.w	r3, r3, #7
 8004c0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	617b      	str	r3, [r7, #20]
}
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d01f      	beq.n	8004c76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c36:	2300      	movs	r3, #0
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	e012      	b.n	8004c62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	4413      	add	r3, r2
 8004c42:	7819      	ldrb	r1, [r3, #0]
 8004c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	3334      	adds	r3, #52	; 0x34
 8004c4c:	460a      	mov	r2, r1
 8004c4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	4413      	add	r3, r2
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d006      	beq.n	8004c6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	2b0f      	cmp	r3, #15
 8004c66:	d9e9      	bls.n	8004c3c <prvInitialiseNewTask+0x64>
 8004c68:	e000      	b.n	8004c6c <prvInitialiseNewTask+0x94>
			{
				break;
 8004c6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c74:	e003      	b.n	8004c7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	2b37      	cmp	r3, #55	; 0x37
 8004c82:	d901      	bls.n	8004c88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c84:	2337      	movs	r3, #55	; 0x37
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	2200      	movs	r2, #0
 8004c98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff f978 	bl	8003f94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	3318      	adds	r3, #24
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff f973 	bl	8003f94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	68f9      	ldr	r1, [r7, #12]
 8004cd6:	69b8      	ldr	r0, [r7, #24]
 8004cd8:	f001 f928 	bl	8005f2c <pxPortInitialiseStack>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cee:	bf00      	nop
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d00:	f001 fa40 	bl	8006184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d04:	4b2d      	ldr	r3, [pc, #180]	; (8004dbc <prvAddNewTaskToReadyList+0xc4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	4a2c      	ldr	r2, [pc, #176]	; (8004dbc <prvAddNewTaskToReadyList+0xc4>)
 8004d0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d0e:	4b2c      	ldr	r3, [pc, #176]	; (8004dc0 <prvAddNewTaskToReadyList+0xc8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d16:	4a2a      	ldr	r2, [pc, #168]	; (8004dc0 <prvAddNewTaskToReadyList+0xc8>)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d1c:	4b27      	ldr	r3, [pc, #156]	; (8004dbc <prvAddNewTaskToReadyList+0xc4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d110      	bne.n	8004d46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d24:	f000 fc16 	bl	8005554 <prvInitialiseTaskLists>
 8004d28:	e00d      	b.n	8004d46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d2a:	4b26      	ldr	r3, [pc, #152]	; (8004dc4 <prvAddNewTaskToReadyList+0xcc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d32:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <prvAddNewTaskToReadyList+0xc8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d802      	bhi.n	8004d46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d40:	4a1f      	ldr	r2, [pc, #124]	; (8004dc0 <prvAddNewTaskToReadyList+0xc8>)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d46:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <prvAddNewTaskToReadyList+0xd0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	4a1e      	ldr	r2, [pc, #120]	; (8004dc8 <prvAddNewTaskToReadyList+0xd0>)
 8004d4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d50:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <prvAddNewTaskToReadyList+0xd0>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5c:	4b1b      	ldr	r3, [pc, #108]	; (8004dcc <prvAddNewTaskToReadyList+0xd4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d903      	bls.n	8004d6c <prvAddNewTaskToReadyList+0x74>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	4a18      	ldr	r2, [pc, #96]	; (8004dcc <prvAddNewTaskToReadyList+0xd4>)
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <prvAddNewTaskToReadyList+0xd8>)
 8004d7a:	441a      	add	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f7ff f913 	bl	8003fae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d88:	f001 fa2c 	bl	80061e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d8c:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <prvAddNewTaskToReadyList+0xcc>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00e      	beq.n	8004db2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d94:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <prvAddNewTaskToReadyList+0xc8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d207      	bcs.n	8004db2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <prvAddNewTaskToReadyList+0xdc>)
 8004da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004db2:	bf00      	nop
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	200011d8 	.word	0x200011d8
 8004dc0:	20000d04 	.word	0x20000d04
 8004dc4:	200011e4 	.word	0x200011e4
 8004dc8:	200011f4 	.word	0x200011f4
 8004dcc:	200011e0 	.word	0x200011e0
 8004dd0:	20000d08 	.word	0x20000d08
 8004dd4:	e000ed04 	.word	0xe000ed04

08004dd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d017      	beq.n	8004e1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004dea:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <vTaskDelay+0x60>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <vTaskDelay+0x30>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	60bb      	str	r3, [r7, #8]
}
 8004e04:	bf00      	nop
 8004e06:	e7fe      	b.n	8004e06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e08:	f000 f880 	bl	8004f0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fcea 	bl	80057e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e14:	f000 f888 	bl	8004f28 <xTaskResumeAll>
 8004e18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d107      	bne.n	8004e30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <vTaskDelay+0x64>)
 8004e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e30:	bf00      	nop
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20001200 	.word	0x20001200
 8004e3c:	e000ed04 	.word	0xe000ed04

08004e40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08a      	sub	sp, #40	; 0x28
 8004e44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e4e:	463a      	mov	r2, r7
 8004e50:	1d39      	adds	r1, r7, #4
 8004e52:	f107 0308 	add.w	r3, r7, #8
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff f848 	bl	8003eec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e5c:	6839      	ldr	r1, [r7, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	9202      	str	r2, [sp, #8]
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	2300      	movs	r3, #0
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	460a      	mov	r2, r1
 8004e6e:	4921      	ldr	r1, [pc, #132]	; (8004ef4 <vTaskStartScheduler+0xb4>)
 8004e70:	4821      	ldr	r0, [pc, #132]	; (8004ef8 <vTaskStartScheduler+0xb8>)
 8004e72:	f7ff fe0f 	bl	8004a94 <xTaskCreateStatic>
 8004e76:	4603      	mov	r3, r0
 8004e78:	4a20      	ldr	r2, [pc, #128]	; (8004efc <vTaskStartScheduler+0xbc>)
 8004e7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e7c:	4b1f      	ldr	r3, [pc, #124]	; (8004efc <vTaskStartScheduler+0xbc>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e84:	2301      	movs	r3, #1
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	e001      	b.n	8004e8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d102      	bne.n	8004e9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e94:	f000 fcfc 	bl	8005890 <xTimerCreateTimerTask>
 8004e98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d116      	bne.n	8004ece <vTaskStartScheduler+0x8e>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	613b      	str	r3, [r7, #16]
}
 8004eb2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004eb4:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <vTaskStartScheduler+0xc0>)
 8004eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ebc:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <vTaskStartScheduler+0xc4>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ec2:	4b11      	ldr	r3, [pc, #68]	; (8004f08 <vTaskStartScheduler+0xc8>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ec8:	f001 f8ba 	bl	8006040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ecc:	e00e      	b.n	8004eec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d10a      	bne.n	8004eec <vTaskStartScheduler+0xac>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	60fb      	str	r3, [r7, #12]
}
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <vTaskStartScheduler+0xaa>
}
 8004eec:	bf00      	nop
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	0800715c 	.word	0x0800715c
 8004ef8:	08005525 	.word	0x08005525
 8004efc:	200011fc 	.word	0x200011fc
 8004f00:	200011f8 	.word	0x200011f8
 8004f04:	200011e4 	.word	0x200011e4
 8004f08:	200011dc 	.word	0x200011dc

08004f0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <vTaskSuspendAll+0x18>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3301      	adds	r3, #1
 8004f16:	4a03      	ldr	r2, [pc, #12]	; (8004f24 <vTaskSuspendAll+0x18>)
 8004f18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f1a:	bf00      	nop
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	20001200 	.word	0x20001200

08004f28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f36:	4b42      	ldr	r3, [pc, #264]	; (8005040 <xTaskResumeAll+0x118>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	603b      	str	r3, [r7, #0]
}
 8004f50:	bf00      	nop
 8004f52:	e7fe      	b.n	8004f52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f54:	f001 f916 	bl	8006184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f58:	4b39      	ldr	r3, [pc, #228]	; (8005040 <xTaskResumeAll+0x118>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	4a38      	ldr	r2, [pc, #224]	; (8005040 <xTaskResumeAll+0x118>)
 8004f60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f62:	4b37      	ldr	r3, [pc, #220]	; (8005040 <xTaskResumeAll+0x118>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d162      	bne.n	8005030 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f6a:	4b36      	ldr	r3, [pc, #216]	; (8005044 <xTaskResumeAll+0x11c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d05e      	beq.n	8005030 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f72:	e02f      	b.n	8004fd4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f74:	4b34      	ldr	r3, [pc, #208]	; (8005048 <xTaskResumeAll+0x120>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3318      	adds	r3, #24
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff f871 	bl	8004068 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff f86c 	bl	8004068 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f94:	4b2d      	ldr	r3, [pc, #180]	; (800504c <xTaskResumeAll+0x124>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d903      	bls.n	8004fa4 <xTaskResumeAll+0x7c>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	4a2a      	ldr	r2, [pc, #168]	; (800504c <xTaskResumeAll+0x124>)
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4a27      	ldr	r2, [pc, #156]	; (8005050 <xTaskResumeAll+0x128>)
 8004fb2:	441a      	add	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f7fe fff7 	bl	8003fae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc4:	4b23      	ldr	r3, [pc, #140]	; (8005054 <xTaskResumeAll+0x12c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d302      	bcc.n	8004fd4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004fce:	4b22      	ldr	r3, [pc, #136]	; (8005058 <xTaskResumeAll+0x130>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fd4:	4b1c      	ldr	r3, [pc, #112]	; (8005048 <xTaskResumeAll+0x120>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1cb      	bne.n	8004f74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004fe2:	f000 fb55 	bl	8005690 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004fe6:	4b1d      	ldr	r3, [pc, #116]	; (800505c <xTaskResumeAll+0x134>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d010      	beq.n	8005014 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ff2:	f000 f847 	bl	8005084 <xTaskIncrementTick>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004ffc:	4b16      	ldr	r3, [pc, #88]	; (8005058 <xTaskResumeAll+0x130>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3b01      	subs	r3, #1
 8005006:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f1      	bne.n	8004ff2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800500e:	4b13      	ldr	r3, [pc, #76]	; (800505c <xTaskResumeAll+0x134>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005014:	4b10      	ldr	r3, [pc, #64]	; (8005058 <xTaskResumeAll+0x130>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d009      	beq.n	8005030 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800501c:	2301      	movs	r3, #1
 800501e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005020:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <xTaskResumeAll+0x138>)
 8005022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005030:	f001 f8d8 	bl	80061e4 <vPortExitCritical>

	return xAlreadyYielded;
 8005034:	68bb      	ldr	r3, [r7, #8]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20001200 	.word	0x20001200
 8005044:	200011d8 	.word	0x200011d8
 8005048:	20001198 	.word	0x20001198
 800504c:	200011e0 	.word	0x200011e0
 8005050:	20000d08 	.word	0x20000d08
 8005054:	20000d04 	.word	0x20000d04
 8005058:	200011ec 	.word	0x200011ec
 800505c:	200011e8 	.word	0x200011e8
 8005060:	e000ed04 	.word	0xe000ed04

08005064 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800506a:	4b05      	ldr	r3, [pc, #20]	; (8005080 <xTaskGetTickCount+0x1c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005070:	687b      	ldr	r3, [r7, #4]
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	200011dc 	.word	0x200011dc

08005084 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800508e:	4b4f      	ldr	r3, [pc, #316]	; (80051cc <xTaskIncrementTick+0x148>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	f040 808f 	bne.w	80051b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005098:	4b4d      	ldr	r3, [pc, #308]	; (80051d0 <xTaskIncrementTick+0x14c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3301      	adds	r3, #1
 800509e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050a0:	4a4b      	ldr	r2, [pc, #300]	; (80051d0 <xTaskIncrementTick+0x14c>)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d120      	bne.n	80050ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80050ac:	4b49      	ldr	r3, [pc, #292]	; (80051d4 <xTaskIncrementTick+0x150>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <xTaskIncrementTick+0x48>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	603b      	str	r3, [r7, #0]
}
 80050c8:	bf00      	nop
 80050ca:	e7fe      	b.n	80050ca <xTaskIncrementTick+0x46>
 80050cc:	4b41      	ldr	r3, [pc, #260]	; (80051d4 <xTaskIncrementTick+0x150>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	4b41      	ldr	r3, [pc, #260]	; (80051d8 <xTaskIncrementTick+0x154>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a3f      	ldr	r2, [pc, #252]	; (80051d4 <xTaskIncrementTick+0x150>)
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	4a3f      	ldr	r2, [pc, #252]	; (80051d8 <xTaskIncrementTick+0x154>)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	4b3e      	ldr	r3, [pc, #248]	; (80051dc <xTaskIncrementTick+0x158>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	4a3d      	ldr	r2, [pc, #244]	; (80051dc <xTaskIncrementTick+0x158>)
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	f000 fad1 	bl	8005690 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050ee:	4b3c      	ldr	r3, [pc, #240]	; (80051e0 <xTaskIncrementTick+0x15c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d349      	bcc.n	800518c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050f8:	4b36      	ldr	r3, [pc, #216]	; (80051d4 <xTaskIncrementTick+0x150>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005102:	4b37      	ldr	r3, [pc, #220]	; (80051e0 <xTaskIncrementTick+0x15c>)
 8005104:	f04f 32ff 	mov.w	r2, #4294967295
 8005108:	601a      	str	r2, [r3, #0]
					break;
 800510a:	e03f      	b.n	800518c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800510c:	4b31      	ldr	r3, [pc, #196]	; (80051d4 <xTaskIncrementTick+0x150>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	429a      	cmp	r2, r3
 8005122:	d203      	bcs.n	800512c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005124:	4a2e      	ldr	r2, [pc, #184]	; (80051e0 <xTaskIncrementTick+0x15c>)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800512a:	e02f      	b.n	800518c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	3304      	adds	r3, #4
 8005130:	4618      	mov	r0, r3
 8005132:	f7fe ff99 	bl	8004068 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	3318      	adds	r3, #24
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe ff90 	bl	8004068 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514c:	4b25      	ldr	r3, [pc, #148]	; (80051e4 <xTaskIncrementTick+0x160>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d903      	bls.n	800515c <xTaskIncrementTick+0xd8>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	4a22      	ldr	r2, [pc, #136]	; (80051e4 <xTaskIncrementTick+0x160>)
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4a1f      	ldr	r2, [pc, #124]	; (80051e8 <xTaskIncrementTick+0x164>)
 800516a:	441a      	add	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	3304      	adds	r3, #4
 8005170:	4619      	mov	r1, r3
 8005172:	4610      	mov	r0, r2
 8005174:	f7fe ff1b 	bl	8003fae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517c:	4b1b      	ldr	r3, [pc, #108]	; (80051ec <xTaskIncrementTick+0x168>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	429a      	cmp	r2, r3
 8005184:	d3b8      	bcc.n	80050f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005186:	2301      	movs	r3, #1
 8005188:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800518a:	e7b5      	b.n	80050f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800518c:	4b17      	ldr	r3, [pc, #92]	; (80051ec <xTaskIncrementTick+0x168>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005192:	4915      	ldr	r1, [pc, #84]	; (80051e8 <xTaskIncrementTick+0x164>)
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d901      	bls.n	80051a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80051a8:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <xTaskIncrementTick+0x16c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80051b0:	2301      	movs	r3, #1
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	e004      	b.n	80051c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80051b6:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <xTaskIncrementTick+0x170>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3301      	adds	r3, #1
 80051bc:	4a0d      	ldr	r2, [pc, #52]	; (80051f4 <xTaskIncrementTick+0x170>)
 80051be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80051c0:	697b      	ldr	r3, [r7, #20]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20001200 	.word	0x20001200
 80051d0:	200011dc 	.word	0x200011dc
 80051d4:	20001190 	.word	0x20001190
 80051d8:	20001194 	.word	0x20001194
 80051dc:	200011f0 	.word	0x200011f0
 80051e0:	200011f8 	.word	0x200011f8
 80051e4:	200011e0 	.word	0x200011e0
 80051e8:	20000d08 	.word	0x20000d08
 80051ec:	20000d04 	.word	0x20000d04
 80051f0:	200011ec 	.word	0x200011ec
 80051f4:	200011e8 	.word	0x200011e8

080051f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051fe:	4b28      	ldr	r3, [pc, #160]	; (80052a0 <vTaskSwitchContext+0xa8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005206:	4b27      	ldr	r3, [pc, #156]	; (80052a4 <vTaskSwitchContext+0xac>)
 8005208:	2201      	movs	r2, #1
 800520a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800520c:	e041      	b.n	8005292 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800520e:	4b25      	ldr	r3, [pc, #148]	; (80052a4 <vTaskSwitchContext+0xac>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005214:	4b24      	ldr	r3, [pc, #144]	; (80052a8 <vTaskSwitchContext+0xb0>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	e010      	b.n	800523e <vTaskSwitchContext+0x46>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <vTaskSwitchContext+0x40>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	607b      	str	r3, [r7, #4]
}
 8005234:	bf00      	nop
 8005236:	e7fe      	b.n	8005236 <vTaskSwitchContext+0x3e>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3b01      	subs	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	491b      	ldr	r1, [pc, #108]	; (80052ac <vTaskSwitchContext+0xb4>)
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	440b      	add	r3, r1
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0e4      	beq.n	800521c <vTaskSwitchContext+0x24>
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4a13      	ldr	r2, [pc, #76]	; (80052ac <vTaskSwitchContext+0xb4>)
 800525e:	4413      	add	r3, r2
 8005260:	60bb      	str	r3, [r7, #8]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	605a      	str	r2, [r3, #4]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	3308      	adds	r3, #8
 8005274:	429a      	cmp	r2, r3
 8005276:	d104      	bne.n	8005282 <vTaskSwitchContext+0x8a>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	605a      	str	r2, [r3, #4]
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <vTaskSwitchContext+0xb8>)
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	4a06      	ldr	r2, [pc, #24]	; (80052a8 <vTaskSwitchContext+0xb0>)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6013      	str	r3, [r2, #0]
}
 8005292:	bf00      	nop
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	20001200 	.word	0x20001200
 80052a4:	200011ec 	.word	0x200011ec
 80052a8:	200011e0 	.word	0x200011e0
 80052ac:	20000d08 	.word	0x20000d08
 80052b0:	20000d04 	.word	0x20000d04

080052b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	60fb      	str	r3, [r7, #12]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052da:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <vTaskPlaceOnEventList+0x44>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3318      	adds	r3, #24
 80052e0:	4619      	mov	r1, r3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fe fe87 	bl	8003ff6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052e8:	2101      	movs	r1, #1
 80052ea:	6838      	ldr	r0, [r7, #0]
 80052ec:	f000 fa7c 	bl	80057e8 <prvAddCurrentTaskToDelayedList>
}
 80052f0:	bf00      	nop
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	20000d04 	.word	0x20000d04

080052fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	617b      	str	r3, [r7, #20]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005324:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <vTaskPlaceOnEventListRestricted+0x54>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3318      	adds	r3, #24
 800532a:	4619      	mov	r1, r3
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f7fe fe3e 	bl	8003fae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005338:	f04f 33ff 	mov.w	r3, #4294967295
 800533c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	68b8      	ldr	r0, [r7, #8]
 8005342:	f000 fa51 	bl	80057e8 <prvAddCurrentTaskToDelayedList>
	}
 8005346:	bf00      	nop
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000d04 	.word	0x20000d04

08005354 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10a      	bne.n	8005380 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	60fb      	str	r3, [r7, #12]
}
 800537c:	bf00      	nop
 800537e:	e7fe      	b.n	800537e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	3318      	adds	r3, #24
 8005384:	4618      	mov	r0, r3
 8005386:	f7fe fe6f 	bl	8004068 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800538a:	4b1e      	ldr	r3, [pc, #120]	; (8005404 <xTaskRemoveFromEventList+0xb0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d11d      	bne.n	80053ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	3304      	adds	r3, #4
 8005396:	4618      	mov	r0, r3
 8005398:	f7fe fe66 	bl	8004068 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a0:	4b19      	ldr	r3, [pc, #100]	; (8005408 <xTaskRemoveFromEventList+0xb4>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d903      	bls.n	80053b0 <xTaskRemoveFromEventList+0x5c>
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	4a16      	ldr	r2, [pc, #88]	; (8005408 <xTaskRemoveFromEventList+0xb4>)
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b4:	4613      	mov	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4a13      	ldr	r2, [pc, #76]	; (800540c <xTaskRemoveFromEventList+0xb8>)
 80053be:	441a      	add	r2, r3
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	3304      	adds	r3, #4
 80053c4:	4619      	mov	r1, r3
 80053c6:	4610      	mov	r0, r2
 80053c8:	f7fe fdf1 	bl	8003fae <vListInsertEnd>
 80053cc:	e005      	b.n	80053da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	3318      	adds	r3, #24
 80053d2:	4619      	mov	r1, r3
 80053d4:	480e      	ldr	r0, [pc, #56]	; (8005410 <xTaskRemoveFromEventList+0xbc>)
 80053d6:	f7fe fdea 	bl	8003fae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <xTaskRemoveFromEventList+0xc0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d905      	bls.n	80053f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053e8:	2301      	movs	r3, #1
 80053ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053ec:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <xTaskRemoveFromEventList+0xc4>)
 80053ee:	2201      	movs	r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e001      	b.n	80053f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053f8:	697b      	ldr	r3, [r7, #20]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20001200 	.word	0x20001200
 8005408:	200011e0 	.word	0x200011e0
 800540c:	20000d08 	.word	0x20000d08
 8005410:	20001198 	.word	0x20001198
 8005414:	20000d04 	.word	0x20000d04
 8005418:	200011ec 	.word	0x200011ec

0800541c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005424:	4b06      	ldr	r3, [pc, #24]	; (8005440 <vTaskInternalSetTimeOutState+0x24>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800542c:	4b05      	ldr	r3, [pc, #20]	; (8005444 <vTaskInternalSetTimeOutState+0x28>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	605a      	str	r2, [r3, #4]
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	200011f0 	.word	0x200011f0
 8005444:	200011dc 	.word	0x200011dc

08005448 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	613b      	str	r3, [r7, #16]
}
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10a      	bne.n	800548a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	60fb      	str	r3, [r7, #12]
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800548a:	f000 fe7b 	bl	8006184 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800548e:	4b1d      	ldr	r3, [pc, #116]	; (8005504 <xTaskCheckForTimeOut+0xbc>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a6:	d102      	bne.n	80054ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80054a8:	2300      	movs	r3, #0
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	e023      	b.n	80054f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4b15      	ldr	r3, [pc, #84]	; (8005508 <xTaskCheckForTimeOut+0xc0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d007      	beq.n	80054ca <xTaskCheckForTimeOut+0x82>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d302      	bcc.n	80054ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054c4:	2301      	movs	r3, #1
 80054c6:	61fb      	str	r3, [r7, #28]
 80054c8:	e015      	b.n	80054f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d20b      	bcs.n	80054ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	1ad2      	subs	r2, r2, r3
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff ff9b 	bl	800541c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	e004      	b.n	80054f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054f2:	2301      	movs	r3, #1
 80054f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054f6:	f000 fe75 	bl	80061e4 <vPortExitCritical>

	return xReturn;
 80054fa:	69fb      	ldr	r3, [r7, #28]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3720      	adds	r7, #32
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	200011dc 	.word	0x200011dc
 8005508:	200011f0 	.word	0x200011f0

0800550c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005510:	4b03      	ldr	r3, [pc, #12]	; (8005520 <vTaskMissedYield+0x14>)
 8005512:	2201      	movs	r2, #1
 8005514:	601a      	str	r2, [r3, #0]
}
 8005516:	bf00      	nop
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	200011ec 	.word	0x200011ec

08005524 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800552c:	f000 f852 	bl	80055d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005530:	4b06      	ldr	r3, [pc, #24]	; (800554c <prvIdleTask+0x28>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d9f9      	bls.n	800552c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005538:	4b05      	ldr	r3, [pc, #20]	; (8005550 <prvIdleTask+0x2c>)
 800553a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005548:	e7f0      	b.n	800552c <prvIdleTask+0x8>
 800554a:	bf00      	nop
 800554c:	20000d08 	.word	0x20000d08
 8005550:	e000ed04 	.word	0xe000ed04

08005554 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800555a:	2300      	movs	r3, #0
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	e00c      	b.n	800557a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4a12      	ldr	r2, [pc, #72]	; (80055b4 <prvInitialiseTaskLists+0x60>)
 800556c:	4413      	add	r3, r2
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe fcf0 	bl	8003f54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3301      	adds	r3, #1
 8005578:	607b      	str	r3, [r7, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b37      	cmp	r3, #55	; 0x37
 800557e:	d9ef      	bls.n	8005560 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005580:	480d      	ldr	r0, [pc, #52]	; (80055b8 <prvInitialiseTaskLists+0x64>)
 8005582:	f7fe fce7 	bl	8003f54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005586:	480d      	ldr	r0, [pc, #52]	; (80055bc <prvInitialiseTaskLists+0x68>)
 8005588:	f7fe fce4 	bl	8003f54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800558c:	480c      	ldr	r0, [pc, #48]	; (80055c0 <prvInitialiseTaskLists+0x6c>)
 800558e:	f7fe fce1 	bl	8003f54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005592:	480c      	ldr	r0, [pc, #48]	; (80055c4 <prvInitialiseTaskLists+0x70>)
 8005594:	f7fe fcde 	bl	8003f54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005598:	480b      	ldr	r0, [pc, #44]	; (80055c8 <prvInitialiseTaskLists+0x74>)
 800559a:	f7fe fcdb 	bl	8003f54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800559e:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <prvInitialiseTaskLists+0x78>)
 80055a0:	4a05      	ldr	r2, [pc, #20]	; (80055b8 <prvInitialiseTaskLists+0x64>)
 80055a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055a4:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <prvInitialiseTaskLists+0x7c>)
 80055a6:	4a05      	ldr	r2, [pc, #20]	; (80055bc <prvInitialiseTaskLists+0x68>)
 80055a8:	601a      	str	r2, [r3, #0]
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000d08 	.word	0x20000d08
 80055b8:	20001168 	.word	0x20001168
 80055bc:	2000117c 	.word	0x2000117c
 80055c0:	20001198 	.word	0x20001198
 80055c4:	200011ac 	.word	0x200011ac
 80055c8:	200011c4 	.word	0x200011c4
 80055cc:	20001190 	.word	0x20001190
 80055d0:	20001194 	.word	0x20001194

080055d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055da:	e019      	b.n	8005610 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055dc:	f000 fdd2 	bl	8006184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055e0:	4b10      	ldr	r3, [pc, #64]	; (8005624 <prvCheckTasksWaitingTermination+0x50>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3304      	adds	r3, #4
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fe fd3b 	bl	8004068 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055f2:	4b0d      	ldr	r3, [pc, #52]	; (8005628 <prvCheckTasksWaitingTermination+0x54>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	4a0b      	ldr	r2, [pc, #44]	; (8005628 <prvCheckTasksWaitingTermination+0x54>)
 80055fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <prvCheckTasksWaitingTermination+0x58>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3b01      	subs	r3, #1
 8005602:	4a0a      	ldr	r2, [pc, #40]	; (800562c <prvCheckTasksWaitingTermination+0x58>)
 8005604:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005606:	f000 fded 	bl	80061e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f810 	bl	8005630 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005610:	4b06      	ldr	r3, [pc, #24]	; (800562c <prvCheckTasksWaitingTermination+0x58>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e1      	bne.n	80055dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	200011ac 	.word	0x200011ac
 8005628:	200011d8 	.word	0x200011d8
 800562c:	200011c0 	.word	0x200011c0

08005630 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800563e:	2b00      	cmp	r3, #0
 8005640:	d108      	bne.n	8005654 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	4618      	mov	r0, r3
 8005648:	f000 ff8a 	bl	8006560 <vPortFree>
				vPortFree( pxTCB );
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 ff87 	bl	8006560 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005652:	e018      	b.n	8005686 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800565a:	2b01      	cmp	r3, #1
 800565c:	d103      	bne.n	8005666 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 ff7e 	bl	8006560 <vPortFree>
	}
 8005664:	e00f      	b.n	8005686 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800566c:	2b02      	cmp	r3, #2
 800566e:	d00a      	beq.n	8005686 <prvDeleteTCB+0x56>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	60fb      	str	r3, [r7, #12]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <prvDeleteTCB+0x54>
	}
 8005686:	bf00      	nop
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005696:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <prvResetNextTaskUnblockTime+0x38>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d104      	bne.n	80056aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056a0:	4b0a      	ldr	r3, [pc, #40]	; (80056cc <prvResetNextTaskUnblockTime+0x3c>)
 80056a2:	f04f 32ff 	mov.w	r2, #4294967295
 80056a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056a8:	e008      	b.n	80056bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056aa:	4b07      	ldr	r3, [pc, #28]	; (80056c8 <prvResetNextTaskUnblockTime+0x38>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	4a04      	ldr	r2, [pc, #16]	; (80056cc <prvResetNextTaskUnblockTime+0x3c>)
 80056ba:	6013      	str	r3, [r2, #0]
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	20001190 	.word	0x20001190
 80056cc:	200011f8 	.word	0x200011f8

080056d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <xTaskGetSchedulerState+0x34>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d102      	bne.n	80056e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056de:	2301      	movs	r3, #1
 80056e0:	607b      	str	r3, [r7, #4]
 80056e2:	e008      	b.n	80056f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056e4:	4b08      	ldr	r3, [pc, #32]	; (8005708 <xTaskGetSchedulerState+0x38>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d102      	bne.n	80056f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056ec:	2302      	movs	r3, #2
 80056ee:	607b      	str	r3, [r7, #4]
 80056f0:	e001      	b.n	80056f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056f2:	2300      	movs	r3, #0
 80056f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056f6:	687b      	ldr	r3, [r7, #4]
	}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	200011e4 	.word	0x200011e4
 8005708:	20001200 	.word	0x20001200

0800570c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d056      	beq.n	80057d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005722:	4b2e      	ldr	r3, [pc, #184]	; (80057dc <xTaskPriorityDisinherit+0xd0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	429a      	cmp	r2, r3
 800572a:	d00a      	beq.n	8005742 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	60fb      	str	r3, [r7, #12]
}
 800573e:	bf00      	nop
 8005740:	e7fe      	b.n	8005740 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	60bb      	str	r3, [r7, #8]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005764:	1e5a      	subs	r2, r3, #1
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005772:	429a      	cmp	r2, r3
 8005774:	d02c      	beq.n	80057d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577a:	2b00      	cmp	r3, #0
 800577c:	d128      	bne.n	80057d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	3304      	adds	r3, #4
 8005782:	4618      	mov	r0, r3
 8005784:	f7fe fc70 	bl	8004068 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a0:	4b0f      	ldr	r3, [pc, #60]	; (80057e0 <xTaskPriorityDisinherit+0xd4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d903      	bls.n	80057b0 <xTaskPriorityDisinherit+0xa4>
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	4a0c      	ldr	r2, [pc, #48]	; (80057e0 <xTaskPriorityDisinherit+0xd4>)
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4a09      	ldr	r2, [pc, #36]	; (80057e4 <xTaskPriorityDisinherit+0xd8>)
 80057be:	441a      	add	r2, r3
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	f7fe fbf1 	bl	8003fae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80057cc:	2301      	movs	r3, #1
 80057ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057d0:	697b      	ldr	r3, [r7, #20]
	}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	20000d04 	.word	0x20000d04
 80057e0:	200011e0 	.word	0x200011e0
 80057e4:	20000d08 	.word	0x20000d08

080057e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057f2:	4b21      	ldr	r3, [pc, #132]	; (8005878 <prvAddCurrentTaskToDelayedList+0x90>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057f8:	4b20      	ldr	r3, [pc, #128]	; (800587c <prvAddCurrentTaskToDelayedList+0x94>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3304      	adds	r3, #4
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fe fc32 	bl	8004068 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580a:	d10a      	bne.n	8005822 <prvAddCurrentTaskToDelayedList+0x3a>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d007      	beq.n	8005822 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005812:	4b1a      	ldr	r3, [pc, #104]	; (800587c <prvAddCurrentTaskToDelayedList+0x94>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3304      	adds	r3, #4
 8005818:	4619      	mov	r1, r3
 800581a:	4819      	ldr	r0, [pc, #100]	; (8005880 <prvAddCurrentTaskToDelayedList+0x98>)
 800581c:	f7fe fbc7 	bl	8003fae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005820:	e026      	b.n	8005870 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4413      	add	r3, r2
 8005828:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800582a:	4b14      	ldr	r3, [pc, #80]	; (800587c <prvAddCurrentTaskToDelayedList+0x94>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	429a      	cmp	r2, r3
 8005838:	d209      	bcs.n	800584e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800583a:	4b12      	ldr	r3, [pc, #72]	; (8005884 <prvAddCurrentTaskToDelayedList+0x9c>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4b0f      	ldr	r3, [pc, #60]	; (800587c <prvAddCurrentTaskToDelayedList+0x94>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3304      	adds	r3, #4
 8005844:	4619      	mov	r1, r3
 8005846:	4610      	mov	r0, r2
 8005848:	f7fe fbd5 	bl	8003ff6 <vListInsert>
}
 800584c:	e010      	b.n	8005870 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800584e:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4b0a      	ldr	r3, [pc, #40]	; (800587c <prvAddCurrentTaskToDelayedList+0x94>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3304      	adds	r3, #4
 8005858:	4619      	mov	r1, r3
 800585a:	4610      	mov	r0, r2
 800585c:	f7fe fbcb 	bl	8003ff6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	429a      	cmp	r2, r3
 8005868:	d202      	bcs.n	8005870 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800586a:	4a08      	ldr	r2, [pc, #32]	; (800588c <prvAddCurrentTaskToDelayedList+0xa4>)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	6013      	str	r3, [r2, #0]
}
 8005870:	bf00      	nop
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	200011dc 	.word	0x200011dc
 800587c:	20000d04 	.word	0x20000d04
 8005880:	200011c4 	.word	0x200011c4
 8005884:	20001194 	.word	0x20001194
 8005888:	20001190 	.word	0x20001190
 800588c:	200011f8 	.word	0x200011f8

08005890 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08a      	sub	sp, #40	; 0x28
 8005894:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800589a:	f000 fb07 	bl	8005eac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800589e:	4b1c      	ldr	r3, [pc, #112]	; (8005910 <xTimerCreateTimerTask+0x80>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d021      	beq.n	80058ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80058ae:	1d3a      	adds	r2, r7, #4
 80058b0:	f107 0108 	add.w	r1, r7, #8
 80058b4:	f107 030c 	add.w	r3, r7, #12
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fe fb31 	bl	8003f20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	9202      	str	r2, [sp, #8]
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	2302      	movs	r3, #2
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	2300      	movs	r3, #0
 80058ce:	460a      	mov	r2, r1
 80058d0:	4910      	ldr	r1, [pc, #64]	; (8005914 <xTimerCreateTimerTask+0x84>)
 80058d2:	4811      	ldr	r0, [pc, #68]	; (8005918 <xTimerCreateTimerTask+0x88>)
 80058d4:	f7ff f8de 	bl	8004a94 <xTaskCreateStatic>
 80058d8:	4603      	mov	r3, r0
 80058da:	4a10      	ldr	r2, [pc, #64]	; (800591c <xTimerCreateTimerTask+0x8c>)
 80058dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80058de:	4b0f      	ldr	r3, [pc, #60]	; (800591c <xTimerCreateTimerTask+0x8c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80058e6:	2301      	movs	r3, #1
 80058e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	613b      	str	r3, [r7, #16]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005906:	697b      	ldr	r3, [r7, #20]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3718      	adds	r7, #24
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20001234 	.word	0x20001234
 8005914:	08007164 	.word	0x08007164
 8005918:	08005a55 	.word	0x08005a55
 800591c:	20001238 	.word	0x20001238

08005920 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08a      	sub	sp, #40	; 0x28
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800592e:	2300      	movs	r3, #0
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	623b      	str	r3, [r7, #32]
}
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800594e:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <xTimerGenericCommand+0x98>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d02a      	beq.n	80059ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b05      	cmp	r3, #5
 8005966:	dc18      	bgt.n	800599a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005968:	f7ff feb2 	bl	80056d0 <xTaskGetSchedulerState>
 800596c:	4603      	mov	r3, r0
 800596e:	2b02      	cmp	r3, #2
 8005970:	d109      	bne.n	8005986 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <xTimerGenericCommand+0x98>)
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	f107 0110 	add.w	r1, r7, #16
 800597a:	2300      	movs	r3, #0
 800597c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800597e:	f7fe fca1 	bl	80042c4 <xQueueGenericSend>
 8005982:	6278      	str	r0, [r7, #36]	; 0x24
 8005984:	e012      	b.n	80059ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005986:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <xTimerGenericCommand+0x98>)
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	f107 0110 	add.w	r1, r7, #16
 800598e:	2300      	movs	r3, #0
 8005990:	2200      	movs	r2, #0
 8005992:	f7fe fc97 	bl	80042c4 <xQueueGenericSend>
 8005996:	6278      	str	r0, [r7, #36]	; 0x24
 8005998:	e008      	b.n	80059ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800599a:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <xTimerGenericCommand+0x98>)
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	f107 0110 	add.w	r1, r7, #16
 80059a2:	2300      	movs	r3, #0
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	f7fe fd8b 	bl	80044c0 <xQueueGenericSendFromISR>
 80059aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3728      	adds	r7, #40	; 0x28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20001234 	.word	0x20001234

080059bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af02      	add	r7, sp, #8
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c6:	4b22      	ldr	r3, [pc, #136]	; (8005a50 <prvProcessExpiredTimer+0x94>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fe fb47 	bl	8004068 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d022      	beq.n	8005a2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	699a      	ldr	r2, [r3, #24]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	18d1      	adds	r1, r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	6978      	ldr	r0, [r7, #20]
 80059f6:	f000 f8d1 	bl	8005b9c <prvInsertTimerInActiveList>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01f      	beq.n	8005a40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a00:	2300      	movs	r3, #0
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	2300      	movs	r3, #0
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	2100      	movs	r1, #0
 8005a0a:	6978      	ldr	r0, [r7, #20]
 8005a0c:	f7ff ff88 	bl	8005920 <xTimerGenericCommand>
 8005a10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d113      	bne.n	8005a40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	60fb      	str	r3, [r7, #12]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a34:	f023 0301 	bic.w	r3, r3, #1
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	6978      	ldr	r0, [r7, #20]
 8005a46:	4798      	blx	r3
}
 8005a48:	bf00      	nop
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	2000122c 	.word	0x2000122c

08005a54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a5c:	f107 0308 	add.w	r3, r7, #8
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 f857 	bl	8005b14 <prvGetNextExpireTime>
 8005a66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f803 	bl	8005a78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a72:	f000 f8d5 	bl	8005c20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a76:	e7f1      	b.n	8005a5c <prvTimerTask+0x8>

08005a78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a82:	f7ff fa43 	bl	8004f0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a86:	f107 0308 	add.w	r3, r7, #8
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 f866 	bl	8005b5c <prvSampleTimeNow>
 8005a90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d130      	bne.n	8005afa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <prvProcessTimerOrBlockTask+0x3c>
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d806      	bhi.n	8005ab4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005aa6:	f7ff fa3f 	bl	8004f28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005aaa:	68f9      	ldr	r1, [r7, #12]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff ff85 	bl	80059bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ab2:	e024      	b.n	8005afe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d008      	beq.n	8005acc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005aba:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <prvProcessTimerOrBlockTask+0x90>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <prvProcessTimerOrBlockTask+0x50>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e000      	b.n	8005aca <prvProcessTimerOrBlockTask+0x52>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005acc:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <prvProcessTimerOrBlockTask+0x94>)
 8005ace:	6818      	ldr	r0, [r3, #0]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	4619      	mov	r1, r3
 8005ada:	f7fe ffa7 	bl	8004a2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ade:	f7ff fa23 	bl	8004f28 <xTaskResumeAll>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10a      	bne.n	8005afe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ae8:	4b09      	ldr	r3, [pc, #36]	; (8005b10 <prvProcessTimerOrBlockTask+0x98>)
 8005aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	f3bf 8f6f 	isb	sy
}
 8005af8:	e001      	b.n	8005afe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005afa:	f7ff fa15 	bl	8004f28 <xTaskResumeAll>
}
 8005afe:	bf00      	nop
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20001230 	.word	0x20001230
 8005b0c:	20001234 	.word	0x20001234
 8005b10:	e000ed04 	.word	0xe000ed04

08005b14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b1c:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <prvGetNextExpireTime+0x44>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <prvGetNextExpireTime+0x16>
 8005b26:	2201      	movs	r2, #1
 8005b28:	e000      	b.n	8005b2c <prvGetNextExpireTime+0x18>
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d105      	bne.n	8005b44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b38:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <prvGetNextExpireTime+0x44>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	e001      	b.n	8005b48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b48:	68fb      	ldr	r3, [r7, #12]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	2000122c 	.word	0x2000122c

08005b5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b64:	f7ff fa7e 	bl	8005064 <xTaskGetTickCount>
 8005b68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <prvSampleTimeNow+0x3c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d205      	bcs.n	8005b80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b74:	f000 f936 	bl	8005de4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	e002      	b.n	8005b86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b86:	4a04      	ldr	r2, [pc, #16]	; (8005b98 <prvSampleTimeNow+0x3c>)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	2000123c 	.word	0x2000123c

08005b9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d812      	bhi.n	8005be8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	1ad2      	subs	r2, r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d302      	bcc.n	8005bd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	e01b      	b.n	8005c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005bd6:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <prvInsertTimerInActiveList+0x7c>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4619      	mov	r1, r3
 8005be0:	4610      	mov	r0, r2
 8005be2:	f7fe fa08 	bl	8003ff6 <vListInsert>
 8005be6:	e012      	b.n	8005c0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d206      	bcs.n	8005bfe <prvInsertTimerInActiveList+0x62>
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d302      	bcc.n	8005bfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	e007      	b.n	8005c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bfe:	4b07      	ldr	r3, [pc, #28]	; (8005c1c <prvInsertTimerInActiveList+0x80>)
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3304      	adds	r3, #4
 8005c06:	4619      	mov	r1, r3
 8005c08:	4610      	mov	r0, r2
 8005c0a:	f7fe f9f4 	bl	8003ff6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c0e:	697b      	ldr	r3, [r7, #20]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20001230 	.word	0x20001230
 8005c1c:	2000122c 	.word	0x2000122c

08005c20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08e      	sub	sp, #56	; 0x38
 8005c24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c26:	e0ca      	b.n	8005dbe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	da18      	bge.n	8005c60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c2e:	1d3b      	adds	r3, r7, #4
 8005c30:	3304      	adds	r3, #4
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10a      	bne.n	8005c50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	61fb      	str	r3, [r7, #28]
}
 8005c4c:	bf00      	nop
 8005c4e:	e7fe      	b.n	8005c4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c56:	6850      	ldr	r0, [r2, #4]
 8005c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c5a:	6892      	ldr	r2, [r2, #8]
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f2c0 80ab 	blt.w	8005dbe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d004      	beq.n	8005c7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	3304      	adds	r3, #4
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fe f9f5 	bl	8004068 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c7e:	463b      	mov	r3, r7
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff ff6b 	bl	8005b5c <prvSampleTimeNow>
 8005c86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b09      	cmp	r3, #9
 8005c8c:	f200 8096 	bhi.w	8005dbc <prvProcessReceivedCommands+0x19c>
 8005c90:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <prvProcessReceivedCommands+0x78>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005cc1 	.word	0x08005cc1
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005cc1 	.word	0x08005cc1
 8005ca4:	08005d35 	.word	0x08005d35
 8005ca8:	08005d49 	.word	0x08005d49
 8005cac:	08005d93 	.word	0x08005d93
 8005cb0:	08005cc1 	.word	0x08005cc1
 8005cb4:	08005cc1 	.word	0x08005cc1
 8005cb8:	08005d35 	.word	0x08005d35
 8005cbc:	08005d49 	.word	0x08005d49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cc6:	f043 0301 	orr.w	r3, r3, #1
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	18d1      	adds	r1, r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ce0:	f7ff ff5c 	bl	8005b9c <prvInsertTimerInActiveList>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d069      	beq.n	8005dbe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d05e      	beq.n	8005dbe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	441a      	add	r2, r3
 8005d08:	2300      	movs	r3, #0
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2100      	movs	r1, #0
 8005d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d12:	f7ff fe05 	bl	8005920 <xTimerGenericCommand>
 8005d16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d14f      	bne.n	8005dbe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	61bb      	str	r3, [r7, #24]
}
 8005d30:	bf00      	nop
 8005d32:	e7fe      	b.n	8005d32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d3a:	f023 0301 	bic.w	r3, r3, #1
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005d46:	e03a      	b.n	8005dbe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	617b      	str	r3, [r7, #20]
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	18d1      	adds	r1, r2, r3
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d8c:	f7ff ff06 	bl	8005b9c <prvInsertTimerInActiveList>
					break;
 8005d90:	e015      	b.n	8005dbe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d103      	bne.n	8005da8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005da2:	f000 fbdd 	bl	8006560 <vPortFree>
 8005da6:	e00a      	b.n	8005dbe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005dba:	e000      	b.n	8005dbe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005dbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dbe:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <prvProcessReceivedCommands+0x1c0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	1d39      	adds	r1, r7, #4
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe fc16 	bl	80045f8 <xQueueReceive>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f47f af2a 	bne.w	8005c28 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	3730      	adds	r7, #48	; 0x30
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20001234 	.word	0x20001234

08005de4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dea:	e048      	b.n	8005e7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dec:	4b2d      	ldr	r3, [pc, #180]	; (8005ea4 <prvSwitchTimerLists+0xc0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df6:	4b2b      	ldr	r3, [pc, #172]	; (8005ea4 <prvSwitchTimerLists+0xc0>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fe f92f 	bl	8004068 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d02e      	beq.n	8005e7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4413      	add	r3, r2
 8005e28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d90e      	bls.n	8005e50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e3e:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <prvSwitchTimerLists+0xc0>)
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3304      	adds	r3, #4
 8005e46:	4619      	mov	r1, r3
 8005e48:	4610      	mov	r0, r2
 8005e4a:	f7fe f8d4 	bl	8003ff6 <vListInsert>
 8005e4e:	e016      	b.n	8005e7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e50:	2300      	movs	r3, #0
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	2300      	movs	r3, #0
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	2100      	movs	r1, #0
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f7ff fd60 	bl	8005920 <xTimerGenericCommand>
 8005e60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	603b      	str	r3, [r7, #0]
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e7e:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <prvSwitchTimerLists+0xc0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1b1      	bne.n	8005dec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e88:	4b06      	ldr	r3, [pc, #24]	; (8005ea4 <prvSwitchTimerLists+0xc0>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e8e:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <prvSwitchTimerLists+0xc4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a04      	ldr	r2, [pc, #16]	; (8005ea4 <prvSwitchTimerLists+0xc0>)
 8005e94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e96:	4a04      	ldr	r2, [pc, #16]	; (8005ea8 <prvSwitchTimerLists+0xc4>)
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	6013      	str	r3, [r2, #0]
}
 8005e9c:	bf00      	nop
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	2000122c 	.word	0x2000122c
 8005ea8:	20001230 	.word	0x20001230

08005eac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005eb2:	f000 f967 	bl	8006184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005eb6:	4b15      	ldr	r3, [pc, #84]	; (8005f0c <prvCheckForValidListAndQueue+0x60>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d120      	bne.n	8005f00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ebe:	4814      	ldr	r0, [pc, #80]	; (8005f10 <prvCheckForValidListAndQueue+0x64>)
 8005ec0:	f7fe f848 	bl	8003f54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ec4:	4813      	ldr	r0, [pc, #76]	; (8005f14 <prvCheckForValidListAndQueue+0x68>)
 8005ec6:	f7fe f845 	bl	8003f54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005eca:	4b13      	ldr	r3, [pc, #76]	; (8005f18 <prvCheckForValidListAndQueue+0x6c>)
 8005ecc:	4a10      	ldr	r2, [pc, #64]	; (8005f10 <prvCheckForValidListAndQueue+0x64>)
 8005ece:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ed0:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <prvCheckForValidListAndQueue+0x70>)
 8005ed2:	4a10      	ldr	r2, [pc, #64]	; (8005f14 <prvCheckForValidListAndQueue+0x68>)
 8005ed4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	4b11      	ldr	r3, [pc, #68]	; (8005f20 <prvCheckForValidListAndQueue+0x74>)
 8005edc:	4a11      	ldr	r2, [pc, #68]	; (8005f24 <prvCheckForValidListAndQueue+0x78>)
 8005ede:	2110      	movs	r1, #16
 8005ee0:	200a      	movs	r0, #10
 8005ee2:	f7fe f953 	bl	800418c <xQueueGenericCreateStatic>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4a08      	ldr	r2, [pc, #32]	; (8005f0c <prvCheckForValidListAndQueue+0x60>)
 8005eea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005eec:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <prvCheckForValidListAndQueue+0x60>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ef4:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <prvCheckForValidListAndQueue+0x60>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	490b      	ldr	r1, [pc, #44]	; (8005f28 <prvCheckForValidListAndQueue+0x7c>)
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fe fd6c 	bl	80049d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f00:	f000 f970 	bl	80061e4 <vPortExitCritical>
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20001234 	.word	0x20001234
 8005f10:	20001204 	.word	0x20001204
 8005f14:	20001218 	.word	0x20001218
 8005f18:	2000122c 	.word	0x2000122c
 8005f1c:	20001230 	.word	0x20001230
 8005f20:	200012e0 	.word	0x200012e0
 8005f24:	20001240 	.word	0x20001240
 8005f28:	0800716c 	.word	0x0800716c

08005f2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3b04      	subs	r3, #4
 8005f3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3b04      	subs	r3, #4
 8005f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f023 0201 	bic.w	r2, r3, #1
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3b04      	subs	r3, #4
 8005f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f5c:	4a0c      	ldr	r2, [pc, #48]	; (8005f90 <pxPortInitialiseStack+0x64>)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3b14      	subs	r3, #20
 8005f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3b04      	subs	r3, #4
 8005f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f06f 0202 	mvn.w	r2, #2
 8005f7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3b20      	subs	r3, #32
 8005f80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f82:	68fb      	ldr	r3, [r7, #12]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	08005f95 	.word	0x08005f95

08005f94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f9e:	4b12      	ldr	r3, [pc, #72]	; (8005fe8 <prvTaskExitError+0x54>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa6:	d00a      	beq.n	8005fbe <prvTaskExitError+0x2a>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	60fb      	str	r3, [r7, #12]
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <prvTaskExitError+0x28>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	60bb      	str	r3, [r7, #8]
}
 8005fd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fd2:	bf00      	nop
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0fc      	beq.n	8005fd4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	2000000c 	.word	0x2000000c
 8005fec:	00000000 	.word	0x00000000

08005ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ff0:	4b07      	ldr	r3, [pc, #28]	; (8006010 <pxCurrentTCBConst2>)
 8005ff2:	6819      	ldr	r1, [r3, #0]
 8005ff4:	6808      	ldr	r0, [r1, #0]
 8005ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffa:	f380 8809 	msr	PSP, r0
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f04f 0000 	mov.w	r0, #0
 8006006:	f380 8811 	msr	BASEPRI, r0
 800600a:	4770      	bx	lr
 800600c:	f3af 8000 	nop.w

08006010 <pxCurrentTCBConst2>:
 8006010:	20000d04 	.word	0x20000d04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop

08006018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006018:	4808      	ldr	r0, [pc, #32]	; (800603c <prvPortStartFirstTask+0x24>)
 800601a:	6800      	ldr	r0, [r0, #0]
 800601c:	6800      	ldr	r0, [r0, #0]
 800601e:	f380 8808 	msr	MSP, r0
 8006022:	f04f 0000 	mov.w	r0, #0
 8006026:	f380 8814 	msr	CONTROL, r0
 800602a:	b662      	cpsie	i
 800602c:	b661      	cpsie	f
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	df00      	svc	0
 8006038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800603a:	bf00      	nop
 800603c:	e000ed08 	.word	0xe000ed08

08006040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006046:	4b46      	ldr	r3, [pc, #280]	; (8006160 <xPortStartScheduler+0x120>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a46      	ldr	r2, [pc, #280]	; (8006164 <xPortStartScheduler+0x124>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d10a      	bne.n	8006066 <xPortStartScheduler+0x26>
	__asm volatile
 8006050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	613b      	str	r3, [r7, #16]
}
 8006062:	bf00      	nop
 8006064:	e7fe      	b.n	8006064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006066:	4b3e      	ldr	r3, [pc, #248]	; (8006160 <xPortStartScheduler+0x120>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a3f      	ldr	r2, [pc, #252]	; (8006168 <xPortStartScheduler+0x128>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d10a      	bne.n	8006086 <xPortStartScheduler+0x46>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	60fb      	str	r3, [r7, #12]
}
 8006082:	bf00      	nop
 8006084:	e7fe      	b.n	8006084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006086:	4b39      	ldr	r3, [pc, #228]	; (800616c <xPortStartScheduler+0x12c>)
 8006088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	22ff      	movs	r2, #255	; 0xff
 8006096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	4b31      	ldr	r3, [pc, #196]	; (8006170 <xPortStartScheduler+0x130>)
 80060ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060ae:	4b31      	ldr	r3, [pc, #196]	; (8006174 <xPortStartScheduler+0x134>)
 80060b0:	2207      	movs	r2, #7
 80060b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060b4:	e009      	b.n	80060ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80060b6:	4b2f      	ldr	r3, [pc, #188]	; (8006174 <xPortStartScheduler+0x134>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	4a2d      	ldr	r2, [pc, #180]	; (8006174 <xPortStartScheduler+0x134>)
 80060be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d2:	2b80      	cmp	r3, #128	; 0x80
 80060d4:	d0ef      	beq.n	80060b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060d6:	4b27      	ldr	r3, [pc, #156]	; (8006174 <xPortStartScheduler+0x134>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f1c3 0307 	rsb	r3, r3, #7
 80060de:	2b04      	cmp	r3, #4
 80060e0:	d00a      	beq.n	80060f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80060e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e6:	f383 8811 	msr	BASEPRI, r3
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	60bb      	str	r3, [r7, #8]
}
 80060f4:	bf00      	nop
 80060f6:	e7fe      	b.n	80060f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060f8:	4b1e      	ldr	r3, [pc, #120]	; (8006174 <xPortStartScheduler+0x134>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	4a1d      	ldr	r2, [pc, #116]	; (8006174 <xPortStartScheduler+0x134>)
 8006100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006102:	4b1c      	ldr	r3, [pc, #112]	; (8006174 <xPortStartScheduler+0x134>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800610a:	4a1a      	ldr	r2, [pc, #104]	; (8006174 <xPortStartScheduler+0x134>)
 800610c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	b2da      	uxtb	r2, r3
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006116:	4b18      	ldr	r3, [pc, #96]	; (8006178 <xPortStartScheduler+0x138>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a17      	ldr	r2, [pc, #92]	; (8006178 <xPortStartScheduler+0x138>)
 800611c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006122:	4b15      	ldr	r3, [pc, #84]	; (8006178 <xPortStartScheduler+0x138>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a14      	ldr	r2, [pc, #80]	; (8006178 <xPortStartScheduler+0x138>)
 8006128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800612c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800612e:	f000 f8dd 	bl	80062ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006132:	4b12      	ldr	r3, [pc, #72]	; (800617c <xPortStartScheduler+0x13c>)
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006138:	f000 f8fc 	bl	8006334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800613c:	4b10      	ldr	r3, [pc, #64]	; (8006180 <xPortStartScheduler+0x140>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a0f      	ldr	r2, [pc, #60]	; (8006180 <xPortStartScheduler+0x140>)
 8006142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006148:	f7ff ff66 	bl	8006018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800614c:	f7ff f854 	bl	80051f8 <vTaskSwitchContext>
	prvTaskExitError();
 8006150:	f7ff ff20 	bl	8005f94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	e000ed00 	.word	0xe000ed00
 8006164:	410fc271 	.word	0x410fc271
 8006168:	410fc270 	.word	0x410fc270
 800616c:	e000e400 	.word	0xe000e400
 8006170:	20001330 	.word	0x20001330
 8006174:	20001334 	.word	0x20001334
 8006178:	e000ed20 	.word	0xe000ed20
 800617c:	2000000c 	.word	0x2000000c
 8006180:	e000ef34 	.word	0xe000ef34

08006184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	607b      	str	r3, [r7, #4]
}
 800619c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800619e:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <vPortEnterCritical+0x58>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3301      	adds	r3, #1
 80061a4:	4a0d      	ldr	r2, [pc, #52]	; (80061dc <vPortEnterCritical+0x58>)
 80061a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061a8:	4b0c      	ldr	r3, [pc, #48]	; (80061dc <vPortEnterCritical+0x58>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d10f      	bne.n	80061d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <vPortEnterCritical+0x5c>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	603b      	str	r3, [r7, #0]
}
 80061cc:	bf00      	nop
 80061ce:	e7fe      	b.n	80061ce <vPortEnterCritical+0x4a>
	}
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	2000000c 	.word	0x2000000c
 80061e0:	e000ed04 	.word	0xe000ed04

080061e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061ea:	4b12      	ldr	r3, [pc, #72]	; (8006234 <vPortExitCritical+0x50>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10a      	bne.n	8006208 <vPortExitCritical+0x24>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	607b      	str	r3, [r7, #4]
}
 8006204:	bf00      	nop
 8006206:	e7fe      	b.n	8006206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006208:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <vPortExitCritical+0x50>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3b01      	subs	r3, #1
 800620e:	4a09      	ldr	r2, [pc, #36]	; (8006234 <vPortExitCritical+0x50>)
 8006210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006212:	4b08      	ldr	r3, [pc, #32]	; (8006234 <vPortExitCritical+0x50>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d105      	bne.n	8006226 <vPortExitCritical+0x42>
 800621a:	2300      	movs	r3, #0
 800621c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	f383 8811 	msr	BASEPRI, r3
}
 8006224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	2000000c 	.word	0x2000000c
	...

08006240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006240:	f3ef 8009 	mrs	r0, PSP
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	4b15      	ldr	r3, [pc, #84]	; (80062a0 <pxCurrentTCBConst>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	f01e 0f10 	tst.w	lr, #16
 8006250:	bf08      	it	eq
 8006252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625a:	6010      	str	r0, [r2, #0]
 800625c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006264:	f380 8811 	msr	BASEPRI, r0
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f7fe ffc2 	bl	80051f8 <vTaskSwitchContext>
 8006274:	f04f 0000 	mov.w	r0, #0
 8006278:	f380 8811 	msr	BASEPRI, r0
 800627c:	bc09      	pop	{r0, r3}
 800627e:	6819      	ldr	r1, [r3, #0]
 8006280:	6808      	ldr	r0, [r1, #0]
 8006282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006286:	f01e 0f10 	tst.w	lr, #16
 800628a:	bf08      	it	eq
 800628c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006290:	f380 8809 	msr	PSP, r0
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	f3af 8000 	nop.w

080062a0 <pxCurrentTCBConst>:
 80062a0:	20000d04 	.word	0x20000d04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop

080062a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	607b      	str	r3, [r7, #4]
}
 80062c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062c2:	f7fe fedf 	bl	8005084 <xTaskIncrementTick>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062cc:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <xPortSysTickHandler+0x40>)
 80062ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	2300      	movs	r3, #0
 80062d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	f383 8811 	msr	BASEPRI, r3
}
 80062de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80062e0:	bf00      	nop
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	e000ed04 	.word	0xe000ed04

080062ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062ec:	b480      	push	{r7}
 80062ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062f0:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <vPortSetupTimerInterrupt+0x34>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062f6:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <vPortSetupTimerInterrupt+0x38>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062fc:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <vPortSetupTimerInterrupt+0x3c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a0a      	ldr	r2, [pc, #40]	; (800632c <vPortSetupTimerInterrupt+0x40>)
 8006302:	fba2 2303 	umull	r2, r3, r2, r3
 8006306:	099b      	lsrs	r3, r3, #6
 8006308:	4a09      	ldr	r2, [pc, #36]	; (8006330 <vPortSetupTimerInterrupt+0x44>)
 800630a:	3b01      	subs	r3, #1
 800630c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800630e:	4b04      	ldr	r3, [pc, #16]	; (8006320 <vPortSetupTimerInterrupt+0x34>)
 8006310:	2207      	movs	r2, #7
 8006312:	601a      	str	r2, [r3, #0]
}
 8006314:	bf00      	nop
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	e000e010 	.word	0xe000e010
 8006324:	e000e018 	.word	0xe000e018
 8006328:	20000000 	.word	0x20000000
 800632c:	10624dd3 	.word	0x10624dd3
 8006330:	e000e014 	.word	0xe000e014

08006334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006344 <vPortEnableVFP+0x10>
 8006338:	6801      	ldr	r1, [r0, #0]
 800633a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800633e:	6001      	str	r1, [r0, #0]
 8006340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006342:	bf00      	nop
 8006344:	e000ed88 	.word	0xe000ed88

08006348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800634e:	f3ef 8305 	mrs	r3, IPSR
 8006352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2b0f      	cmp	r3, #15
 8006358:	d914      	bls.n	8006384 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800635a:	4a17      	ldr	r2, [pc, #92]	; (80063b8 <vPortValidateInterruptPriority+0x70>)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006364:	4b15      	ldr	r3, [pc, #84]	; (80063bc <vPortValidateInterruptPriority+0x74>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	7afa      	ldrb	r2, [r7, #11]
 800636a:	429a      	cmp	r2, r3
 800636c:	d20a      	bcs.n	8006384 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	607b      	str	r3, [r7, #4]
}
 8006380:	bf00      	nop
 8006382:	e7fe      	b.n	8006382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006384:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <vPortValidateInterruptPriority+0x78>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800638c:	4b0d      	ldr	r3, [pc, #52]	; (80063c4 <vPortValidateInterruptPriority+0x7c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d90a      	bls.n	80063aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	603b      	str	r3, [r7, #0]
}
 80063a6:	bf00      	nop
 80063a8:	e7fe      	b.n	80063a8 <vPortValidateInterruptPriority+0x60>
	}
 80063aa:	bf00      	nop
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	e000e3f0 	.word	0xe000e3f0
 80063bc:	20001330 	.word	0x20001330
 80063c0:	e000ed0c 	.word	0xe000ed0c
 80063c4:	20001334 	.word	0x20001334

080063c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08a      	sub	sp, #40	; 0x28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063d0:	2300      	movs	r3, #0
 80063d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063d4:	f7fe fd9a 	bl	8004f0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063d8:	4b5b      	ldr	r3, [pc, #364]	; (8006548 <pvPortMalloc+0x180>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063e0:	f000 f920 	bl	8006624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063e4:	4b59      	ldr	r3, [pc, #356]	; (800654c <pvPortMalloc+0x184>)
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4013      	ands	r3, r2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f040 8093 	bne.w	8006518 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d01d      	beq.n	8006434 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80063f8:	2208      	movs	r2, #8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4413      	add	r3, r2
 80063fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	2b00      	cmp	r3, #0
 8006408:	d014      	beq.n	8006434 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f023 0307 	bic.w	r3, r3, #7
 8006410:	3308      	adds	r3, #8
 8006412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <pvPortMalloc+0x6c>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	617b      	str	r3, [r7, #20]
}
 8006430:	bf00      	nop
 8006432:	e7fe      	b.n	8006432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d06e      	beq.n	8006518 <pvPortMalloc+0x150>
 800643a:	4b45      	ldr	r3, [pc, #276]	; (8006550 <pvPortMalloc+0x188>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	429a      	cmp	r2, r3
 8006442:	d869      	bhi.n	8006518 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006444:	4b43      	ldr	r3, [pc, #268]	; (8006554 <pvPortMalloc+0x18c>)
 8006446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006448:	4b42      	ldr	r3, [pc, #264]	; (8006554 <pvPortMalloc+0x18c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800644e:	e004      	b.n	800645a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	429a      	cmp	r2, r3
 8006462:	d903      	bls.n	800646c <pvPortMalloc+0xa4>
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1f1      	bne.n	8006450 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800646c:	4b36      	ldr	r3, [pc, #216]	; (8006548 <pvPortMalloc+0x180>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006472:	429a      	cmp	r2, r3
 8006474:	d050      	beq.n	8006518 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2208      	movs	r2, #8
 800647c:	4413      	add	r3, r2
 800647e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	1ad2      	subs	r2, r2, r3
 8006490:	2308      	movs	r3, #8
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	429a      	cmp	r2, r3
 8006496:	d91f      	bls.n	80064d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4413      	add	r3, r2
 800649e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <pvPortMalloc+0xf8>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	613b      	str	r3, [r7, #16]
}
 80064bc:	bf00      	nop
 80064be:	e7fe      	b.n	80064be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	1ad2      	subs	r2, r2, r3
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064d2:	69b8      	ldr	r0, [r7, #24]
 80064d4:	f000 f908 	bl	80066e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064d8:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <pvPortMalloc+0x188>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	4a1b      	ldr	r2, [pc, #108]	; (8006550 <pvPortMalloc+0x188>)
 80064e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064e6:	4b1a      	ldr	r3, [pc, #104]	; (8006550 <pvPortMalloc+0x188>)
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	4b1b      	ldr	r3, [pc, #108]	; (8006558 <pvPortMalloc+0x190>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d203      	bcs.n	80064fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064f2:	4b17      	ldr	r3, [pc, #92]	; (8006550 <pvPortMalloc+0x188>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a18      	ldr	r2, [pc, #96]	; (8006558 <pvPortMalloc+0x190>)
 80064f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	4b13      	ldr	r3, [pc, #76]	; (800654c <pvPortMalloc+0x184>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	431a      	orrs	r2, r3
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800650e:	4b13      	ldr	r3, [pc, #76]	; (800655c <pvPortMalloc+0x194>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3301      	adds	r3, #1
 8006514:	4a11      	ldr	r2, [pc, #68]	; (800655c <pvPortMalloc+0x194>)
 8006516:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006518:	f7fe fd06 	bl	8004f28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <pvPortMalloc+0x174>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	60fb      	str	r3, [r7, #12]
}
 8006538:	bf00      	nop
 800653a:	e7fe      	b.n	800653a <pvPortMalloc+0x172>
	return pvReturn;
 800653c:	69fb      	ldr	r3, [r7, #28]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3728      	adds	r7, #40	; 0x28
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20004f40 	.word	0x20004f40
 800654c:	20004f54 	.word	0x20004f54
 8006550:	20004f44 	.word	0x20004f44
 8006554:	20004f38 	.word	0x20004f38
 8006558:	20004f48 	.word	0x20004f48
 800655c:	20004f4c 	.word	0x20004f4c

08006560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d04d      	beq.n	800660e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006572:	2308      	movs	r3, #8
 8006574:	425b      	negs	r3, r3
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4413      	add	r3, r2
 800657a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	4b24      	ldr	r3, [pc, #144]	; (8006618 <vPortFree+0xb8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4013      	ands	r3, r2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10a      	bne.n	80065a4 <vPortFree+0x44>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	60fb      	str	r3, [r7, #12]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <vPortFree+0x62>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	60bb      	str	r3, [r7, #8]
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	4b14      	ldr	r3, [pc, #80]	; (8006618 <vPortFree+0xb8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4013      	ands	r3, r2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01e      	beq.n	800660e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d11a      	bne.n	800660e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	4b0e      	ldr	r3, [pc, #56]	; (8006618 <vPortFree+0xb8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	43db      	mvns	r3, r3
 80065e2:	401a      	ands	r2, r3
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065e8:	f7fe fc90 	bl	8004f0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <vPortFree+0xbc>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4413      	add	r3, r2
 80065f6:	4a09      	ldr	r2, [pc, #36]	; (800661c <vPortFree+0xbc>)
 80065f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065fa:	6938      	ldr	r0, [r7, #16]
 80065fc:	f000 f874 	bl	80066e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006600:	4b07      	ldr	r3, [pc, #28]	; (8006620 <vPortFree+0xc0>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3301      	adds	r3, #1
 8006606:	4a06      	ldr	r2, [pc, #24]	; (8006620 <vPortFree+0xc0>)
 8006608:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800660a:	f7fe fc8d 	bl	8004f28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800660e:	bf00      	nop
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20004f54 	.word	0x20004f54
 800661c:	20004f44 	.word	0x20004f44
 8006620:	20004f50 	.word	0x20004f50

08006624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800662a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800662e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006630:	4b27      	ldr	r3, [pc, #156]	; (80066d0 <prvHeapInit+0xac>)
 8006632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00c      	beq.n	8006658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3307      	adds	r3, #7
 8006642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0307 	bic.w	r3, r3, #7
 800664a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	4a1f      	ldr	r2, [pc, #124]	; (80066d0 <prvHeapInit+0xac>)
 8006654:	4413      	add	r3, r2
 8006656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800665c:	4a1d      	ldr	r2, [pc, #116]	; (80066d4 <prvHeapInit+0xb0>)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006662:	4b1c      	ldr	r3, [pc, #112]	; (80066d4 <prvHeapInit+0xb0>)
 8006664:	2200      	movs	r2, #0
 8006666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	4413      	add	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006670:	2208      	movs	r2, #8
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0307 	bic.w	r3, r3, #7
 800667e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <prvHeapInit+0xb4>)
 8006684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006686:	4b14      	ldr	r3, [pc, #80]	; (80066d8 <prvHeapInit+0xb4>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2200      	movs	r2, #0
 800668c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800668e:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <prvHeapInit+0xb4>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2200      	movs	r2, #0
 8006694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066a4:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <prvHeapInit+0xb4>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	4a0a      	ldr	r2, [pc, #40]	; (80066dc <prvHeapInit+0xb8>)
 80066b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <prvHeapInit+0xbc>)
 80066ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066bc:	4b09      	ldr	r3, [pc, #36]	; (80066e4 <prvHeapInit+0xc0>)
 80066be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066c2:	601a      	str	r2, [r3, #0]
}
 80066c4:	bf00      	nop
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	20001338 	.word	0x20001338
 80066d4:	20004f38 	.word	0x20004f38
 80066d8:	20004f40 	.word	0x20004f40
 80066dc:	20004f48 	.word	0x20004f48
 80066e0:	20004f44 	.word	0x20004f44
 80066e4:	20004f54 	.word	0x20004f54

080066e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066f0:	4b28      	ldr	r3, [pc, #160]	; (8006794 <prvInsertBlockIntoFreeList+0xac>)
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e002      	b.n	80066fc <prvInsertBlockIntoFreeList+0x14>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	429a      	cmp	r2, r3
 8006704:	d8f7      	bhi.n	80066f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	4413      	add	r3, r2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	429a      	cmp	r2, r3
 8006716:	d108      	bne.n	800672a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	441a      	add	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	441a      	add	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d118      	bne.n	8006770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	4b15      	ldr	r3, [pc, #84]	; (8006798 <prvInsertBlockIntoFreeList+0xb0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d00d      	beq.n	8006766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	441a      	add	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	e008      	b.n	8006778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006766:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <prvInsertBlockIntoFreeList+0xb0>)
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	e003      	b.n	8006778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	429a      	cmp	r2, r3
 800677e:	d002      	beq.n	8006786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006786:	bf00      	nop
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20004f38 	.word	0x20004f38
 8006798:	20004f40 	.word	0x20004f40

0800679c <siprintf>:
 800679c:	b40e      	push	{r1, r2, r3}
 800679e:	b500      	push	{lr}
 80067a0:	b09c      	sub	sp, #112	; 0x70
 80067a2:	ab1d      	add	r3, sp, #116	; 0x74
 80067a4:	9002      	str	r0, [sp, #8]
 80067a6:	9006      	str	r0, [sp, #24]
 80067a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067ac:	4809      	ldr	r0, [pc, #36]	; (80067d4 <siprintf+0x38>)
 80067ae:	9107      	str	r1, [sp, #28]
 80067b0:	9104      	str	r1, [sp, #16]
 80067b2:	4909      	ldr	r1, [pc, #36]	; (80067d8 <siprintf+0x3c>)
 80067b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80067b8:	9105      	str	r1, [sp, #20]
 80067ba:	6800      	ldr	r0, [r0, #0]
 80067bc:	9301      	str	r3, [sp, #4]
 80067be:	a902      	add	r1, sp, #8
 80067c0:	f000 f9a0 	bl	8006b04 <_svfiprintf_r>
 80067c4:	9b02      	ldr	r3, [sp, #8]
 80067c6:	2200      	movs	r2, #0
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	b01c      	add	sp, #112	; 0x70
 80067cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80067d0:	b003      	add	sp, #12
 80067d2:	4770      	bx	lr
 80067d4:	2000005c 	.word	0x2000005c
 80067d8:	ffff0208 	.word	0xffff0208

080067dc <memset>:
 80067dc:	4402      	add	r2, r0
 80067de:	4603      	mov	r3, r0
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d100      	bne.n	80067e6 <memset+0xa>
 80067e4:	4770      	bx	lr
 80067e6:	f803 1b01 	strb.w	r1, [r3], #1
 80067ea:	e7f9      	b.n	80067e0 <memset+0x4>

080067ec <__errno>:
 80067ec:	4b01      	ldr	r3, [pc, #4]	; (80067f4 <__errno+0x8>)
 80067ee:	6818      	ldr	r0, [r3, #0]
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	2000005c 	.word	0x2000005c

080067f8 <__libc_init_array>:
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	4d0d      	ldr	r5, [pc, #52]	; (8006830 <__libc_init_array+0x38>)
 80067fc:	4c0d      	ldr	r4, [pc, #52]	; (8006834 <__libc_init_array+0x3c>)
 80067fe:	1b64      	subs	r4, r4, r5
 8006800:	10a4      	asrs	r4, r4, #2
 8006802:	2600      	movs	r6, #0
 8006804:	42a6      	cmp	r6, r4
 8006806:	d109      	bne.n	800681c <__libc_init_array+0x24>
 8006808:	4d0b      	ldr	r5, [pc, #44]	; (8006838 <__libc_init_array+0x40>)
 800680a:	4c0c      	ldr	r4, [pc, #48]	; (800683c <__libc_init_array+0x44>)
 800680c:	f000 fc6a 	bl	80070e4 <_init>
 8006810:	1b64      	subs	r4, r4, r5
 8006812:	10a4      	asrs	r4, r4, #2
 8006814:	2600      	movs	r6, #0
 8006816:	42a6      	cmp	r6, r4
 8006818:	d105      	bne.n	8006826 <__libc_init_array+0x2e>
 800681a:	bd70      	pop	{r4, r5, r6, pc}
 800681c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006820:	4798      	blx	r3
 8006822:	3601      	adds	r6, #1
 8006824:	e7ee      	b.n	8006804 <__libc_init_array+0xc>
 8006826:	f855 3b04 	ldr.w	r3, [r5], #4
 800682a:	4798      	blx	r3
 800682c:	3601      	adds	r6, #1
 800682e:	e7f2      	b.n	8006816 <__libc_init_array+0x1e>
 8006830:	08007ce0 	.word	0x08007ce0
 8006834:	08007ce0 	.word	0x08007ce0
 8006838:	08007ce0 	.word	0x08007ce0
 800683c:	08007ce4 	.word	0x08007ce4

08006840 <__retarget_lock_acquire_recursive>:
 8006840:	4770      	bx	lr

08006842 <__retarget_lock_release_recursive>:
 8006842:	4770      	bx	lr

08006844 <memcpy>:
 8006844:	440a      	add	r2, r1
 8006846:	4291      	cmp	r1, r2
 8006848:	f100 33ff 	add.w	r3, r0, #4294967295
 800684c:	d100      	bne.n	8006850 <memcpy+0xc>
 800684e:	4770      	bx	lr
 8006850:	b510      	push	{r4, lr}
 8006852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800685a:	4291      	cmp	r1, r2
 800685c:	d1f9      	bne.n	8006852 <memcpy+0xe>
 800685e:	bd10      	pop	{r4, pc}

08006860 <_free_r>:
 8006860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006862:	2900      	cmp	r1, #0
 8006864:	d044      	beq.n	80068f0 <_free_r+0x90>
 8006866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800686a:	9001      	str	r0, [sp, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	f1a1 0404 	sub.w	r4, r1, #4
 8006872:	bfb8      	it	lt
 8006874:	18e4      	addlt	r4, r4, r3
 8006876:	f000 f8df 	bl	8006a38 <__malloc_lock>
 800687a:	4a1e      	ldr	r2, [pc, #120]	; (80068f4 <_free_r+0x94>)
 800687c:	9801      	ldr	r0, [sp, #4]
 800687e:	6813      	ldr	r3, [r2, #0]
 8006880:	b933      	cbnz	r3, 8006890 <_free_r+0x30>
 8006882:	6063      	str	r3, [r4, #4]
 8006884:	6014      	str	r4, [r2, #0]
 8006886:	b003      	add	sp, #12
 8006888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800688c:	f000 b8da 	b.w	8006a44 <__malloc_unlock>
 8006890:	42a3      	cmp	r3, r4
 8006892:	d908      	bls.n	80068a6 <_free_r+0x46>
 8006894:	6825      	ldr	r5, [r4, #0]
 8006896:	1961      	adds	r1, r4, r5
 8006898:	428b      	cmp	r3, r1
 800689a:	bf01      	itttt	eq
 800689c:	6819      	ldreq	r1, [r3, #0]
 800689e:	685b      	ldreq	r3, [r3, #4]
 80068a0:	1949      	addeq	r1, r1, r5
 80068a2:	6021      	streq	r1, [r4, #0]
 80068a4:	e7ed      	b.n	8006882 <_free_r+0x22>
 80068a6:	461a      	mov	r2, r3
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	b10b      	cbz	r3, 80068b0 <_free_r+0x50>
 80068ac:	42a3      	cmp	r3, r4
 80068ae:	d9fa      	bls.n	80068a6 <_free_r+0x46>
 80068b0:	6811      	ldr	r1, [r2, #0]
 80068b2:	1855      	adds	r5, r2, r1
 80068b4:	42a5      	cmp	r5, r4
 80068b6:	d10b      	bne.n	80068d0 <_free_r+0x70>
 80068b8:	6824      	ldr	r4, [r4, #0]
 80068ba:	4421      	add	r1, r4
 80068bc:	1854      	adds	r4, r2, r1
 80068be:	42a3      	cmp	r3, r4
 80068c0:	6011      	str	r1, [r2, #0]
 80068c2:	d1e0      	bne.n	8006886 <_free_r+0x26>
 80068c4:	681c      	ldr	r4, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	6053      	str	r3, [r2, #4]
 80068ca:	440c      	add	r4, r1
 80068cc:	6014      	str	r4, [r2, #0]
 80068ce:	e7da      	b.n	8006886 <_free_r+0x26>
 80068d0:	d902      	bls.n	80068d8 <_free_r+0x78>
 80068d2:	230c      	movs	r3, #12
 80068d4:	6003      	str	r3, [r0, #0]
 80068d6:	e7d6      	b.n	8006886 <_free_r+0x26>
 80068d8:	6825      	ldr	r5, [r4, #0]
 80068da:	1961      	adds	r1, r4, r5
 80068dc:	428b      	cmp	r3, r1
 80068de:	bf04      	itt	eq
 80068e0:	6819      	ldreq	r1, [r3, #0]
 80068e2:	685b      	ldreq	r3, [r3, #4]
 80068e4:	6063      	str	r3, [r4, #4]
 80068e6:	bf04      	itt	eq
 80068e8:	1949      	addeq	r1, r1, r5
 80068ea:	6021      	streq	r1, [r4, #0]
 80068ec:	6054      	str	r4, [r2, #4]
 80068ee:	e7ca      	b.n	8006886 <_free_r+0x26>
 80068f0:	b003      	add	sp, #12
 80068f2:	bd30      	pop	{r4, r5, pc}
 80068f4:	20005098 	.word	0x20005098

080068f8 <sbrk_aligned>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	4e0e      	ldr	r6, [pc, #56]	; (8006934 <sbrk_aligned+0x3c>)
 80068fc:	460c      	mov	r4, r1
 80068fe:	6831      	ldr	r1, [r6, #0]
 8006900:	4605      	mov	r5, r0
 8006902:	b911      	cbnz	r1, 800690a <sbrk_aligned+0x12>
 8006904:	f000 fba6 	bl	8007054 <_sbrk_r>
 8006908:	6030      	str	r0, [r6, #0]
 800690a:	4621      	mov	r1, r4
 800690c:	4628      	mov	r0, r5
 800690e:	f000 fba1 	bl	8007054 <_sbrk_r>
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	d00a      	beq.n	800692c <sbrk_aligned+0x34>
 8006916:	1cc4      	adds	r4, r0, #3
 8006918:	f024 0403 	bic.w	r4, r4, #3
 800691c:	42a0      	cmp	r0, r4
 800691e:	d007      	beq.n	8006930 <sbrk_aligned+0x38>
 8006920:	1a21      	subs	r1, r4, r0
 8006922:	4628      	mov	r0, r5
 8006924:	f000 fb96 	bl	8007054 <_sbrk_r>
 8006928:	3001      	adds	r0, #1
 800692a:	d101      	bne.n	8006930 <sbrk_aligned+0x38>
 800692c:	f04f 34ff 	mov.w	r4, #4294967295
 8006930:	4620      	mov	r0, r4
 8006932:	bd70      	pop	{r4, r5, r6, pc}
 8006934:	2000509c 	.word	0x2000509c

08006938 <_malloc_r>:
 8006938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800693c:	1ccd      	adds	r5, r1, #3
 800693e:	f025 0503 	bic.w	r5, r5, #3
 8006942:	3508      	adds	r5, #8
 8006944:	2d0c      	cmp	r5, #12
 8006946:	bf38      	it	cc
 8006948:	250c      	movcc	r5, #12
 800694a:	2d00      	cmp	r5, #0
 800694c:	4607      	mov	r7, r0
 800694e:	db01      	blt.n	8006954 <_malloc_r+0x1c>
 8006950:	42a9      	cmp	r1, r5
 8006952:	d905      	bls.n	8006960 <_malloc_r+0x28>
 8006954:	230c      	movs	r3, #12
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	2600      	movs	r6, #0
 800695a:	4630      	mov	r0, r6
 800695c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006960:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a34 <_malloc_r+0xfc>
 8006964:	f000 f868 	bl	8006a38 <__malloc_lock>
 8006968:	f8d8 3000 	ldr.w	r3, [r8]
 800696c:	461c      	mov	r4, r3
 800696e:	bb5c      	cbnz	r4, 80069c8 <_malloc_r+0x90>
 8006970:	4629      	mov	r1, r5
 8006972:	4638      	mov	r0, r7
 8006974:	f7ff ffc0 	bl	80068f8 <sbrk_aligned>
 8006978:	1c43      	adds	r3, r0, #1
 800697a:	4604      	mov	r4, r0
 800697c:	d155      	bne.n	8006a2a <_malloc_r+0xf2>
 800697e:	f8d8 4000 	ldr.w	r4, [r8]
 8006982:	4626      	mov	r6, r4
 8006984:	2e00      	cmp	r6, #0
 8006986:	d145      	bne.n	8006a14 <_malloc_r+0xdc>
 8006988:	2c00      	cmp	r4, #0
 800698a:	d048      	beq.n	8006a1e <_malloc_r+0xe6>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	4631      	mov	r1, r6
 8006990:	4638      	mov	r0, r7
 8006992:	eb04 0903 	add.w	r9, r4, r3
 8006996:	f000 fb5d 	bl	8007054 <_sbrk_r>
 800699a:	4581      	cmp	r9, r0
 800699c:	d13f      	bne.n	8006a1e <_malloc_r+0xe6>
 800699e:	6821      	ldr	r1, [r4, #0]
 80069a0:	1a6d      	subs	r5, r5, r1
 80069a2:	4629      	mov	r1, r5
 80069a4:	4638      	mov	r0, r7
 80069a6:	f7ff ffa7 	bl	80068f8 <sbrk_aligned>
 80069aa:	3001      	adds	r0, #1
 80069ac:	d037      	beq.n	8006a1e <_malloc_r+0xe6>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	442b      	add	r3, r5
 80069b2:	6023      	str	r3, [r4, #0]
 80069b4:	f8d8 3000 	ldr.w	r3, [r8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d038      	beq.n	8006a2e <_malloc_r+0xf6>
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	42a2      	cmp	r2, r4
 80069c0:	d12b      	bne.n	8006a1a <_malloc_r+0xe2>
 80069c2:	2200      	movs	r2, #0
 80069c4:	605a      	str	r2, [r3, #4]
 80069c6:	e00f      	b.n	80069e8 <_malloc_r+0xb0>
 80069c8:	6822      	ldr	r2, [r4, #0]
 80069ca:	1b52      	subs	r2, r2, r5
 80069cc:	d41f      	bmi.n	8006a0e <_malloc_r+0xd6>
 80069ce:	2a0b      	cmp	r2, #11
 80069d0:	d917      	bls.n	8006a02 <_malloc_r+0xca>
 80069d2:	1961      	adds	r1, r4, r5
 80069d4:	42a3      	cmp	r3, r4
 80069d6:	6025      	str	r5, [r4, #0]
 80069d8:	bf18      	it	ne
 80069da:	6059      	strne	r1, [r3, #4]
 80069dc:	6863      	ldr	r3, [r4, #4]
 80069de:	bf08      	it	eq
 80069e0:	f8c8 1000 	streq.w	r1, [r8]
 80069e4:	5162      	str	r2, [r4, r5]
 80069e6:	604b      	str	r3, [r1, #4]
 80069e8:	4638      	mov	r0, r7
 80069ea:	f104 060b 	add.w	r6, r4, #11
 80069ee:	f000 f829 	bl	8006a44 <__malloc_unlock>
 80069f2:	f026 0607 	bic.w	r6, r6, #7
 80069f6:	1d23      	adds	r3, r4, #4
 80069f8:	1af2      	subs	r2, r6, r3
 80069fa:	d0ae      	beq.n	800695a <_malloc_r+0x22>
 80069fc:	1b9b      	subs	r3, r3, r6
 80069fe:	50a3      	str	r3, [r4, r2]
 8006a00:	e7ab      	b.n	800695a <_malloc_r+0x22>
 8006a02:	42a3      	cmp	r3, r4
 8006a04:	6862      	ldr	r2, [r4, #4]
 8006a06:	d1dd      	bne.n	80069c4 <_malloc_r+0x8c>
 8006a08:	f8c8 2000 	str.w	r2, [r8]
 8006a0c:	e7ec      	b.n	80069e8 <_malloc_r+0xb0>
 8006a0e:	4623      	mov	r3, r4
 8006a10:	6864      	ldr	r4, [r4, #4]
 8006a12:	e7ac      	b.n	800696e <_malloc_r+0x36>
 8006a14:	4634      	mov	r4, r6
 8006a16:	6876      	ldr	r6, [r6, #4]
 8006a18:	e7b4      	b.n	8006984 <_malloc_r+0x4c>
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	e7cc      	b.n	80069b8 <_malloc_r+0x80>
 8006a1e:	230c      	movs	r3, #12
 8006a20:	603b      	str	r3, [r7, #0]
 8006a22:	4638      	mov	r0, r7
 8006a24:	f000 f80e 	bl	8006a44 <__malloc_unlock>
 8006a28:	e797      	b.n	800695a <_malloc_r+0x22>
 8006a2a:	6025      	str	r5, [r4, #0]
 8006a2c:	e7dc      	b.n	80069e8 <_malloc_r+0xb0>
 8006a2e:	605b      	str	r3, [r3, #4]
 8006a30:	deff      	udf	#255	; 0xff
 8006a32:	bf00      	nop
 8006a34:	20005098 	.word	0x20005098

08006a38 <__malloc_lock>:
 8006a38:	4801      	ldr	r0, [pc, #4]	; (8006a40 <__malloc_lock+0x8>)
 8006a3a:	f7ff bf01 	b.w	8006840 <__retarget_lock_acquire_recursive>
 8006a3e:	bf00      	nop
 8006a40:	20005094 	.word	0x20005094

08006a44 <__malloc_unlock>:
 8006a44:	4801      	ldr	r0, [pc, #4]	; (8006a4c <__malloc_unlock+0x8>)
 8006a46:	f7ff befc 	b.w	8006842 <__retarget_lock_release_recursive>
 8006a4a:	bf00      	nop
 8006a4c:	20005094 	.word	0x20005094

08006a50 <__ssputs_r>:
 8006a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	688e      	ldr	r6, [r1, #8]
 8006a56:	461f      	mov	r7, r3
 8006a58:	42be      	cmp	r6, r7
 8006a5a:	680b      	ldr	r3, [r1, #0]
 8006a5c:	4682      	mov	sl, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	4690      	mov	r8, r2
 8006a62:	d82c      	bhi.n	8006abe <__ssputs_r+0x6e>
 8006a64:	898a      	ldrh	r2, [r1, #12]
 8006a66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a6a:	d026      	beq.n	8006aba <__ssputs_r+0x6a>
 8006a6c:	6965      	ldr	r5, [r4, #20]
 8006a6e:	6909      	ldr	r1, [r1, #16]
 8006a70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a74:	eba3 0901 	sub.w	r9, r3, r1
 8006a78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a7c:	1c7b      	adds	r3, r7, #1
 8006a7e:	444b      	add	r3, r9
 8006a80:	106d      	asrs	r5, r5, #1
 8006a82:	429d      	cmp	r5, r3
 8006a84:	bf38      	it	cc
 8006a86:	461d      	movcc	r5, r3
 8006a88:	0553      	lsls	r3, r2, #21
 8006a8a:	d527      	bpl.n	8006adc <__ssputs_r+0x8c>
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	f7ff ff53 	bl	8006938 <_malloc_r>
 8006a92:	4606      	mov	r6, r0
 8006a94:	b360      	cbz	r0, 8006af0 <__ssputs_r+0xa0>
 8006a96:	6921      	ldr	r1, [r4, #16]
 8006a98:	464a      	mov	r2, r9
 8006a9a:	f7ff fed3 	bl	8006844 <memcpy>
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa8:	81a3      	strh	r3, [r4, #12]
 8006aaa:	6126      	str	r6, [r4, #16]
 8006aac:	6165      	str	r5, [r4, #20]
 8006aae:	444e      	add	r6, r9
 8006ab0:	eba5 0509 	sub.w	r5, r5, r9
 8006ab4:	6026      	str	r6, [r4, #0]
 8006ab6:	60a5      	str	r5, [r4, #8]
 8006ab8:	463e      	mov	r6, r7
 8006aba:	42be      	cmp	r6, r7
 8006abc:	d900      	bls.n	8006ac0 <__ssputs_r+0x70>
 8006abe:	463e      	mov	r6, r7
 8006ac0:	6820      	ldr	r0, [r4, #0]
 8006ac2:	4632      	mov	r2, r6
 8006ac4:	4641      	mov	r1, r8
 8006ac6:	f000 faab 	bl	8007020 <memmove>
 8006aca:	68a3      	ldr	r3, [r4, #8]
 8006acc:	1b9b      	subs	r3, r3, r6
 8006ace:	60a3      	str	r3, [r4, #8]
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	4433      	add	r3, r6
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006adc:	462a      	mov	r2, r5
 8006ade:	f000 fac9 	bl	8007074 <_realloc_r>
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d1e0      	bne.n	8006aaa <__ssputs_r+0x5a>
 8006ae8:	6921      	ldr	r1, [r4, #16]
 8006aea:	4650      	mov	r0, sl
 8006aec:	f7ff feb8 	bl	8006860 <_free_r>
 8006af0:	230c      	movs	r3, #12
 8006af2:	f8ca 3000 	str.w	r3, [sl]
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	f04f 30ff 	mov.w	r0, #4294967295
 8006b02:	e7e9      	b.n	8006ad8 <__ssputs_r+0x88>

08006b04 <_svfiprintf_r>:
 8006b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b08:	4698      	mov	r8, r3
 8006b0a:	898b      	ldrh	r3, [r1, #12]
 8006b0c:	061b      	lsls	r3, r3, #24
 8006b0e:	b09d      	sub	sp, #116	; 0x74
 8006b10:	4607      	mov	r7, r0
 8006b12:	460d      	mov	r5, r1
 8006b14:	4614      	mov	r4, r2
 8006b16:	d50e      	bpl.n	8006b36 <_svfiprintf_r+0x32>
 8006b18:	690b      	ldr	r3, [r1, #16]
 8006b1a:	b963      	cbnz	r3, 8006b36 <_svfiprintf_r+0x32>
 8006b1c:	2140      	movs	r1, #64	; 0x40
 8006b1e:	f7ff ff0b 	bl	8006938 <_malloc_r>
 8006b22:	6028      	str	r0, [r5, #0]
 8006b24:	6128      	str	r0, [r5, #16]
 8006b26:	b920      	cbnz	r0, 8006b32 <_svfiprintf_r+0x2e>
 8006b28:	230c      	movs	r3, #12
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b30:	e0d0      	b.n	8006cd4 <_svfiprintf_r+0x1d0>
 8006b32:	2340      	movs	r3, #64	; 0x40
 8006b34:	616b      	str	r3, [r5, #20]
 8006b36:	2300      	movs	r3, #0
 8006b38:	9309      	str	r3, [sp, #36]	; 0x24
 8006b3a:	2320      	movs	r3, #32
 8006b3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b40:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b44:	2330      	movs	r3, #48	; 0x30
 8006b46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006cec <_svfiprintf_r+0x1e8>
 8006b4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b4e:	f04f 0901 	mov.w	r9, #1
 8006b52:	4623      	mov	r3, r4
 8006b54:	469a      	mov	sl, r3
 8006b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b5a:	b10a      	cbz	r2, 8006b60 <_svfiprintf_r+0x5c>
 8006b5c:	2a25      	cmp	r2, #37	; 0x25
 8006b5e:	d1f9      	bne.n	8006b54 <_svfiprintf_r+0x50>
 8006b60:	ebba 0b04 	subs.w	fp, sl, r4
 8006b64:	d00b      	beq.n	8006b7e <_svfiprintf_r+0x7a>
 8006b66:	465b      	mov	r3, fp
 8006b68:	4622      	mov	r2, r4
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	f7ff ff6f 	bl	8006a50 <__ssputs_r>
 8006b72:	3001      	adds	r0, #1
 8006b74:	f000 80a9 	beq.w	8006cca <_svfiprintf_r+0x1c6>
 8006b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b7a:	445a      	add	r2, fp
 8006b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 80a1 	beq.w	8006cca <_svfiprintf_r+0x1c6>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b92:	f10a 0a01 	add.w	sl, sl, #1
 8006b96:	9304      	str	r3, [sp, #16]
 8006b98:	9307      	str	r3, [sp, #28]
 8006b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8006ba0:	4654      	mov	r4, sl
 8006ba2:	2205      	movs	r2, #5
 8006ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ba8:	4850      	ldr	r0, [pc, #320]	; (8006cec <_svfiprintf_r+0x1e8>)
 8006baa:	f7f9 fb11 	bl	80001d0 <memchr>
 8006bae:	9a04      	ldr	r2, [sp, #16]
 8006bb0:	b9d8      	cbnz	r0, 8006bea <_svfiprintf_r+0xe6>
 8006bb2:	06d0      	lsls	r0, r2, #27
 8006bb4:	bf44      	itt	mi
 8006bb6:	2320      	movmi	r3, #32
 8006bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bbc:	0711      	lsls	r1, r2, #28
 8006bbe:	bf44      	itt	mi
 8006bc0:	232b      	movmi	r3, #43	; 0x2b
 8006bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8006bca:	2b2a      	cmp	r3, #42	; 0x2a
 8006bcc:	d015      	beq.n	8006bfa <_svfiprintf_r+0xf6>
 8006bce:	9a07      	ldr	r2, [sp, #28]
 8006bd0:	4654      	mov	r4, sl
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	f04f 0c0a 	mov.w	ip, #10
 8006bd8:	4621      	mov	r1, r4
 8006bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bde:	3b30      	subs	r3, #48	; 0x30
 8006be0:	2b09      	cmp	r3, #9
 8006be2:	d94d      	bls.n	8006c80 <_svfiprintf_r+0x17c>
 8006be4:	b1b0      	cbz	r0, 8006c14 <_svfiprintf_r+0x110>
 8006be6:	9207      	str	r2, [sp, #28]
 8006be8:	e014      	b.n	8006c14 <_svfiprintf_r+0x110>
 8006bea:	eba0 0308 	sub.w	r3, r0, r8
 8006bee:	fa09 f303 	lsl.w	r3, r9, r3
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	9304      	str	r3, [sp, #16]
 8006bf6:	46a2      	mov	sl, r4
 8006bf8:	e7d2      	b.n	8006ba0 <_svfiprintf_r+0x9c>
 8006bfa:	9b03      	ldr	r3, [sp, #12]
 8006bfc:	1d19      	adds	r1, r3, #4
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	9103      	str	r1, [sp, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	bfbb      	ittet	lt
 8006c06:	425b      	neglt	r3, r3
 8006c08:	f042 0202 	orrlt.w	r2, r2, #2
 8006c0c:	9307      	strge	r3, [sp, #28]
 8006c0e:	9307      	strlt	r3, [sp, #28]
 8006c10:	bfb8      	it	lt
 8006c12:	9204      	strlt	r2, [sp, #16]
 8006c14:	7823      	ldrb	r3, [r4, #0]
 8006c16:	2b2e      	cmp	r3, #46	; 0x2e
 8006c18:	d10c      	bne.n	8006c34 <_svfiprintf_r+0x130>
 8006c1a:	7863      	ldrb	r3, [r4, #1]
 8006c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c1e:	d134      	bne.n	8006c8a <_svfiprintf_r+0x186>
 8006c20:	9b03      	ldr	r3, [sp, #12]
 8006c22:	1d1a      	adds	r2, r3, #4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	9203      	str	r2, [sp, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	bfb8      	it	lt
 8006c2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c30:	3402      	adds	r4, #2
 8006c32:	9305      	str	r3, [sp, #20]
 8006c34:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006cfc <_svfiprintf_r+0x1f8>
 8006c38:	7821      	ldrb	r1, [r4, #0]
 8006c3a:	2203      	movs	r2, #3
 8006c3c:	4650      	mov	r0, sl
 8006c3e:	f7f9 fac7 	bl	80001d0 <memchr>
 8006c42:	b138      	cbz	r0, 8006c54 <_svfiprintf_r+0x150>
 8006c44:	9b04      	ldr	r3, [sp, #16]
 8006c46:	eba0 000a 	sub.w	r0, r0, sl
 8006c4a:	2240      	movs	r2, #64	; 0x40
 8006c4c:	4082      	lsls	r2, r0
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	3401      	adds	r4, #1
 8006c52:	9304      	str	r3, [sp, #16]
 8006c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c58:	4825      	ldr	r0, [pc, #148]	; (8006cf0 <_svfiprintf_r+0x1ec>)
 8006c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c5e:	2206      	movs	r2, #6
 8006c60:	f7f9 fab6 	bl	80001d0 <memchr>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d038      	beq.n	8006cda <_svfiprintf_r+0x1d6>
 8006c68:	4b22      	ldr	r3, [pc, #136]	; (8006cf4 <_svfiprintf_r+0x1f0>)
 8006c6a:	bb1b      	cbnz	r3, 8006cb4 <_svfiprintf_r+0x1b0>
 8006c6c:	9b03      	ldr	r3, [sp, #12]
 8006c6e:	3307      	adds	r3, #7
 8006c70:	f023 0307 	bic.w	r3, r3, #7
 8006c74:	3308      	adds	r3, #8
 8006c76:	9303      	str	r3, [sp, #12]
 8006c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c7a:	4433      	add	r3, r6
 8006c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c7e:	e768      	b.n	8006b52 <_svfiprintf_r+0x4e>
 8006c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c84:	460c      	mov	r4, r1
 8006c86:	2001      	movs	r0, #1
 8006c88:	e7a6      	b.n	8006bd8 <_svfiprintf_r+0xd4>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	3401      	adds	r4, #1
 8006c8e:	9305      	str	r3, [sp, #20]
 8006c90:	4619      	mov	r1, r3
 8006c92:	f04f 0c0a 	mov.w	ip, #10
 8006c96:	4620      	mov	r0, r4
 8006c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c9c:	3a30      	subs	r2, #48	; 0x30
 8006c9e:	2a09      	cmp	r2, #9
 8006ca0:	d903      	bls.n	8006caa <_svfiprintf_r+0x1a6>
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0c6      	beq.n	8006c34 <_svfiprintf_r+0x130>
 8006ca6:	9105      	str	r1, [sp, #20]
 8006ca8:	e7c4      	b.n	8006c34 <_svfiprintf_r+0x130>
 8006caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cae:	4604      	mov	r4, r0
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e7f0      	b.n	8006c96 <_svfiprintf_r+0x192>
 8006cb4:	ab03      	add	r3, sp, #12
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	462a      	mov	r2, r5
 8006cba:	4b0f      	ldr	r3, [pc, #60]	; (8006cf8 <_svfiprintf_r+0x1f4>)
 8006cbc:	a904      	add	r1, sp, #16
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	f3af 8000 	nop.w
 8006cc4:	1c42      	adds	r2, r0, #1
 8006cc6:	4606      	mov	r6, r0
 8006cc8:	d1d6      	bne.n	8006c78 <_svfiprintf_r+0x174>
 8006cca:	89ab      	ldrh	r3, [r5, #12]
 8006ccc:	065b      	lsls	r3, r3, #25
 8006cce:	f53f af2d 	bmi.w	8006b2c <_svfiprintf_r+0x28>
 8006cd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cd4:	b01d      	add	sp, #116	; 0x74
 8006cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cda:	ab03      	add	r3, sp, #12
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	462a      	mov	r2, r5
 8006ce0:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <_svfiprintf_r+0x1f4>)
 8006ce2:	a904      	add	r1, sp, #16
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	f000 f879 	bl	8006ddc <_printf_i>
 8006cea:	e7eb      	b.n	8006cc4 <_svfiprintf_r+0x1c0>
 8006cec:	08007ca4 	.word	0x08007ca4
 8006cf0:	08007cae 	.word	0x08007cae
 8006cf4:	00000000 	.word	0x00000000
 8006cf8:	08006a51 	.word	0x08006a51
 8006cfc:	08007caa 	.word	0x08007caa

08006d00 <_printf_common>:
 8006d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d04:	4616      	mov	r6, r2
 8006d06:	4699      	mov	r9, r3
 8006d08:	688a      	ldr	r2, [r1, #8]
 8006d0a:	690b      	ldr	r3, [r1, #16]
 8006d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d10:	4293      	cmp	r3, r2
 8006d12:	bfb8      	it	lt
 8006d14:	4613      	movlt	r3, r2
 8006d16:	6033      	str	r3, [r6, #0]
 8006d18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d1c:	4607      	mov	r7, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	b10a      	cbz	r2, 8006d26 <_printf_common+0x26>
 8006d22:	3301      	adds	r3, #1
 8006d24:	6033      	str	r3, [r6, #0]
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	0699      	lsls	r1, r3, #26
 8006d2a:	bf42      	ittt	mi
 8006d2c:	6833      	ldrmi	r3, [r6, #0]
 8006d2e:	3302      	addmi	r3, #2
 8006d30:	6033      	strmi	r3, [r6, #0]
 8006d32:	6825      	ldr	r5, [r4, #0]
 8006d34:	f015 0506 	ands.w	r5, r5, #6
 8006d38:	d106      	bne.n	8006d48 <_printf_common+0x48>
 8006d3a:	f104 0a19 	add.w	sl, r4, #25
 8006d3e:	68e3      	ldr	r3, [r4, #12]
 8006d40:	6832      	ldr	r2, [r6, #0]
 8006d42:	1a9b      	subs	r3, r3, r2
 8006d44:	42ab      	cmp	r3, r5
 8006d46:	dc26      	bgt.n	8006d96 <_printf_common+0x96>
 8006d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d4c:	1e13      	subs	r3, r2, #0
 8006d4e:	6822      	ldr	r2, [r4, #0]
 8006d50:	bf18      	it	ne
 8006d52:	2301      	movne	r3, #1
 8006d54:	0692      	lsls	r2, r2, #26
 8006d56:	d42b      	bmi.n	8006db0 <_printf_common+0xb0>
 8006d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	4638      	mov	r0, r7
 8006d60:	47c0      	blx	r8
 8006d62:	3001      	adds	r0, #1
 8006d64:	d01e      	beq.n	8006da4 <_printf_common+0xa4>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	6922      	ldr	r2, [r4, #16]
 8006d6a:	f003 0306 	and.w	r3, r3, #6
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	bf02      	ittt	eq
 8006d72:	68e5      	ldreq	r5, [r4, #12]
 8006d74:	6833      	ldreq	r3, [r6, #0]
 8006d76:	1aed      	subeq	r5, r5, r3
 8006d78:	68a3      	ldr	r3, [r4, #8]
 8006d7a:	bf0c      	ite	eq
 8006d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d80:	2500      	movne	r5, #0
 8006d82:	4293      	cmp	r3, r2
 8006d84:	bfc4      	itt	gt
 8006d86:	1a9b      	subgt	r3, r3, r2
 8006d88:	18ed      	addgt	r5, r5, r3
 8006d8a:	2600      	movs	r6, #0
 8006d8c:	341a      	adds	r4, #26
 8006d8e:	42b5      	cmp	r5, r6
 8006d90:	d11a      	bne.n	8006dc8 <_printf_common+0xc8>
 8006d92:	2000      	movs	r0, #0
 8006d94:	e008      	b.n	8006da8 <_printf_common+0xa8>
 8006d96:	2301      	movs	r3, #1
 8006d98:	4652      	mov	r2, sl
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	47c0      	blx	r8
 8006da0:	3001      	adds	r0, #1
 8006da2:	d103      	bne.n	8006dac <_printf_common+0xac>
 8006da4:	f04f 30ff 	mov.w	r0, #4294967295
 8006da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dac:	3501      	adds	r5, #1
 8006dae:	e7c6      	b.n	8006d3e <_printf_common+0x3e>
 8006db0:	18e1      	adds	r1, r4, r3
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	2030      	movs	r0, #48	; 0x30
 8006db6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dba:	4422      	add	r2, r4
 8006dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dc4:	3302      	adds	r3, #2
 8006dc6:	e7c7      	b.n	8006d58 <_printf_common+0x58>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	4622      	mov	r2, r4
 8006dcc:	4649      	mov	r1, r9
 8006dce:	4638      	mov	r0, r7
 8006dd0:	47c0      	blx	r8
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	d0e6      	beq.n	8006da4 <_printf_common+0xa4>
 8006dd6:	3601      	adds	r6, #1
 8006dd8:	e7d9      	b.n	8006d8e <_printf_common+0x8e>
	...

08006ddc <_printf_i>:
 8006ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de0:	7e0f      	ldrb	r7, [r1, #24]
 8006de2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006de4:	2f78      	cmp	r7, #120	; 0x78
 8006de6:	4691      	mov	r9, r2
 8006de8:	4680      	mov	r8, r0
 8006dea:	460c      	mov	r4, r1
 8006dec:	469a      	mov	sl, r3
 8006dee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006df2:	d807      	bhi.n	8006e04 <_printf_i+0x28>
 8006df4:	2f62      	cmp	r7, #98	; 0x62
 8006df6:	d80a      	bhi.n	8006e0e <_printf_i+0x32>
 8006df8:	2f00      	cmp	r7, #0
 8006dfa:	f000 80d4 	beq.w	8006fa6 <_printf_i+0x1ca>
 8006dfe:	2f58      	cmp	r7, #88	; 0x58
 8006e00:	f000 80c0 	beq.w	8006f84 <_printf_i+0x1a8>
 8006e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e0c:	e03a      	b.n	8006e84 <_printf_i+0xa8>
 8006e0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e12:	2b15      	cmp	r3, #21
 8006e14:	d8f6      	bhi.n	8006e04 <_printf_i+0x28>
 8006e16:	a101      	add	r1, pc, #4	; (adr r1, 8006e1c <_printf_i+0x40>)
 8006e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e1c:	08006e75 	.word	0x08006e75
 8006e20:	08006e89 	.word	0x08006e89
 8006e24:	08006e05 	.word	0x08006e05
 8006e28:	08006e05 	.word	0x08006e05
 8006e2c:	08006e05 	.word	0x08006e05
 8006e30:	08006e05 	.word	0x08006e05
 8006e34:	08006e89 	.word	0x08006e89
 8006e38:	08006e05 	.word	0x08006e05
 8006e3c:	08006e05 	.word	0x08006e05
 8006e40:	08006e05 	.word	0x08006e05
 8006e44:	08006e05 	.word	0x08006e05
 8006e48:	08006f8d 	.word	0x08006f8d
 8006e4c:	08006eb5 	.word	0x08006eb5
 8006e50:	08006f47 	.word	0x08006f47
 8006e54:	08006e05 	.word	0x08006e05
 8006e58:	08006e05 	.word	0x08006e05
 8006e5c:	08006faf 	.word	0x08006faf
 8006e60:	08006e05 	.word	0x08006e05
 8006e64:	08006eb5 	.word	0x08006eb5
 8006e68:	08006e05 	.word	0x08006e05
 8006e6c:	08006e05 	.word	0x08006e05
 8006e70:	08006f4f 	.word	0x08006f4f
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	1d1a      	adds	r2, r3, #4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	602a      	str	r2, [r5, #0]
 8006e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e84:	2301      	movs	r3, #1
 8006e86:	e09f      	b.n	8006fc8 <_printf_i+0x1ec>
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	682b      	ldr	r3, [r5, #0]
 8006e8c:	0607      	lsls	r7, r0, #24
 8006e8e:	f103 0104 	add.w	r1, r3, #4
 8006e92:	6029      	str	r1, [r5, #0]
 8006e94:	d501      	bpl.n	8006e9a <_printf_i+0xbe>
 8006e96:	681e      	ldr	r6, [r3, #0]
 8006e98:	e003      	b.n	8006ea2 <_printf_i+0xc6>
 8006e9a:	0646      	lsls	r6, r0, #25
 8006e9c:	d5fb      	bpl.n	8006e96 <_printf_i+0xba>
 8006e9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ea2:	2e00      	cmp	r6, #0
 8006ea4:	da03      	bge.n	8006eae <_printf_i+0xd2>
 8006ea6:	232d      	movs	r3, #45	; 0x2d
 8006ea8:	4276      	negs	r6, r6
 8006eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eae:	485a      	ldr	r0, [pc, #360]	; (8007018 <_printf_i+0x23c>)
 8006eb0:	230a      	movs	r3, #10
 8006eb2:	e012      	b.n	8006eda <_printf_i+0xfe>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	6820      	ldr	r0, [r4, #0]
 8006eb8:	1d19      	adds	r1, r3, #4
 8006eba:	6029      	str	r1, [r5, #0]
 8006ebc:	0605      	lsls	r5, r0, #24
 8006ebe:	d501      	bpl.n	8006ec4 <_printf_i+0xe8>
 8006ec0:	681e      	ldr	r6, [r3, #0]
 8006ec2:	e002      	b.n	8006eca <_printf_i+0xee>
 8006ec4:	0641      	lsls	r1, r0, #25
 8006ec6:	d5fb      	bpl.n	8006ec0 <_printf_i+0xe4>
 8006ec8:	881e      	ldrh	r6, [r3, #0]
 8006eca:	4853      	ldr	r0, [pc, #332]	; (8007018 <_printf_i+0x23c>)
 8006ecc:	2f6f      	cmp	r7, #111	; 0x6f
 8006ece:	bf0c      	ite	eq
 8006ed0:	2308      	moveq	r3, #8
 8006ed2:	230a      	movne	r3, #10
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eda:	6865      	ldr	r5, [r4, #4]
 8006edc:	60a5      	str	r5, [r4, #8]
 8006ede:	2d00      	cmp	r5, #0
 8006ee0:	bfa2      	ittt	ge
 8006ee2:	6821      	ldrge	r1, [r4, #0]
 8006ee4:	f021 0104 	bicge.w	r1, r1, #4
 8006ee8:	6021      	strge	r1, [r4, #0]
 8006eea:	b90e      	cbnz	r6, 8006ef0 <_printf_i+0x114>
 8006eec:	2d00      	cmp	r5, #0
 8006eee:	d04b      	beq.n	8006f88 <_printf_i+0x1ac>
 8006ef0:	4615      	mov	r5, r2
 8006ef2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ef6:	fb03 6711 	mls	r7, r3, r1, r6
 8006efa:	5dc7      	ldrb	r7, [r0, r7]
 8006efc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f00:	4637      	mov	r7, r6
 8006f02:	42bb      	cmp	r3, r7
 8006f04:	460e      	mov	r6, r1
 8006f06:	d9f4      	bls.n	8006ef2 <_printf_i+0x116>
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d10b      	bne.n	8006f24 <_printf_i+0x148>
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	07de      	lsls	r6, r3, #31
 8006f10:	d508      	bpl.n	8006f24 <_printf_i+0x148>
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	6861      	ldr	r1, [r4, #4]
 8006f16:	4299      	cmp	r1, r3
 8006f18:	bfde      	ittt	le
 8006f1a:	2330      	movle	r3, #48	; 0x30
 8006f1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f24:	1b52      	subs	r2, r2, r5
 8006f26:	6122      	str	r2, [r4, #16]
 8006f28:	f8cd a000 	str.w	sl, [sp]
 8006f2c:	464b      	mov	r3, r9
 8006f2e:	aa03      	add	r2, sp, #12
 8006f30:	4621      	mov	r1, r4
 8006f32:	4640      	mov	r0, r8
 8006f34:	f7ff fee4 	bl	8006d00 <_printf_common>
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d14a      	bne.n	8006fd2 <_printf_i+0x1f6>
 8006f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f40:	b004      	add	sp, #16
 8006f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	f043 0320 	orr.w	r3, r3, #32
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	4833      	ldr	r0, [pc, #204]	; (800701c <_printf_i+0x240>)
 8006f50:	2778      	movs	r7, #120	; 0x78
 8006f52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	6829      	ldr	r1, [r5, #0]
 8006f5a:	061f      	lsls	r7, r3, #24
 8006f5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f60:	d402      	bmi.n	8006f68 <_printf_i+0x18c>
 8006f62:	065f      	lsls	r7, r3, #25
 8006f64:	bf48      	it	mi
 8006f66:	b2b6      	uxthmi	r6, r6
 8006f68:	07df      	lsls	r7, r3, #31
 8006f6a:	bf48      	it	mi
 8006f6c:	f043 0320 	orrmi.w	r3, r3, #32
 8006f70:	6029      	str	r1, [r5, #0]
 8006f72:	bf48      	it	mi
 8006f74:	6023      	strmi	r3, [r4, #0]
 8006f76:	b91e      	cbnz	r6, 8006f80 <_printf_i+0x1a4>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	f023 0320 	bic.w	r3, r3, #32
 8006f7e:	6023      	str	r3, [r4, #0]
 8006f80:	2310      	movs	r3, #16
 8006f82:	e7a7      	b.n	8006ed4 <_printf_i+0xf8>
 8006f84:	4824      	ldr	r0, [pc, #144]	; (8007018 <_printf_i+0x23c>)
 8006f86:	e7e4      	b.n	8006f52 <_printf_i+0x176>
 8006f88:	4615      	mov	r5, r2
 8006f8a:	e7bd      	b.n	8006f08 <_printf_i+0x12c>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	6826      	ldr	r6, [r4, #0]
 8006f90:	6961      	ldr	r1, [r4, #20]
 8006f92:	1d18      	adds	r0, r3, #4
 8006f94:	6028      	str	r0, [r5, #0]
 8006f96:	0635      	lsls	r5, r6, #24
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	d501      	bpl.n	8006fa0 <_printf_i+0x1c4>
 8006f9c:	6019      	str	r1, [r3, #0]
 8006f9e:	e002      	b.n	8006fa6 <_printf_i+0x1ca>
 8006fa0:	0670      	lsls	r0, r6, #25
 8006fa2:	d5fb      	bpl.n	8006f9c <_printf_i+0x1c0>
 8006fa4:	8019      	strh	r1, [r3, #0]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	6123      	str	r3, [r4, #16]
 8006faa:	4615      	mov	r5, r2
 8006fac:	e7bc      	b.n	8006f28 <_printf_i+0x14c>
 8006fae:	682b      	ldr	r3, [r5, #0]
 8006fb0:	1d1a      	adds	r2, r3, #4
 8006fb2:	602a      	str	r2, [r5, #0]
 8006fb4:	681d      	ldr	r5, [r3, #0]
 8006fb6:	6862      	ldr	r2, [r4, #4]
 8006fb8:	2100      	movs	r1, #0
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f7f9 f908 	bl	80001d0 <memchr>
 8006fc0:	b108      	cbz	r0, 8006fc6 <_printf_i+0x1ea>
 8006fc2:	1b40      	subs	r0, r0, r5
 8006fc4:	6060      	str	r0, [r4, #4]
 8006fc6:	6863      	ldr	r3, [r4, #4]
 8006fc8:	6123      	str	r3, [r4, #16]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fd0:	e7aa      	b.n	8006f28 <_printf_i+0x14c>
 8006fd2:	6923      	ldr	r3, [r4, #16]
 8006fd4:	462a      	mov	r2, r5
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	4640      	mov	r0, r8
 8006fda:	47d0      	blx	sl
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d0ad      	beq.n	8006f3c <_printf_i+0x160>
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	079b      	lsls	r3, r3, #30
 8006fe4:	d413      	bmi.n	800700e <_printf_i+0x232>
 8006fe6:	68e0      	ldr	r0, [r4, #12]
 8006fe8:	9b03      	ldr	r3, [sp, #12]
 8006fea:	4298      	cmp	r0, r3
 8006fec:	bfb8      	it	lt
 8006fee:	4618      	movlt	r0, r3
 8006ff0:	e7a6      	b.n	8006f40 <_printf_i+0x164>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	4632      	mov	r2, r6
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	47d0      	blx	sl
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d09d      	beq.n	8006f3c <_printf_i+0x160>
 8007000:	3501      	adds	r5, #1
 8007002:	68e3      	ldr	r3, [r4, #12]
 8007004:	9903      	ldr	r1, [sp, #12]
 8007006:	1a5b      	subs	r3, r3, r1
 8007008:	42ab      	cmp	r3, r5
 800700a:	dcf2      	bgt.n	8006ff2 <_printf_i+0x216>
 800700c:	e7eb      	b.n	8006fe6 <_printf_i+0x20a>
 800700e:	2500      	movs	r5, #0
 8007010:	f104 0619 	add.w	r6, r4, #25
 8007014:	e7f5      	b.n	8007002 <_printf_i+0x226>
 8007016:	bf00      	nop
 8007018:	08007cb5 	.word	0x08007cb5
 800701c:	08007cc6 	.word	0x08007cc6

08007020 <memmove>:
 8007020:	4288      	cmp	r0, r1
 8007022:	b510      	push	{r4, lr}
 8007024:	eb01 0402 	add.w	r4, r1, r2
 8007028:	d902      	bls.n	8007030 <memmove+0x10>
 800702a:	4284      	cmp	r4, r0
 800702c:	4623      	mov	r3, r4
 800702e:	d807      	bhi.n	8007040 <memmove+0x20>
 8007030:	1e43      	subs	r3, r0, #1
 8007032:	42a1      	cmp	r1, r4
 8007034:	d008      	beq.n	8007048 <memmove+0x28>
 8007036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800703a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800703e:	e7f8      	b.n	8007032 <memmove+0x12>
 8007040:	4402      	add	r2, r0
 8007042:	4601      	mov	r1, r0
 8007044:	428a      	cmp	r2, r1
 8007046:	d100      	bne.n	800704a <memmove+0x2a>
 8007048:	bd10      	pop	{r4, pc}
 800704a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800704e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007052:	e7f7      	b.n	8007044 <memmove+0x24>

08007054 <_sbrk_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	4d06      	ldr	r5, [pc, #24]	; (8007070 <_sbrk_r+0x1c>)
 8007058:	2300      	movs	r3, #0
 800705a:	4604      	mov	r4, r0
 800705c:	4608      	mov	r0, r1
 800705e:	602b      	str	r3, [r5, #0]
 8007060:	f7fa f8d6 	bl	8001210 <_sbrk>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_sbrk_r+0x1a>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	b103      	cbz	r3, 800706e <_sbrk_r+0x1a>
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	20005090 	.word	0x20005090

08007074 <_realloc_r>:
 8007074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007078:	4680      	mov	r8, r0
 800707a:	4614      	mov	r4, r2
 800707c:	460e      	mov	r6, r1
 800707e:	b921      	cbnz	r1, 800708a <_realloc_r+0x16>
 8007080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007084:	4611      	mov	r1, r2
 8007086:	f7ff bc57 	b.w	8006938 <_malloc_r>
 800708a:	b92a      	cbnz	r2, 8007098 <_realloc_r+0x24>
 800708c:	f7ff fbe8 	bl	8006860 <_free_r>
 8007090:	4625      	mov	r5, r4
 8007092:	4628      	mov	r0, r5
 8007094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007098:	f000 f81b 	bl	80070d2 <_malloc_usable_size_r>
 800709c:	4284      	cmp	r4, r0
 800709e:	4607      	mov	r7, r0
 80070a0:	d802      	bhi.n	80070a8 <_realloc_r+0x34>
 80070a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070a6:	d812      	bhi.n	80070ce <_realloc_r+0x5a>
 80070a8:	4621      	mov	r1, r4
 80070aa:	4640      	mov	r0, r8
 80070ac:	f7ff fc44 	bl	8006938 <_malloc_r>
 80070b0:	4605      	mov	r5, r0
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d0ed      	beq.n	8007092 <_realloc_r+0x1e>
 80070b6:	42bc      	cmp	r4, r7
 80070b8:	4622      	mov	r2, r4
 80070ba:	4631      	mov	r1, r6
 80070bc:	bf28      	it	cs
 80070be:	463a      	movcs	r2, r7
 80070c0:	f7ff fbc0 	bl	8006844 <memcpy>
 80070c4:	4631      	mov	r1, r6
 80070c6:	4640      	mov	r0, r8
 80070c8:	f7ff fbca 	bl	8006860 <_free_r>
 80070cc:	e7e1      	b.n	8007092 <_realloc_r+0x1e>
 80070ce:	4635      	mov	r5, r6
 80070d0:	e7df      	b.n	8007092 <_realloc_r+0x1e>

080070d2 <_malloc_usable_size_r>:
 80070d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070d6:	1f18      	subs	r0, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	bfbc      	itt	lt
 80070dc:	580b      	ldrlt	r3, [r1, r0]
 80070de:	18c0      	addlt	r0, r0, r3
 80070e0:	4770      	bx	lr
	...

080070e4 <_init>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	bf00      	nop
 80070e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ea:	bc08      	pop	{r3}
 80070ec:	469e      	mov	lr, r3
 80070ee:	4770      	bx	lr

080070f0 <_fini>:
 80070f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f2:	bf00      	nop
 80070f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f6:	bc08      	pop	{r3}
 80070f8:	469e      	mov	lr, r3
 80070fa:	4770      	bx	lr
